
AvrXBufferedSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002562  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00002562  000025f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005d5  008000e8  008000e8  0000267e  2**2
                  ALLOC
  3 .noinit       00000000  008006bd  008006bd  0000267e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000267e  2**0
                  CONTENTS
  5 .stab         00006f18  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00003680  00000000  00000000  00009598  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 00 	jmp	0x140
       4:	0c 94 bb 00 	jmp	0x176
       8:	0c 94 bb 00 	jmp	0x176
       c:	0c 94 bb 00 	jmp	0x176
      10:	0c 94 08 04 	jmp	0x810
      14:	0c 94 14 03 	jmp	0x628
      18:	0c 94 db 03 	jmp	0x7b6
      1c:	0c 94 81 03 	jmp	0x702
      20:	0c 94 ae 03 	jmp	0x75c
      24:	0c 94 e7 02 	jmp	0x5ce
      28:	0c 94 54 03 	jmp	0x6a8
      2c:	0c 94 47 05 	jmp	0xa8e
      30:	0c 94 bb 00 	jmp	0x176
      34:	0c 94 4f 0a 	jmp	0x149e
      38:	0c 94 5b 0a 	jmp	0x14b6
      3c:	0c 94 bb 00 	jmp	0x176
      40:	0c 94 bb 00 	jmp	0x176
      44:	0c 94 bb 00 	jmp	0x176
      48:	0c 94 bb 00 	jmp	0x176
      4c:	0c 94 bb 00 	jmp	0x176
      50:	0c 94 bb 00 	jmp	0x176

00000054 <__ctors_end>:
      54:	d3 02       	muls	r29, r19
      56:	92 08       	sbc	r9, r2
      58:	4f 03       	fmul	r20, r23
      5a:	03 12       	cpse	r0, r19

0000005b <getCommandsTcb>:
      5b:	12 06 70 08 53 02 05                                ..p.S..

00000062 <getPitchAndRollTcb>:
      62:	48 03 d1 07 49 03 04                                H...I..

00000069 <getFuelAndBatteryTcb>:
      69:	8b 05 80 07 17 05 04                                .......

00000070 <getGPSDataTcb>:
      70:	c9 03 c5 06 15 01 04                                .......

00000077 <getGroundspeedTcb>:
      77:	38 04 69 06 0f 01 04                                8.i....

0000007e <getAirspeedTcb>:
      7e:	a7 04 0d 06 55 03 04                                ....U..

00000085 <getCompassHeadingTcb>:
      85:	ae 01 a5 05 1d 01 04                                .......

0000008c <getUAVStatusTcb>:
      8c:	16 05 7c 05 d4 02 04                                ..|....

00000093 <TimerRTCPrescaleFactor>:
      93:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000000a3 <TimerPrescaleFactor>:
      a3:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000000af <__c.20>:
      af:	31 00                                               1.

000000b1 <__c.18>:
      b1:	63 20 25 64 00                                      c %d.

000000b6 <__c.19>:
      b6:	63 20 25 64 00                                      c %d.

000000bb <__c.16>:
      bb:	73 20 25 64 00                                      s %d.

000000c0 <__c.17>:
      c0:	73 20 25 64 00                                      s %d.

000000c5 <__c.14>:
      c5:	67 20 25 64 00                                      g %d.

000000ca <__c.15>:
      ca:	67 20 25 64 00                                      g %d.

000000cf <__c.8>:
      cf:	61 20 30 36 37 2e 35 37 35 39 45 00                 a 067.5759E.

000000db <__c.9>:
      db:	6f 20 38 39 2e 31 32 33 34 35 4e 00                 o 89.12345N.

000000e7 <__c.10>:
      e7:	7a 20 25 64 00                                      z %d.

000000ec <__c.11>:
      ec:	61 20 31 30 31 2e 34 35 31 32 57 00                 a 101.4512W.

000000f8 <__c.12>:
      f8:	6f 20 30 35 2e 39 38 37 36 35 53 00                 o 05.98765S.

00000104 <__c.13>:
     104:	7a 20 25 64 00                                      z %d.

00000109 <__c.6>:
     109:	62 20 25 64 00                                      b %d.

0000010e <__c.7>:
     10e:	66 20 25 64 00                                      f %d.

00000113 <__c.2>:
     113:	71 20 25 64 00                                      q %d.

00000118 <__c.3>:
     118:	77 20 25 64 00                                      w %d.

0000011d <__c.4>:
     11d:	71 20 25 64 00                                      q %d.

00000122 <__c.5>:
     122:	77 20 25 64 00                                      w %d.

00000127 <__c.0>:
     127:	49 20 66 6f 75 6e 64 65 64 20 52 68 69 7a 6f 6d     I founded Rhizom
     137:	65 21 0d 0a 00                                      e!...

0000013c <__c.1>:
     13c:	25 64 20 00                                         %d .

00000140 <__init>:
     140:	11 24       	eor	r1, r1
     142:	1f be       	out	0x3f, r1	; 63
     144:	cf e5       	ldi	r28, 0x5F	; 95
     146:	d8 e0       	ldi	r29, 0x08	; 8
     148:	de bf       	out	0x3e, r29	; 62
     14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_copy_data>:
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	a0 e6       	ldi	r26, 0x60	; 96
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	e2 e6       	ldi	r30, 0x62	; 98
     154:	f5 e2       	ldi	r31, 0x25	; 37
     156:	02 c0       	rjmp	.+4      	; 0x15c

00000158 <.do_copy_data_loop>:
     158:	05 90       	lpm	r0, Z+
     15a:	0d 92       	st	X+, r0

0000015c <.do_copy_data_start>:
     15c:	a8 3e       	cpi	r26, 0xE8	; 232
     15e:	b1 07       	cpc	r27, r17
     160:	d9 f7       	brne	.-10     	; 0x158

00000162 <__do_clear_bss>:
     162:	16 e0       	ldi	r17, 0x06	; 6
     164:	a8 ee       	ldi	r26, 0xE8	; 232
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	01 c0       	rjmp	.+2      	; 0x16c

0000016a <.do_clear_bss_loop>:
     16a:	1d 92       	st	X+, r1

0000016c <.do_clear_bss_start>:
     16c:	ad 3b       	cpi	r26, 0xBD	; 189
     16e:	b1 07       	cpc	r27, r17
     170:	e1 f7       	brne	.-8      	; 0x16a
     172:	0c 94 bd 08 	jmp	0x117a

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0x0

0000017a <parserInit>:

void parserInit(void)
{
	// initialize input buffer
	parserBufferLength = 0;
     17a:	10 92 6a 02 	sts	0x026A, r1
	// initialize executing function
	ParserExecFunction = 0;
     17e:	10 92 24 01 	sts	0x0124, r1
     182:	10 92 23 01 	sts	0x0123, r1
	// initialize command list
	parserNumCommands = 0;
     186:	10 92 39 01 	sts	0x0139, r1
     18a:	08 95       	ret

0000018c <parserAddCommand>:
}


void parserAddCommand(unsigned char* newCmdString, ParserFuncPtrType newCmdFuncPtr)
{
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	9c 01       	movw	r18, r24
     192:	8b 01       	movw	r16, r22
	// add command string to end of command list
	strcpy(CommandList[parserNumCommands], newCmdString);
     194:	90 91 39 01 	lds	r25, 0x0139
     198:	8f e0       	ldi	r24, 0x0F	; 15
     19a:	98 9f       	mul	r25, r24
     19c:	c0 01       	movw	r24, r0
     19e:	11 24       	eor	r1, r1
     1a0:	b9 01       	movw	r22, r18
     1a2:	8d 54       	subi	r24, 0x4D	; 77
     1a4:	9e 4f       	sbci	r25, 0xFE	; 254
     1a6:	0e 94 21 0c 	call	0x1842
	// add command function ptr to end of function list
	ParserFunctionList[parserNumCommands] = newCmdFuncPtr;
     1aa:	80 91 39 01 	lds	r24, 0x0139
     1ae:	e8 2f       	mov	r30, r24
     1b0:	ff 27       	eor	r31, r31
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	eb 5d       	subi	r30, 0xDB	; 219
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	11 83       	std	Z+1, r17	; 0x01
     1bc:	00 83       	st	Z, r16
	// increment number of registered commands
	parserNumCommands++;
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	80 93 39 01 	sts	0x0139, r24
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	08 95       	ret

000001ca <parserSetOutputFunc>:
}


void parserSetOutputFunc(void (*output_func)(unsigned char c))
{
	// set new output function
	parserOutputFunc = output_func;
     1ca:	90 93 1c 01 	sts	0x011C, r25
     1ce:	80 93 1b 01 	sts	0x011B, r24
     1d2:	08 95       	ret

000001d4 <parserProcessInputString>:
}


void parserInputFunc(unsigned char c)
{
	// process the received character
	
	if (c != '\r')		//anything other than return character must be a part of the command
	{	
		// echo character to the output
//		parserOutputFunc(c);
		// add it to the command line buffer
		parserBuffer[parserBufferLength] = c;
		// update buffer length
		parserBufferLength++;
	}
	else				//return character -> process command
	{
		// add null termination to command
		parserBuffer[parserBufferLength] = 0;
		// command is complete, process it
		parserProcessInputString();
		// reset buffer
		parserBufferLength = 0;
	}
}


void parserProcessInputString(void)
{
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
	unsigned char cmdIndex;

	// search command list for match with entered command
	for(cmdIndex=0; cmdIndex<parserNumCommands; cmdIndex++)
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	80 91 39 01 	lds	r24, 0x0139
     1e0:	18 17       	cp	r17, r24
     1e2:	48 f5       	brcc	.+82     	; 0x236
	{
		if( !strncmp(CommandList[cmdIndex], parserBuffer, 1) )		//command is first char of buffer
     1e4:	a1 2f       	mov	r26, r17
     1e6:	bb 27       	eor	r27, r27
     1e8:	fd 01       	movw	r30, r26
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	ee 0f       	add	r30, r30
     1ee:	ff 1f       	adc	r31, r31
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec
     1f4:	ea 1b       	sub	r30, r26
     1f6:	fb 0b       	sbc	r31, r27
     1f8:	ed 54       	subi	r30, 0x4D	; 77
     1fa:	fe 4f       	sbci	r31, 0xFE	; 254
     1fc:	80 81       	ld	r24, Z
     1fe:	c8 2f       	mov	r28, r24
     200:	dd 27       	eor	r29, r29
     202:	80 91 59 02 	lds	r24, 0x0259
     206:	c8 1b       	sub	r28, r24
     208:	d1 09       	sbc	r29, r1
     20a:	20 97       	sbiw	r28, 0x00	; 0
     20c:	79 f4       	brne	.+30     	; 0x22c
		{
			// user-entered command matched a command in the list (database)
			ParserExecFunction = ParserFunctionList[cmdIndex];
     20e:	aa 0f       	add	r26, r26
     210:	bb 1f       	adc	r27, r27
     212:	ab 5d       	subi	r26, 0xDB	; 219
     214:	be 4f       	sbci	r27, 0xFE	; 254
     216:	ed 91       	ld	r30, X+
     218:	fc 91       	ld	r31, X
     21a:	f0 93 24 01 	sts	0x0124, r31
     21e:	e0 93 23 01 	sts	0x0123, r30
			// run the corresponding function
			ParserExecFunction();
     222:	09 95       	icall
			// reset
			ParserExecFunction = 0;
     224:	d0 93 24 01 	sts	0x0124, r29
     228:	c0 93 23 01 	sts	0x0123, r28
     22c:	1f 5f       	subi	r17, 0xFF	; 255
     22e:	80 91 39 01 	lds	r24, 0x0139
     232:	18 17       	cp	r17, r24
     234:	b8 f2       	brcs	.-82     	; 0x1e4
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	08 95       	ret

0000023e <parserInputFunc>:
     23e:	90 91 6a 02 	lds	r25, 0x026A
     242:	8d 30       	cpi	r24, 0x0D	; 13
     244:	49 f0       	breq	.+18     	; 0x258
     246:	e9 2f       	mov	r30, r25
     248:	ff 27       	eor	r31, r31
     24a:	e7 5a       	subi	r30, 0xA7	; 167
     24c:	fd 4f       	sbci	r31, 0xFD	; 253
     24e:	80 83       	st	Z, r24
     250:	9f 5f       	subi	r25, 0xFF	; 255
     252:	90 93 6a 02 	sts	0x026A, r25
     256:	08 95       	ret
     258:	e9 2f       	mov	r30, r25
     25a:	ff 27       	eor	r31, r31
     25c:	e7 5a       	subi	r30, 0xA7	; 167
     25e:	fd 4f       	sbci	r31, 0xFD	; 253
     260:	10 82       	st	Z, r1
     262:	0e 94 ea 00 	call	0x1d4
     266:	10 92 6a 02 	sts	0x026A, r1
     26a:	08 95       	ret

0000026c <parserGetArgStr>:
		}
	}
}

// return string pointer to argument [argnum]
unsigned char* parserGetArgStr(void)
{
	return &parserBuffer[2];		//spec states that commands are 1 char followed by a space followed by the arg, so the
}									//arg must start at idx 2
     26c:	8b e5       	ldi	r24, 0x5B	; 91
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	08 95       	ret

00000272 <parserGetArgInt>:

//return argument as a long
int parserGetArgInt(void)
{
	char* endptr;
	return atoi(parserGetArgStr());
     272:	0e 94 36 01 	call	0x26c
     276:	0e 94 f9 0a 	call	0x15f2
     27a:	08 95       	ret

0000027c <delay_us>:
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 
     27c:	03 96       	adiw	r24, 0x03	; 3
     27e:	65 e0       	ldi	r22, 0x05	; 5
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	0e 94 4c 12 	call	0x2498
     286:	cb 01       	movw	r24, r22
     288:	aa 27       	eor	r26, r26
     28a:	bb 27       	eor	r27, r27
     28c:	24 e0       	ldi	r18, 0x04	; 4
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	aa 1f       	adc	r26, r26
     294:	bb 1f       	adc	r27, r27
     296:	2a 95       	dec	r18
     298:	d1 f7       	brne	.-12     	; 0x28e

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	11 f0       	breq	.+4      	; 0x2a2
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	fc cf       	rjmp	.-8      	; 0x29a
     2a2:	08 95       	ret

000002a4 <timerDetach>:
}
/*
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 4000;

	unsigned short cnt;
	asm volatile ("\n"
                  "L_dl1%=:\n\t"
                  "mov %A0, %A2\n\t"
                  "mov %B0, %B2\n"
                  "L_dl2%=:\n\t"
                  "sbiw %A0, 1\n\t"
                  "brne L_dl2%=\n\t"
                  "dec %1\n\t" "brne L_dl1%=\n\t":"=&w" (cnt)
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
	timer1Init();
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
	#endif
	// enable interrupts
	sei();
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt

	timer0ClearOverflowCount();				// initialize time registers
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
	outb(TCNT1H, 0);						// reset TCNT1
	outb(TCNT1L, 0);
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow

	timer2ClearOverflowCount();				// initialize time registers
}
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
}
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
}

u16 timer1GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR1B) & TIMER_PRESCALE_MASK)));
}

#ifdef TCNT2	// support timer2 only if it exists
u16 timer2GetPrescaler(void)
{
	//TODO: can we assume for all 3-timer AVR processors,
	// that timer2 is the RTC timer?

	// get the current prescaler setting
	return (pgm_read_word(TimerRTCPrescaleFactor+(inb(TCCR2) & TIMER_PRESCALE_MASK)));
}
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
	}
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     2a4:	88 30       	cpi	r24, 0x08	; 8
     2a6:	40 f4       	brcc	.+16     	; 0x2b8
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     2a8:	e8 2f       	mov	r30, r24
     2aa:	ff 27       	eor	r31, r31
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	e8 51       	subi	r30, 0x18	; 24
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	11 82       	std	Z+1, r1	; 0x01
     2b6:	10 82       	st	Z, r1
     2b8:	08 95       	ret

000002ba <timer0SetPrescaler>:
     2ba:	93 b7       	in	r25, 0x33	; 51
     2bc:	98 7f       	andi	r25, 0xF8	; 248
     2be:	98 2b       	or	r25, r24
     2c0:	93 bf       	out	0x33, r25	; 51
     2c2:	08 95       	ret

000002c4 <timer0ClearOverflowCount>:
	}
}
/*
u32 timerMsToTics(u16 ms)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of timer tics in x milliseconds
	return (ms*(F_CPU/(prescaleDiv*256)))/1000;
}

u16 timerTicsToMs(u32 tics)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
	// pauses for exactly <pause_ms> number of milliseconds
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
	// reset pause timer overflow count
	TimerPauseReg = 0;
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
	{
		if( TimerPauseReg < (pause>>8));
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
			sleep_mode();
		}
	}

	/* old inaccurate code, for reference
	
	// calculate delay for [pause_ms] milliseconds
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	u32 pause = (pause_ms*(F_CPU/(prescaleDiv*256)))/1000;
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     2c4:	10 92 af 01 	sts	0x01AF, r1
     2c8:	10 92 b0 01 	sts	0x01B0, r1
     2cc:	10 92 b1 01 	sts	0x01B1, r1
     2d0:	10 92 b2 01 	sts	0x01B2, r1
     2d4:	08 95       	ret

000002d6 <timer0Init>:
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 5d 01 	call	0x2ba
     2dc:	12 be       	out	0x32, r1	; 50
     2de:	89 b7       	in	r24, 0x39	; 57
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	89 bf       	out	0x39, r24	; 57
     2e4:	0e 94 62 01 	call	0x2c4
     2e8:	08 95       	ret

000002ea <timer1SetPrescaler>:
     2ea:	9e b5       	in	r25, 0x2e	; 46
     2ec:	98 7f       	andi	r25, 0xF8	; 248
     2ee:	98 2b       	or	r25, r24
     2f0:	9e bd       	out	0x2e, r25	; 46
     2f2:	08 95       	ret

000002f4 <timer1Init>:
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	0e 94 75 01 	call	0x2ea
     2fa:	1d bc       	out	0x2d, r1	; 45
     2fc:	1c bc       	out	0x2c, r1	; 44
     2fe:	89 b7       	in	r24, 0x39	; 57
     300:	84 60       	ori	r24, 0x04	; 4
     302:	89 bf       	out	0x39, r24	; 57
     304:	08 95       	ret

00000306 <timer2SetPrescaler>:
     306:	95 b5       	in	r25, 0x25	; 37
     308:	98 7f       	andi	r25, 0xF8	; 248
     30a:	98 2b       	or	r25, r24
     30c:	95 bd       	out	0x25, r25	; 37
     30e:	08 95       	ret

00000310 <timer2ClearOverflowCount>:
}

long timer0GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer0ClearOverflowCount() command was called)
	return Timer0Reg0;
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     310:	10 92 4d 02 	sts	0x024D, r1
     314:	10 92 4e 02 	sts	0x024E, r1
     318:	10 92 4f 02 	sts	0x024F, r1
     31c:	10 92 50 02 	sts	0x0250, r1
     320:	08 95       	ret

00000322 <timer2Init>:
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	0e 94 83 01 	call	0x306
     328:	14 bc       	out	0x24, r1	; 36
     32a:	89 b7       	in	r24, 0x39	; 57
     32c:	80 64       	ori	r24, 0x40	; 64
     32e:	89 bf       	out	0x39, r24	; 57
     330:	0e 94 88 01 	call	0x310
     334:	08 95       	ret

00000336 <timerInit>:
     336:	cf 93       	push	r28
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	8c 2f       	mov	r24, r28
     33c:	0e 94 52 01 	call	0x2a4
     340:	cf 5f       	subi	r28, 0xFF	; 255
     342:	c8 30       	cpi	r28, 0x08	; 8
     344:	d0 f3       	brcs	.-12     	; 0x33a
     346:	0e 94 6b 01 	call	0x2d6
     34a:	0e 94 7a 01 	call	0x2f4
     34e:	0e 94 91 01 	call	0x322
     352:	78 94       	sei
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <timer0GetPrescaler>:
     358:	83 b7       	in	r24, 0x33	; 51
     35a:	e8 2f       	mov	r30, r24
     35c:	ff 27       	eor	r31, r31
     35e:	e7 70       	andi	r30, 0x07	; 7
     360:	f0 70       	andi	r31, 0x00	; 0
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ed 55       	subi	r30, 0x5D	; 93
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	85 91       	lpm	r24, Z+
     36c:	94 91       	lpm	r25, Z
     36e:	08 95       	ret

00000370 <timer1GetPrescaler>:
     370:	8e b5       	in	r24, 0x2e	; 46
     372:	e8 2f       	mov	r30, r24
     374:	ff 27       	eor	r31, r31
     376:	e7 70       	andi	r30, 0x07	; 7
     378:	f0 70       	andi	r31, 0x00	; 0
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	ed 55       	subi	r30, 0x5D	; 93
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	85 91       	lpm	r24, Z+
     384:	94 91       	lpm	r25, Z
     386:	08 95       	ret

00000388 <timer2GetPrescaler>:
     388:	85 b5       	in	r24, 0x25	; 37
     38a:	e8 2f       	mov	r30, r24
     38c:	ff 27       	eor	r31, r31
     38e:	e7 70       	andi	r30, 0x07	; 7
     390:	f0 70       	andi	r31, 0x00	; 0
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ed 56       	subi	r30, 0x6D	; 109
     398:	ff 4f       	sbci	r31, 0xFF	; 255
     39a:	85 91       	lpm	r24, Z+
     39c:	94 91       	lpm	r25, Z
     39e:	08 95       	ret

000003a0 <timerAttach>:
     3a0:	88 30       	cpi	r24, 0x08	; 8
     3a2:	40 f4       	brcc	.+16     	; 0x3b4
     3a4:	e8 2f       	mov	r30, r24
     3a6:	ff 27       	eor	r31, r31
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e8 51       	subi	r30, 0x18	; 24
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	71 83       	std	Z+1, r23	; 0x01
     3b2:	60 83       	st	Z, r22
     3b4:	08 95       	ret

000003b6 <timerPause>:
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	d2 b6       	in	r13, 0x32	; 50
     3c8:	10 92 49 02 	sts	0x0249, r1
     3cc:	10 92 4a 02 	sts	0x024A, r1
     3d0:	10 92 4b 02 	sts	0x024B, r1
     3d4:	10 92 4c 02 	sts	0x024C, r1
     3d8:	0e 94 ac 01 	call	0x358
     3dc:	9c 01       	movw	r18, r24
     3de:	44 27       	eor	r20, r20
     3e0:	55 27       	eor	r21, r21
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	74 e2       	ldi	r23, 0x24	; 36
     3e6:	84 ef       	ldi	r24, 0xF4	; 244
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 95 12 	call	0x252a
     3ee:	29 3b       	cpi	r18, 0xB9	; 185
     3f0:	8d e8       	ldi	r24, 0x8D	; 141
     3f2:	38 07       	cpc	r19, r24
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	48 07       	cpc	r20, r24
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	58 07       	cpc	r21, r24
     3fc:	c0 f4       	brcc	.+48     	; 0x42e
     3fe:	87 e2       	ldi	r24, 0x27	; 39
     400:	c1 31       	cpi	r28, 0x11	; 17
     402:	d8 07       	cpc	r29, r24
     404:	a0 f4       	brcc	.+40     	; 0x42e
     406:	ce 01       	movw	r24, r28
     408:	aa 27       	eor	r26, r26
     40a:	bb 27       	eor	r27, r27
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	0e 94 2d 12 	call	0x245a
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	bc 01       	movw	r22, r24
     41a:	cd 01       	movw	r24, r26
     41c:	28 ee       	ldi	r18, 0xE8	; 232
     41e:	33 e0       	ldi	r19, 0x03	; 3
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	0e 94 73 12 	call	0x24e6
     428:	fa 01       	movw	r30, r20
     42a:	e9 01       	movw	r28, r18
     42c:	11 c0       	rjmp	.+34     	; 0x450
     42e:	7e 01       	movw	r14, r28
     430:	00 27       	eor	r16, r16
     432:	11 27       	eor	r17, r17
     434:	ca 01       	movw	r24, r20
     436:	b9 01       	movw	r22, r18
     438:	28 ee       	ldi	r18, 0xE8	; 232
     43a:	33 e0       	ldi	r19, 0x03	; 3
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	0e 94 73 12 	call	0x24e6
     444:	c8 01       	movw	r24, r16
     446:	b7 01       	movw	r22, r14
     448:	0e 94 2d 12 	call	0x245a
     44c:	fc 01       	movw	r30, r24
     44e:	eb 01       	movw	r28, r22
     450:	80 91 49 02 	lds	r24, 0x0249
     454:	90 91 4a 02 	lds	r25, 0x024A
     458:	a0 91 4b 02 	lds	r26, 0x024B
     45c:	b0 91 4c 02 	lds	r27, 0x024C
     460:	22 27       	eor	r18, r18
     462:	38 2f       	mov	r19, r24
     464:	49 2f       	mov	r20, r25
     466:	5a 2f       	mov	r21, r26
     468:	82 b7       	in	r24, 0x32	; 50
     46a:	99 27       	eor	r25, r25
     46c:	aa 27       	eor	r26, r26
     46e:	bb 27       	eor	r27, r27
     470:	28 2b       	or	r18, r24
     472:	39 2b       	or	r19, r25
     474:	4a 2b       	or	r20, r26
     476:	5b 2b       	or	r21, r27
     478:	cd 0d       	add	r28, r13
     47a:	d1 1d       	adc	r29, r1
     47c:	e1 1d       	adc	r30, r1
     47e:	f1 1d       	adc	r31, r1
     480:	2c 17       	cp	r18, r28
     482:	3d 07       	cpc	r19, r29
     484:	4e 07       	cpc	r20, r30
     486:	5f 07       	cpc	r21, r31
     488:	58 f5       	brcc	.+86     	; 0x4e0
     48a:	80 91 49 02 	lds	r24, 0x0249
     48e:	90 91 4a 02 	lds	r25, 0x024A
     492:	a0 91 4b 02 	lds	r26, 0x024B
     496:	b0 91 4c 02 	lds	r27, 0x024C
     49a:	85 b7       	in	r24, 0x35	; 53
     49c:	8f 78       	andi	r24, 0x8F	; 143
     49e:	85 bf       	out	0x35, r24	; 53
     4a0:	85 b7       	in	r24, 0x35	; 53
     4a2:	80 68       	ori	r24, 0x80	; 128
     4a4:	85 bf       	out	0x35, r24	; 53
     4a6:	88 95       	sleep
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	8f 77       	andi	r24, 0x7F	; 127
     4ac:	85 bf       	out	0x35, r24	; 53
     4ae:	80 91 49 02 	lds	r24, 0x0249
     4b2:	90 91 4a 02 	lds	r25, 0x024A
     4b6:	a0 91 4b 02 	lds	r26, 0x024B
     4ba:	b0 91 4c 02 	lds	r27, 0x024C
     4be:	ba 2f       	mov	r27, r26
     4c0:	a9 2f       	mov	r26, r25
     4c2:	98 2f       	mov	r25, r24
     4c4:	88 27       	eor	r24, r24
     4c6:	22 b7       	in	r18, 0x32	; 50
     4c8:	33 27       	eor	r19, r19
     4ca:	44 27       	eor	r20, r20
     4cc:	55 27       	eor	r21, r21
     4ce:	82 2b       	or	r24, r18
     4d0:	93 2b       	or	r25, r19
     4d2:	a4 2b       	or	r26, r20
     4d4:	b5 2b       	or	r27, r21
     4d6:	8c 17       	cp	r24, r28
     4d8:	9d 07       	cpc	r25, r29
     4da:	ae 07       	cpc	r26, r30
     4dc:	bf 07       	cpc	r27, r31
     4de:	a8 f2       	brcs	.-86     	; 0x48a
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	08 95       	ret

000004f0 <timer0GetOverflowCount>:
     4f0:	80 91 af 01 	lds	r24, 0x01AF
     4f4:	90 91 b0 01 	lds	r25, 0x01B0
     4f8:	a0 91 b1 01 	lds	r26, 0x01B1
     4fc:	b0 91 b2 01 	lds	r27, 0x01B2
     500:	bc 01       	movw	r22, r24
     502:	cd 01       	movw	r24, r26
     504:	08 95       	ret

00000506 <timer2GetOverflowCount>:
}

long timer2GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer2ClearOverflowCount() command was called)
	return Timer2Reg0;
     506:	80 91 4d 02 	lds	r24, 0x024D
     50a:	90 91 4e 02 	lds	r25, 0x024E
     50e:	a0 91 4f 02 	lds	r26, 0x024F
     512:	b0 91 50 02 	lds	r27, 0x0250
}
     516:	bc 01       	movw	r22, r24
     518:	cd 01       	movw	r24, r26
     51a:	08 95       	ret

0000051c <timer1PWMInit>:
#endif

void timer1PWMInit(u08 bitRes)
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     51c:	89 30       	cpi	r24, 0x09	; 9
     51e:	31 f4       	brne	.+12     	; 0x52c
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     520:	8f b5       	in	r24, 0x2f	; 47
     522:	82 60       	ori	r24, 0x02	; 2
     524:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     526:	8f b5       	in	r24, 0x2f	; 47
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	0a c0       	rjmp	.+20     	; 0x540
	}
	else if( bitRes == 10 )
     52c:	8a 30       	cpi	r24, 0x0A	; 10
     52e:	19 f4       	brne	.+6      	; 0x536
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     530:	8f b5       	in	r24, 0x2f	; 47
     532:	82 60       	ori	r24, 0x02	; 2
     534:	02 c0       	rjmp	.+4      	; 0x53a
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     536:	8f b5       	in	r24, 0x2f	; 47
     538:	8d 7f       	andi	r24, 0xFD	; 253
     53a:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     53c:	8f b5       	in	r24, 0x2f	; 47
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     542:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     544:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     546:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     548:	18 bc       	out	0x28, r1	; 40
     54a:	08 95       	ret

0000054c <timer1PWMInitICR>:
}

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
     54c:	9c 01       	movw	r18, r24
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     54e:	8f b5       	in	r24, 0x2f	; 47
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1A,WGM11);
     554:	8f b5       	in	r24, 0x2f	; 47
     556:	82 60       	ori	r24, 0x02	; 2
     558:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1B,WGM12);
     55a:	8e b5       	in	r24, 0x2e	; 46
     55c:	88 60       	ori	r24, 0x08	; 8
     55e:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1B,WGM13);
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	80 61       	ori	r24, 0x10	; 16
     564:	8e bd       	out	0x2e, r24	; 46
	
	// set top count value
	ICR1 = topcount;
     566:	37 bd       	out	0x27, r19	; 39
     568:	26 bd       	out	0x26, r18	; 38
	
	// clear output compare value A
	OCR1A = 0;
     56a:	1b bc       	out	0x2b, r1	; 43
     56c:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	OCR1B = 0;
     56e:	19 bc       	out	0x29, r1	; 41
     570:	18 bc       	out	0x28, r1	; 40
     572:	08 95       	ret

00000574 <timer1PWMAOff>:

}
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
	timer1PWMBOff();
}

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
	cbi(TCCR1A,COM1A0);
}

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
     574:	8f b5       	in	r24, 0x2f	; 47
     576:	8f 77       	andi	r24, 0x7F	; 127
     578:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     57a:	8f b5       	in	r24, 0x2f	; 47
     57c:	8f 7b       	andi	r24, 0xBF	; 191
     57e:	8f bd       	out	0x2f, r24	; 47
     580:	08 95       	ret

00000582 <timer1PWMBOff>:
}

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
     582:	8f b5       	in	r24, 0x2f	; 47
     584:	8f 7d       	andi	r24, 0xDF	; 223
     586:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     588:	8f b5       	in	r24, 0x2f	; 47
     58a:	8f 7e       	andi	r24, 0xEF	; 239
     58c:	8f bd       	out	0x2f, r24	; 47
     58e:	08 95       	ret

00000590 <timer1PWMOff>:
     590:	8f b5       	in	r24, 0x2f	; 47
     592:	8d 7f       	andi	r24, 0xFD	; 253
     594:	8f bd       	out	0x2f, r24	; 47
     596:	8f b5       	in	r24, 0x2f	; 47
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	8f bd       	out	0x2f, r24	; 47
     59c:	0e 94 ba 02 	call	0x574
     5a0:	0e 94 c1 02 	call	0x582
     5a4:	08 95       	ret

000005a6 <timer1PWMAOn>:
     5a6:	8f b5       	in	r24, 0x2f	; 47
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	8f bd       	out	0x2f, r24	; 47
     5ac:	8f b5       	in	r24, 0x2f	; 47
     5ae:	8f 7b       	andi	r24, 0xBF	; 191
     5b0:	8f bd       	out	0x2f, r24	; 47
     5b2:	08 95       	ret

000005b4 <timer1PWMBOn>:
     5b4:	8f b5       	in	r24, 0x2f	; 47
     5b6:	80 62       	ori	r24, 0x20	; 32
     5b8:	8f bd       	out	0x2f, r24	; 47
     5ba:	8f b5       	in	r24, 0x2f	; 47
     5bc:	8f 7e       	andi	r24, 0xEF	; 239
     5be:	8f bd       	out	0x2f, r24	; 47
     5c0:	08 95       	ret

000005c2 <timer1PWMASet>:
}

void timer1PWMASet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel A
	// this PWM output is generated on OC1A pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     5c2:	9b bd       	out	0x2b, r25	; 43
     5c4:	8a bd       	out	0x2a, r24	; 42
     5c6:	08 95       	ret

000005c8 <timer1PWMBSet>:
}

void timer1PWMBSet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel B
	// this PWM output is generated on OC1B pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     5c8:	99 bd       	out	0x29, r25	; 41
     5ca:	88 bd       	out	0x28, r24	; 40
     5cc:	08 95       	ret

000005ce <__vector_9>:
}
/*
//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{
	Timer0Reg0++;			// increment low-order counter

	// increment pause counter
	TimerPauseReg++;

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
		TimerIntFunc[TIMER0OVERFLOW_INT]();
}
*/

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	2f 93       	push	r18
     5da:	3f 93       	push	r19
     5dc:	4f 93       	push	r20
     5de:	5f 93       	push	r21
     5e0:	6f 93       	push	r22
     5e2:	7f 93       	push	r23
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	af 93       	push	r26
     5ea:	bf 93       	push	r27
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     5f0:	80 91 ea 00 	lds	r24, 0x00EA
     5f4:	90 91 eb 00 	lds	r25, 0x00EB
     5f8:	89 2b       	or	r24, r25
     5fa:	29 f0       	breq	.+10     	; 0x606
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     5fc:	e0 91 ea 00 	lds	r30, 0x00EA
     600:	f0 91 eb 00 	lds	r31, 0x00EB
     604:	09 95       	icall
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	bf 91       	pop	r27
     60c:	af 91       	pop	r26
     60e:	9f 91       	pop	r25
     610:	8f 91       	pop	r24
     612:	7f 91       	pop	r23
     614:	6f 91       	pop	r22
     616:	5f 91       	pop	r21
     618:	4f 91       	pop	r20
     61a:	3f 91       	pop	r19
     61c:	2f 91       	pop	r18
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_5>:
}

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW2)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	2f 93       	push	r18
     634:	3f 93       	push	r19
     636:	4f 93       	push	r20
     638:	5f 93       	push	r21
     63a:	6f 93       	push	r22
     63c:	7f 93       	push	r23
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	ef 93       	push	r30
     648:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     64a:	80 91 4d 02 	lds	r24, 0x024D
     64e:	90 91 4e 02 	lds	r25, 0x024E
     652:	a0 91 4f 02 	lds	r26, 0x024F
     656:	b0 91 50 02 	lds	r27, 0x0250
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	a1 1d       	adc	r26, r1
     65e:	b1 1d       	adc	r27, r1
     660:	80 93 4d 02 	sts	0x024D, r24
     664:	90 93 4e 02 	sts	0x024E, r25
     668:	a0 93 4f 02 	sts	0x024F, r26
     66c:	b0 93 50 02 	sts	0x0250, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     670:	80 91 f2 00 	lds	r24, 0x00F2
     674:	90 91 f3 00 	lds	r25, 0x00F3
     678:	89 2b       	or	r24, r25
     67a:	29 f0       	breq	.+10     	; 0x686
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     67c:	e0 91 f2 00 	lds	r30, 0x00F2
     680:	f0 91 f3 00 	lds	r31, 0x00F3
     684:	09 95       	icall
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_10>:
}
#endif

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE0)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     6ca:	80 91 f6 00 	lds	r24, 0x00F6
     6ce:	90 91 f7 00 	lds	r25, 0x00F7
     6d2:	89 2b       	or	r24, r25
     6d4:	29 f0       	breq	.+10     	; 0x6e0
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     6d6:	e0 91 f6 00 	lds	r30, 0x00F6
     6da:	f0 91 f7 00 	lds	r31, 0x00F7
     6de:	09 95       	icall
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_7>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1A)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     724:	80 91 ec 00 	lds	r24, 0x00EC
     728:	90 91 ed 00 	lds	r25, 0x00ED
     72c:	89 2b       	or	r24, r25
     72e:	29 f0       	breq	.+10     	; 0x73a
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     730:	e0 91 ec 00 	lds	r30, 0x00EC
     734:	f0 91 ed 00 	lds	r31, 0x00ED
     738:	09 95       	icall
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <__vector_8>:
}

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1B)
{
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     77e:	80 91 ee 00 	lds	r24, 0x00EE
     782:	90 91 ef 00 	lds	r25, 0x00EF
     786:	89 2b       	or	r24, r25
     788:	29 f0       	breq	.+10     	; 0x794
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     78a:	e0 91 ee 00 	lds	r30, 0x00EE
     78e:	f0 91 ef 00 	lds	r31, 0x00EF
     792:	09 95       	icall
     794:	ff 91       	pop	r31
     796:	ef 91       	pop	r30
     798:	bf 91       	pop	r27
     79a:	af 91       	pop	r26
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	7f 91       	pop	r23
     7a2:	6f 91       	pop	r22
     7a4:	5f 91       	pop	r21
     7a6:	4f 91       	pop	r20
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <__vector_6>:
}

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(SIG_INPUT_CAPTURE1)
{
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     7d8:	80 91 f0 00 	lds	r24, 0x00F0
     7dc:	90 91 f1 00 	lds	r25, 0x00F1
     7e0:	89 2b       	or	r24, r25
     7e2:	29 f0       	breq	.+10     	; 0x7ee
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     7e4:	e0 91 f0 00 	lds	r30, 0x00F0
     7e8:	f0 91 f1 00 	lds	r31, 0x00F1
     7ec:	09 95       	icall
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_4>:
}

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE2)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     832:	80 91 f4 00 	lds	r24, 0x00F4
     836:	90 91 f5 00 	lds	r25, 0x00F5
     83a:	89 2b       	or	r24, r25
     83c:	29 f0       	breq	.+10     	; 0x848
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     83e:	e0 91 f4 00 	lds	r30, 0x00F4
     842:	f0 91 f5 00 	lds	r31, 0x00F5
     846:	09 95       	icall
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <servoInit>:
     86a:	89 b7       	in	r24, 0x39	; 57
     86c:	8f 7e       	andi	r24, 0xEF	; 239
     86e:	89 bf       	out	0x39, r24	; 57
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	0e 94 75 01 	call	0x2ea
     876:	68 ed       	ldi	r22, 0xD8	; 216
     878:	74 e0       	ldi	r23, 0x04	; 4
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 d0 01 	call	0x3a0
     880:	a2 e2       	ldi	r26, 0x22	; 34
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	55 e1       	ldi	r21, 0x15	; 21
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	e9 ef       	ldi	r30, 0xF9	; 249
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	44 e0       	ldi	r20, 0x04	; 4
     894:	b3 83       	std	Z+3, r27	; 0x03
     896:	a2 83       	std	Z+2, r26	; 0x02
     898:	50 83       	st	Z, r21
     89a:	cb 01       	movw	r24, r22
     89c:	02 2e       	mov	r0, r18
     89e:	02 c0       	rjmp	.+4      	; 0x8a4
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	0a 94       	dec	r0
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0
     8a8:	81 83       	std	Z+1, r24	; 0x01
     8aa:	41 50       	subi	r20, 0x01	; 1
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	34 96       	adiw	r30, 0x04	; 4
     8b2:	47 ff       	sbrs	r20, 7
     8b4:	ef cf       	rjmp	.-34     	; 0x894
     8b6:	10 92 3f 01 	sts	0x013F, r1
     8ba:	10 92 3e 01 	sts	0x013E, r1
     8be:	8a ed       	ldi	r24, 0xDA	; 218
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	90 93 52 02 	sts	0x0252, r25
     8c6:	80 93 51 02 	sts	0x0251, r24
     8ca:	2a b5       	in	r18, 0x2a	; 42
     8cc:	8b b5       	in	r24, 0x2b	; 43
     8ce:	99 27       	eor	r25, r25
     8d0:	98 2f       	mov	r25, r24
     8d2:	88 27       	eor	r24, r24
     8d4:	82 0f       	add	r24, r18
     8d6:	91 1d       	adc	r25, r1
     8d8:	86 52       	subi	r24, 0x26	; 38
     8da:	9b 4f       	sbci	r25, 0xFB	; 251
     8dc:	29 2f       	mov	r18, r25
     8de:	33 27       	eor	r19, r19
     8e0:	2b bd       	out	0x2b, r18	; 43
     8e2:	8a bd       	out	0x2a, r24	; 42
     8e4:	89 b7       	in	r24, 0x39	; 57
     8e6:	80 61       	ori	r24, 0x10	; 16
     8e8:	89 bf       	out	0x39, r24	; 57
     8ea:	08 95       	ret

000008ec <servoOff>:
     8ec:	89 b7       	in	r24, 0x39	; 57
     8ee:	8f 7e       	andi	r24, 0xEF	; 239
     8f0:	89 bf       	out	0x39, r24	; 57
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	0e 94 52 01 	call	0x2a4
     8f8:	08 95       	ret

000008fa <servoSetChannelIO>:
     8fa:	24 2f       	mov	r18, r20
     8fc:	e8 2f       	mov	r30, r24
     8fe:	ff 27       	eor	r31, r31
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	e7 50       	subi	r30, 0x07	; 7
     90a:	ff 4f       	sbci	r31, 0xFF	; 255
     90c:	60 83       	st	Z, r22
     90e:	33 27       	eor	r19, r19
     910:	27 70       	andi	r18, 0x07	; 7
     912:	30 70       	andi	r19, 0x00	; 0
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	02 c0       	rjmp	.+4      	; 0x91e
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	2a 95       	dec	r18
     920:	e2 f7       	brpl	.-8      	; 0x91a
     922:	81 83       	std	Z+1, r24	; 0x01
     924:	08 95       	ret

00000926 <servoSetPositionRaw>:
     926:	62 32       	cpi	r22, 0x22	; 34
     928:	71 05       	cpc	r23, r1
     92a:	10 f4       	brcc	.+4      	; 0x930
     92c:	62 e2       	ldi	r22, 0x22	; 34
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	6b 38       	cpi	r22, 0x8B	; 139
     932:	71 05       	cpc	r23, r1
     934:	10 f0       	brcs	.+4      	; 0x93a
     936:	6a e8       	ldi	r22, 0x8A	; 138
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	e8 2f       	mov	r30, r24
     93c:	ff 27       	eor	r31, r31
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	e7 50       	subi	r30, 0x07	; 7
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	73 83       	std	Z+3, r23	; 0x03
     94c:	62 83       	std	Z+2, r22	; 0x02
     94e:	08 95       	ret

00000950 <servoSetPosition>:
     950:	28 2f       	mov	r18, r24
     952:	88 e6       	ldi	r24, 0x68	; 104
     954:	68 9f       	mul	r22, r24
     956:	c0 01       	movw	r24, r0
     958:	11 24       	eor	r1, r1
     95a:	6f ef       	ldi	r22, 0xFF	; 255
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 4c 12 	call	0x2498
     962:	cb 01       	movw	r24, r22
     964:	82 96       	adiw	r24, 0x22	; 34
     966:	bc 01       	movw	r22, r24
     968:	82 2f       	mov	r24, r18
     96a:	0e 94 93 04 	call	0x926
     96e:	08 95       	ret

00000970 <servoGetPositionRaw>:
     970:	e8 2f       	mov	r30, r24
     972:	ff 27       	eor	r31, r31
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	e7 50       	subi	r30, 0x07	; 7
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	82 81       	ldd	r24, Z+2	; 0x02
     982:	93 81       	ldd	r25, Z+3	; 0x03
     984:	08 95       	ret

00000986 <servoGetPosition>:
     986:	0e 94 b8 04 	call	0x970
     98a:	2f ef       	ldi	r18, 0xFF	; 255
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	82 9f       	mul	r24, r18
     990:	a0 01       	movw	r20, r0
     992:	83 9f       	mul	r24, r19
     994:	50 0d       	add	r21, r0
     996:	92 9f       	mul	r25, r18
     998:	50 0d       	add	r21, r0
     99a:	11 24       	eor	r1, r1
     99c:	ca 01       	movw	r24, r20
     99e:	8e 5d       	subi	r24, 0xDE	; 222
     9a0:	91 42       	sbci	r25, 0x21	; 33
     9a2:	68 e6       	ldi	r22, 0x68	; 104
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 4c 12 	call	0x2498
     9aa:	cb 01       	movw	r24, r22
     9ac:	99 27       	eor	r25, r25
     9ae:	08 95       	ret

000009b0 <servoService>:
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	e0 91 f8 00 	lds	r30, 0x00F8
     9b8:	e5 30       	cpi	r30, 0x05	; 5
     9ba:	80 f4       	brcc	.+32     	; 0x9dc
     9bc:	ff 27       	eor	r31, r31
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	e7 50       	subi	r30, 0x07	; 7
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	80 81       	ld	r24, Z
     9cc:	a8 2f       	mov	r26, r24
     9ce:	bb 27       	eor	r27, r27
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	90 95       	com	r25
     9d4:	ed 01       	movw	r28, r26
     9d6:	88 a1       	ldd	r24, Y+32	; 0x20
     9d8:	89 23       	and	r24, r25
     9da:	88 a3       	std	Y+32, r24	; 0x20
     9dc:	80 91 f8 00 	lds	r24, 0x00F8
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	80 93 f8 00 	sts	0x00F8, r24
     9e6:	85 30       	cpi	r24, 0x05	; 5
     9e8:	19 f1       	breq	.+70     	; 0xa30
     9ea:	86 30       	cpi	r24, 0x06	; 6
     9ec:	10 f0       	brcs	.+4      	; 0x9f2
     9ee:	10 92 f8 00 	sts	0x00F8, r1
     9f2:	80 91 f8 00 	lds	r24, 0x00F8
     9f6:	e8 2f       	mov	r30, r24
     9f8:	ff 27       	eor	r31, r31
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e7 50       	subi	r30, 0x07	; 7
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	80 81       	ld	r24, Z
     a08:	a8 2f       	mov	r26, r24
     a0a:	bb 27       	eor	r27, r27
     a0c:	ed 01       	movw	r28, r26
     a0e:	88 a1       	ldd	r24, Y+32	; 0x20
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	89 2b       	or	r24, r25
     a14:	88 a3       	std	Y+32, r24	; 0x20
     a16:	80 91 f8 00 	lds	r24, 0x00F8
     a1a:	e8 2f       	mov	r30, r24
     a1c:	ff 27       	eor	r31, r31
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	e7 50       	subi	r30, 0x07	; 7
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	42 81       	ldd	r20, Z+2	; 0x02
     a2c:	53 81       	ldd	r21, Z+3	; 0x03
     a2e:	0a c0       	rjmp	.+20     	; 0xa44
     a30:	40 91 51 02 	lds	r20, 0x0251
     a34:	50 91 52 02 	lds	r21, 0x0252
     a38:	80 91 3e 01 	lds	r24, 0x013E
     a3c:	90 91 3f 01 	lds	r25, 0x013F
     a40:	48 1b       	sub	r20, r24
     a42:	59 0b       	sbc	r21, r25
     a44:	2a b5       	in	r18, 0x2a	; 42
     a46:	8b b5       	in	r24, 0x2b	; 43
     a48:	99 27       	eor	r25, r25
     a4a:	98 2f       	mov	r25, r24
     a4c:	88 27       	eor	r24, r24
     a4e:	82 0f       	add	r24, r18
     a50:	91 1d       	adc	r25, r1
     a52:	84 0f       	add	r24, r20
     a54:	95 1f       	adc	r25, r21
     a56:	29 2f       	mov	r18, r25
     a58:	33 27       	eor	r19, r19
     a5a:	2b bd       	out	0x2b, r18	; 43
     a5c:	8a bd       	out	0x2a, r24	; 42
     a5e:	80 91 3e 01 	lds	r24, 0x013E
     a62:	90 91 3f 01 	lds	r25, 0x013F
     a66:	84 0f       	add	r24, r20
     a68:	95 1f       	adc	r25, r21
     a6a:	90 93 3f 01 	sts	0x013F, r25
     a6e:	80 93 3e 01 	sts	0x013E, r24
     a72:	20 91 51 02 	lds	r18, 0x0251
     a76:	30 91 52 02 	lds	r19, 0x0252
     a7a:	82 17       	cp	r24, r18
     a7c:	93 07       	cpc	r25, r19
     a7e:	20 f0       	brcs	.+8      	; 0xa88
     a80:	10 92 3f 01 	sts	0x013F, r1
     a84:	10 92 3e 01 	sts	0x013E, r1
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <__vector_11>:
     a8e:	0e 94 38 10 	call	0x2070
     a92:	82 b7       	in	r24, 0x32	; 50
     a94:	8f 53       	subi	r24, 0x3F	; 63
     a96:	82 bf       	out	0x32, r24	; 50
     a98:	0e 94 d2 11 	call	0x23a4
     a9c:	0e 94 84 10 	call	0x2108

00000aa0 <myputs>:
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	8c 01       	movw	r16, r24
     aaa:	eb 01       	movw	r28, r22
     aac:	88 81       	ld	r24, Y
     aae:	88 23       	and	r24, r24
     ab0:	31 f0       	breq	.+12     	; 0xabe
     ab2:	89 91       	ld	r24, Y+
     ab4:	f8 01       	movw	r30, r16
     ab6:	09 95       	icall
     ab8:	88 81       	ld	r24, Y
     aba:	88 23       	and	r24, r24
     abc:	d1 f7       	brne	.-12     	; 0xab2
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <myputs_P>:
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	8c 01       	movw	r16, r24
     ad2:	eb 01       	movw	r28, r22
		(*putch)(__LPM(psz++));
     ad4:	fb 01       	movw	r30, r22
     ad6:	84 91       	lpm	r24, Z
     ad8:	88 23       	and	r24, r24
     ada:	49 f0       	breq	.+18     	; 0xaee
     adc:	fe 01       	movw	r30, r28
     ade:	21 96       	adiw	r28, 0x01	; 1
     ae0:	84 91       	lpm	r24, Z
     ae2:	f8 01       	movw	r30, r16
     ae4:	09 95       	icall
     ae6:	fe 01       	movw	r30, r28
     ae8:	84 91       	lpm	r24, Z
     aea:	88 23       	and	r24, r24
     aec:	b9 f7       	brne	.-18     	; 0xadc
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <getUAVStatus>:
}

//#if (USART_CHANNELS & CHANNEL_0)

//tell the ground station I am OK by sending a "1" 10 times a second
AVRX_GCC_TASKDEF(getUAVStatus, 76, 4)
{	
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	26 97       	sbiw	r28, 0x06	; 6
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		printf_P(PSTR("1"));
     b0c:	8f ea       	ldi	r24, 0xAF	; 175
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     b18:	60 91 b5 06 	lds	r22, 0x06B5
     b1c:	70 91 b6 06 	lds	r23, 0x06B6
     b20:	8d e0       	ldi	r24, 0x0D	; 13
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     b28:	60 91 b5 06 	lds	r22, 0x06B5
     b2c:	70 91 b6 06 	lds	r23, 0x06B6
     b30:	8a e0       	ldi	r24, 0x0A	; 10
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 ac 0b 	call	0x1758
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
		AvrXDelay(&timer, 100);
     b3c:	64 e6       	ldi	r22, 0x64	; 100
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 a4 11 	call	0x2348
     b48:	e1 cf       	rjmp	.-62     	; 0xb0c

00000b4a <getCompassHeading>:
	}
}

AVRX_GCC_TASKDEF(getCompassHeading, 76, 4)
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	26 97       	sbiw	r28, 0x06	; 6
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		int c = 0;
     b5e:	00 e0       	ldi	r16, 0x00	; 0
     b60:	10 e0       	ldi	r17, 0x00	; 0
		
		while (c<360)
		{	printf_P(PSTR("c %d"), c/3);   	// c/3 evaluates to an int, even it c is not a multiple of
     b62:	c8 01       	movw	r24, r16
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 60 12 	call	0x24c0
     b6c:	7f 93       	push	r23
     b6e:	6f 93       	push	r22
     b70:	81 eb       	ldi	r24, 0xB1	; 177
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	0e 94 fc 0b 	call	0x17f8
			putchar('\r');					// 3.  This way, the heading is sent as ONE char instead of
     b7c:	60 91 b5 06 	lds	r22, 0x06B5
     b80:	70 91 b6 06 	lds	r23, 0x06B6
     b84:	8d e0       	ldi	r24, 0x0D	; 13
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 ac 0b 	call	0x1758
			if (DEBUG) putchar('\n');		// one, two, or three.
     b8c:	60 91 b5 06 	lds	r22, 0x06B5
     b90:	70 91 b6 06 	lds	r23, 0x06B6
     b94:	8a e0       	ldi	r24, 0x0A	; 10
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 ac 0b 	call	0x1758
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
			c++;
     ba4:	0f 5f       	subi	r16, 0xFF	; 255
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
			AvrXDelay(&timer, 1000);
     ba8:	68 ee       	ldi	r22, 0xE8	; 232
     baa:	73 e0       	ldi	r23, 0x03	; 3
     bac:	ce 01       	movw	r24, r28
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	0e 94 a4 11 	call	0x2348
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	08 36       	cpi	r16, 0x68	; 104
     bb8:	18 07       	cpc	r17, r24
     bba:	9c f2       	brlt	.-90     	; 0xb62
     bbc:	08 e6       	ldi	r16, 0x68	; 104
     bbe:	11 e0       	ldi	r17, 0x01	; 1
		}
		while (c>0)
		{	printf_P(PSTR("c %d"), c/3);
     bc0:	c8 01       	movw	r24, r16
     bc2:	63 e0       	ldi	r22, 0x03	; 3
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	0e 94 60 12 	call	0x24c0
     bca:	7f 93       	push	r23
     bcc:	6f 93       	push	r22
     bce:	86 eb       	ldi	r24, 0xB6	; 182
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 fc 0b 	call	0x17f8
			putchar('\r');
     bda:	60 91 b5 06 	lds	r22, 0x06B5
     bde:	70 91 b6 06 	lds	r23, 0x06B6
     be2:	8d e0       	ldi	r24, 0x0D	; 13
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 ac 0b 	call	0x1758
			if (DEBUG) putchar('\n');		//We only want a newline if we are debugging on
     bea:	60 91 b5 06 	lds	r22, 0x06B5
     bee:	70 91 b6 06 	lds	r23, 0x06B6
     bf2:	8a e0       	ldi	r24, 0x0A	; 10
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 ac 0b 	call	0x1758
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
			c--;							//a terminal.  Otherwise, we are communicating with
     c02:	01 50       	subi	r16, 0x01	; 1
     c04:	10 40       	sbci	r17, 0x00	; 0
			AvrXDelay(&timer, 1000);		//the ground station and it should not be sent.
     c06:	68 ee       	ldi	r22, 0xE8	; 232
     c08:	73 e0       	ldi	r23, 0x03	; 3
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 a4 11 	call	0x2348
     c12:	10 16       	cp	r1, r16
     c14:	11 06       	cpc	r1, r17
     c16:	a4 f2       	brlt	.-88     	; 0xbc0
     c18:	a2 cf       	rjmp	.-188    	; 0xb5e

00000c1a <getAirspeed>:
		}
	}
}

AVRX_GCC_TASKDEF(getAirspeed, 76, 4)
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	26 97       	sbiw	r28, 0x06	; 6
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int s = 0;
     c2e:	00 e0       	ldi	r16, 0x00	; 0
     c30:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{	
		while (s<25)
		{	printf_P(PSTR("s %d"), s);   
			putchar('\r');
			if (DEBUG) putchar('\n');	
			s++;							
			AvrXDelay(&timer, 1000);
     c32:	09 31       	cpi	r16, 0x19	; 25
     c34:	11 05       	cpc	r17, r1
     c36:	2c f5       	brge	.+74     	; 0xc82
     c38:	1f 93       	push	r17
     c3a:	0f 93       	push	r16
     c3c:	8b eb       	ldi	r24, 0xBB	; 187
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	0e 94 fc 0b 	call	0x17f8
     c48:	60 91 b5 06 	lds	r22, 0x06B5
     c4c:	70 91 b6 06 	lds	r23, 0x06B6
     c50:	8d e0       	ldi	r24, 0x0D	; 13
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 ac 0b 	call	0x1758
     c58:	60 91 b5 06 	lds	r22, 0x06B5
     c5c:	70 91 b6 06 	lds	r23, 0x06B6
     c60:	8a e0       	ldi	r24, 0x0A	; 10
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 ac 0b 	call	0x1758
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 5f       	subi	r16, 0xFF	; 255
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	68 ee       	ldi	r22, 0xE8	; 232
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 a4 11 	call	0x2348
     c80:	d8 cf       	rjmp	.-80     	; 0xc32
		}
		while (s>15)
		{	printf_P(PSTR("s %d"), s);
			putchar('\r');
			if (DEBUG) putchar('\n');
			s--;
			AvrXDelay(&timer, 1000);
     c82:	00 31       	cpi	r16, 0x10	; 16
     c84:	11 05       	cpc	r17, r1
     c86:	ac f2       	brlt	.-86     	; 0xc32
     c88:	1f 93       	push	r17
     c8a:	0f 93       	push	r16
     c8c:	80 ec       	ldi	r24, 0xC0	; 192
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 fc 0b 	call	0x17f8
     c98:	60 91 b5 06 	lds	r22, 0x06B5
     c9c:	70 91 b6 06 	lds	r23, 0x06B6
     ca0:	8d e0       	ldi	r24, 0x0D	; 13
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 ac 0b 	call	0x1758
     ca8:	60 91 b5 06 	lds	r22, 0x06B5
     cac:	70 91 b6 06 	lds	r23, 0x06B6
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 ac 0b 	call	0x1758
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	01 50       	subi	r16, 0x01	; 1
     cc2:	10 40       	sbci	r17, 0x00	; 0
     cc4:	68 ee       	ldi	r22, 0xE8	; 232
     cc6:	73 e0       	ldi	r23, 0x03	; 3
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 a4 11 	call	0x2348
     cd0:	d8 cf       	rjmp	.-80     	; 0xc82

00000cd2 <getGroundspeed>:
		}
	}
}

AVRX_GCC_TASKDEF(getGroundspeed, 76, 4)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	26 97       	sbiw	r28, 0x06	; 6
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int g = 18;
     ce6:	02 e1       	ldi	r16, 0x12	; 18
     ce8:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{	
		while (g<22)
		{	printf_P(PSTR("g %d"), g);   
			putchar('\r');
			if (DEBUG) putchar('\n');	
			g++;							
			AvrXDelay(&timer, 30*1000);
     cea:	06 31       	cpi	r16, 0x16	; 22
     cec:	11 05       	cpc	r17, r1
     cee:	2c f5       	brge	.+74     	; 0xd3a
     cf0:	1f 93       	push	r17
     cf2:	0f 93       	push	r16
     cf4:	85 ec       	ldi	r24, 0xC5	; 197
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 fc 0b 	call	0x17f8
     d00:	60 91 b5 06 	lds	r22, 0x06B5
     d04:	70 91 b6 06 	lds	r23, 0x06B6
     d08:	8d e0       	ldi	r24, 0x0D	; 13
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 ac 0b 	call	0x1758
     d10:	60 91 b5 06 	lds	r22, 0x06B5
     d14:	70 91 b6 06 	lds	r23, 0x06B6
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 ac 0b 	call	0x1758
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 5f       	subi	r16, 0xFF	; 255
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	60 e3       	ldi	r22, 0x30	; 48
     d2e:	75 e7       	ldi	r23, 0x75	; 117
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 a4 11 	call	0x2348
     d38:	d8 cf       	rjmp	.-80     	; 0xcea
		}
		while (g>18)
		{	printf_P(PSTR("g %d"), g);
			putchar('\r');
			if (DEBUG) putchar('\n');
			g--;
			AvrXDelay(&timer, 30*1000);
     d3a:	03 31       	cpi	r16, 0x13	; 19
     d3c:	11 05       	cpc	r17, r1
     d3e:	ac f2       	brlt	.-86     	; 0xcea
     d40:	1f 93       	push	r17
     d42:	0f 93       	push	r16
     d44:	8a ec       	ldi	r24, 0xCA	; 202
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9f 93       	push	r25
     d4a:	8f 93       	push	r24
     d4c:	0e 94 fc 0b 	call	0x17f8
     d50:	60 91 b5 06 	lds	r22, 0x06B5
     d54:	70 91 b6 06 	lds	r23, 0x06B6
     d58:	8d e0       	ldi	r24, 0x0D	; 13
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 ac 0b 	call	0x1758
     d60:	60 91 b5 06 	lds	r22, 0x06B5
     d64:	70 91 b6 06 	lds	r23, 0x06B6
     d68:	8a e0       	ldi	r24, 0x0A	; 10
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 ac 0b 	call	0x1758
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	01 50       	subi	r16, 0x01	; 1
     d7a:	10 40       	sbci	r17, 0x00	; 0
     d7c:	60 e3       	ldi	r22, 0x30	; 48
     d7e:	75 e7       	ldi	r23, 0x75	; 117
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	0e 94 a4 11 	call	0x2348
     d88:	d8 cf       	rjmp	.-80     	; 0xd3a

00000d8a <getGPSData>:
		}
	}
}

AVRX_GCC_TASKDEF(getGPSData, 76, 4)
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	26 97       	sbiw	r28, 0x06	; 6
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int z = 0;
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{	
		// Since latitude and longitude cannot be expressed as simple integers,
		// we cannot fake the measurements by cycling through some numbers.
		printf_P(PSTR("a 067.5759E"));   
     da2:	8f ec       	ldi	r24, 0xCF	; 207
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     dae:	60 91 b5 06 	lds	r22, 0x06B5
     db2:	70 91 b6 06 	lds	r23, 0x06B6
     db6:	8d e0       	ldi	r24, 0x0D	; 13
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     dbe:	60 91 b5 06 	lds	r22, 0x06B5
     dc2:	70 91 b6 06 	lds	r23, 0x06B6
     dc6:	8a e0       	ldi	r24, 0x0A	; 10
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 ac 0b 	call	0x1758
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
		
		printf_P(PSTR("o 89.12345N"));	
     dd2:	8b ed       	ldi	r24, 0xDB	; 219
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     dde:	60 91 b5 06 	lds	r22, 0x06B5
     de2:	70 91 b6 06 	lds	r23, 0x06B6
     de6:	8d e0       	ldi	r24, 0x0D	; 13
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     dee:	60 91 b5 06 	lds	r22, 0x06B5
     df2:	70 91 b6 06 	lds	r23, 0x06B6
     df6:	8a e0       	ldi	r24, 0x0A	; 10
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 ac 0b 	call	0x1758
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
		
		printf_P(PSTR("z %d"), z);
     e02:	1f 93       	push	r17
     e04:	0f 93       	push	r16
     e06:	87 ee       	ldi	r24, 0xE7	; 231
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     e12:	60 91 b5 06 	lds	r22, 0x06B5
     e16:	70 91 b6 06 	lds	r23, 0x06B6
     e1a:	8d e0       	ldi	r24, 0x0D	; 13
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     e22:	60 91 b5 06 	lds	r22, 0x06B5
     e26:	70 91 b6 06 	lds	r23, 0x06B6
     e2a:	8a e0       	ldi	r24, 0x0A	; 10
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 ac 0b 	call	0x1758
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
		
		if (z<100) z++;
     e3a:	04 36       	cpi	r16, 0x64	; 100
     e3c:	11 05       	cpc	r17, r1
     e3e:	14 f4       	brge	.+4      	; 0xe44
     e40:	0f 5f       	subi	r16, 0xFF	; 255
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
		AvrXDelay(&timer, 1000);
     e44:	68 ee       	ldi	r22, 0xE8	; 232
     e46:	73 e0       	ldi	r23, 0x03	; 3
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	0e 94 a4 11 	call	0x2348
		
		
		
		printf_P(PSTR("a 101.4512W"));   
     e50:	8c ee       	ldi	r24, 0xEC	; 236
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     e5c:	60 91 b5 06 	lds	r22, 0x06B5
     e60:	70 91 b6 06 	lds	r23, 0x06B6
     e64:	8d e0       	ldi	r24, 0x0D	; 13
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     e6c:	60 91 b5 06 	lds	r22, 0x06B5
     e70:	70 91 b6 06 	lds	r23, 0x06B6
     e74:	8a e0       	ldi	r24, 0x0A	; 10
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 ac 0b 	call	0x1758
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
		
		printf_P(PSTR("o 05.98765S"));   
     e80:	88 ef       	ldi	r24, 0xF8	; 248
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9f 93       	push	r25
     e86:	8f 93       	push	r24
     e88:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     e8c:	60 91 b5 06 	lds	r22, 0x06B5
     e90:	70 91 b6 06 	lds	r23, 0x06B6
     e94:	8d e0       	ldi	r24, 0x0D	; 13
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     e9c:	60 91 b5 06 	lds	r22, 0x06B5
     ea0:	70 91 b6 06 	lds	r23, 0x06B6
     ea4:	8a e0       	ldi	r24, 0x0A	; 10
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 ac 0b 	call	0x1758
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
		
		printf_P(PSTR("z %d"), z);
     eb0:	1f 93       	push	r17
     eb2:	0f 93       	push	r16
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	9f 93       	push	r25
     eba:	8f 93       	push	r24
     ebc:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     ec0:	60 91 b5 06 	lds	r22, 0x06B5
     ec4:	70 91 b6 06 	lds	r23, 0x06B6
     ec8:	8d e0       	ldi	r24, 0x0D	; 13
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');
     ed0:	60 91 b5 06 	lds	r22, 0x06B5
     ed4:	70 91 b6 06 	lds	r23, 0x06B6
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 ac 0b 	call	0x1758
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
		
		if (z<100) z++;	
     ee8:	04 36       	cpi	r16, 0x64	; 100
     eea:	11 05       	cpc	r17, r1
     eec:	14 f4       	brge	.+4      	; 0xef2
     eee:	0f 5f       	subi	r16, 0xFF	; 255
     ef0:	1f 4f       	sbci	r17, 0xFF	; 255
		AvrXDelay(&timer, 1000);
     ef2:	68 ee       	ldi	r22, 0xE8	; 232
     ef4:	73 e0       	ldi	r23, 0x03	; 3
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 a4 11 	call	0x2348
     efe:	51 cf       	rjmp	.-350    	; 0xda2

00000f00 <getFuelAndBattery>:
		
	}		
}

AVRX_GCC_TASKDEF(getFuelAndBattery, 76, 4)
{
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	26 97       	sbiw	r28, 0x06	; 6
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int b = 100;
     f14:	04 e6       	ldi	r16, 0x64	; 100
     f16:	10 e0       	ldi	r17, 0x00	; 0
	int f = 100;
     f18:	78 01       	movw	r14, r16
	
	while(1)
	{	
		printf_P(PSTR("b %d"), b);   
     f1a:	ff 92       	push	r15
     f1c:	ef 92       	push	r14
     f1e:	89 e0       	ldi	r24, 0x09	; 9
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	9f 93       	push	r25
     f24:	8f 93       	push	r24
     f26:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     f2a:	60 91 b5 06 	lds	r22, 0x06B5
     f2e:	70 91 b6 06 	lds	r23, 0x06B6
     f32:	8d e0       	ldi	r24, 0x0D	; 13
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');	
     f3a:	60 91 b5 06 	lds	r22, 0x06B5
     f3e:	70 91 b6 06 	lds	r23, 0x06B6
     f42:	8a e0       	ldi	r24, 0x0A	; 10
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 ac 0b 	call	0x1758
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
		printf_P(PSTR("f %d"), f);
     f52:	1f 93       	push	r17
     f54:	0f 93       	push	r16
     f56:	8e e0       	ldi	r24, 0x0E	; 14
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 fc 0b 	call	0x17f8
		putchar('\r');
     f62:	60 91 b5 06 	lds	r22, 0x06B5
     f66:	70 91 b6 06 	lds	r23, 0x06B6
     f6a:	8d e0       	ldi	r24, 0x0D	; 13
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 ac 0b 	call	0x1758
		if (DEBUG) putchar('\n');							
     f72:	60 91 b5 06 	lds	r22, 0x06B5
     f76:	70 91 b6 06 	lds	r23, 0x06B6
     f7a:	8a e0       	ldi	r24, 0x0A	; 10
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 ac 0b 	call	0x1758
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
		b--;
     f8a:	08 94       	sec
     f8c:	e1 08       	sbc	r14, r1
     f8e:	f1 08       	sbc	r15, r1
		f--;
     f90:	01 50       	subi	r16, 0x01	; 1
     f92:	10 40       	sbci	r17, 0x00	; 0
		AvrXDelay(&timer, 30*1000);
     f94:	60 e3       	ldi	r22, 0x30	; 48
     f96:	75 e7       	ldi	r23, 0x75	; 117
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 a4 11 	call	0x2348
     fa0:	bc cf       	rjmp	.-136    	; 0xf1a

00000fa2 <getPitchAndRoll>:
	}
}


AVRX_GCC_TASKDEF(getPitchAndRoll, 76, 4)
{
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	26 97       	sbiw	r28, 0x06	; 6
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int q = 0;
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	10 e0       	ldi	r17, 0x00	; 0
	int w = 127;
     fba:	7f e7       	ldi	r23, 0x7F	; 127
     fbc:	e7 2e       	mov	r14, r23
     fbe:	f1 2c       	mov	r15, r1
	
	while(1)
	{	
		while (q<127)
		{	printf_P(PSTR("q %d"), q);   
			putchar('\r');
			if (DEBUG) putchar('\n');	
			printf_P(PSTR("w %d"), w);
			putchar('\r');
			if (DEBUG) putchar('\n');
			q++;					
			w--;		
			AvrXDelay(&timer, 33);		//try 33Hz
     fc0:	0f 37       	cpi	r16, 0x7F	; 127
     fc2:	11 05       	cpc	r17, r1
     fc4:	0c f0       	brlt	.+2      	; 0xfc8
     fc6:	44 c0       	rjmp	.+136    	; 0x1050
     fc8:	1f 93       	push	r17
     fca:	0f 93       	push	r16
     fcc:	83 e1       	ldi	r24, 0x13	; 19
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	9f 93       	push	r25
     fd2:	8f 93       	push	r24
     fd4:	0e 94 fc 0b 	call	0x17f8
     fd8:	60 91 b5 06 	lds	r22, 0x06B5
     fdc:	70 91 b6 06 	lds	r23, 0x06B6
     fe0:	8d e0       	ldi	r24, 0x0D	; 13
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 ac 0b 	call	0x1758
     fe8:	60 91 b5 06 	lds	r22, 0x06B5
     fec:	70 91 b6 06 	lds	r23, 0x06B6
     ff0:	8a e0       	ldi	r24, 0x0A	; 10
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 ac 0b 	call	0x1758
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	ff 92       	push	r15
    1002:	ef 92       	push	r14
    1004:	88 e1       	ldi	r24, 0x18	; 24
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	9f 93       	push	r25
    100a:	8f 93       	push	r24
    100c:	0e 94 fc 0b 	call	0x17f8
    1010:	60 91 b5 06 	lds	r22, 0x06B5
    1014:	70 91 b6 06 	lds	r23, 0x06B6
    1018:	8d e0       	ldi	r24, 0x0D	; 13
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 ac 0b 	call	0x1758
    1020:	60 91 b5 06 	lds	r22, 0x06B5
    1024:	70 91 b6 06 	lds	r23, 0x06B6
    1028:	8a e0       	ldi	r24, 0x0A	; 10
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 ac 0b 	call	0x1758
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 5f       	subi	r16, 0xFF	; 255
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	08 94       	sec
    103e:	e1 08       	sbc	r14, r1
    1040:	f1 08       	sbc	r15, r1
    1042:	61 e2       	ldi	r22, 0x21	; 33
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	0e 94 a4 11 	call	0x2348
    104e:	b8 cf       	rjmp	.-144    	; 0xfc0
		}
		while (q>0)
		{	printf_P(PSTR("q %d"), q);
			putchar('\r');
			if (DEBUG) putchar('\n');
			printf_P(PSTR("w %d"), w);
			putchar('\r');
			if (DEBUG) putchar('\n');
			q--;
			w++;
			AvrXDelay(&timer, 33);
    1050:	10 16       	cp	r1, r16
    1052:	11 06       	cpc	r1, r17
    1054:	0c f0       	brlt	.+2      	; 0x1058
    1056:	b4 cf       	rjmp	.-152    	; 0xfc0
    1058:	1f 93       	push	r17
    105a:	0f 93       	push	r16
    105c:	8d e1       	ldi	r24, 0x1D	; 29
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	9f 93       	push	r25
    1062:	8f 93       	push	r24
    1064:	0e 94 fc 0b 	call	0x17f8
    1068:	60 91 b5 06 	lds	r22, 0x06B5
    106c:	70 91 b6 06 	lds	r23, 0x06B6
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 ac 0b 	call	0x1758
    1078:	60 91 b5 06 	lds	r22, 0x06B5
    107c:	70 91 b6 06 	lds	r23, 0x06B6
    1080:	8a e0       	ldi	r24, 0x0A	; 10
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 ac 0b 	call	0x1758
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	ff 92       	push	r15
    1092:	ef 92       	push	r14
    1094:	82 e2       	ldi	r24, 0x22	; 34
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	9f 93       	push	r25
    109a:	8f 93       	push	r24
    109c:	0e 94 fc 0b 	call	0x17f8
    10a0:	60 91 b5 06 	lds	r22, 0x06B5
    10a4:	70 91 b6 06 	lds	r23, 0x06B6
    10a8:	8d e0       	ldi	r24, 0x0D	; 13
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 ac 0b 	call	0x1758
    10b0:	60 91 b5 06 	lds	r22, 0x06B5
    10b4:	70 91 b6 06 	lds	r23, 0x06B6
    10b8:	8a e0       	ldi	r24, 0x0A	; 10
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 ac 0b 	call	0x1758
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	01 50       	subi	r16, 0x01	; 1
    10ca:	10 40       	sbci	r17, 0x00	; 0
    10cc:	08 94       	sec
    10ce:	e1 1c       	adc	r14, r1
    10d0:	f1 1c       	adc	r15, r1
    10d2:	61 e2       	ldi	r22, 0x21	; 33
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	0e 94 a4 11 	call	0x2348
    10de:	b8 cf       	rjmp	.-144    	; 0x1050

000010e0 <getCommands>:
		}
	}
}

AVRX_GCC_TASKDEF(getCommands, 100, 5)
{	
	int c;		
	
	while (1)
	{
		while ((c = getchar()) != EOF)
    10e0:	15 c0       	rjmp	.+42     	; 0x110c
		{	
			if (c == '\r')
    10e2:	cd 30       	cpi	r28, 0x0D	; 13
    10e4:	d1 05       	cpc	r29, r1
    10e6:	79 f4       	brne	.+30     	; 0x1106
			{	putchar('\r');
    10e8:	60 91 b5 06 	lds	r22, 0x06B5
    10ec:	70 91 b6 06 	lds	r23, 0x06B6
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 ac 0b 	call	0x1758
				putchar('\n');
    10f6:	60 91 b5 06 	lds	r22, 0x06B5
    10fa:	70 91 b6 06 	lds	r23, 0x06B6
    10fe:	8a e0       	ldi	r24, 0x0A	; 10
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 ac 0b 	call	0x1758
			}
			parserInputFunc(c);
    1106:	8c 2f       	mov	r24, r28
    1108:	0e 94 1f 01 	call	0x23e
    110c:	80 91 b3 06 	lds	r24, 0x06B3
    1110:	90 91 b4 06 	lds	r25, 0x06B4
    1114:	0e 94 6f 0b 	call	0x16de
    1118:	ec 01       	movw	r28, r24
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	cf 3f       	cpi	r28, 0xFF	; 255
    111e:	d8 07       	cpc	r29, r24
    1120:	01 f7       	brne	.-64     	; 0x10e2
    1122:	f4 cf       	rjmp	.-24     	; 0x110c

00001124 <marktribe>:
		}
	}
}

AVRX_GCC_TASKDEF(marktribe, 70, 3)
{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	26 97       	sbiw	r28, 0x06	; 6
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer2;
    char c = 'a';
    1138:	11 e6       	ldi	r17, 0x61	; 97
    printf_P(PSTR("I founded Rhizome!\r\n"));
    113a:	87 e2       	ldi	r24, 0x27	; 39
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	0e 94 fc 0b 	call	0x17f8
    while(1)
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    {    
        printf_P(PSTR("%d "),c);
    114a:	81 2f       	mov	r24, r17
    114c:	99 27       	eor	r25, r25
    114e:	87 fd       	sbrc	r24, 7
    1150:	90 95       	com	r25
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	8c e3       	ldi	r24, 0x3C	; 60
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	9f 93       	push	r25
    115c:	8f 93       	push	r24
    115e:	0e 94 fc 0b 	call	0x17f8
        c++;
    1162:	1f 5f       	subi	r17, 0xFF	; 255
        AvrXDelay(&timer2, 1000); //supposed to be a 1000 ms delay
    1164:	68 ee       	ldi	r22, 0xE8	; 232
    1166:	73 e0       	ldi	r23, 0x03	; 3
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	0e 94 a4 11 	call	0x2348
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	e8 cf       	rjmp	.-48     	; 0x114a

0000117a <main>:
    }
    
}
	
/*
AVRX_GCC_TASKDEF(servos, 120, 1)
{
	TimerControlBlock timer3;
	
	u08 pos;
	u08 channel;

	// do some examples
	// initialize RC servo system
	servoInit();
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);


	// set port pins to output
	outb(DDRC, 0x01);

	pos = 0;
	
	#define SPEED_SERVO	1

	// spin servos sequentially back and forth between their limits
	while(1)
	{
		for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
		{
			for(pos=0; pos<SERVO_POSITION_MAX; pos++)
			{
				servoSetPosition(channel,pos);
				AvrXDelay(&timer3, 1000);;
			}
		}

		for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
		{
			for(pos=SERVO_POSITION_MAX; pos>=1; pos--)
			{
				servoSetPosition(channel,pos);
				AvrXDelay(&timer3, 1000);;
			}
		}
	}
}
*/
//#endif // USART_CHANNELS & CHANNEL_0

int main(void)
{
    117a:	cf e5       	ldi	r28, 0x5F	; 95
    117c:	d8 e0       	ldi	r29, 0x08	; 8
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 bd 10 	call	0x217a

	MCUCR = _BV(SE);
    118a:	80 e8       	ldi	r24, 0x80	; 128
    118c:	85 bf       	out	0x35, r24	; 53
	TCNT0 = TCNT0_INIT;
    118e:	81 ec       	ldi	r24, 0xC1	; 193
    1190:	82 bf       	out	0x32, r24	; 50
#if defined (__AVR_ATmega103__) || defined (__ATmega103__)
	TCCR0 =  ((1<<CS02) | (1<<CS01));
#elif defined (__AVR_ATmega128__) || defined (__ATmega128__) || defined (__AVR_ATmega64__) || defined (__ATmega64__)
	TCCR0 =  ((1<<CS2) | (1<<CS1));
#else	// Most other chips...  Note: some are TCCR0 and some are TCCR0B...
	TCCR0 =  (1<<CS02);
    1192:	04 e0       	ldi	r16, 0x04	; 4
    1194:	03 bf       	out	0x33, r16	; 51
#endif
	TIMSK = _BV(TOIE0);
    1196:	11 e0       	ldi	r17, 0x01	; 1
    1198:	19 bf       	out	0x39, r17	; 57

    InitSerial0(BAUD(9600));
    119a:	8f ec       	ldi	r24, 0xCF	; 207
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 1c 0a 	call	0x1438
    fdevopen(put_char0, get_c0,0);		// Set up standard I/O
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	65 e4       	ldi	r22, 0x45	; 69
    11a8:	7a e0       	ldi	r23, 0x0A	; 10
    11aa:	8c e3       	ldi	r24, 0x3C	; 60
    11ac:	9a e0       	ldi	r25, 0x0A	; 10
    11ae:	0e 94 26 0b 	call	0x164c

	// initialize parser system
	parserInit();
    11b2:	0e 94 bd 00 	call	0x17a
	// direct output to uart (serial port)
	parserSetOutputFunc(put_char0);
    11b6:	8c e3       	ldi	r24, 0x3C	; 60
    11b8:	9a e0       	ldi	r25, 0x0A	; 10
    11ba:	0e 94 e5 00 	call	0x1ca
	// add commands to the command database
	parserAddCommand("l",		setLeftServo);
    11be:	60 e4       	ldi	r22, 0x40	; 64
    11c0:	79 e0       	ldi	r23, 0x09	; 9
    11c2:	82 e6       	ldi	r24, 0x62	; 98
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 c6 00 	call	0x18c
	parserAddCommand("r",		setRightServo);
    11ca:	6c e6       	ldi	r22, 0x6C	; 108
    11cc:	79 e0       	ldi	r23, 0x09	; 9
    11ce:	84 e6       	ldi	r24, 0x64	; 100
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 c6 00 	call	0x18c
    parserAddCommand("t", 		setThrottleServo);
    11d6:	68 e9       	ldi	r22, 0x98	; 152
    11d8:	79 e0       	ldi	r23, 0x09	; 9
    11da:	86 e6       	ldi	r24, 0x66	; 102
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 c6 00 	call	0x18c
	parserAddCommand("p", 		setCamPanServo);
    11e2:	64 ec       	ldi	r22, 0xC4	; 196
    11e4:	79 e0       	ldi	r23, 0x09	; 9
    11e6:	88 e6       	ldi	r24, 0x68	; 104
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 c6 00 	call	0x18c
	parserAddCommand("i", 		setCamTiltServo);
    11ee:	60 ef       	ldi	r22, 0xF0	; 240
    11f0:	79 e0       	ldi	r23, 0x09	; 9
    11f2:	8a e6       	ldi	r24, 0x6A	; 106
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 c6 00 	call	0x18c
	
	// initialize the timer system -- FROM AVRLIB
	//timerInit();
	
	//////////////////////////////////////////////////Servos//////////////////////////
	servoInit();
    11fa:	0e 94 35 04 	call	0x86a
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	65 e1       	ldi	r22, 0x15	; 21
    1202:	84 2f       	mov	r24, r20
    1204:	0e 94 7d 04 	call	0x8fa
	servoSetChannelIO(1, _SFR_IO_ADDR(PORTC), PC1);
    1208:	41 2f       	mov	r20, r17
    120a:	65 e1       	ldi	r22, 0x15	; 21
    120c:	81 2f       	mov	r24, r17
    120e:	0e 94 7d 04 	call	0x8fa
	servoSetChannelIO(2, _SFR_IO_ADDR(PORTC), PC2);
    1212:	42 e0       	ldi	r20, 0x02	; 2
    1214:	65 e1       	ldi	r22, 0x15	; 21
    1216:	84 2f       	mov	r24, r20
    1218:	0e 94 7d 04 	call	0x8fa
	servoSetChannelIO(3, _SFR_IO_ADDR(PORTC), PC3);
    121c:	43 e0       	ldi	r20, 0x03	; 3
    121e:	65 e1       	ldi	r22, 0x15	; 21
    1220:	84 2f       	mov	r24, r20
    1222:	0e 94 7d 04 	call	0x8fa
	servoSetChannelIO(4, _SFR_IO_ADDR(PORTC), PC4);
    1226:	40 2f       	mov	r20, r16
    1228:	65 e1       	ldi	r22, 0x15	; 21
    122a:	80 2f       	mov	r24, r16
    122c:	0e 94 7d 04 	call	0x8fa

	// set port pins to output
	outb(DDRC, 0x1F);
    1230:	8f e1       	ldi	r24, 0x1F	; 31
    1232:	84 bb       	out	0x14, r24	; 20

	
	#define SPEED_SERVO	1
	//////////////////////////////////////////////////////////////////////////////////
	
	AvrXRunTask(TCB(getCommands));
    1234:	8b e5       	ldi	r24, 0x5B	; 91
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 c9 10 	call	0x2192
//	AvrXRunTask(TCB(marktribe));
	AvrXRunTask(TCB(getUAVStatus));
    123c:	8c e8       	ldi	r24, 0x8C	; 140
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 c9 10 	call	0x2192
	AvrXRunTask(TCB(getAirspeed));
    1244:	8e e7       	ldi	r24, 0x7E	; 126
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 c9 10 	call	0x2192
	AvrXRunTask(TCB(getGroundspeed));
    124c:	87 e7       	ldi	r24, 0x77	; 119
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 c9 10 	call	0x2192
	AvrXRunTask(TCB(getCompassHeading));
    1254:	85 e8       	ldi	r24, 0x85	; 133
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 c9 10 	call	0x2192
	AvrXRunTask(TCB(getGPSData));
    125c:	80 e7       	ldi	r24, 0x70	; 112
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 c9 10 	call	0x2192
	AvrXRunTask(TCB(getPitchAndRoll));
    1264:	82 e6       	ldi	r24, 0x62	; 98
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 c9 10 	call	0x2192
	AvrXRunTask(TCB(getFuelAndBattery));
    126c:	89 e6       	ldi	r24, 0x69	; 105
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 c9 10 	call	0x2192
	//AvrXRunTask(TCB(servos));
    
	Epilog();
    1274:	0e 94 84 10 	call	0x2108
	return(0);
}
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0c 94 b0 12 	jmp	0x2560

00001280 <setLeftServo>:

void setLeftServo(void)
{	
	leftServoPos = parserGetArgInt();
    1280:	0e 94 39 01 	call	0x272
    1284:	90 93 61 00 	sts	0x0061, r25
    1288:	80 93 60 00 	sts	0x0060, r24
	servoSetPosition(LEFT_SERVO_CHAN, (char)leftServoPos);
    128c:	60 91 60 00 	lds	r22, 0x0060
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 a8 04 	call	0x950
	if (DEBUG)
	{	printf("Left Servo Set: %d", leftServoPos);
    1296:	80 91 60 00 	lds	r24, 0x0060
    129a:	90 91 61 00 	lds	r25, 0x0061
    129e:	9f 93       	push	r25
    12a0:	8f 93       	push	r24
    12a2:	8c e6       	ldi	r24, 0x6C	; 108
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9f 93       	push	r25
    12a8:	8f 93       	push	r24
    12aa:	0e 94 e7 0b 	call	0x17ce
		putchar('\r');
    12ae:	60 91 b5 06 	lds	r22, 0x06B5
    12b2:	70 91 b6 06 	lds	r23, 0x06B6
    12b6:	8d e0       	ldi	r24, 0x0D	; 13
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 ac 0b 	call	0x1758
		putchar('\n');
    12be:	60 91 b5 06 	lds	r22, 0x06B5
    12c2:	70 91 b6 06 	lds	r23, 0x06B6
    12c6:	8a e0       	ldi	r24, 0x0A	; 10
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 ac 0b 	call	0x1758
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	08 95       	ret

000012d8 <setRightServo>:
	}
}

void setRightServo(void)
{	
	rightServoPos = parserGetArgInt();
    12d8:	0e 94 39 01 	call	0x272
    12dc:	90 93 3d 01 	sts	0x013D, r25
    12e0:	80 93 3c 01 	sts	0x013C, r24
	servoSetPosition(RIGHT_SERVO_CHAN, (char)rightServoPos);
    12e4:	60 91 3c 01 	lds	r22, 0x013C
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 a8 04 	call	0x950
	if (DEBUG)
	{	printf("Right Servo Set: %d", rightServoPos);
    12ee:	80 91 3c 01 	lds	r24, 0x013C
    12f2:	90 91 3d 01 	lds	r25, 0x013D
    12f6:	9f 93       	push	r25
    12f8:	8f 93       	push	r24
    12fa:	8f e7       	ldi	r24, 0x7F	; 127
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	0e 94 e7 0b 	call	0x17ce
		putchar('\r');
    1306:	60 91 b5 06 	lds	r22, 0x06B5
    130a:	70 91 b6 06 	lds	r23, 0x06B6
    130e:	8d e0       	ldi	r24, 0x0D	; 13
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 ac 0b 	call	0x1758
		putchar('\n');
    1316:	60 91 b5 06 	lds	r22, 0x06B5
    131a:	70 91 b6 06 	lds	r23, 0x06B6
    131e:	8a e0       	ldi	r24, 0x0A	; 10
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 ac 0b 	call	0x1758
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	08 95       	ret

00001330 <setThrottleServo>:
	}
}

void setThrottleServo(void)
{
	throttleServoPos = parserGetArgInt();
    1330:	0e 94 39 01 	call	0x272
    1334:	90 93 69 02 	sts	0x0269, r25
    1338:	80 93 68 02 	sts	0x0268, r24
	servoSetPosition(THROTTLE_SERVO_CHAN, (char)throttleServoPos);
    133c:	60 91 68 02 	lds	r22, 0x0268
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	0e 94 a8 04 	call	0x950
	if (DEBUG)
	{	printf("Throttle Servo Set: %d", throttleServoPos);
    1346:	80 91 68 02 	lds	r24, 0x0268
    134a:	90 91 69 02 	lds	r25, 0x0269
    134e:	9f 93       	push	r25
    1350:	8f 93       	push	r24
    1352:	83 e9       	ldi	r24, 0x93	; 147
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	0e 94 e7 0b 	call	0x17ce
		putchar('\r');
    135e:	60 91 b5 06 	lds	r22, 0x06B5
    1362:	70 91 b6 06 	lds	r23, 0x06B6
    1366:	8d e0       	ldi	r24, 0x0D	; 13
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 ac 0b 	call	0x1758
		putchar('\n');
    136e:	60 91 b5 06 	lds	r22, 0x06B5
    1372:	70 91 b6 06 	lds	r23, 0x06B6
    1376:	8a e0       	ldi	r24, 0x0A	; 10
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 ac 0b 	call	0x1758
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	08 95       	ret

00001388 <setCamPanServo>:
	}
}

void setCamPanServo(void)
{
	camPanServoPos = parserGetArgInt();
    1388:	0e 94 39 01 	call	0x272
    138c:	90 93 0e 01 	sts	0x010E, r25
    1390:	80 93 0d 01 	sts	0x010D, r24
	servoSetPosition(CAM_PAN_SERVO_CHAN, (char)camPanServoPos);
    1394:	60 91 0d 01 	lds	r22, 0x010D
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	0e 94 a8 04 	call	0x950
	if (DEBUG)
	{	printf("Camera Pan Servo Set: %d", camPanServoPos);
    139e:	80 91 0d 01 	lds	r24, 0x010D
    13a2:	90 91 0e 01 	lds	r25, 0x010E
    13a6:	9f 93       	push	r25
    13a8:	8f 93       	push	r24
    13aa:	8a ea       	ldi	r24, 0xAA	; 170
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9f 93       	push	r25
    13b0:	8f 93       	push	r24
    13b2:	0e 94 e7 0b 	call	0x17ce
		putchar('\r');
    13b6:	60 91 b5 06 	lds	r22, 0x06B5
    13ba:	70 91 b6 06 	lds	r23, 0x06B6
    13be:	8d e0       	ldi	r24, 0x0D	; 13
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 ac 0b 	call	0x1758
		putchar('\n');
    13c6:	60 91 b5 06 	lds	r22, 0x06B5
    13ca:	70 91 b6 06 	lds	r23, 0x06B6
    13ce:	8a e0       	ldi	r24, 0x0A	; 10
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 ac 0b 	call	0x1758
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	08 95       	ret

000013e0 <setCamTiltServo>:
	}
}

void setCamTiltServo(void)
{
	camTiltServoPos = parserGetArgInt();
    13e0:	0e 94 39 01 	call	0x272
    13e4:	90 93 3b 01 	sts	0x013B, r25
    13e8:	80 93 3a 01 	sts	0x013A, r24
	servoSetPosition(CAM_TILT_SERVO_CHAN, (char)camTiltServoPos);
    13ec:	60 91 3a 01 	lds	r22, 0x013A
    13f0:	84 e0       	ldi	r24, 0x04	; 4
    13f2:	0e 94 a8 04 	call	0x950
	if (DEBUG)
	{	printf("Camera Tilt Servo Set: %d", camTiltServoPos);
    13f6:	80 91 3a 01 	lds	r24, 0x013A
    13fa:	90 91 3b 01 	lds	r25, 0x013B
    13fe:	9f 93       	push	r25
    1400:	8f 93       	push	r24
    1402:	83 ec       	ldi	r24, 0xC3	; 195
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9f 93       	push	r25
    1408:	8f 93       	push	r24
    140a:	0e 94 e7 0b 	call	0x17ce
		putchar('\r');
    140e:	60 91 b5 06 	lds	r22, 0x06B5
    1412:	70 91 b6 06 	lds	r23, 0x06B6
    1416:	8d e0       	ldi	r24, 0x0D	; 13
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 ac 0b 	call	0x1758
		putchar('\n');
    141e:	60 91 b5 06 	lds	r22, 0x06B5
    1422:	70 91 b6 06 	lds	r23, 0x06B6
    1426:	8a e0       	ldi	r24, 0x0A	; 10
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 ac 0b 	call	0x1758
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	08 95       	ret

00001438 <InitSerial0>:
    1438:	89 b9       	out	0x09, r24	; 9
    143a:	89 2f       	mov	r24, r25
    143c:	99 27       	eor	r25, r25
    143e:	80 bd       	out	0x20, r24	; 32
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	8b b9       	out	0x0b, r24	; 11
    1444:	88 e9       	ldi	r24, 0x98	; 152
    1446:	8a b9       	out	0x0a, r24	; 10
    1448:	86 e8       	ldi	r24, 0x86	; 134
    144a:	80 bd       	out	0x20, r24	; 32
    144c:	8a e3       	ldi	r24, 0x3A	; 58
    144e:	96 e0       	ldi	r25, 0x06	; 6
    1450:	0e 94 cc 0a 	call	0x1598
    1454:	84 e6       	ldi	r24, 0x64	; 100
    1456:	80 93 40 06 	sts	0x0640, r24
    145a:	83 e1       	ldi	r24, 0x13	; 19
    145c:	96 e0       	ldi	r25, 0x06	; 6
    145e:	0e 94 cc 0a 	call	0x1598
    1462:	80 e2       	ldi	r24, 0x20	; 32
    1464:	80 93 19 06 	sts	0x0619, r24
    1468:	08 95       	ret

0000146a <put_c0>:
    146a:	68 2f       	mov	r22, r24
    146c:	83 e1       	ldi	r24, 0x13	; 19
    146e:	96 e0       	ldi	r25, 0x06	; 6
    1470:	0e 94 69 0a 	call	0x14d2
    1474:	55 9a       	sbi	0x0a, 5	; 10
    1476:	08 95       	ret

00001478 <put_char0>:
    1478:	68 2f       	mov	r22, r24
    147a:	83 e1       	ldi	r24, 0x13	; 19
    147c:	96 e0       	ldi	r25, 0x06	; 6
    147e:	0e 94 a6 0a 	call	0x154c
    1482:	55 9a       	sbi	0x0a, 5	; 10
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	08 95       	ret

0000148a <get_c0>:
    148a:	8a e3       	ldi	r24, 0x3A	; 58
    148c:	96 e0       	ldi	r25, 0x06	; 6
    148e:	0e 94 85 0a 	call	0x150a
    1492:	08 95       	ret

00001494 <get_char0>:
    1494:	8a e3       	ldi	r24, 0x3A	; 58
    1496:	96 e0       	ldi	r25, 0x06	; 6
    1498:	0e 94 bb 0a 	call	0x1576
    149c:	08 95       	ret

0000149e <__vector_13>:
    149e:	0e 94 38 10 	call	0x2070
    14a2:	57 98       	cbi	0x0a, 7	; 10
    14a4:	78 94       	sei
    14a6:	6c b1       	in	r22, 0x0c	; 12
    14a8:	8a e3       	ldi	r24, 0x3A	; 58
    14aa:	96 e0       	ldi	r25, 0x06	; 6
    14ac:	0e 94 69 0a 	call	0x14d2
    14b0:	57 9a       	sbi	0x0a, 7	; 10
    14b2:	0e 94 84 10 	call	0x2108

000014b6 <__vector_14>:
    14b6:	0e 94 38 10 	call	0x2070
    14ba:	55 98       	cbi	0x0a, 5	; 10
    14bc:	78 94       	sei
    14be:	83 e1       	ldi	r24, 0x13	; 19
    14c0:	96 e0       	ldi	r25, 0x06	; 6
    14c2:	0e 94 85 0a 	call	0x150a
    14c6:	97 fd       	sbrc	r25, 7
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce
    14ca:	8c b9       	out	0x0c, r24	; 12
    14cc:	55 9a       	sbi	0x0a, 5	; 10
    14ce:	0e 94 84 10 	call	0x2108

000014d2 <AvrXPutFifo>:
    14d2:	dc 01       	movw	r26, r24
    14d4:	fc 01       	movw	r30, r24
    14d6:	24 81       	ldd	r18, Z+4	; 0x04
    14d8:	92 2f       	mov	r25, r18
    14da:	9f 5f       	subi	r25, 0xFF	; 255
    14dc:	86 81       	ldd	r24, Z+6	; 0x06
    14de:	98 17       	cp	r25, r24
    14e0:	08 f0       	brcs	.+2      	; 0x14e4
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	fd 01       	movw	r30, r26
    14e6:	85 81       	ldd	r24, Z+5	; 0x05
    14e8:	98 17       	cp	r25, r24
    14ea:	19 f4       	brne	.+6      	; 0x14f2
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	9f ef       	ldi	r25, 0xFF	; 255
    14f0:	08 95       	ret
    14f2:	fd 01       	movw	r30, r26
    14f4:	e2 0f       	add	r30, r18
    14f6:	f1 1d       	adc	r31, r1
    14f8:	67 83       	std	Z+7, r22	; 0x07
    14fa:	fd 01       	movw	r30, r26
    14fc:	94 83       	std	Z+4, r25	; 0x04
    14fe:	cd 01       	movw	r24, r26
    1500:	0e 94 3b 11 	call	0x2276
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	08 95       	ret

0000150a <AvrXPullFifo>:
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	dc 01       	movw	r26, r24
    1510:	fc 01       	movw	r30, r24
    1512:	84 81       	ldd	r24, Z+4	; 0x04
    1514:	95 81       	ldd	r25, Z+5	; 0x05
    1516:	89 17       	cp	r24, r25
    1518:	19 f4       	brne	.+6      	; 0x1520
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	13 c0       	rjmp	.+38     	; 0x1546
    1520:	fd 01       	movw	r30, r26
    1522:	e9 0f       	add	r30, r25
    1524:	f1 1d       	adc	r31, r1
    1526:	87 81       	ldd	r24, Z+7	; 0x07
    1528:	c8 2f       	mov	r28, r24
    152a:	dd 27       	eor	r29, r29
    152c:	9f 5f       	subi	r25, 0xFF	; 255
    152e:	fd 01       	movw	r30, r26
    1530:	86 81       	ldd	r24, Z+6	; 0x06
    1532:	98 17       	cp	r25, r24
    1534:	08 f0       	brcs	.+2      	; 0x1538
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	fd 01       	movw	r30, r26
    153a:	95 83       	std	Z+5, r25	; 0x05
    153c:	cd 01       	movw	r24, r26
    153e:	02 96       	adiw	r24, 0x02	; 2
    1540:	0e 94 3b 11 	call	0x2276
    1544:	ce 01       	movw	r24, r28
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <AvrXWaitPutFifo>:
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ec 01       	movw	r28, r24
    1554:	16 2f       	mov	r17, r22
    1556:	04 c0       	rjmp	.+8      	; 0x1560
    1558:	ce 01       	movw	r24, r28
    155a:	02 96       	adiw	r24, 0x02	; 2
    155c:	0e 94 24 11 	call	0x2248
    1560:	61 2f       	mov	r22, r17
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 69 0a 	call	0x14d2
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	a9 f3       	breq	.-22     	; 0x1558
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	08 95       	ret

00001576 <AvrXWaitPullFifo>:
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
    157c:	03 c0       	rjmp	.+6      	; 0x1584
    157e:	ce 01       	movw	r24, r28
    1580:	0e 94 24 11 	call	0x2248
    1584:	ce 01       	movw	r24, r28
    1586:	0e 94 85 0a 	call	0x150a
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	8f 3f       	cpi	r24, 0xFF	; 255
    158e:	92 07       	cpc	r25, r18
    1590:	b1 f3       	breq	.-20     	; 0x157e
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <AvrXFlushFifo>:
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	8c 01       	movw	r16, r24
    159e:	fc 01       	movw	r30, r24
    15a0:	14 82       	std	Z+4, r1	; 0x04
    15a2:	15 82       	std	Z+5, r1	; 0x05
    15a4:	02 96       	adiw	r24, 0x02	; 2
    15a6:	0e 94 97 11 	call	0x232e
    15aa:	c8 01       	movw	r24, r16
    15ac:	0e 94 97 11 	call	0x232e
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <AvrXPeekFifo>:
    15b6:	fc 01       	movw	r30, r24
    15b8:	84 81       	ldd	r24, Z+4	; 0x04
    15ba:	95 81       	ldd	r25, Z+5	; 0x05
    15bc:	89 17       	cp	r24, r25
    15be:	19 f4       	brne	.+6      	; 0x15c6
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	9f ef       	ldi	r25, 0xFF	; 255
    15c4:	08 95       	ret
    15c6:	e9 0f       	add	r30, r25
    15c8:	f1 1d       	adc	r31, r1
    15ca:	87 81       	ldd	r24, Z+7	; 0x07
    15cc:	99 27       	eor	r25, r25
    15ce:	08 95       	ret

000015d0 <AvrXStatFifo>:
    15d0:	fc 01       	movw	r30, r24
    15d2:	8f b7       	in	r24, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	94 81       	ldd	r25, Z+4	; 0x04
    15d8:	29 2f       	mov	r18, r25
    15da:	33 27       	eor	r19, r19
    15dc:	95 81       	ldd	r25, Z+5	; 0x05
    15de:	29 1b       	sub	r18, r25
    15e0:	31 09       	sbc	r19, r1
    15e2:	8f bf       	out	0x3f, r24	; 63
    15e4:	37 ff       	sbrs	r19, 7
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	28 0f       	add	r18, r24
    15ec:	31 1d       	adc	r19, r1
    15ee:	c9 01       	movw	r24, r18
    15f0:	08 95       	ret

000015f2 <atoi>:
    15f2:	fc 01       	movw	r30, r24
    15f4:	88 27       	eor	r24, r24
    15f6:	99 27       	eor	r25, r25
    15f8:	e8 94       	clt

000015fa <.atoi_loop>:
    15fa:	21 91       	ld	r18, Z+
    15fc:	22 23       	and	r18, r18
    15fe:	f1 f0       	breq	.+60     	; 0x163c
    1600:	20 32       	cpi	r18, 0x20	; 32
    1602:	d9 f3       	breq	.-10     	; 0x15fa
    1604:	29 30       	cpi	r18, 0x09	; 9
    1606:	c9 f3       	breq	.-14     	; 0x15fa
    1608:	2a 30       	cpi	r18, 0x0A	; 10
    160a:	b9 f3       	breq	.-18     	; 0x15fa
    160c:	2c 30       	cpi	r18, 0x0C	; 12
    160e:	a9 f3       	breq	.-22     	; 0x15fa
    1610:	2d 30       	cpi	r18, 0x0D	; 13
    1612:	99 f3       	breq	.-26     	; 0x15fa
    1614:	26 37       	cpi	r18, 0x76	; 118
    1616:	89 f3       	breq	.-30     	; 0x15fa
    1618:	2b 32       	cpi	r18, 0x2B	; 43
    161a:	19 f0       	breq	.+6      	; 0x1622
    161c:	2d 32       	cpi	r18, 0x2D	; 45
    161e:	21 f4       	brne	.+8      	; 0x1628

00001620 <.atoi_neg>:
    1620:	68 94       	set

00001622 <.atoi_loop2>:
    1622:	21 91       	ld	r18, Z+
    1624:	22 23       	and	r18, r18
    1626:	51 f0       	breq	.+20     	; 0x163c

00001628 <.atoi_digit>:
    1628:	20 33       	cpi	r18, 0x30	; 48
    162a:	44 f0       	brlt	.+16     	; 0x163c
    162c:	2a 33       	cpi	r18, 0x3A	; 58
    162e:	34 f4       	brge	.+12     	; 0x163c
    1630:	20 53       	subi	r18, 0x30	; 48
    1632:	0e 94 df 0b 	call	0x17be
    1636:	82 0f       	add	r24, r18
    1638:	91 1d       	adc	r25, r1
    163a:	f3 cf       	rjmp	.-26     	; 0x1622

0000163c <.atoi_sig>:
    163c:	81 15       	cp	r24, r1
    163e:	91 05       	cpc	r25, r1
    1640:	21 f0       	breq	.+8      	; 0x164a
    1642:	1e f4       	brtc	.+6      	; 0x164a
    1644:	80 95       	com	r24
    1646:	90 95       	com	r25
    1648:	01 96       	adiw	r24, 0x01	; 1

0000164a <.atoi_done>:
    164a:	08 95       	ret

0000164c <fdevopen>:
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	8c 01       	movw	r16, r24
    1656:	eb 01       	movw	r28, r22
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	a1 f1       	breq	.+104    	; 0x16c4
    165c:	6c e0       	ldi	r22, 0x0C	; 12
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 e5 0e 	call	0x1dca
    1668:	fc 01       	movw	r30, r24
    166a:	89 2b       	or	r24, r25
    166c:	21 f1       	breq	.+72     	; 0x16b6
    166e:	20 97       	sbiw	r28, 0x00	; 0
    1670:	51 f0       	breq	.+20     	; 0x1686
    1672:	d3 87       	std	Z+11, r29	; 0x0b
    1674:	c2 87       	std	Z+10, r28	; 0x0a
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	23 83       	std	Z+3, r18	; 0x03
    167a:	80 91 b3 06 	lds	r24, 0x06B3
    167e:	90 91 b4 06 	lds	r25, 0x06B4
    1682:	89 2b       	or	r24, r25
    1684:	d1 f0       	breq	.+52     	; 0x16ba
    1686:	01 15       	cp	r16, r1
    1688:	11 05       	cpc	r17, r1
    168a:	a9 f0       	breq	.+42     	; 0x16b6
    168c:	11 87       	std	Z+9, r17	; 0x09
    168e:	00 87       	std	Z+8, r16	; 0x08
    1690:	03 81       	ldd	r16, Z+3	; 0x03
    1692:	02 60       	ori	r16, 0x02	; 2
    1694:	03 83       	std	Z+3, r16	; 0x03
    1696:	a0 91 b5 06 	lds	r26, 0x06B5
    169a:	b0 91 b6 06 	lds	r27, 0x06B6
    169e:	ab 2b       	or	r26, r27
    16a0:	51 f4       	brne	.+20     	; 0x16b6
    16a2:	f0 93 b6 06 	sts	0x06B6, r31
    16a6:	e0 93 b5 06 	sts	0x06B5, r30
    16aa:	c0 91 b7 06 	lds	r28, 0x06B7
    16ae:	d0 91 b8 06 	lds	r29, 0x06B8
    16b2:	cd 2b       	or	r28, r29
    16b4:	51 f0       	breq	.+20     	; 0x16ca
    16b6:	cf 01       	movw	r24, r30
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4
    16ba:	f0 93 b4 06 	sts	0x06B4, r31
    16be:	e0 93 b3 06 	sts	0x06B3, r30
    16c2:	e1 cf       	rjmp	.-62     	; 0x1686
    16c4:	67 2b       	or	r22, r23
    16c6:	51 f6       	brne	.-108    	; 0x165c
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4
    16ca:	f0 93 b8 06 	sts	0x06B8, r31
    16ce:	e0 93 b7 06 	sts	0x06B7, r30
    16d2:	f1 cf       	rjmp	.-30     	; 0x16b6
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	08 95       	ret

000016de <fgetc>:
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	82 2f       	mov	r24, r18
    16e8:	99 27       	eor	r25, r25
    16ea:	80 ff       	sbrs	r24, 0
    16ec:	30 c0       	rjmp	.+96     	; 0x174e
    16ee:	86 fd       	sbrc	r24, 6
    16f0:	16 c0       	rjmp	.+44     	; 0x171e
    16f2:	82 ff       	sbrs	r24, 2
    16f4:	1d c0       	rjmp	.+58     	; 0x1730
    16f6:	e8 81       	ld	r30, Y
    16f8:	f9 81       	ldd	r31, Y+1	; 0x01
    16fa:	31 91       	ld	r19, Z+
    16fc:	43 2f       	mov	r20, r19
    16fe:	55 27       	eor	r21, r21
    1700:	47 fd       	sbrc	r20, 7
    1702:	50 95       	com	r21
    1704:	f9 83       	std	Y+1, r31	; 0x01
    1706:	e8 83       	st	Y, r30
    1708:	41 15       	cp	r20, r1
    170a:	51 05       	cpc	r21, r1
    170c:	f1 f0       	breq	.+60     	; 0x174a
    170e:	ae 81       	ldd	r26, Y+6	; 0x06
    1710:	bf 81       	ldd	r27, Y+7	; 0x07
    1712:	11 96       	adiw	r26, 0x01	; 1
    1714:	bf 83       	std	Y+7, r27	; 0x07
    1716:	ae 83       	std	Y+6, r26	; 0x06
    1718:	84 2f       	mov	r24, r20
    171a:	99 27       	eor	r25, r25
    171c:	1a c0       	rjmp	.+52     	; 0x1752
    171e:	2f 7b       	andi	r18, 0xBF	; 191
    1720:	2b 83       	std	Y+3, r18	; 0x03
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	9f 83       	std	Y+7, r25	; 0x07
    172a:	8e 83       	std	Y+6, r24	; 0x06
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	f5 cf       	rjmp	.-22     	; 0x171a
    1730:	ea 85       	ldd	r30, Y+10	; 0x0a
    1732:	fb 85       	ldd	r31, Y+11	; 0x0b
    1734:	09 95       	icall
    1736:	ac 01       	movw	r20, r24
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	4f 3f       	cpi	r20, 0xFF	; 255
    173c:	58 07       	cpc	r21, r24
    173e:	39 f7       	brne	.-50     	; 0x170e
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	20 61       	ori	r18, 0x10	; 16
    1744:	2b 83       	std	Y+3, r18	; 0x03
    1746:	ca 01       	movw	r24, r20
    1748:	04 c0       	rjmp	.+8      	; 0x1752
    174a:	20 62       	ori	r18, 0x20	; 32
    174c:	2b 83       	std	Y+3, r18	; 0x03
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <fputc>:
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	8c 01       	movw	r16, r24
    1762:	eb 01       	movw	r28, r22
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	99 27       	eor	r25, r25
    1768:	81 ff       	sbrs	r24, 1
    176a:	22 c0       	rjmp	.+68     	; 0x17b0
    176c:	82 ff       	sbrs	r24, 2
    176e:	14 c0       	rjmp	.+40     	; 0x1798
    1770:	2e 81       	ldd	r18, Y+6	; 0x06
    1772:	3f 81       	ldd	r19, Y+7	; 0x07
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	28 17       	cp	r18, r24
    177a:	39 07       	cpc	r19, r25
    177c:	3c f4       	brge	.+14     	; 0x178c
    177e:	e8 81       	ld	r30, Y
    1780:	f9 81       	ldd	r31, Y+1	; 0x01
    1782:	01 93       	st	Z+, r16
    1784:	f9 83       	std	Y+1, r31	; 0x01
    1786:	e8 83       	st	Y, r30
    1788:	2e 81       	ldd	r18, Y+6	; 0x06
    178a:	3f 81       	ldd	r19, Y+7	; 0x07
    178c:	2f 5f       	subi	r18, 0xFF	; 255
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	3f 83       	std	Y+7, r19	; 0x07
    1792:	2e 83       	std	Y+6, r18	; 0x06
    1794:	c8 01       	movw	r24, r16
    1796:	0e c0       	rjmp	.+28     	; 0x17b4
    1798:	e8 85       	ldd	r30, Y+8	; 0x08
    179a:	f9 85       	ldd	r31, Y+9	; 0x09
    179c:	80 2f       	mov	r24, r16
    179e:	09 95       	icall
    17a0:	89 2b       	or	r24, r25
    17a2:	31 f4       	brne	.+12     	; 0x17b0
    17a4:	ae 81       	ldd	r26, Y+6	; 0x06
    17a6:	bf 81       	ldd	r27, Y+7	; 0x07
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	bf 83       	std	Y+7, r27	; 0x07
    17ac:	ae 83       	std	Y+6, r26	; 0x06
    17ae:	f2 cf       	rjmp	.-28     	; 0x1794
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	9f ef       	ldi	r25, 0xFF	; 255
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <__mulhi_const_10>:
    17be:	7a e0       	ldi	r23, 0x0A	; 10
    17c0:	97 9f       	mul	r25, r23
    17c2:	90 2d       	mov	r25, r0
    17c4:	87 9f       	mul	r24, r23
    17c6:	80 2d       	mov	r24, r0
    17c8:	91 0d       	add	r25, r1
    17ca:	11 24       	eor	r1, r1
    17cc:	08 95       	ret

000017ce <printf>:
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	e5 e0       	ldi	r30, 0x05	; 5
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	ec 0f       	add	r30, r28
    17dc:	fd 1f       	adc	r31, r29
    17de:	81 91       	ld	r24, Z+
    17e0:	91 91       	ld	r25, Z+
    17e2:	af 01       	movw	r20, r30
    17e4:	bc 01       	movw	r22, r24
    17e6:	80 91 b5 06 	lds	r24, 0x06B5
    17ea:	90 91 b6 06 	lds	r25, 0x06B6
    17ee:	0e 94 28 0c 	call	0x1850
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <printf_P>:
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	45 e0       	ldi	r20, 0x05	; 5
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	4c 0f       	add	r20, r28
    1806:	5d 1f       	adc	r21, r29
    1808:	fa 01       	movw	r30, r20
    180a:	21 91       	ld	r18, Z+
    180c:	31 91       	ld	r19, Z+
    180e:	af 01       	movw	r20, r30
    1810:	a0 91 b5 06 	lds	r26, 0x06B5
    1814:	b0 91 b6 06 	lds	r27, 0x06B6
    1818:	fd 01       	movw	r30, r26
    181a:	83 81       	ldd	r24, Z+3	; 0x03
    181c:	88 60       	ori	r24, 0x08	; 8
    181e:	83 83       	std	Z+3, r24	; 0x03
    1820:	b9 01       	movw	r22, r18
    1822:	80 91 b5 06 	lds	r24, 0x06B5
    1826:	90 91 b6 06 	lds	r25, 0x06B6
    182a:	0e 94 28 0c 	call	0x1850
    182e:	e0 91 b5 06 	lds	r30, 0x06B5
    1832:	f0 91 b6 06 	lds	r31, 0x06B6
    1836:	23 81       	ldd	r18, Z+3	; 0x03
    1838:	27 7f       	andi	r18, 0xF7	; 247
    183a:	23 83       	std	Z+3, r18	; 0x03
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <strcpy>:
    1842:	fb 01       	movw	r30, r22
    1844:	dc 01       	movw	r26, r24

00001846 <.strcpy_loop>:
    1846:	01 90       	ld	r0, Z+
    1848:	0d 92       	st	X+, r0
    184a:	00 20       	and	r0, r0
    184c:	e1 f7       	brne	.-8      	; 0x1846
    184e:	08 95       	ret

00001850 <vfprintf>:
    1850:	2f 92       	push	r2
    1852:	3f 92       	push	r3
    1854:	4f 92       	push	r4
    1856:	5f 92       	push	r5
    1858:	6f 92       	push	r6
    185a:	7f 92       	push	r7
    185c:	8f 92       	push	r8
    185e:	9f 92       	push	r9
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	62 97       	sbiw	r28, 0x12	; 18
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	ee 24       	eor	r14, r14
    1886:	ff 24       	eor	r15, r15
    1888:	87 01       	movw	r16, r14
    188a:	1c 01       	movw	r2, r24
    188c:	7e 87       	std	Y+14, r23	; 0x0e
    188e:	6d 87       	std	Y+13, r22	; 0x0d
    1890:	2a 01       	movw	r4, r20
    1892:	cc 24       	eor	r12, r12
    1894:	dd 24       	eor	r13, r13
    1896:	fc 01       	movw	r30, r24
    1898:	d7 82       	std	Z+7, r13	; 0x07
    189a:	c6 82       	std	Z+6, r12	; 0x06
    189c:	83 81       	ldd	r24, Z+3	; 0x03
    189e:	81 fd       	sbrc	r24, 1
    18a0:	68 c2       	rjmp	.+1232   	; 0x1d72
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
    18a6:	78 c2       	rjmp	.+1264   	; 0x1d98
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	9e 87       	std	Y+14, r25	; 0x0e
    18b0:	8d 87       	std	Y+13, r24	; 0x0d
    18b2:	c0 fe       	sbrs	r12, 0
    18b4:	4b c2       	rjmp	.+1174   	; 0x1d4c
    18b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b8:	80 53       	subi	r24, 0x30	; 48
    18ba:	8a 30       	cpi	r24, 0x0A	; 10
    18bc:	d0 f4       	brcc	.+52     	; 0x18f2
    18be:	9f 85       	ldd	r25, Y+15	; 0x0f
    18c0:	90 33       	cpi	r25, 0x30	; 48
    18c2:	39 f4       	brne	.+14     	; 0x18d2
    18c4:	66 20       	and	r6, r6
    18c6:	29 f4       	brne	.+10     	; 0x18d2
    18c8:	c3 fc       	sbrc	r12, 3
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2
    18cc:	e0 e0       	ldi	r30, 0x00	; 0
    18ce:	f1 e0       	ldi	r31, 0x01	; 1
    18d0:	8d c0       	rjmp	.+282    	; 0x19ec
    18d2:	8a e0       	ldi	r24, 0x0A	; 10
    18d4:	68 9e       	mul	r6, r24
    18d6:	60 2c       	mov	r6, r0
    18d8:	11 24       	eor	r1, r1
    18da:	ff 85       	ldd	r31, Y+15	; 0x0f
    18dc:	6f 0e       	add	r6, r31
    18de:	20 ed       	ldi	r18, 0xD0	; 208
    18e0:	62 0e       	add	r6, r18
    18e2:	67 fe       	sbrs	r6, 7
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea
    18e6:	5f e7       	ldi	r21, 0x7F	; 127
    18e8:	65 2e       	mov	r6, r21
    18ea:	c3 fc       	sbrc	r12, 3
    18ec:	42 c2       	rjmp	.+1156   	; 0x1d72
    18ee:	76 2c       	mov	r7, r6
    18f0:	40 c2       	rjmp	.+1152   	; 0x1d72
    18f2:	c3 fe       	sbrs	r12, 3
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe
    18f6:	66 20       	and	r6, r6
    18f8:	11 f4       	brne	.+4      	; 0x18fe
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	64 2e       	mov	r6, r20
    18fe:	ef 85       	ldd	r30, Y+15	; 0x0f
    1900:	8e 2f       	mov	r24, r30
    1902:	99 27       	eor	r25, r25
    1904:	87 fd       	sbrc	r24, 7
    1906:	90 95       	com	r25
    1908:	88 36       	cpi	r24, 0x68	; 104
    190a:	91 05       	cpc	r25, r1
    190c:	8c f5       	brge	.+98     	; 0x1970
    190e:	85 36       	cpi	r24, 0x65	; 101
    1910:	91 05       	cpc	r25, r1
    1912:	0c f0       	brlt	.+2      	; 0x1916
    1914:	6e c0       	rjmp	.+220    	; 0x19f2
    1916:	83 35       	cpi	r24, 0x53	; 83
    1918:	91 05       	cpc	r25, r1
    191a:	09 f4       	brne	.+2      	; 0x191e
    191c:	93 c0       	rjmp	.+294    	; 0x1a44
    191e:	84 35       	cpi	r24, 0x54	; 84
    1920:	91 05       	cpc	r25, r1
    1922:	cc f4       	brge	.+50     	; 0x1956
    1924:	8b 32       	cpi	r24, 0x2B	; 43
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c
    192a:	49 c0       	rjmp	.+146    	; 0x19be
    192c:	8c 32       	cpi	r24, 0x2C	; 44
    192e:	91 05       	cpc	r25, r1
    1930:	4c f4       	brge	.+18     	; 0x1944
    1932:	80 32       	cpi	r24, 0x20	; 32
    1934:	91 05       	cpc	r25, r1
    1936:	09 f4       	brne	.+2      	; 0x193a
    1938:	46 c0       	rjmp	.+140    	; 0x19c6
    193a:	83 32       	cpi	r24, 0x23	; 35
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942
    1940:	4a c0       	rjmp	.+148    	; 0x19d6
    1942:	fe c1       	rjmp	.+1020   	; 0x1d40
    1944:	8d 32       	cpi	r24, 0x2D	; 45
    1946:	91 05       	cpc	r25, r1
    1948:	09 f4       	brne	.+2      	; 0x194c
    194a:	40 c0       	rjmp	.+128    	; 0x19cc
    194c:	8e 32       	cpi	r24, 0x2E	; 46
    194e:	91 05       	cpc	r25, r1
    1950:	09 f4       	brne	.+2      	; 0x1954
    1952:	44 c0       	rjmp	.+136    	; 0x19dc
    1954:	f5 c1       	rjmp	.+1002   	; 0x1d40
    1956:	83 36       	cpi	r24, 0x63	; 99
    1958:	91 05       	cpc	r25, r1
    195a:	09 f4       	brne	.+2      	; 0x195e
    195c:	50 c0       	rjmp	.+160    	; 0x19fe
    195e:	84 36       	cpi	r24, 0x64	; 100
    1960:	91 05       	cpc	r25, r1
    1962:	0c f0       	brlt	.+2      	; 0x1966
    1964:	8a c0       	rjmp	.+276    	; 0x1a7a
    1966:	88 35       	cpi	r24, 0x58	; 88
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e
    196c:	bc c0       	rjmp	.+376    	; 0x1ae6
    196e:	e8 c1       	rjmp	.+976    	; 0x1d40
    1970:	80 37       	cpi	r24, 0x70	; 112
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978
    1976:	b1 c0       	rjmp	.+354    	; 0x1ada
    1978:	81 37       	cpi	r24, 0x71	; 113
    197a:	91 05       	cpc	r25, r1
    197c:	84 f4       	brge	.+32     	; 0x199e
    197e:	8c 36       	cpi	r24, 0x6C	; 108
    1980:	91 05       	cpc	r25, r1
    1982:	91 f1       	breq	.+100    	; 0x19e8
    1984:	8d 36       	cpi	r24, 0x6D	; 109
    1986:	91 05       	cpc	r25, r1
    1988:	2c f4       	brge	.+10     	; 0x1994
    198a:	89 36       	cpi	r24, 0x69	; 105
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992
    1990:	74 c0       	rjmp	.+232    	; 0x1a7a
    1992:	d6 c1       	rjmp	.+940    	; 0x1d40
    1994:	8f 36       	cpi	r24, 0x6F	; 111
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c
    199a:	9c c0       	rjmp	.+312    	; 0x1ad4
    199c:	d1 c1       	rjmp	.+930    	; 0x1d40
    199e:	85 37       	cpi	r24, 0x75	; 117
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6
    19a4:	a2 c0       	rjmp	.+324    	; 0x1aea
    19a6:	86 37       	cpi	r24, 0x76	; 118
    19a8:	91 05       	cpc	r25, r1
    19aa:	24 f4       	brge	.+8      	; 0x19b4
    19ac:	83 37       	cpi	r24, 0x73	; 115
    19ae:	91 05       	cpc	r25, r1
    19b0:	71 f1       	breq	.+92     	; 0x1a0e
    19b2:	c6 c1       	rjmp	.+908    	; 0x1d40
    19b4:	88 37       	cpi	r24, 0x78	; 120
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc
    19ba:	95 c0       	rjmp	.+298    	; 0x1ae6
    19bc:	c1 c1       	rjmp	.+898    	; 0x1d40
    19be:	80 e1       	ldi	r24, 0x10	; 16
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	c8 2a       	or	r12, r24
    19c4:	d9 2a       	or	r13, r25
    19c6:	e0 e2       	ldi	r30, 0x20	; 32
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	10 c0       	rjmp	.+32     	; 0x19ec
    19cc:	80 e8       	ldi	r24, 0x80	; 128
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	c8 2a       	or	r12, r24
    19d2:	d9 2a       	or	r13, r25
    19d4:	ce c1       	rjmp	.+924    	; 0x1d72
    19d6:	e0 e4       	ldi	r30, 0x40	; 64
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	08 c0       	rjmp	.+16     	; 0x19ec
    19dc:	88 e0       	ldi	r24, 0x08	; 8
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	c8 2a       	or	r12, r24
    19e2:	d9 2a       	or	r13, r25
    19e4:	66 24       	eor	r6, r6
    19e6:	c5 c1       	rjmp	.+906    	; 0x1d72
    19e8:	e4 e0       	ldi	r30, 0x04	; 4
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	ce 2a       	or	r12, r30
    19ee:	df 2a       	or	r13, r31
    19f0:	c0 c1       	rjmp	.+896    	; 0x1d72
    19f2:	3f e3       	ldi	r19, 0x3F	; 63
    19f4:	e3 2e       	mov	r14, r19
    19f6:	7a 94       	dec	r7
    19f8:	f3 e6       	ldi	r31, 0x63	; 99
    19fa:	ff 87       	std	Y+15, r31	; 0x0f
    19fc:	3c c1       	rjmp	.+632    	; 0x1c76
    19fe:	f2 01       	movw	r30, r4
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	48 0e       	add	r4, r24
    1a06:	59 1e       	adc	r5, r25
    1a08:	e0 80       	ld	r14, Z
    1a0a:	7a 94       	dec	r7
    1a0c:	34 c1       	rjmp	.+616    	; 0x1c76
    1a0e:	f2 01       	movw	r30, r4
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	48 0e       	add	r4, r24
    1a16:	59 1e       	adc	r5, r25
    1a18:	a0 81       	ld	r26, Z
    1a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a1c:	7d 01       	movw	r14, r26
    1a1e:	c3 fe       	sbrs	r12, 3
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34
    1a22:	86 2d       	mov	r24, r6
    1a24:	99 27       	eor	r25, r25
    1a26:	87 fd       	sbrc	r24, 7
    1a28:	90 95       	com	r25
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 22 10 	call	0x2044
    1a32:	1f c0       	rjmp	.+62     	; 0x1a72
    1a34:	fd 01       	movw	r30, r26
    1a36:	01 90       	ld	r0, Z+
    1a38:	00 20       	and	r0, r0
    1a3a:	e9 f7       	brne	.-6      	; 0x1a36
    1a3c:	31 97       	sbiw	r30, 0x01	; 1
    1a3e:	ea 1b       	sub	r30, r26
    1a40:	e8 8b       	std	Y+16, r30	; 0x10
    1a42:	18 c0       	rjmp	.+48     	; 0x1a74
    1a44:	f2 01       	movw	r30, r4
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	48 0e       	add	r4, r24
    1a4c:	59 1e       	adc	r5, r25
    1a4e:	01 90       	ld	r0, Z+
    1a50:	f0 81       	ld	r31, Z
    1a52:	e0 2d       	mov	r30, r0
    1a54:	7f 01       	movw	r14, r30
    1a56:	c3 fe       	sbrs	r12, 3
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c
    1a5a:	86 2d       	mov	r24, r6
    1a5c:	99 27       	eor	r25, r25
    1a5e:	87 fd       	sbrc	r24, 7
    1a60:	90 95       	com	r25
    1a62:	bc 01       	movw	r22, r24
    1a64:	cf 01       	movw	r24, r30
    1a66:	0e 94 2d 10 	call	0x205a
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72
    1a6c:	cf 01       	movw	r24, r30
    1a6e:	0e 94 19 10 	call	0x2032
    1a72:	88 8b       	std	Y+16, r24	; 0x10
    1a74:	98 89       	ldd	r25, Y+16	; 0x10
    1a76:	79 1a       	sub	r7, r25
    1a78:	fe c0       	rjmp	.+508    	; 0x1c76
    1a7a:	c2 fe       	sbrs	r12, 2
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92
    1a7e:	f2 01       	movw	r30, r4
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	48 0e       	add	r4, r24
    1a86:	59 1e       	adc	r5, r25
    1a88:	20 81       	ld	r18, Z
    1a8a:	31 81       	ldd	r19, Z+1	; 0x01
    1a8c:	42 81       	ldd	r20, Z+2	; 0x02
    1a8e:	53 81       	ldd	r21, Z+3	; 0x03
    1a90:	0c c0       	rjmp	.+24     	; 0x1aaa
    1a92:	f2 01       	movw	r30, r4
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	48 0e       	add	r4, r24
    1a9a:	59 1e       	adc	r5, r25
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	9c 01       	movw	r18, r24
    1aa2:	44 27       	eor	r20, r20
    1aa4:	37 fd       	sbrc	r19, 7
    1aa6:	40 95       	com	r20
    1aa8:	54 2f       	mov	r21, r20
    1aaa:	79 01       	movw	r14, r18
    1aac:	8a 01       	movw	r16, r20
    1aae:	57 ff       	sbrs	r21, 7
    1ab0:	0c c0       	rjmp	.+24     	; 0x1aca
    1ab2:	e2 e0       	ldi	r30, 0x02	; 2
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	ce 2a       	or	r12, r30
    1ab8:	df 2a       	or	r13, r31
    1aba:	10 95       	com	r17
    1abc:	00 95       	com	r16
    1abe:	f0 94       	com	r15
    1ac0:	e0 94       	com	r14
    1ac2:	e1 1c       	adc	r14, r1
    1ac4:	f1 1c       	adc	r15, r1
    1ac6:	01 1d       	adc	r16, r1
    1ac8:	11 1d       	adc	r17, r1
    1aca:	8f eb       	ldi	r24, 0xBF	; 191
    1acc:	9f ef       	ldi	r25, 0xFF	; 255
    1ace:	c8 22       	and	r12, r24
    1ad0:	d9 22       	and	r13, r25
    1ad2:	27 c0       	rjmp	.+78     	; 0x1b22
    1ad4:	98 e0       	ldi	r25, 0x08	; 8
    1ad6:	98 8b       	std	Y+16, r25	; 0x10
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea
    1ada:	e0 e4       	ldi	r30, 0x40	; 64
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	ce 2a       	or	r12, r30
    1ae0:	df 2a       	or	r13, r31
    1ae2:	f8 e7       	ldi	r31, 0x78	; 120
    1ae4:	ff 87       	std	Y+15, r31	; 0x0f
    1ae6:	20 e1       	ldi	r18, 0x10	; 16
    1ae8:	28 8b       	std	Y+16, r18	; 0x10
    1aea:	c2 fe       	sbrs	r12, 2
    1aec:	0a c0       	rjmp	.+20     	; 0x1b02
    1aee:	f2 01       	movw	r30, r4
    1af0:	84 e0       	ldi	r24, 0x04	; 4
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	48 0e       	add	r4, r24
    1af6:	59 1e       	adc	r5, r25
    1af8:	20 81       	ld	r18, Z
    1afa:	31 81       	ldd	r19, Z+1	; 0x01
    1afc:	42 81       	ldd	r20, Z+2	; 0x02
    1afe:	53 81       	ldd	r21, Z+3	; 0x03
    1b00:	0a c0       	rjmp	.+20     	; 0x1b16
    1b02:	f2 01       	movw	r30, r4
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	48 0e       	add	r4, r24
    1b0a:	59 1e       	adc	r5, r25
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	9c 01       	movw	r18, r24
    1b12:	44 27       	eor	r20, r20
    1b14:	55 27       	eor	r21, r21
    1b16:	79 01       	movw	r14, r18
    1b18:	8a 01       	movw	r16, r20
    1b1a:	ef ec       	ldi	r30, 0xCF	; 207
    1b1c:	ff ef       	ldi	r31, 0xFF	; 255
    1b1e:	ce 22       	and	r12, r30
    1b20:	df 22       	and	r13, r31
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	9a 8b       	std	Y+18, r25	; 0x12
    1b28:	89 8b       	std	Y+17, r24	; 0x11
    1b2a:	98 89       	ldd	r25, Y+16	; 0x10
    1b2c:	89 2e       	mov	r8, r25
    1b2e:	99 24       	eor	r9, r9
    1b30:	aa 24       	eor	r10, r10
    1b32:	bb 24       	eor	r11, r11
    1b34:	c8 01       	movw	r24, r16
    1b36:	b7 01       	movw	r22, r14
    1b38:	a5 01       	movw	r20, r10
    1b3a:	94 01       	movw	r18, r8
    1b3c:	0e 94 73 12 	call	0x24e6
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	e9 89       	ldd	r30, Y+17	; 0x11
    1b46:	fa 89       	ldd	r31, Y+18	; 0x12
    1b48:	80 83       	st	Z, r24
    1b4a:	8a 30       	cpi	r24, 0x0A	; 10
    1b4c:	24 f0       	brlt	.+8      	; 0x1b56
    1b4e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b50:	8f 0f       	add	r24, r31
    1b52:	81 52       	subi	r24, 0x21	; 33
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58
    1b56:	80 5d       	subi	r24, 0xD0	; 208
    1b58:	e9 89       	ldd	r30, Y+17	; 0x11
    1b5a:	fa 89       	ldd	r31, Y+18	; 0x12
    1b5c:	81 93       	st	Z+, r24
    1b5e:	fa 8b       	std	Y+18, r31	; 0x12
    1b60:	e9 8b       	std	Y+17, r30	; 0x11
    1b62:	c8 01       	movw	r24, r16
    1b64:	b7 01       	movw	r22, r14
    1b66:	a5 01       	movw	r20, r10
    1b68:	94 01       	movw	r18, r8
    1b6a:	0e 94 73 12 	call	0x24e6
    1b6e:	79 01       	movw	r14, r18
    1b70:	8a 01       	movw	r16, r20
    1b72:	21 15       	cp	r18, r1
    1b74:	31 05       	cpc	r19, r1
    1b76:	41 05       	cpc	r20, r1
    1b78:	51 05       	cpc	r21, r1
    1b7a:	e1 f6       	brne	.-72     	; 0x1b34
    1b7c:	e9 88       	ldd	r14, Y+17	; 0x11
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8c 0f       	add	r24, r28
    1b84:	9d 1f       	adc	r25, r29
    1b86:	e8 1a       	sub	r14, r24
    1b88:	c6 01       	movw	r24, r12
    1b8a:	82 73       	andi	r24, 0x32	; 50
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	89 2b       	or	r24, r25
    1b90:	09 f0       	breq	.+2      	; 0x1b94
    1b92:	7a 94       	dec	r7
    1b94:	c6 fe       	sbrs	r12, 6
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2
    1b98:	87 2d       	mov	r24, r7
    1b9a:	99 27       	eor	r25, r25
    1b9c:	87 fd       	sbrc	r24, 7
    1b9e:	90 95       	com	r25
    1ba0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ba2:	e0 31       	cpi	r30, 0x10	; 16
    1ba4:	21 f4       	brne	.+8      	; 0x1bae
    1ba6:	2e ef       	ldi	r18, 0xFE	; 254
    1ba8:	72 2e       	mov	r7, r18
    1baa:	78 0e       	add	r7, r24
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2
    1bae:	78 2e       	mov	r7, r24
    1bb0:	7a 94       	dec	r7
    1bb2:	c3 fe       	sbrs	r12, 3
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4
    1bb6:	26 2d       	mov	r18, r6
    1bb8:	33 27       	eor	r19, r19
    1bba:	27 fd       	sbrc	r18, 7
    1bbc:	30 95       	com	r19
    1bbe:	8e 2d       	mov	r24, r14
    1bc0:	99 27       	eor	r25, r25
    1bc2:	82 17       	cp	r24, r18
    1bc4:	93 07       	cpc	r25, r19
    1bc6:	2c f0       	brlt	.+10     	; 0x1bd2
    1bc8:	87 ef       	ldi	r24, 0xF7	; 247
    1bca:	9f ef       	ldi	r25, 0xFF	; 255
    1bcc:	c8 22       	and	r12, r24
    1bce:	d9 22       	and	r13, r25
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4
    1bd2:	6e 18       	sub	r6, r14
    1bd4:	c3 fe       	sbrs	r12, 3
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc
    1bd8:	76 18       	sub	r7, r6
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde
    1bdc:	7e 18       	sub	r7, r14
    1bde:	c6 01       	movw	r24, r12
    1be0:	80 78       	andi	r24, 0x80	; 128
    1be2:	91 70       	andi	r25, 0x01	; 1
    1be4:	89 2b       	or	r24, r25
    1be6:	51 f4       	brne	.+20     	; 0x1bfc
    1be8:	87 2d       	mov	r24, r7
    1bea:	7a 94       	dec	r7
    1bec:	18 16       	cp	r1, r24
    1bee:	34 f4       	brge	.+12     	; 0x1bfc
    1bf0:	b1 01       	movw	r22, r2
    1bf2:	80 e2       	ldi	r24, 0x20	; 32
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 ac 0b 	call	0x1758
    1bfa:	f6 cf       	rjmp	.-20     	; 0x1be8
    1bfc:	c1 fe       	sbrs	r12, 1
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08
    1c00:	b1 01       	movw	r22, r2
    1c02:	8d e2       	ldi	r24, 0x2D	; 45
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0b c0       	rjmp	.+22     	; 0x1c1e
    1c08:	c4 fe       	sbrs	r12, 4
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14
    1c0c:	b1 01       	movw	r22, r2
    1c0e:	8b e2       	ldi	r24, 0x2B	; 43
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e
    1c14:	c5 fe       	sbrs	r12, 5
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22
    1c18:	b1 01       	movw	r22, r2
    1c1a:	80 e2       	ldi	r24, 0x20	; 32
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 ac 0b 	call	0x1758
    1c22:	c6 fe       	sbrs	r12, 6
    1c24:	10 c0       	rjmp	.+32     	; 0x1c46
    1c26:	b1 01       	movw	r22, r2
    1c28:	80 e3       	ldi	r24, 0x30	; 48
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 ac 0b 	call	0x1758
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	90 31       	cpi	r25, 0x10	; 16
    1c34:	41 f4       	brne	.+16     	; 0x1c46
    1c36:	b1 01       	movw	r22, r2
    1c38:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c3a:	8e 2f       	mov	r24, r30
    1c3c:	99 27       	eor	r25, r25
    1c3e:	87 fd       	sbrc	r24, 7
    1c40:	90 95       	com	r25
    1c42:	0e 94 ac 0b 	call	0x1758
    1c46:	d0 fe       	sbrs	r13, 0
    1c48:	0a c0       	rjmp	.+20     	; 0x1c5e
    1c4a:	87 2d       	mov	r24, r7
    1c4c:	7a 94       	dec	r7
    1c4e:	18 16       	cp	r1, r24
    1c50:	34 f4       	brge	.+12     	; 0x1c5e
    1c52:	b1 01       	movw	r22, r2
    1c54:	80 e3       	ldi	r24, 0x30	; 48
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 ac 0b 	call	0x1758
    1c5c:	f6 cf       	rjmp	.-20     	; 0x1c4a
    1c5e:	c3 fe       	sbrs	r12, 3
    1c60:	0a c0       	rjmp	.+20     	; 0x1c76
    1c62:	86 2d       	mov	r24, r6
    1c64:	6a 94       	dec	r6
    1c66:	18 16       	cp	r1, r24
    1c68:	34 f4       	brge	.+12     	; 0x1c76
    1c6a:	b1 01       	movw	r22, r2
    1c6c:	80 e3       	ldi	r24, 0x30	; 48
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 ac 0b 	call	0x1758
    1c74:	f6 cf       	rjmp	.-20     	; 0x1c62
    1c76:	90 e8       	ldi	r25, 0x80	; 128
    1c78:	b9 2e       	mov	r11, r25
    1c7a:	bc 20       	and	r11, r12
    1c7c:	51 f4       	brne	.+20     	; 0x1c92
    1c7e:	87 2d       	mov	r24, r7
    1c80:	7a 94       	dec	r7
    1c82:	18 16       	cp	r1, r24
    1c84:	34 f4       	brge	.+12     	; 0x1c92
    1c86:	b1 01       	movw	r22, r2
    1c88:	80 e2       	ldi	r24, 0x20	; 32
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 ac 0b 	call	0x1758
    1c90:	f6 cf       	rjmp	.-20     	; 0x1c7e
    1c92:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c94:	f3 36       	cpi	r31, 0x63	; 99
    1c96:	41 f4       	brne	.+16     	; 0x1ca8
    1c98:	8e 2d       	mov	r24, r14
    1c9a:	b1 01       	movw	r22, r2
    1c9c:	99 27       	eor	r25, r25
    1c9e:	87 fd       	sbrc	r24, 7
    1ca0:	90 95       	com	r25
    1ca2:	0e 94 ac 0b 	call	0x1758
    1ca6:	40 c0       	rjmp	.+128    	; 0x1d28
    1ca8:	2f 85       	ldd	r18, Y+15	; 0x0f
    1caa:	23 37       	cpi	r18, 0x73	; 115
    1cac:	b1 f4       	brne	.+44     	; 0x1cda
    1cae:	88 89       	ldd	r24, Y+16	; 0x10
    1cb0:	81 50       	subi	r24, 0x01	; 1
    1cb2:	88 8b       	std	Y+16, r24	; 0x10
    1cb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb6:	c1 f1       	breq	.+112    	; 0x1d28
    1cb8:	f7 01       	movw	r30, r14
    1cba:	80 81       	ld	r24, Z
    1cbc:	08 94       	sec
    1cbe:	e1 1c       	adc	r14, r1
    1cc0:	f1 1c       	adc	r15, r1
    1cc2:	b1 01       	movw	r22, r2
    1cc4:	99 27       	eor	r25, r25
    1cc6:	87 fd       	sbrc	r24, 7
    1cc8:	90 95       	com	r25
    1cca:	0e 94 ac 0b 	call	0x1758
    1cce:	98 89       	ldd	r25, Y+16	; 0x10
    1cd0:	91 50       	subi	r25, 0x01	; 1
    1cd2:	98 8b       	std	Y+16, r25	; 0x10
    1cd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cd6:	81 f7       	brne	.-32     	; 0x1cb8
    1cd8:	27 c0       	rjmp	.+78     	; 0x1d28
    1cda:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cdc:	e3 35       	cpi	r30, 0x53	; 83
    1cde:	79 f4       	brne	.+30     	; 0x1cfe
    1ce0:	f8 89       	ldd	r31, Y+16	; 0x10
    1ce2:	f1 50       	subi	r31, 0x01	; 1
    1ce4:	f8 8b       	std	Y+16, r31	; 0x10
    1ce6:	ff 3f       	cpi	r31, 0xFF	; 255
    1ce8:	f9 f0       	breq	.+62     	; 0x1d28
    1cea:	f7 01       	movw	r30, r14
    1cec:	84 91       	lpm	r24, Z
    1cee:	b1 01       	movw	r22, r2
    1cf0:	99 27       	eor	r25, r25
    1cf2:	0e 94 ac 0b 	call	0x1758
    1cf6:	08 94       	sec
    1cf8:	e1 1c       	adc	r14, r1
    1cfa:	f1 1c       	adc	r15, r1
    1cfc:	f1 cf       	rjmp	.-30     	; 0x1ce0
    1cfe:	6e 01       	movw	r12, r28
    1d00:	08 94       	sec
    1d02:	c1 1c       	adc	r12, r1
    1d04:	d1 1c       	adc	r13, r1
    1d06:	89 89       	ldd	r24, Y+17	; 0x11
    1d08:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0a:	8c 15       	cp	r24, r12
    1d0c:	9d 05       	cpc	r25, r13
    1d0e:	61 f0       	breq	.+24     	; 0x1d28
    1d10:	e9 89       	ldd	r30, Y+17	; 0x11
    1d12:	fa 89       	ldd	r31, Y+18	; 0x12
    1d14:	82 91       	ld	r24, -Z
    1d16:	fa 8b       	std	Y+18, r31	; 0x12
    1d18:	e9 8b       	std	Y+17, r30	; 0x11
    1d1a:	b1 01       	movw	r22, r2
    1d1c:	99 27       	eor	r25, r25
    1d1e:	87 fd       	sbrc	r24, 7
    1d20:	90 95       	com	r25
    1d22:	0e 94 ac 0b 	call	0x1758
    1d26:	ef cf       	rjmp	.-34     	; 0x1d06
    1d28:	bb 20       	and	r11, r11
    1d2a:	69 f0       	breq	.+26     	; 0x1d46
    1d2c:	87 2d       	mov	r24, r7
    1d2e:	7a 94       	dec	r7
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f4       	brge	.+18     	; 0x1d46
    1d34:	b1 01       	movw	r22, r2
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 ac 0b 	call	0x1758
    1d3e:	f6 cf       	rjmp	.-20     	; 0x1d2c
    1d40:	b1 01       	movw	r22, r2
    1d42:	0e 94 ac 0b 	call	0x1758
    1d46:	cc 24       	eor	r12, r12
    1d48:	dd 24       	eor	r13, r13
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72
    1d4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d4e:	95 32       	cpi	r25, 0x25	; 37
    1d50:	41 f4       	brne	.+16     	; 0x1d62
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	c8 2e       	mov	r12, r24
    1d56:	d1 2c       	mov	r13, r1
    1d58:	66 24       	eor	r6, r6
    1d5a:	76 2c       	mov	r7, r6
    1d5c:	ea e0       	ldi	r30, 0x0A	; 10
    1d5e:	e8 8b       	std	Y+16, r30	; 0x10
    1d60:	08 c0       	rjmp	.+16     	; 0x1d72
    1d62:	b1 01       	movw	r22, r2
    1d64:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d66:	8f 2f       	mov	r24, r31
    1d68:	99 27       	eor	r25, r25
    1d6a:	87 fd       	sbrc	r24, 7
    1d6c:	90 95       	com	r25
    1d6e:	0e 94 ac 0b 	call	0x1758
    1d72:	f1 01       	movw	r30, r2
    1d74:	83 81       	ldd	r24, Z+3	; 0x03
    1d76:	83 ff       	sbrs	r24, 3
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82
    1d7a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d7c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d7e:	f4 91       	lpm	r31, Z
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88
    1d82:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d84:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d86:	f0 81       	ld	r31, Z
    1d88:	ff 87       	std	Y+15, r31	; 0x0f
    1d8a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d8c:	22 23       	and	r18, r18
    1d8e:	09 f0       	breq	.+2      	; 0x1d92
    1d90:	8b cd       	rjmp	.-1258   	; 0x18a8
    1d92:	f1 01       	movw	r30, r2
    1d94:	86 81       	ldd	r24, Z+6	; 0x06
    1d96:	97 81       	ldd	r25, Z+7	; 0x07
    1d98:	62 96       	adiw	r28, 0x12	; 18
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	7f 90       	pop	r7
    1dbe:	6f 90       	pop	r6
    1dc0:	5f 90       	pop	r5
    1dc2:	4f 90       	pop	r4
    1dc4:	3f 90       	pop	r3
    1dc6:	2f 90       	pop	r2
    1dc8:	08 95       	ret

00001dca <calloc>:
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	86 9f       	mul	r24, r22
    1dd4:	80 01       	movw	r16, r0
    1dd6:	87 9f       	mul	r24, r23
    1dd8:	10 0d       	add	r17, r0
    1dda:	96 9f       	mul	r25, r22
    1ddc:	10 0d       	add	r17, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	c8 01       	movw	r24, r16
    1de2:	0e 94 01 0f 	call	0x1e02
    1de6:	ec 01       	movw	r28, r24
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	29 f0       	breq	.+10     	; 0x1df6
    1dec:	a8 01       	movw	r20, r16
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	0e 94 12 10 	call	0x2024
    1df6:	ce 01       	movw	r24, r28
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <malloc>:
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	9c 01       	movw	r18, r24
    1e08:	02 97       	sbiw	r24, 0x02	; 2
    1e0a:	10 f4       	brcc	.+4      	; 0x1e10
    1e0c:	22 e0       	ldi	r18, 0x02	; 2
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	60 91 bb 06 	lds	r22, 0x06BB
    1e18:	70 91 bc 06 	lds	r23, 0x06BC
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	da 01       	movw	r26, r20
    1e20:	61 15       	cp	r22, r1
    1e22:	71 05       	cpc	r23, r1
    1e24:	69 f1       	breq	.+90     	; 0x1e80
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	82 17       	cp	r24, r18
    1e2c:	93 07       	cpc	r25, r19
    1e2e:	09 f4       	brne	.+2      	; 0x1e32
    1e30:	52 c0       	rjmp	.+164    	; 0x1ed6
    1e32:	28 17       	cp	r18, r24
    1e34:	39 07       	cpc	r19, r25
    1e36:	38 f4       	brcc	.+14     	; 0x1e46
    1e38:	41 15       	cp	r20, r1
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	19 f0       	breq	.+6      	; 0x1e44
    1e3e:	84 17       	cp	r24, r20
    1e40:	95 07       	cpc	r25, r21
    1e42:	08 f4       	brcc	.+2      	; 0x1e46
    1e44:	ac 01       	movw	r20, r24
    1e46:	df 01       	movw	r26, r30
    1e48:	02 80       	ldd	r0, Z+2	; 0x02
    1e4a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e4c:	e0 2d       	mov	r30, r0
    1e4e:	30 97       	sbiw	r30, 0x00	; 0
    1e50:	51 f7       	brne	.-44     	; 0x1e26
    1e52:	41 15       	cp	r20, r1
    1e54:	51 05       	cpc	r21, r1
    1e56:	a1 f0       	breq	.+40     	; 0x1e80
    1e58:	da 01       	movw	r26, r20
    1e5a:	a2 1b       	sub	r26, r18
    1e5c:	b3 0b       	sbc	r27, r19
    1e5e:	14 97       	sbiw	r26, 0x04	; 4
    1e60:	08 f4       	brcc	.+2      	; 0x1e64
    1e62:	43 c0       	rjmp	.+134    	; 0x1eea
    1e64:	db 01       	movw	r26, r22
    1e66:	0a c0       	rjmp	.+20     	; 0x1e7c
    1e68:	6d 91       	ld	r22, X+
    1e6a:	7c 91       	ld	r23, X
    1e6c:	11 97       	sbiw	r26, 0x01	; 1
    1e6e:	64 17       	cp	r22, r20
    1e70:	75 07       	cpc	r23, r21
    1e72:	09 f4       	brne	.+2      	; 0x1e76
    1e74:	50 c0       	rjmp	.+160    	; 0x1f16
    1e76:	fd 01       	movw	r30, r26
    1e78:	a2 81       	ldd	r26, Z+2	; 0x02
    1e7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1e7c:	10 97       	sbiw	r26, 0x00	; 0
    1e7e:	a1 f7       	brne	.-24     	; 0x1e68
    1e80:	e0 91 b9 06 	lds	r30, 0x06B9
    1e84:	f0 91 ba 06 	lds	r31, 0x06BA
    1e88:	30 97       	sbiw	r30, 0x00	; 0
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c
    1e8c:	e0 91 e3 00 	lds	r30, 0x00E3
    1e90:	f0 91 e4 00 	lds	r31, 0x00E4
    1e94:	f0 93 ba 06 	sts	0x06BA, r31
    1e98:	e0 93 b9 06 	sts	0x06B9, r30
    1e9c:	40 91 e1 00 	lds	r20, 0x00E1
    1ea0:	50 91 e2 00 	lds	r21, 0x00E2
    1ea4:	41 15       	cp	r20, r1
    1ea6:	51 05       	cpc	r21, r1
    1ea8:	29 f1       	breq	.+74     	; 0x1ef4
    1eaa:	4e 1b       	sub	r20, r30
    1eac:	5f 0b       	sbc	r21, r31
    1eae:	42 17       	cp	r20, r18
    1eb0:	53 07       	cpc	r21, r19
    1eb2:	e8 f0       	brcs	.+58     	; 0x1eee
    1eb4:	c9 01       	movw	r24, r18
    1eb6:	02 96       	adiw	r24, 0x02	; 2
    1eb8:	48 17       	cp	r20, r24
    1eba:	59 07       	cpc	r21, r25
    1ebc:	c0 f0       	brcs	.+48     	; 0x1eee
    1ebe:	ef 01       	movw	r28, r30
    1ec0:	c2 0f       	add	r28, r18
    1ec2:	d3 1f       	adc	r29, r19
    1ec4:	22 96       	adiw	r28, 0x02	; 2
    1ec6:	d0 93 ba 06 	sts	0x06BA, r29
    1eca:	c0 93 b9 06 	sts	0x06B9, r28
    1ece:	21 93       	st	Z+, r18
    1ed0:	31 93       	st	Z+, r19
    1ed2:	cf 01       	movw	r24, r30
    1ed4:	42 c0       	rjmp	.+132    	; 0x1f5a
    1ed6:	10 97       	sbiw	r26, 0x00	; 0
    1ed8:	b1 f0       	breq	.+44     	; 0x1f06
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	ed 01       	movw	r28, r26
    1ee0:	9b 83       	std	Y+3, r25	; 0x03
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
    1ee4:	cf 01       	movw	r24, r30
    1ee6:	02 96       	adiw	r24, 0x02	; 2
    1ee8:	38 c0       	rjmp	.+112    	; 0x1f5a
    1eea:	9a 01       	movw	r18, r20
    1eec:	bb cf       	rjmp	.-138    	; 0x1e64
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	33 c0       	rjmp	.+102    	; 0x1f5a
    1ef4:	4d b7       	in	r20, 0x3d	; 61
    1ef6:	5e b7       	in	r21, 0x3e	; 62
    1ef8:	a0 91 e5 00 	lds	r26, 0x00E5
    1efc:	b0 91 e6 00 	lds	r27, 0x00E6
    1f00:	4a 1b       	sub	r20, r26
    1f02:	5b 0b       	sbc	r21, r27
    1f04:	d2 cf       	rjmp	.-92     	; 0x1eaa
    1f06:	22 81       	ldd	r18, Z+2	; 0x02
    1f08:	33 81       	ldd	r19, Z+3	; 0x03
    1f0a:	30 93 bc 06 	sts	0x06BC, r19
    1f0e:	20 93 bb 06 	sts	0x06BB, r18
    1f12:	cf 01       	movw	r24, r30
    1f14:	e8 cf       	rjmp	.-48     	; 0x1ee6
    1f16:	24 17       	cp	r18, r20
    1f18:	35 07       	cpc	r19, r21
    1f1a:	61 f0       	breq	.+24     	; 0x1f34
    1f1c:	ea 01       	movw	r28, r20
    1f1e:	c2 1b       	sub	r28, r18
    1f20:	d3 0b       	sbc	r29, r19
    1f22:	fd 01       	movw	r30, r26
    1f24:	ec 0f       	add	r30, r28
    1f26:	fd 1f       	adc	r31, r29
    1f28:	21 93       	st	Z+, r18
    1f2a:	31 93       	st	Z+, r19
    1f2c:	22 97       	sbiw	r28, 0x02	; 2
    1f2e:	cd 93       	st	X+, r28
    1f30:	dc 93       	st	X, r29
    1f32:	cf cf       	rjmp	.-98     	; 0x1ed2
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	41 f0       	breq	.+16     	; 0x1f48
    1f38:	ed 01       	movw	r28, r26
    1f3a:	4a 81       	ldd	r20, Y+2	; 0x02
    1f3c:	5b 81       	ldd	r21, Y+3	; 0x03
    1f3e:	53 83       	std	Z+3, r21	; 0x03
    1f40:	42 83       	std	Z+2, r20	; 0x02
    1f42:	cd 01       	movw	r24, r26
    1f44:	02 96       	adiw	r24, 0x02	; 2
    1f46:	09 c0       	rjmp	.+18     	; 0x1f5a
    1f48:	fd 01       	movw	r30, r26
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	90 93 bc 06 	sts	0x06BC, r25
    1f52:	80 93 bb 06 	sts	0x06BB, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	f5 cf       	rjmp	.-22     	; 0x1f44
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	08 95       	ret

00001f60 <free>:
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	09 f4       	brne	.+2      	; 0x1f6a
    1f68:	5a c0       	rjmp	.+180    	; 0x201e
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	12 97       	sbiw	r26, 0x02	; 2
    1f6e:	ed 01       	movw	r28, r26
    1f70:	1b 82       	std	Y+3, r1	; 0x03
    1f72:	1a 82       	std	Y+2, r1	; 0x02
    1f74:	80 91 bb 06 	lds	r24, 0x06BB
    1f78:	90 91 bc 06 	lds	r25, 0x06BC
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	d9 f1       	breq	.+118    	; 0x1ff6
    1f80:	fc 01       	movw	r30, r24
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	ea 17       	cp	r30, r26
    1f88:	fb 07       	cpc	r31, r27
    1f8a:	48 f4       	brcc	.+18     	; 0x1f9e
    1f8c:	af 01       	movw	r20, r30
    1f8e:	02 80       	ldd	r0, Z+2	; 0x02
    1f90:	f3 81       	ldd	r31, Z+3	; 0x03
    1f92:	e0 2d       	mov	r30, r0
    1f94:	30 97       	sbiw	r30, 0x00	; 0
    1f96:	a1 f0       	breq	.+40     	; 0x1fc0
    1f98:	ea 17       	cp	r30, r26
    1f9a:	fb 07       	cpc	r31, r27
    1f9c:	b8 f3       	brcs	.-18     	; 0x1f8c
    1f9e:	ed 01       	movw	r28, r26
    1fa0:	fb 83       	std	Y+3, r31	; 0x03
    1fa2:	ea 83       	std	Y+2, r30	; 0x02
    1fa4:	2d 91       	ld	r18, X+
    1fa6:	3c 91       	ld	r19, X
    1fa8:	11 97       	sbiw	r26, 0x01	; 1
    1faa:	e9 01       	movw	r28, r18
    1fac:	ca 0f       	add	r28, r26
    1fae:	db 1f       	adc	r29, r27
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	02 96       	adiw	r24, 0x02	; 2
    1fb4:	8e 17       	cp	r24, r30
    1fb6:	9f 07       	cpc	r25, r31
    1fb8:	19 f1       	breq	.+70     	; 0x2000
    1fba:	41 15       	cp	r20, r1
    1fbc:	51 05       	cpc	r21, r1
    1fbe:	d9 f0       	breq	.+54     	; 0x1ff6
    1fc0:	ea 01       	movw	r28, r20
    1fc2:	bb 83       	std	Y+3, r27	; 0x03
    1fc4:	aa 83       	std	Y+2, r26	; 0x02
    1fc6:	ca 01       	movw	r24, r20
    1fc8:	02 96       	adiw	r24, 0x02	; 2
    1fca:	28 81       	ld	r18, Y
    1fcc:	39 81       	ldd	r19, Y+1	; 0x01
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	8a 17       	cp	r24, r26
    1fd4:	9b 07       	cpc	r25, r27
    1fd6:	19 f5       	brne	.+70     	; 0x201e
    1fd8:	6d 91       	ld	r22, X+
    1fda:	7c 91       	ld	r23, X
    1fdc:	11 97       	sbiw	r26, 0x01	; 1
    1fde:	26 0f       	add	r18, r22
    1fe0:	37 1f       	adc	r19, r23
    1fe2:	2e 5f       	subi	r18, 0xFE	; 254
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	39 83       	std	Y+1, r19	; 0x01
    1fe8:	28 83       	st	Y, r18
    1fea:	fd 01       	movw	r30, r26
    1fec:	42 81       	ldd	r20, Z+2	; 0x02
    1fee:	53 81       	ldd	r21, Z+3	; 0x03
    1ff0:	5b 83       	std	Y+3, r21	; 0x03
    1ff2:	4a 83       	std	Y+2, r20	; 0x02
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e
    1ff6:	b0 93 bc 06 	sts	0x06BC, r27
    1ffa:	a0 93 bb 06 	sts	0x06BB, r26
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e
    2000:	6a 81       	ldd	r22, Y+2	; 0x02
    2002:	7b 81       	ldd	r23, Y+3	; 0x03
    2004:	26 0f       	add	r18, r22
    2006:	37 1f       	adc	r19, r23
    2008:	2e 5f       	subi	r18, 0xFE	; 254
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	3c 93       	st	X, r19
    2010:	2e 93       	st	-X, r18
    2012:	22 81       	ldd	r18, Z+2	; 0x02
    2014:	33 81       	ldd	r19, Z+3	; 0x03
    2016:	fd 01       	movw	r30, r26
    2018:	33 83       	std	Z+3, r19	; 0x03
    201a:	22 83       	std	Z+2, r18	; 0x02
    201c:	ce cf       	rjmp	.-100    	; 0x1fba
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	08 95       	ret

00002024 <memset>:
    2024:	dc 01       	movw	r26, r24
    2026:	01 c0       	rjmp	.+2      	; 0x202a

00002028 <.memset_loop>:
    2028:	6d 93       	st	X+, r22

0000202a <.memset_start>:
    202a:	41 50       	subi	r20, 0x01	; 1
    202c:	50 40       	sbci	r21, 0x00	; 0
    202e:	e0 f7       	brcc	.-8      	; 0x2028
    2030:	08 95       	ret

00002032 <strlen_P>:
    2032:	fc 01       	movw	r30, r24

00002034 <.strlen_P_loop>:
    2034:	05 90       	lpm	r0, Z+
    2036:	00 20       	and	r0, r0
    2038:	e9 f7       	brne	.-6      	; 0x2034
    203a:	80 95       	com	r24
    203c:	90 95       	com	r25
    203e:	8e 0f       	add	r24, r30
    2040:	9f 1f       	adc	r25, r31
    2042:	08 95       	ret

00002044 <strnlen>:
    2044:	fc 01       	movw	r30, r24

00002046 <.strnlen_loop>:
    2046:	61 50       	subi	r22, 0x01	; 1
    2048:	70 40       	sbci	r23, 0x00	; 0
    204a:	01 90       	ld	r0, Z+
    204c:	01 10       	cpse	r0, r1
    204e:	d8 f7       	brcc	.-10     	; 0x2046
    2050:	80 95       	com	r24
    2052:	90 95       	com	r25
    2054:	8e 0f       	add	r24, r30
    2056:	9f 1f       	adc	r25, r31
    2058:	08 95       	ret

0000205a <strnlen_P>:
    205a:	fc 01       	movw	r30, r24
    205c:	61 50       	subi	r22, 0x01	; 1
    205e:	70 40       	sbci	r23, 0x00	; 0
    2060:	05 90       	lpm	r0, Z+
    2062:	01 10       	cpse	r0, r1
    2064:	d8 f7       	brcc	.-10     	; 0x205c
    2066:	80 95       	com	r24
    2068:	90 95       	com	r25
    206a:	8e 0f       	add	r24, r30
    206c:	9f 1f       	adc	r25, r31
    206e:	08 95       	ret

00002070 <IntProlog>:
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	bf 93       	push	r27
    2076:	af 93       	push	r26
    2078:	9f 93       	push	r25
    207a:	d6 e0       	ldi	r29, 0x06	; 6
    207c:	c8 ea       	ldi	r28, 0xA8	; 168
    207e:	9f b7       	in	r25, 0x3f	; 63
    2080:	ae 81       	ldd	r26, Y+6	; 0x06
    2082:	af 5f       	subi	r26, 0xFF	; 255
    2084:	ae 83       	std	Y+6, r26	; 0x06
    2086:	60 f0       	brcs	.+24     	; 0x20a0
    2088:	aa 81       	ldd	r26, Y+2	; 0x02
    208a:	bb 81       	ldd	r27, Y+3	; 0x03
    208c:	ba 2b       	or	r27, r26
    208e:	41 f4       	brne	.+16     	; 0x20a0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	fe 81       	ldd	r31, Y+6	; 0x06
    2096:	ef 81       	ldd	r30, Y+7	; 0x07
    2098:	29 96       	adiw	r28, 0x09	; 9
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	09 94       	ijmp

000020a0 <SaveContext>:
    20a0:	8f 93       	push	r24
    20a2:	7f 93       	push	r23
    20a4:	6f 93       	push	r22
    20a6:	5f 93       	push	r21
    20a8:	4f 93       	push	r20
    20aa:	3f 93       	push	r19
    20ac:	2f 93       	push	r18
    20ae:	1f 93       	push	r17
    20b0:	0f 93       	push	r16
    20b2:	ff 92       	push	r15
    20b4:	ef 92       	push	r14
    20b6:	df 92       	push	r13
    20b8:	cf 92       	push	r12
    20ba:	bf 92       	push	r11
    20bc:	af 92       	push	r10
    20be:	9f 92       	push	r9
    20c0:	8f 92       	push	r8
    20c2:	7f 92       	push	r7
    20c4:	6f 92       	push	r6
    20c6:	5f 92       	push	r5
    20c8:	4f 92       	push	r4
    20ca:	3f 92       	push	r3
    20cc:	2f 92       	push	r2
    20ce:	1f 92       	push	r1
    20d0:	0f 92       	push	r0
    20d2:	9f 93       	push	r25
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20da:	39 a1       	ldd	r19, Y+33	; 0x21
    20dc:	48 a1       	ldd	r20, Y+32	; 0x20
    20de:	e8 a3       	std	Y+32, r30	; 0x20
    20e0:	f9 a3       	std	Y+33, r31	; 0x21
    20e2:	70 f0       	brcs	.+28     	; 0x2100
    20e4:	f6 e0       	ldi	r31, 0x06	; 6
    20e6:	e8 ea       	ldi	r30, 0xA8	; 168
    20e8:	d3 81       	ldd	r29, Z+3	; 0x03
    20ea:	c2 81       	ldd	r28, Z+2	; 0x02
    20ec:	be b7       	in	r27, 0x3e	; 62
    20ee:	ad b7       	in	r26, 0x3d	; 61
    20f0:	bd 83       	std	Y+5, r27	; 0x05
    20f2:	ac 83       	std	Y+4, r26	; 0x04
    20f4:	24 81       	ldd	r18, Z+4	; 0x04
    20f6:	2d bf       	out	0x3d, r18	; 61
    20f8:	25 81       	ldd	r18, Z+5	; 0x05
    20fa:	2e bf       	out	0x3e, r18	; 62
    20fc:	ca 2f       	mov	r28, r26
    20fe:	db 2f       	mov	r29, r27

00002100 <AlreadyInKernel>:
    2100:	11 24       	eor	r1, r1
    2102:	e3 2f       	mov	r30, r19
    2104:	f4 2f       	mov	r31, r20
    2106:	09 94       	ijmp

00002108 <Epilog>:
    2108:	ef 91       	pop	r30
    210a:	ef 91       	pop	r30

0000210c <_Epilog>:
    210c:	e8 ea       	ldi	r30, 0xA8	; 168
    210e:	f6 e0       	ldi	r31, 0x06	; 6
    2110:	f8 94       	cli
    2112:	06 81       	ldd	r16, Z+6	; 0x06
    2114:	0a 95       	dec	r16
    2116:	06 83       	std	Z+6, r16	; 0x06
    2118:	54 f4       	brge	.+20     	; 0x212e
    211a:	d1 81       	ldd	r29, Z+1	; 0x01
    211c:	c0 81       	ld	r28, Z
    211e:	d3 83       	std	Z+3, r29	; 0x03
    2120:	c2 83       	std	Z+2, r28	; 0x02
    2122:	20 96       	adiw	r28, 0x00	; 0
    2124:	39 f1       	breq	.+78     	; 0x2174
    2126:	bd 81       	ldd	r27, Y+5	; 0x05
    2128:	ac 81       	ldd	r26, Y+4	; 0x04
    212a:	ad bf       	out	0x3d, r26	; 61
    212c:	be bf       	out	0x3e, r27	; 62

0000212e <SkipTaskSwap>:
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	0f 90       	pop	r0
    2134:	1f 90       	pop	r1
    2136:	2f 90       	pop	r2
    2138:	3f 90       	pop	r3
    213a:	4f 90       	pop	r4
    213c:	5f 90       	pop	r5
    213e:	6f 90       	pop	r6
    2140:	7f 90       	pop	r7
    2142:	8f 90       	pop	r8
    2144:	9f 90       	pop	r9
    2146:	af 90       	pop	r10
    2148:	bf 90       	pop	r11
    214a:	cf 90       	pop	r12
    214c:	df 90       	pop	r13
    214e:	ef 90       	pop	r14
    2150:	ff 90       	pop	r15
    2152:	0f 91       	pop	r16
    2154:	1f 91       	pop	r17
    2156:	2f 91       	pop	r18
    2158:	3f 91       	pop	r19
    215a:	4f 91       	pop	r20
    215c:	5f 91       	pop	r21
    215e:	6f 91       	pop	r22
    2160:	7f 91       	pop	r23
    2162:	8f 91       	pop	r24
    2164:	9f 91       	pop	r25
    2166:	af 91       	pop	r26
    2168:	bf 91       	pop	r27
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	ef 91       	pop	r30
    2170:	ff 91       	pop	r31
    2172:	18 95       	reti

00002174 <_IdleTask>:
    2174:	78 94       	sei
    2176:	88 95       	sleep

00002178 <snooze>:
    2178:	fd cf       	rjmp	.-6      	; 0x2174

0000217a <AvrXSetKernelStack>:
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30
    217e:	80 50       	subi	r24, 0x00	; 0
    2180:	90 40       	sbci	r25, 0x00	; 0
    2182:	11 f4       	brne	.+4      	; 0x2188
    2184:	8d b7       	in	r24, 0x3d	; 61
    2186:	9e b7       	in	r25, 0x3e	; 62

00002188 <sks1>:
    2188:	80 93 ac 06 	sts	0x06AC, r24
    218c:	90 93 ad 06 	sts	0x06AD, r25
    2190:	09 94       	ijmp

00002192 <AvrXRunTask>:
    2192:	01 d0       	rcall	.+2      	; 0x2196
    2194:	23 c0       	rjmp	.+70     	; 0x21dc

00002196 <AvrXInitTask>:
    2196:	e8 2f       	mov	r30, r24
    2198:	f9 2f       	mov	r31, r25
    219a:	1d d0       	rcall	.+58     	; 0x21d6
    219c:	a0 2d       	mov	r26, r0
    219e:	1b d0       	rcall	.+54     	; 0x21d6
    21a0:	b0 2d       	mov	r27, r0
    21a2:	19 d0       	rcall	.+50     	; 0x21d6
    21a4:	0c 92       	st	X, r0
    21a6:	17 d0       	rcall	.+46     	; 0x21d6
    21a8:	0e 92       	st	-X, r0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	51 e2       	ldi	r21, 0x21	; 33

000021b0 <PushRegisters>:
    21b0:	4e 93       	st	-X, r20
    21b2:	5a 95       	dec	r21
    21b4:	e9 f7       	brne	.-6      	; 0x21b0
    21b6:	11 97       	sbiw	r26, 0x01	; 1
    21b8:	0e d0       	rcall	.+28     	; 0x21d6
    21ba:	80 2d       	mov	r24, r0
    21bc:	0c d0       	rcall	.+24     	; 0x21d6
    21be:	90 2d       	mov	r25, r0
    21c0:	0a d0       	rcall	.+20     	; 0x21d6
    21c2:	e8 2f       	mov	r30, r24
    21c4:	f9 2f       	mov	r31, r25
    21c6:	a4 83       	std	Z+4, r26	; 0x04
    21c8:	b5 83       	std	Z+5, r27	; 0x05
    21ca:	03 82       	std	Z+3, r0	; 0x03
    21cc:	a0 e6       	ldi	r26, 0x60	; 96
    21ce:	a2 83       	std	Z+2, r26	; 0x02
    21d0:	41 83       	std	Z+1, r20	; 0x01
    21d2:	40 83       	st	Z, r20
    21d4:	08 95       	ret

000021d6 <lpm_inc>:
    21d6:	c8 95       	lpm
    21d8:	31 96       	adiw	r30, 0x01	; 1
    21da:	08 95       	ret

000021dc <AvrXResume>:
    21dc:	f8 94       	cli
    21de:	48 df       	rcall	.-368    	; 0x2070
    21e0:	78 94       	sei
    21e2:	e8 2f       	mov	r30, r24
    21e4:	f9 2f       	mov	r31, r25
    21e6:	22 81       	ldd	r18, Z+2	; 0x02
    21e8:	2f 7d       	andi	r18, 0xDF	; 223
    21ea:	22 83       	std	Z+2, r18	; 0x02
    21ec:	26 ff       	sbrs	r18, 6
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6
    21f0:	2f 7b       	andi	r18, 0xBF	; 191
    21f2:	22 83       	std	Z+2, r18	; 0x02
    21f4:	01 d0       	rcall	.+2      	; 0x21f8

000021f6 <ar00>:
    21f6:	8a cf       	rjmp	.-236    	; 0x210c

000021f8 <_QueuePid>:
    21f8:	e8 2f       	mov	r30, r24
    21fa:	f9 2f       	mov	r31, r25
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	22 81       	ldd	r18, Z+2	; 0x02
    2200:	20 73       	andi	r18, 0x30	; 48
    2202:	e1 f4       	brne	.+56     	; 0x223c
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	43 81       	ldd	r20, Z+3	; 0x03
    220a:	c8 ea       	ldi	r28, 0xA8	; 168
    220c:	d6 e0       	ldi	r29, 0x06	; 6
    220e:	2f b7       	in	r18, 0x3f	; 63
    2210:	f8 94       	cli

00002212 <_qp00>:
    2212:	33 95       	inc	r19
    2214:	ec 2f       	mov	r30, r28
    2216:	fd 2f       	mov	r31, r29
    2218:	c0 81       	ld	r28, Z
    221a:	d1 81       	ldd	r29, Z+1	; 0x01
    221c:	20 96       	adiw	r28, 0x00	; 0
    221e:	19 f0       	breq	.+6      	; 0x2226
    2220:	5b 81       	ldd	r21, Y+3	; 0x03
    2222:	45 17       	cp	r20, r21
    2224:	b0 f7       	brcc	.-20     	; 0x2212

00002226 <_qp01>:
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	f9 2f       	mov	r31, r25
    222c:	e8 2f       	mov	r30, r24
    222e:	d1 83       	std	Z+1, r29	; 0x01
    2230:	c0 83       	st	Z, r28
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	83 2f       	mov	r24, r19
    2238:	2f bf       	out	0x3f, r18	; 63
    223a:	08 95       	ret

0000223c <_qpSUSPEND>:
    223c:	83 2f       	mov	r24, r19
    223e:	20 64       	ori	r18, 0x40	; 64
    2240:	22 83       	std	Z+2, r18	; 0x02
    2242:	08 95       	ret

00002244 <AvrXWaitMessageAck>:
    2244:	8e 5f       	subi	r24, 0xFE	; 254
    2246:	9f 4f       	sbci	r25, 0xFF	; 255

00002248 <AvrXWaitSemaphore>:
    2248:	e8 2f       	mov	r30, r24
    224a:	f9 2f       	mov	r31, r25
    224c:	f8 94       	cli
    224e:	20 81       	ld	r18, Z
    2250:	31 81       	ldd	r19, Z+1	; 0x01
    2252:	21 50       	subi	r18, 0x01	; 1
    2254:	30 40       	sbci	r19, 0x00	; 0
    2256:	19 f4       	brne	.+6      	; 0x225e
    2258:	20 83       	st	Z, r18
    225a:	31 83       	std	Z+1, r19	; 0x01
    225c:	18 95       	reti

0000225e <aws01>:
    225e:	08 df       	rcall	.-496    	; 0x2070
    2260:	e8 ea       	ldi	r30, 0xA8	; 168
    2262:	f6 e0       	ldi	r31, 0x06	; 6
    2264:	73 81       	ldd	r23, Z+3	; 0x03
    2266:	62 81       	ldd	r22, Z+2	; 0x02
    2268:	3c d0       	rcall	.+120    	; 0x22e2
    226a:	e8 2f       	mov	r30, r24
    226c:	f9 2f       	mov	r31, r25
    226e:	2b d0       	rcall	.+86     	; 0x22c6
    2270:	4d cf       	rjmp	.-358    	; 0x210c

00002272 <AvrXAckMessage>:
    2272:	8e 5f       	subi	r24, 0xFE	; 254
    2274:	9f 4f       	sbci	r25, 0xFF	; 255

00002276 <AvrXSetSemaphore>:
    2276:	0c d0       	rcall	.+24     	; 0x2290
    2278:	90 91 ae 06 	lds	r25, 0x06AE
    227c:	93 95       	inc	r25
    227e:	89 2b       	or	r24, r25
    2280:	09 f0       	breq	.+2      	; 0x2284
    2282:	08 95       	ret

00002284 <axss0>:
    2284:	f8 94       	cli
    2286:	f4 de       	rcall	.-536    	; 0x2070
    2288:	78 94       	sei
    228a:	40 cf       	rjmp	.-384    	; 0x210c

0000228c <AvrXIntSetObjectSemaphore>:
    228c:	8e 5f       	subi	r24, 0xFE	; 254
    228e:	9f 4f       	sbci	r25, 0xFF	; 255

00002290 <AvrXIntSetSemaphore>:
    2290:	e8 2f       	mov	r30, r24
    2292:	f9 2f       	mov	r31, r25
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	2f b7       	in	r18, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	60 81       	ld	r22, Z
    22a0:	86 17       	cp	r24, r22
    22a2:	97 07       	cpc	r25, r23
    22a4:	28 f0       	brcs	.+10     	; 0x22b0
    22a6:	80 83       	st	Z, r24
    22a8:	91 83       	std	Z+1, r25	; 0x01

000022aa <BogusSemaphore>:
    22aa:	8f ef       	ldi	r24, 0xFF	; 255
    22ac:	2f bf       	out	0x3f, r18	; 63
    22ae:	08 95       	ret

000022b0 <aiss00>:
    22b0:	8f e5       	ldi	r24, 0x5F	; 95
    22b2:	86 17       	cp	r24, r22
    22b4:	97 07       	cpc	r25, r23
    22b6:	c8 f7       	brcc	.-14     	; 0x22aa
    22b8:	23 d0       	rcall	.+70     	; 0x2300
    22ba:	2f bf       	out	0x3f, r18	; 63
    22bc:	86 2f       	mov	r24, r22
    22be:	97 2f       	mov	r25, r23
    22c0:	9b cf       	rjmp	.-202    	; 0x21f8

000022c2 <_ao00>:
    22c2:	e2 2f       	mov	r30, r18
    22c4:	f3 2f       	mov	r31, r19

000022c6 <_AppendObject>:
    22c6:	20 81       	ld	r18, Z
    22c8:	31 81       	ldd	r19, Z+1	; 0x01
    22ca:	20 50       	subi	r18, 0x00	; 0
    22cc:	30 40       	sbci	r19, 0x00	; 0
    22ce:	c9 f7       	brne	.-14     	; 0x22c2
    22d0:	71 83       	std	Z+1, r23	; 0x01
    22d2:	60 83       	st	Z, r22
    22d4:	f7 2f       	mov	r31, r23
    22d6:	e6 2f       	mov	r30, r22
    22d8:	31 83       	std	Z+1, r19	; 0x01
    22da:	20 83       	st	Z, r18
    22dc:	08 95       	ret

000022de <_ro00>:
    22de:	f3 2f       	mov	r31, r19
    22e0:	e2 2f       	mov	r30, r18

000022e2 <_RemoveObject>:
    22e2:	20 81       	ld	r18, Z
    22e4:	31 81       	ldd	r19, Z+1	; 0x01
    22e6:	62 17       	cp	r22, r18
    22e8:	73 07       	cpc	r23, r19
    22ea:	51 f0       	breq	.+20     	; 0x2300
    22ec:	20 50       	subi	r18, 0x00	; 0
    22ee:	30 40       	sbci	r19, 0x00	; 0
    22f0:	b1 f7       	brne	.-20     	; 0x22de
    22f2:	08 95       	ret

000022f4 <_RemoveFirstObject>:
    22f4:	60 81       	ld	r22, Z
    22f6:	71 81       	ldd	r23, Z+1	; 0x01
    22f8:	60 50       	subi	r22, 0x00	; 0
    22fa:	70 40       	sbci	r23, 0x00	; 0
    22fc:	09 f4       	brne	.+2      	; 0x2300
    22fe:	08 95       	ret

00002300 <_RemoveObjectAt>:
    2300:	4c 2f       	mov	r20, r28
    2302:	5d 2f       	mov	r21, r29
    2304:	c6 2f       	mov	r28, r22
    2306:	d7 2f       	mov	r29, r23
    2308:	79 81       	ldd	r23, Y+1	; 0x01
    230a:	68 81       	ld	r22, Y
    230c:	71 83       	std	Z+1, r23	; 0x01
    230e:	60 83       	st	Z, r22
    2310:	e6 2f       	mov	r30, r22
    2312:	f7 2f       	mov	r31, r23
    2314:	66 27       	eor	r22, r22
    2316:	68 83       	st	Y, r22
    2318:	69 83       	std	Y+1, r22	; 0x01
    231a:	7d 2f       	mov	r23, r29
    231c:	6c 2f       	mov	r22, r28
    231e:	c4 2f       	mov	r28, r20
    2320:	d5 2f       	mov	r29, r21
    2322:	98 94       	clz
    2324:	08 95       	ret

00002326 <AvrXIntResetObjectSemaphore>:
    2326:	e8 2f       	mov	r30, r24
    2328:	f9 2f       	mov	r31, r25
    232a:	32 96       	adiw	r30, 0x02	; 2
    232c:	02 c0       	rjmp	.+4      	; 0x2332

0000232e <AvrXIntResetSemaphore>:
    232e:	f9 2f       	mov	r31, r25
    2330:	e8 2f       	mov	r30, r24

00002332 <ars00>:
    2332:	f8 94       	cli
    2334:	40 81       	ld	r20, Z
    2336:	51 81       	ldd	r21, Z+1	; 0x01
    2338:	41 50       	subi	r20, 0x01	; 1
    233a:	50 40       	sbci	r21, 0x00	; 0
    233c:	11 f0       	breq	.+4      	; 0x2342
    233e:	4f 5f       	subi	r20, 0xFF	; 255
    2340:	5f 4f       	sbci	r21, 0xFF	; 255

00002342 <ars01>:
    2342:	51 83       	std	Z+1, r21	; 0x01
    2344:	40 83       	st	Z, r20
    2346:	18 95       	reti

00002348 <AvrXDelay>:
    2348:	01 d0       	rcall	.+2      	; 0x234c
    234a:	7c cf       	rjmp	.-264    	; 0x2244

0000234c <AvrXStartTimer>:
    234c:	60 50       	subi	r22, 0x00	; 0
    234e:	70 40       	sbci	r23, 0x00	; 0
    2350:	09 f4       	brne	.+2      	; 0x2354
    2352:	8f cf       	rjmp	.-226    	; 0x2272

00002354 <CountNotZero>:
    2354:	f8 94       	cli
    2356:	8c de       	rcall	.-744    	; 0x2070
    2358:	78 94       	sei
    235a:	e5 df       	rcall	.-54     	; 0x2326
    235c:	e0 eb       	ldi	r30, 0xB0	; 176
    235e:	f6 e0       	ldi	r31, 0x06	; 6
    2360:	f8 94       	cli
    2362:	20 91 b2 06 	lds	r18, 0x06B2
    2366:	2a 95       	dec	r18
    2368:	20 93 b2 06 	sts	0x06B2, r18
    236c:	78 94       	sei

0000236e <ast00>:
    236e:	ce 2f       	mov	r28, r30
    2370:	df 2f       	mov	r29, r31
    2372:	e8 81       	ld	r30, Y
    2374:	f9 81       	ldd	r31, Y+1	; 0x01
    2376:	30 96       	adiw	r30, 0x00	; 0
    2378:	59 f0       	breq	.+22     	; 0x2390
    237a:	24 81       	ldd	r18, Z+4	; 0x04
    237c:	35 81       	ldd	r19, Z+5	; 0x05
    237e:	62 1b       	sub	r22, r18
    2380:	73 0b       	sbc	r23, r19
    2382:	a8 f7       	brcc	.-22     	; 0x236e
    2384:	62 0f       	add	r22, r18
    2386:	73 1f       	adc	r23, r19
    2388:	26 1b       	sub	r18, r22
    238a:	37 0b       	sbc	r19, r23
    238c:	24 83       	std	Z+4, r18	; 0x04
    238e:	35 83       	std	Z+5, r19	; 0x05

00002390 <ast01>:
    2390:	99 83       	std	Y+1, r25	; 0x01
    2392:	88 83       	st	Y, r24
    2394:	d9 2f       	mov	r29, r25
    2396:	c8 2f       	mov	r28, r24
    2398:	f9 83       	std	Y+1, r31	; 0x01
    239a:	e8 83       	st	Y, r30
    239c:	6c 83       	std	Y+4, r22	; 0x04
    239e:	7d 83       	std	Y+5, r23	; 0x05
    23a0:	3c d0       	rcall	.+120    	; 0x241a
    23a2:	b4 ce       	rjmp	.-664    	; 0x210c

000023a4 <AvrXTimerHandler>:
    23a4:	f8 94       	cli
    23a6:	20 91 b2 06 	lds	r18, 0x06B2
    23aa:	21 50       	subi	r18, 0x01	; 1
    23ac:	20 93 b2 06 	sts	0x06B2, r18
    23b0:	78 94       	sei
    23b2:	08 f0       	brcs	.+2      	; 0x23b6
    23b4:	08 95       	ret

000023b6 <ati00>:
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	d0 91 b1 06 	lds	r29, 0x06B1
    23c2:	c0 91 b0 06 	lds	r28, 0x06B0
    23c6:	20 96       	adiw	r28, 0x00	; 0
    23c8:	21 f1       	breq	.+72     	; 0x2412
    23ca:	fd 81       	ldd	r31, Y+5	; 0x05
    23cc:	ec 81       	ldd	r30, Y+4	; 0x04
    23ce:	31 97       	sbiw	r30, 0x01	; 1
    23d0:	fd 83       	std	Y+5, r31	; 0x05
    23d2:	ec 83       	std	Y+4, r30	; 0x04

000023d4 <ati01>:
    23d4:	ef 2b       	or	r30, r31
    23d6:	e9 f4       	brne	.+58     	; 0x2412
    23d8:	a8 81       	ld	r26, Y
    23da:	b9 81       	ldd	r27, Y+1	; 0x01
    23dc:	b0 93 b1 06 	sts	0x06B1, r27
    23e0:	a0 93 b0 06 	sts	0x06B0, r26
    23e4:	f9 83       	std	Y+1, r31	; 0x01
    23e6:	e8 83       	st	Y, r30
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	9b 81       	ldd	r25, Y+3	; 0x03
    23ec:	82 50       	subi	r24, 0x02	; 2
    23ee:	90 40       	sbci	r25, 0x00	; 0
    23f0:	31 f4       	brne	.+12     	; 0x23fe
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	9f 81       	ldd	r25, Y+7	; 0x07
    23f6:	7d 2f       	mov	r23, r29
    23f8:	6c 2f       	mov	r22, r28
    23fa:	1d d0       	rcall	.+58     	; 0x2436
    23fc:	03 c0       	rjmp	.+6      	; 0x2404

000023fe <ati04>:
    23fe:	8c 2f       	mov	r24, r28
    2400:	9d 2f       	mov	r25, r29
    2402:	44 df       	rcall	.-376    	; 0x228c

00002404 <ati03>:
    2404:	10 96       	adiw	r26, 0x00	; 0
    2406:	29 f0       	breq	.+10     	; 0x2412
    2408:	ca 2f       	mov	r28, r26
    240a:	db 2f       	mov	r29, r27
    240c:	fd 81       	ldd	r31, Y+5	; 0x05
    240e:	ec 81       	ldd	r30, Y+4	; 0x04
    2410:	e1 cf       	rjmp	.-62     	; 0x23d4

00002412 <ati02>:
    2412:	bf 91       	pop	r27
    2414:	af 91       	pop	r26
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28

0000241a <TimerHandler>:
    241a:	f8 94       	cli
    241c:	20 91 b2 06 	lds	r18, 0x06B2
    2420:	23 95       	inc	r18
    2422:	20 93 b2 06 	sts	0x06B2, r18
    2426:	78 94       	sei
    2428:	31 f6       	brne	.-116    	; 0x23b6
    242a:	08 95       	ret

0000242c <AvrXSendMessage>:
    242c:	f8 94       	cli
    242e:	20 de       	rcall	.-960    	; 0x2070
    2430:	78 94       	sei
    2432:	01 d0       	rcall	.+2      	; 0x2436
    2434:	6b ce       	rjmp	.-810    	; 0x210c

00002436 <AvrXIntSendMessage>:
    2436:	f9 2f       	mov	r31, r25
    2438:	e8 2f       	mov	r30, r24
    243a:	45 df       	rcall	.-374    	; 0x22c6
    243c:	27 cf       	rjmp	.-434    	; 0x228c

0000243e <AvrXWaitMessage>:
    243e:	e8 2f       	mov	r30, r24
    2440:	f9 2f       	mov	r31, r25
    2442:	f8 94       	cli
    2444:	57 df       	rcall	.-338    	; 0x22f4
    2446:	78 94       	sei
    2448:	21 f4       	brne	.+8      	; 0x2452
    244a:	fc de       	rcall	.-520    	; 0x2244
    244c:	82 50       	subi	r24, 0x02	; 2
    244e:	90 40       	sbci	r25, 0x00	; 0
    2450:	f6 cf       	rjmp	.-20     	; 0x243e

00002452 <_rm01>:
    2452:	69 df       	rcall	.-302    	; 0x2326
    2454:	86 2f       	mov	r24, r22
    2456:	97 2f       	mov	r25, r23
    2458:	08 95       	ret

0000245a <__mulsi3>:
    245a:	62 9f       	mul	r22, r18
    245c:	d0 01       	movw	r26, r0
    245e:	73 9f       	mul	r23, r19
    2460:	f0 01       	movw	r30, r0
    2462:	82 9f       	mul	r24, r18
    2464:	e0 0d       	add	r30, r0
    2466:	f1 1d       	adc	r31, r1
    2468:	64 9f       	mul	r22, r20
    246a:	e0 0d       	add	r30, r0
    246c:	f1 1d       	adc	r31, r1
    246e:	92 9f       	mul	r25, r18
    2470:	f0 0d       	add	r31, r0
    2472:	83 9f       	mul	r24, r19
    2474:	f0 0d       	add	r31, r0
    2476:	74 9f       	mul	r23, r20
    2478:	f0 0d       	add	r31, r0
    247a:	65 9f       	mul	r22, r21
    247c:	f0 0d       	add	r31, r0
    247e:	99 27       	eor	r25, r25
    2480:	72 9f       	mul	r23, r18
    2482:	b0 0d       	add	r27, r0
    2484:	e1 1d       	adc	r30, r1
    2486:	f9 1f       	adc	r31, r25
    2488:	63 9f       	mul	r22, r19
    248a:	b0 0d       	add	r27, r0
    248c:	e1 1d       	adc	r30, r1
    248e:	f9 1f       	adc	r31, r25
    2490:	bd 01       	movw	r22, r26
    2492:	cf 01       	movw	r24, r30
    2494:	11 24       	eor	r1, r1
    2496:	08 95       	ret

00002498 <__udivmodhi4>:
    2498:	aa 1b       	sub	r26, r26
    249a:	bb 1b       	sub	r27, r27
    249c:	51 e1       	ldi	r21, 0x11	; 17
    249e:	07 c0       	rjmp	.+14     	; 0x24ae

000024a0 <__udivmodhi4_loop>:
    24a0:	aa 1f       	adc	r26, r26
    24a2:	bb 1f       	adc	r27, r27
    24a4:	a6 17       	cp	r26, r22
    24a6:	b7 07       	cpc	r27, r23
    24a8:	10 f0       	brcs	.+4      	; 0x24ae
    24aa:	a6 1b       	sub	r26, r22
    24ac:	b7 0b       	sbc	r27, r23

000024ae <__udivmodhi4_ep>:
    24ae:	88 1f       	adc	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	5a 95       	dec	r21
    24b4:	a9 f7       	brne	.-22     	; 0x24a0
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	08 95       	ret

000024c0 <__divmodhi4>:
    24c0:	97 fb       	bst	r25, 7
    24c2:	09 2e       	mov	r0, r25
    24c4:	07 26       	eor	r0, r23
    24c6:	0a d0       	rcall	.+20     	; 0x24dc
    24c8:	77 fd       	sbrc	r23, 7
    24ca:	04 d0       	rcall	.+8      	; 0x24d4
    24cc:	e5 df       	rcall	.-54     	; 0x2498
    24ce:	06 d0       	rcall	.+12     	; 0x24dc
    24d0:	00 20       	and	r0, r0
    24d2:	1a f4       	brpl	.+6      	; 0x24da

000024d4 <__divmodhi4_neg2>:
    24d4:	70 95       	com	r23
    24d6:	61 95       	neg	r22
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255

000024da <__divmodhi4_exit>:
    24da:	08 95       	ret

000024dc <__divmodhi4_neg1>:
    24dc:	f6 f7       	brtc	.-4      	; 0x24da
    24de:	90 95       	com	r25
    24e0:	81 95       	neg	r24
    24e2:	9f 4f       	sbci	r25, 0xFF	; 255
    24e4:	08 95       	ret

000024e6 <__udivmodsi4>:
    24e6:	a1 e2       	ldi	r26, 0x21	; 33
    24e8:	1a 2e       	mov	r1, r26
    24ea:	aa 1b       	sub	r26, r26
    24ec:	bb 1b       	sub	r27, r27
    24ee:	fd 01       	movw	r30, r26
    24f0:	0d c0       	rjmp	.+26     	; 0x250c

000024f2 <__udivmodsi4_loop>:
    24f2:	aa 1f       	adc	r26, r26
    24f4:	bb 1f       	adc	r27, r27
    24f6:	ee 1f       	adc	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	a2 17       	cp	r26, r18
    24fc:	b3 07       	cpc	r27, r19
    24fe:	e4 07       	cpc	r30, r20
    2500:	f5 07       	cpc	r31, r21
    2502:	20 f0       	brcs	.+8      	; 0x250c
    2504:	a2 1b       	sub	r26, r18
    2506:	b3 0b       	sbc	r27, r19
    2508:	e4 0b       	sbc	r30, r20
    250a:	f5 0b       	sbc	r31, r21

0000250c <__udivmodsi4_ep>:
    250c:	66 1f       	adc	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	88 1f       	adc	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	1a 94       	dec	r1
    2516:	69 f7       	brne	.-38     	; 0x24f2
    2518:	60 95       	com	r22
    251a:	70 95       	com	r23
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	bd 01       	movw	r22, r26
    2526:	cf 01       	movw	r24, r30
    2528:	08 95       	ret

0000252a <__divmodsi4>:
    252a:	97 fb       	bst	r25, 7
    252c:	09 2e       	mov	r0, r25
    252e:	05 26       	eor	r0, r21
    2530:	0e d0       	rcall	.+28     	; 0x254e
    2532:	57 fd       	sbrc	r21, 7
    2534:	04 d0       	rcall	.+8      	; 0x253e
    2536:	d7 df       	rcall	.-82     	; 0x24e6
    2538:	0a d0       	rcall	.+20     	; 0x254e
    253a:	00 1c       	adc	r0, r0
    253c:	38 f4       	brcc	.+14     	; 0x254c

0000253e <__divmodsi4_neg2>:
    253e:	50 95       	com	r21
    2540:	40 95       	com	r20
    2542:	30 95       	com	r19
    2544:	21 95       	neg	r18
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	4f 4f       	sbci	r20, 0xFF	; 255
    254a:	5f 4f       	sbci	r21, 0xFF	; 255

0000254c <__divmodsi4_exit>:
    254c:	08 95       	ret

0000254e <__divmodsi4_neg1>:
    254e:	f6 f7       	brtc	.-4      	; 0x254c
    2550:	90 95       	com	r25
    2552:	80 95       	com	r24
    2554:	70 95       	com	r23
    2556:	61 95       	neg	r22
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	8f 4f       	sbci	r24, 0xFF	; 255
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	08 95       	ret

00002560 <_exit>:
    2560:	ff cf       	rjmp	.-2      	; 0x2560
