
AvrXBufferedSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fba  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001fba  0000204e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a5  00800094  00800094  00002082  2**2
                  ALLOC
  3 .noinit       00000000  00800339  00800339  00002082  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00002082  2**0
                  CONTENTS
  5 .stab         00006ae0  00000000  00000000  00002084  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000343f  00000000  00000000  00008b64  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4
       4:	0c 94 7d 00 	jmp	0xfa
       8:	0c 94 7d 00 	jmp	0xfa
       c:	0c 94 7d 00 	jmp	0xfa
      10:	0c 94 1c 06 	jmp	0xc38
      14:	0c 94 28 05 	jmp	0xa50
      18:	0c 94 ef 05 	jmp	0xbde
      1c:	0c 94 95 05 	jmp	0xb2a
      20:	0c 94 c2 05 	jmp	0xb84
      24:	0c 94 fb 04 	jmp	0x9f6
      28:	0c 94 68 05 	jmp	0xad0
      2c:	0c 94 00 01 	jmp	0x200
      30:	0c 94 7d 00 	jmp	0xfa
      34:	0c 94 8e 07 	jmp	0xf1c
      38:	0c 94 9a 07 	jmp	0xf34
      3c:	0c 94 7d 00 	jmp	0xfa
      40:	0c 94 7d 00 	jmp	0xfa
      44:	0c 94 7d 00 	jmp	0xfa
      48:	0c 94 7d 00 	jmp	0xfa
      4c:	0c 94 7d 00 	jmp	0xfa
      50:	0c 94 7d 00 	jmp	0xfa

00000054 <__ctors_end>:
      54:	6c 02       	muls	r22, r28
      56:	d6 01       	movw	r26, r12
      58:	59 01       	movw	r10, r18
      5a:	01 e5       	ldi	r16, 0x51	; 81

0000005b <getUAVStatusTcb>:
      5b:	e5 01 35 01 71 01 04                                ..5.q..

00000062 <__c.0>:
      62:	31 00                                               1.

00000064 <__c.1>:
      64:	63 20 25 64 2c 00                                   c %d,.

0000006a <__c.2>:
      6a:	61 20 30 37 32 2e 35 37 35 39 45 2c 00              a 072.5759E,.

00000077 <__c.3>:
      77:	61 20 30 34 33 2e 33 32 32 33 6e 2c 00              a 043.3223n,.

00000084 <__c.4>:
      84:	73 20 25 64 2c 00                                   s %d,.

0000008a <__c.5>:
      8a:	67 20 25 64 2c 00                                   g %d,.

00000090 <__c.6>:
      90:	66 20 25 64 2c 00                                   f %d,.

00000096 <__c.7>:
      96:	62 20 25 64 2c 00                                   b %d,.

0000009c <__c.8>:
      9c:	71 20 25 64 2c 00                                   q %d,.

000000a2 <__c.9>:
      a2:	77 20 25 64 2c 00                                   w %d,.

000000a8 <TimerRTCPrescaleFactor>:
      a8:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000000b8 <TimerPrescaleFactor>:
      b8:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000000c4 <__init>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf e5       	ldi	r28, 0x5F	; 95
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	10 e0       	ldi	r17, 0x00	; 0
      d2:	a0 e6       	ldi	r26, 0x60	; 96
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	ea eb       	ldi	r30, 0xBA	; 186
      d8:	ff e1       	ldi	r31, 0x1F	; 31
      da:	02 c0       	rjmp	.+4      	; 0xe0

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	a4 39       	cpi	r26, 0x94	; 148
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc

000000e6 <__do_clear_bss>:
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	a4 e9       	ldi	r26, 0x94	; 148
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	01 c0       	rjmp	.+2      	; 0xf0

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a9 33       	cpi	r26, 0x39	; 57
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee
      f6:	0c 94 08 02 	jmp	0x410

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0x0

000000fe <parserInit>:

void parserInit(void)
{
	// initialize input buffer
	parserBufferLength = 0;
      fe:	10 92 70 01 	sts	0x0170, r1
	// initialize executing function
	ParserExecFunction = 0;
     102:	10 92 a9 00 	sts	0x00A9, r1
     106:	10 92 a8 00 	sts	0x00A8, r1
	// initialize command list
	parserNumCommands = 0;
     10a:	10 92 be 00 	sts	0x00BE, r1
     10e:	08 95       	ret

00000110 <parserAddCommand>:
}


void parserAddCommand(unsigned char* newCmdString, ParserFuncPtrType newCmdFuncPtr)
{
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	9c 01       	movw	r18, r24
     116:	8b 01       	movw	r16, r22
	// add command string to end of command list
	strcpy(CommandList[parserNumCommands], newCmdString);
     118:	90 91 be 00 	lds	r25, 0x00BE
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	98 9f       	mul	r25, r24
     120:	c0 01       	movw	r24, r0
     122:	11 24       	eor	r1, r1
     124:	b9 01       	movw	r22, r18
     126:	8d 53       	subi	r24, 0x3D	; 61
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	0e 94 60 09 	call	0x12c0
	// add command function ptr to end of function list
	ParserFunctionList[parserNumCommands] = newCmdFuncPtr;
     12e:	80 91 be 00 	lds	r24, 0x00BE
     132:	e8 2f       	mov	r30, r24
     134:	ff 27       	eor	r31, r31
     136:	ee 0f       	add	r30, r30
     138:	ff 1f       	adc	r31, r31
     13a:	e6 55       	subi	r30, 0x56	; 86
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	11 83       	std	Z+1, r17	; 0x01
     140:	00 83       	st	Z, r16
	// increment number of registered commands
	parserNumCommands++;
     142:	8f 5f       	subi	r24, 0xFF	; 255
     144:	80 93 be 00 	sts	0x00BE, r24
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	08 95       	ret

0000014e <parserSetOutputFunc>:
}


void parserSetOutputFunc(void (*output_func)(unsigned char c))
{
	// set new output function
	parserOutputFunc = output_func;
     14e:	90 93 a7 00 	sts	0x00A7, r25
     152:	80 93 a6 00 	sts	0x00A6, r24
     156:	08 95       	ret

00000158 <parserProcessInputString>:
}


void parserInputFunc(unsigned char c)
{
	// process the received character
	
	if (c != '\r')		//anything other than return character must be a part of the command
	{	
		// echo character to the output
//		parserOutputFunc(c);
		// add it to the command line buffer
		parserBuffer[parserBufferLength] = c;
		// update buffer length
		parserBufferLength++;
	}
	else				//return character -> process command
	{
		// add null termination to command
		parserBuffer[parserBufferLength] = 0;
		// command is complete, process it
		parserProcessInputString();
		// reset buffer
		parserBufferLength = 0;
	}
}


void parserProcessInputString(void)
{
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	unsigned char cmdIndex;

	// search command list for match with entered command
	for(cmdIndex=0; cmdIndex<parserNumCommands; cmdIndex++)
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	80 91 be 00 	lds	r24, 0x00BE
     164:	18 17       	cp	r17, r24
     166:	48 f5       	brcc	.+82     	; 0x1ba
	{
		if( !strncmp(CommandList[cmdIndex], parserBuffer, 1) )		//command is first char of buffer
     168:	a1 2f       	mov	r26, r17
     16a:	bb 27       	eor	r27, r27
     16c:	fd 01       	movw	r30, r26
     16e:	84 e0       	ldi	r24, 0x04	; 4
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	8a 95       	dec	r24
     176:	e1 f7       	brne	.-8      	; 0x170
     178:	ea 1b       	sub	r30, r26
     17a:	fb 0b       	sbc	r31, r27
     17c:	ed 53       	subi	r30, 0x3D	; 61
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 81       	ld	r24, Z
     182:	c8 2f       	mov	r28, r24
     184:	dd 27       	eor	r29, r29
     186:	80 91 5f 01 	lds	r24, 0x015F
     18a:	c8 1b       	sub	r28, r24
     18c:	d1 09       	sbc	r29, r1
     18e:	20 97       	sbiw	r28, 0x00	; 0
     190:	79 f4       	brne	.+30     	; 0x1b0
		{
			// user-entered command matched a command in the list (database)
			ParserExecFunction = ParserFunctionList[cmdIndex];
     192:	aa 0f       	add	r26, r26
     194:	bb 1f       	adc	r27, r27
     196:	a6 55       	subi	r26, 0x56	; 86
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	ed 91       	ld	r30, X+
     19c:	fc 91       	ld	r31, X
     19e:	f0 93 a9 00 	sts	0x00A9, r31
     1a2:	e0 93 a8 00 	sts	0x00A8, r30
			// run the corresponding function
			ParserExecFunction();
     1a6:	09 95       	icall
			// reset
			ParserExecFunction = 0;
     1a8:	d0 93 a9 00 	sts	0x00A9, r29
     1ac:	c0 93 a8 00 	sts	0x00A8, r28
     1b0:	1f 5f       	subi	r17, 0xFF	; 255
     1b2:	80 91 be 00 	lds	r24, 0x00BE
     1b6:	18 17       	cp	r17, r24
     1b8:	b8 f2       	brcs	.-82     	; 0x168
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	08 95       	ret

000001c2 <parserInputFunc>:
     1c2:	90 91 70 01 	lds	r25, 0x0170
     1c6:	8d 30       	cpi	r24, 0x0D	; 13
     1c8:	49 f0       	breq	.+18     	; 0x1dc
     1ca:	e9 2f       	mov	r30, r25
     1cc:	ff 27       	eor	r31, r31
     1ce:	e1 5a       	subi	r30, 0xA1	; 161
     1d0:	fe 4f       	sbci	r31, 0xFE	; 254
     1d2:	80 83       	st	Z, r24
     1d4:	9f 5f       	subi	r25, 0xFF	; 255
     1d6:	90 93 70 01 	sts	0x0170, r25
     1da:	08 95       	ret
     1dc:	e9 2f       	mov	r30, r25
     1de:	ff 27       	eor	r31, r31
     1e0:	e1 5a       	subi	r30, 0xA1	; 161
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	10 82       	st	Z, r1
     1e6:	0e 94 ac 00 	call	0x158
     1ea:	10 92 70 01 	sts	0x0170, r1
     1ee:	08 95       	ret

000001f0 <parserGetArgStr>:
		}
	}
}

// return string pointer to argument [argnum]
unsigned char* parserGetArgStr(void)
{
	return &parserBuffer[2];		//spec states that commands are 1 char followed by a space followed by the arg, so the
}									//arg must start at idx 2
     1f0:	81 e6       	ldi	r24, 0x61	; 97
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	08 95       	ret

000001f6 <parserGetArgInt>:

//return argument as a long
int parserGetArgInt(void)
{
	char* endptr;
	return atoi(parserGetArgStr());
     1f6:	0e 94 f8 00 	call	0x1f0
     1fa:	0e 94 38 08 	call	0x1070
     1fe:	08 95       	ret

00000200 <__vector_11>:
 */

AVRX_SIGINT(SIG_OVERFLOW0)
{
    IntProlog();                // Switch to kernel stack/context
     200:	0e 94 77 0d 	call	0x1aee
    TCNT0 += TCNT0_INIT;		// Add to pre-load to account for any missed clocks
     204:	82 b7       	in	r24, 0x32	; 50
     206:	8f 53       	subi	r24, 0x3F	; 63
     208:	82 bf       	out	0x32, r24	; 50
    AvrXTimerHandler();         // Call Time queue manager
     20a:	0e 94 11 0f 	call	0x1e22
    Epilog();                   // Return to tasks
     20e:	0e 94 c3 0d 	call	0x1b86

00000212 <myputs>:
}



// Super simple string printers...

// PutString from RAM
void myputs(int (*putch)(char), const uint8_t * psz)
{
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	8c 01       	movw	r16, r24
     21c:	eb 01       	movw	r28, r22
	while (*psz != 0)
		(*putch)(*psz++);
     21e:	88 81       	ld	r24, Y
     220:	88 23       	and	r24, r24
     222:	31 f0       	breq	.+12     	; 0x230
     224:	89 91       	ld	r24, Y+
     226:	f8 01       	movw	r30, r16
     228:	09 95       	icall
     22a:	88 81       	ld	r24, Y
     22c:	88 23       	and	r24, r24
     22e:	d1 f7       	brne	.-12     	; 0x224
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <myputs_P>:
}

// PutString from FLASH
void myputs_P(int (*putch)(char), const uint8_t * psz)
{
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	8c 01       	movw	r16, r24
     244:	eb 01       	movw	r28, r22
	while (__LPM(psz) != 0)
		(*putch)(__LPM(psz++));
     246:	fb 01       	movw	r30, r22
     248:	84 91       	lpm	r24, Z
     24a:	88 23       	and	r24, r24
     24c:	49 f0       	breq	.+18     	; 0x260
     24e:	fe 01       	movw	r30, r28
     250:	21 96       	adiw	r28, 0x01	; 1
     252:	84 91       	lpm	r24, Z
     254:	f8 01       	movw	r30, r16
     256:	09 95       	icall
     258:	fe 01       	movw	r30, r28
     25a:	84 91       	lpm	r24, Z
     25c:	88 23       	and	r24, r24
     25e:	b9 f7       	brne	.-18     	; 0x24e
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <getUAVStatus>:
}

//#if (USART_CHANNELS & CHANNEL_0)

//tell the ground station I am OK by sending a "1" 10 times a second
AVRX_GCC_TASKDEF(getUAVStatus, 76, 4)
{	
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	26 97       	sbiw	r28, 0x06	; 6
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		printf_P(PSTR("1"));
     27e:	82 e6       	ldi	r24, 0x62	; 98
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	9f 93       	push	r25
     284:	8f 93       	push	r24
     286:	0e 94 3b 09 	call	0x1276
		putchar('\r');
     28a:	60 91 31 03 	lds	r22, 0x0331
     28e:	70 91 32 03 	lds	r23, 0x0332
     292:	8d e0       	ldi	r24, 0x0D	; 13
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 eb 08 	call	0x11d6
		if (DEBUG) putchar('\n');
     29a:	60 91 31 03 	lds	r22, 0x0331
     29e:	70 91 32 03 	lds	r23, 0x0332
     2a2:	8a e0       	ldi	r24, 0x0A	; 10
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 eb 08 	call	0x11d6
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
		AvrXDelay(&timer, 250);
     2ae:	6a ef       	ldi	r22, 0xFA	; 250
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 e3 0e 	call	0x1dc6
		printf_P(PSTR("c %d,"), 120);   	// c/3 evaluates to an int, even it c is not a multiple of
     2ba:	88 e7       	ldi	r24, 0x78	; 120
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	84 e6       	ldi	r24, 0x64	; 100
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("a 072.5759E,")); 
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	8a e6       	ldi	r24, 0x6A	; 106
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9f 93       	push	r25
     2dc:	8f 93       	push	r24
     2de:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("a 043.3223n,")); 
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	87 e7       	ldi	r24, 0x77	; 119
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	0e 94 3b 09 	call	0x1276
		AvrXDelay(&timer, 250);
     2f2:	6a ef       	ldi	r22, 0xFA	; 250
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	ce 01       	movw	r24, r28
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	0e 94 e3 0e 	call	0x1dc6
		printf_P(PSTR("s %d,"), 3);  
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	84 e8       	ldi	r24, 0x84	; 132
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("g %d,"), 5);
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	85 e0       	ldi	r24, 0x05	; 5
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	8a e8       	ldi	r24, 0x8A	; 138
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	9f 93       	push	r25
     32c:	8f 93       	push	r24
     32e:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("f %d,"), 80); 
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	80 e9       	ldi	r24, 0x90	; 144
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("b %d,"), 35); 
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	83 e2       	ldi	r24, 0x23	; 35
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	9f 93       	push	r25
     35c:	8f 93       	push	r24
     35e:	86 e9       	ldi	r24, 0x96	; 150
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("q %d,"), 23);  
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	87 e1       	ldi	r24, 0x17	; 23
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9f 93       	push	r25
     378:	8f 93       	push	r24
     37a:	8c e9       	ldi	r24, 0x9C	; 156
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9f 93       	push	r25
     380:	8f 93       	push	r24
     382:	0e 94 3b 09 	call	0x1276
		printf_P(PSTR("w %d,"), 70);
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	86 e4       	ldi	r24, 0x46	; 70
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	82 ea       	ldi	r24, 0xA2	; 162
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9f 93       	push	r25
     39c:	8f 93       	push	r24
     39e:	0e 94 3b 09 	call	0x1276
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	69 cf       	rjmp	.-302    	; 0x27e

000003ac <getCommands>:
	}
}







AVRX_GCC_TASKDEF(getCommands, 100, 1)
{	
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	26 97       	sbiw	r28, 0x06	; 6
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
	int c;		
	TimerControlBlock timer;
	
	while (1)
	{
		while ((c = getchar()) != EOF)
     3c0:	15 c0       	rjmp	.+42     	; 0x3ec
		{	
			if (c == '\r')
     3c2:	0d 30       	cpi	r16, 0x0D	; 13
     3c4:	11 05       	cpc	r17, r1
     3c6:	79 f4       	brne	.+30     	; 0x3e6
			{	putchar('\r');
     3c8:	60 91 31 03 	lds	r22, 0x0331
     3cc:	70 91 32 03 	lds	r23, 0x0332
     3d0:	c8 01       	movw	r24, r16
     3d2:	0e 94 eb 08 	call	0x11d6
				putchar('\n');
     3d6:	60 91 31 03 	lds	r22, 0x0331
     3da:	70 91 32 03 	lds	r23, 0x0332
     3de:	8a e0       	ldi	r24, 0x0A	; 10
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 eb 08 	call	0x11d6
			}
			parserInputFunc(c);
     3e6:	80 2f       	mov	r24, r16
     3e8:	0e 94 e1 00 	call	0x1c2
     3ec:	80 91 2f 03 	lds	r24, 0x032F
     3f0:	90 91 30 03 	lds	r25, 0x0330
     3f4:	0e 94 ae 08 	call	0x115c
     3f8:	8c 01       	movw	r16, r24
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	0f 3f       	cpi	r16, 0xFF	; 255
     3fe:	18 07       	cpc	r17, r24
     400:	01 f7       	brne	.-64     	; 0x3c2
		}
		AvrXDelay(&timer, 5);
     402:	65 e0       	ldi	r22, 0x05	; 5
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 e3 0e 	call	0x1dc6
     40e:	ee cf       	rjmp	.-36     	; 0x3ec

00000410 <main>:
	}
}


	


int main(void)
{
     410:	cf e5       	ldi	r28, 0x5F	; 95
     412:	d8 e0       	ldi	r29, 0x08	; 8
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 fc 0d 	call	0x1bf8

	MCUCR = _BV(SE);
     420:	80 e8       	ldi	r24, 0x80	; 128
     422:	85 bf       	out	0x35, r24	; 53
	TCNT0 = TCNT0_INIT;
     424:	81 ec       	ldi	r24, 0xC1	; 193
     426:	82 bf       	out	0x32, r24	; 50
#if defined (__AVR_ATmega103__) || defined (__ATmega103__)
	TCCR0 =  ((1<<CS02) | (1<<CS01));
#elif defined (__AVR_ATmega128__) || defined (__ATmega128__) || defined (__AVR_ATmega64__) || defined (__ATmega64__)
	TCCR0 =  ((1<<CS2) | (1<<CS1));
#else	// Most other chips...  Note: some are TCCR0 and some are TCCR0B...
	TCCR0 =  (1<<CS02);
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	83 bf       	out	0x33, r24	; 51
#endif
	TIMSK = _BV(TOIE0);
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	89 bf       	out	0x39, r24	; 57

    InitSerial0(BAUD(57600));
     430:	81 e2       	ldi	r24, 0x21	; 33
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 5b 07 	call	0xeb6
    fdevopen(put_char0, get_c0,0);		// Set up standard I/O
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	64 e8       	ldi	r22, 0x84	; 132
     43e:	77 e0       	ldi	r23, 0x07	; 7
     440:	8b e7       	ldi	r24, 0x7B	; 123
     442:	97 e0       	ldi	r25, 0x07	; 7
     444:	0e 94 65 08 	call	0x10ca

	// initialize parser system
	parserInit();
     448:	0e 94 7f 00 	call	0xfe
	// direct output to uart (serial port)
	parserSetOutputFunc(put_char0);
     44c:	8b e7       	ldi	r24, 0x7B	; 123
     44e:	97 e0       	ldi	r25, 0x07	; 7
     450:	0e 94 a7 00 	call	0x14e
	// add commands to the command database
	parserAddCommand("l",		setLeftServo);
     454:	6d e7       	ldi	r22, 0x7D	; 125
     456:	72 e0       	ldi	r23, 0x02	; 2
     458:	82 e6       	ldi	r24, 0x62	; 98
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 88 00 	call	0x110
	parserAddCommand("r",		setRightServo);
     460:	66 ea       	ldi	r22, 0xA6	; 166
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	84 e6       	ldi	r24, 0x64	; 100
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 88 00 	call	0x110
    parserAddCommand("t", 		setThrottleServo);
     46c:	6f ec       	ldi	r22, 0xCF	; 207
     46e:	72 e0       	ldi	r23, 0x02	; 2
     470:	86 e6       	ldi	r24, 0x66	; 102
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 88 00 	call	0x110
	parserAddCommand("p", 		setCamPanServo);
     478:	68 ef       	ldi	r22, 0xF8	; 248
     47a:	72 e0       	ldi	r23, 0x02	; 2
     47c:	88 e6       	ldi	r24, 0x68	; 104
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 88 00 	call	0x110
	parserAddCommand("i", 		setCamTiltServo);
     484:	61 e2       	ldi	r22, 0x21	; 33
     486:	73 e0       	ldi	r23, 0x03	; 3
     488:	8a e6       	ldi	r24, 0x6A	; 106
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 88 00 	call	0x110
	
	// initialize the timer system -- FROM AVRLIB
	//timerInit();
	
	//////////////////////////////////////////////////Servos//////////////////////////
	servoInit();
     490:	0e 94 49 06 	call	0xc92
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	65 e1       	ldi	r22, 0x15	; 21
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	ca 01       	movw	r24, r20
     49e:	0e 94 91 06 	call	0xd22
	servoSetChannelIO(1, _SFR_IO_ADDR(PORTC), PC1);
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	65 e1       	ldi	r22, 0x15	; 21
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	ca 01       	movw	r24, r20
     4ac:	0e 94 91 06 	call	0xd22
	servoSetChannelIO(2, _SFR_IO_ADDR(PORTC), PC2);
     4b0:	42 e0       	ldi	r20, 0x02	; 2
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	65 e1       	ldi	r22, 0x15	; 21
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	ca 01       	movw	r24, r20
     4ba:	0e 94 91 06 	call	0xd22
	servoSetChannelIO(3, _SFR_IO_ADDR(PORTC), PC3);
     4be:	43 e0       	ldi	r20, 0x03	; 3
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	65 e1       	ldi	r22, 0x15	; 21
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	ca 01       	movw	r24, r20
     4c8:	0e 94 91 06 	call	0xd22
	servoSetChannelIO(4, _SFR_IO_ADDR(PORTC), PC4);
     4cc:	44 e0       	ldi	r20, 0x04	; 4
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	65 e1       	ldi	r22, 0x15	; 21
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	ca 01       	movw	r24, r20
     4d6:	0e 94 91 06 	call	0xd22

	// set port pins to output
	outb(DDRC, 0x1F);
     4da:	8f e1       	ldi	r24, 0x1F	; 31
     4dc:	84 bb       	out	0x14, r24	; 20

	
	#define SPEED_SERVO	1
	//////////////////////////////////////////////////////////////////////////////////
	
	AvrXRunTask(TCB(getCommands));
     4de:	84 e5       	ldi	r24, 0x54	; 84
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 08 0e 	call	0x1c10
	AvrXRunTask(TCB(getUAVStatus));
     4e6:	8b e5       	ldi	r24, 0x5B	; 91
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 08 0e 	call	0x1c10

    
	Epilog();
     4ee:	0e 94 c3 0d 	call	0x1b86
	return(0);
}
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0c 94 dc 0f 	jmp	0x1fb8

000004fa <setLeftServo>:

void setLeftServo(void)
{	
	leftServoPos = parserGetArgInt();
     4fa:	0e 94 fb 00 	call	0x1f6
     4fe:	90 93 61 00 	sts	0x0061, r25
     502:	80 93 60 00 	sts	0x0060, r24
	servoSetPosition(LEFT_SERVO_CHAN, (char)leftServoPos);
     506:	80 91 60 00 	lds	r24, 0x0060
     50a:	99 27       	eor	r25, r25
     50c:	87 fd       	sbrc	r24, 7
     50e:	90 95       	com	r25
     510:	bc 01       	movw	r22, r24
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 bc 06 	call	0xd78
	if (DEBUG)
	{	printf("e0");
     51a:	8c e6       	ldi	r24, 0x6C	; 108
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	0e 94 26 09 	call	0x124c
		putchar('\r');
     526:	60 91 31 03 	lds	r22, 0x0331
     52a:	70 91 32 03 	lds	r23, 0x0332
     52e:	8d e0       	ldi	r24, 0x0D	; 13
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 eb 08 	call	0x11d6
		putchar('\n');
     536:	60 91 31 03 	lds	r22, 0x0331
     53a:	70 91 32 03 	lds	r23, 0x0332
     53e:	8a e0       	ldi	r24, 0x0A	; 10
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 eb 08 	call	0x11d6
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	08 95       	ret

0000054c <setRightServo>:
	}
}

void setRightServo(void)
{	
	rightServoPos = parserGetArgInt();
     54c:	0e 94 fb 00 	call	0x1f6
     550:	90 93 c2 00 	sts	0x00C2, r25
     554:	80 93 c1 00 	sts	0x00C1, r24
	servoSetPosition(RIGHT_SERVO_CHAN, (char)rightServoPos);
     558:	80 91 c1 00 	lds	r24, 0x00C1
     55c:	99 27       	eor	r25, r25
     55e:	87 fd       	sbrc	r24, 7
     560:	90 95       	com	r25
     562:	bc 01       	movw	r22, r24
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 bc 06 	call	0xd78
	if (DEBUG)
	{	printf("e0");
     56c:	8c e6       	ldi	r24, 0x6C	; 108
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	0e 94 26 09 	call	0x124c
		putchar('\r');
     578:	60 91 31 03 	lds	r22, 0x0331
     57c:	70 91 32 03 	lds	r23, 0x0332
     580:	8d e0       	ldi	r24, 0x0D	; 13
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 eb 08 	call	0x11d6
		putchar('\n');
     588:	60 91 31 03 	lds	r22, 0x0331
     58c:	70 91 32 03 	lds	r23, 0x0332
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 eb 08 	call	0x11d6
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	08 95       	ret

0000059e <setThrottleServo>:
	}
}

void setThrottleServo(void)
{
	throttleServoPos = parserGetArgInt();
     59e:	0e 94 fb 00 	call	0x1f6
     5a2:	90 93 6f 01 	sts	0x016F, r25
     5a6:	80 93 6e 01 	sts	0x016E, r24
	servoSetPosition(THROTTLE_SERVO_CHAN, (char)throttleServoPos);
     5aa:	80 91 6e 01 	lds	r24, 0x016E
     5ae:	99 27       	eor	r25, r25
     5b0:	87 fd       	sbrc	r24, 7
     5b2:	90 95       	com	r25
     5b4:	bc 01       	movw	r22, r24
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 bc 06 	call	0xd78
	if (DEBUG)
	{	printf("e0");
     5be:	8c e6       	ldi	r24, 0x6C	; 108
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 26 09 	call	0x124c
		putchar('\r');
     5ca:	60 91 31 03 	lds	r22, 0x0331
     5ce:	70 91 32 03 	lds	r23, 0x0332
     5d2:	8d e0       	ldi	r24, 0x0D	; 13
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 eb 08 	call	0x11d6
		putchar('\n');
     5da:	60 91 31 03 	lds	r22, 0x0331
     5de:	70 91 32 03 	lds	r23, 0x0332
     5e2:	8a e0       	ldi	r24, 0x0A	; 10
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 eb 08 	call	0x11d6
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	08 95       	ret

000005f0 <setCamPanServo>:
	}
}

void setCamPanServo(void)
{
	camPanServoPos = parserGetArgInt();
     5f0:	0e 94 fb 00 	call	0x1f6
     5f4:	90 93 a5 00 	sts	0x00A5, r25
     5f8:	80 93 a4 00 	sts	0x00A4, r24
	servoSetPosition(CAM_PAN_SERVO_CHAN, (char)camPanServoPos);
     5fc:	80 91 a4 00 	lds	r24, 0x00A4
     600:	99 27       	eor	r25, r25
     602:	87 fd       	sbrc	r24, 7
     604:	90 95       	com	r25
     606:	bc 01       	movw	r22, r24
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 bc 06 	call	0xd78
	if (DEBUG)
	{	printf("e0");
     610:	8c e6       	ldi	r24, 0x6C	; 108
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	0e 94 26 09 	call	0x124c
		putchar('\r');
     61c:	60 91 31 03 	lds	r22, 0x0331
     620:	70 91 32 03 	lds	r23, 0x0332
     624:	8d e0       	ldi	r24, 0x0D	; 13
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 eb 08 	call	0x11d6
		putchar('\n');
     62c:	60 91 31 03 	lds	r22, 0x0331
     630:	70 91 32 03 	lds	r23, 0x0332
     634:	8a e0       	ldi	r24, 0x0A	; 10
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 eb 08 	call	0x11d6
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	08 95       	ret

00000642 <setCamTiltServo>:
	}
}

void setCamTiltServo(void)
{
	camTiltServoPos = parserGetArgInt();
     642:	0e 94 fb 00 	call	0x1f6
     646:	90 93 c0 00 	sts	0x00C0, r25
     64a:	80 93 bf 00 	sts	0x00BF, r24
	servoSetPosition(CAM_TILT_SERVO_CHAN, (char)camTiltServoPos);
     64e:	80 91 bf 00 	lds	r24, 0x00BF
     652:	99 27       	eor	r25, r25
     654:	87 fd       	sbrc	r24, 7
     656:	90 95       	com	r25
     658:	bc 01       	movw	r22, r24
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 bc 06 	call	0xd78
	if (DEBUG)
	{	printf("Camera Tilt Servo Set: %d", camTiltServoPos);
     662:	80 91 bf 00 	lds	r24, 0x00BF
     666:	90 91 c0 00 	lds	r25, 0x00C0
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	8f e6       	ldi	r24, 0x6F	; 111
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	0e 94 26 09 	call	0x124c
		putchar('\r');
     67a:	60 91 31 03 	lds	r22, 0x0331
     67e:	70 91 32 03 	lds	r23, 0x0332
     682:	8d e0       	ldi	r24, 0x0D	; 13
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 eb 08 	call	0x11d6
		putchar('\n');
     68a:	60 91 31 03 	lds	r22, 0x0331
     68e:	70 91 32 03 	lds	r23, 0x0332
     692:	8a e0       	ldi	r24, 0x0A	; 10
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 eb 08 	call	0x11d6
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	08 95       	ret

000006a4 <delay_us>:
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 
     6a4:	03 96       	adiw	r24, 0x03	; 3
     6a6:	65 e0       	ldi	r22, 0x05	; 5
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	0e 94 8b 0f 	call	0x1f16
     6ae:	cb 01       	movw	r24, r22
     6b0:	aa 27       	eor	r26, r26
     6b2:	bb 27       	eor	r27, r27
     6b4:	24 e0       	ldi	r18, 0x04	; 4
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	aa 1f       	adc	r26, r26
     6bc:	bb 1f       	adc	r27, r27
     6be:	2a 95       	dec	r18
     6c0:	d1 f7       	brne	.-12     	; 0x6b6

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	11 f0       	breq	.+4      	; 0x6ca
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	fc cf       	rjmp	.-8      	; 0x6c2
     6ca:	08 95       	ret

000006cc <timerDetach>:
}
/*
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 4000;

	unsigned short cnt;
	asm volatile ("\n"
                  "L_dl1%=:\n\t"
                  "mov %A0, %A2\n\t"
                  "mov %B0, %B2\n"
                  "L_dl2%=:\n\t"
                  "sbiw %A0, 1\n\t"
                  "brne L_dl2%=\n\t"
                  "dec %1\n\t" "brne L_dl1%=\n\t":"=&w" (cnt)
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
	timer1Init();
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
	#endif
	// enable interrupts
	sei();
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt

	timer0ClearOverflowCount();				// initialize time registers
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
	outb(TCNT1H, 0);						// reset TCNT1
	outb(TCNT1L, 0);
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow

	timer2ClearOverflowCount();				// initialize time registers
}
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
}
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
}

u16 timer1GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR1B) & TIMER_PRESCALE_MASK)));
}

#ifdef TCNT2	// support timer2 only if it exists
u16 timer2GetPrescaler(void)
{
	//TODO: can we assume for all 3-timer AVR processors,
	// that timer2 is the RTC timer?

	// get the current prescaler setting
	return (pgm_read_word(TimerRTCPrescaleFactor+(inb(TCCR2) & TIMER_PRESCALE_MASK)));
}
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
	}
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     6cc:	88 30       	cpi	r24, 0x08	; 8
     6ce:	40 f4       	brcc	.+16     	; 0x6e0
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     6d0:	e8 2f       	mov	r30, r24
     6d2:	ff 27       	eor	r31, r31
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	ec 56       	subi	r30, 0x6C	; 108
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	11 82       	std	Z+1, r1	; 0x01
     6de:	10 82       	st	Z, r1
     6e0:	08 95       	ret

000006e2 <timer0SetPrescaler>:
     6e2:	93 b7       	in	r25, 0x33	; 51
     6e4:	98 7f       	andi	r25, 0xF8	; 248
     6e6:	98 2b       	or	r25, r24
     6e8:	93 bf       	out	0x33, r25	; 51
     6ea:	08 95       	ret

000006ec <timer0ClearOverflowCount>:
	}
}
/*
u32 timerMsToTics(u16 ms)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of timer tics in x milliseconds
	return (ms*(F_CPU/(prescaleDiv*256)))/1000;
}

u16 timerTicsToMs(u32 tics)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
	// pauses for exactly <pause_ms> number of milliseconds
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
	// reset pause timer overflow count
	TimerPauseReg = 0;
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
	{
		if( TimerPauseReg < (pause>>8));
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
			sleep_mode();
		}
	}

	/* old inaccurate code, for reference
	
	// calculate delay for [pause_ms] milliseconds
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	u32 pause = (pause_ms*(F_CPU/(prescaleDiv*256)))/1000;
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     6ec:	10 92 6d 02 	sts	0x026D, r1
     6f0:	10 92 6e 02 	sts	0x026E, r1
     6f4:	10 92 6f 02 	sts	0x026F, r1
     6f8:	10 92 70 02 	sts	0x0270, r1
     6fc:	08 95       	ret

000006fe <timer0Init>:
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	0e 94 71 03 	call	0x6e2
     704:	12 be       	out	0x32, r1	; 50
     706:	89 b7       	in	r24, 0x39	; 57
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	89 bf       	out	0x39, r24	; 57
     70c:	0e 94 76 03 	call	0x6ec
     710:	08 95       	ret

00000712 <timer1SetPrescaler>:
     712:	9e b5       	in	r25, 0x2e	; 46
     714:	98 7f       	andi	r25, 0xF8	; 248
     716:	98 2b       	or	r25, r24
     718:	9e bd       	out	0x2e, r25	; 46
     71a:	08 95       	ret

0000071c <timer1Init>:
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	0e 94 89 03 	call	0x712
     722:	1d bc       	out	0x2d, r1	; 45
     724:	1c bc       	out	0x2c, r1	; 44
     726:	89 b7       	in	r24, 0x39	; 57
     728:	84 60       	ori	r24, 0x04	; 4
     72a:	89 bf       	out	0x39, r24	; 57
     72c:	08 95       	ret

0000072e <timer2SetPrescaler>:
     72e:	95 b5       	in	r25, 0x25	; 37
     730:	98 7f       	andi	r25, 0xF8	; 248
     732:	98 2b       	or	r25, r24
     734:	95 bd       	out	0x25, r25	; 37
     736:	08 95       	ret

00000738 <timer2ClearOverflowCount>:
}

long timer0GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer0ClearOverflowCount() command was called)
	return Timer0Reg0;
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     738:	10 92 75 02 	sts	0x0275, r1
     73c:	10 92 76 02 	sts	0x0276, r1
     740:	10 92 77 02 	sts	0x0277, r1
     744:	10 92 78 02 	sts	0x0278, r1
     748:	08 95       	ret

0000074a <timer2Init>:
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	0e 94 97 03 	call	0x72e
     750:	14 bc       	out	0x24, r1	; 36
     752:	89 b7       	in	r24, 0x39	; 57
     754:	80 64       	ori	r24, 0x40	; 64
     756:	89 bf       	out	0x39, r24	; 57
     758:	0e 94 9c 03 	call	0x738
     75c:	08 95       	ret

0000075e <timerInit>:
     75e:	cf 93       	push	r28
     760:	c0 e0       	ldi	r28, 0x00	; 0
     762:	8c 2f       	mov	r24, r28
     764:	0e 94 66 03 	call	0x6cc
     768:	cf 5f       	subi	r28, 0xFF	; 255
     76a:	c8 30       	cpi	r28, 0x08	; 8
     76c:	d0 f3       	brcs	.-12     	; 0x762
     76e:	0e 94 7f 03 	call	0x6fe
     772:	0e 94 8e 03 	call	0x71c
     776:	0e 94 a5 03 	call	0x74a
     77a:	78 94       	sei
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <timer0GetPrescaler>:
     780:	83 b7       	in	r24, 0x33	; 51
     782:	e8 2f       	mov	r30, r24
     784:	ff 27       	eor	r31, r31
     786:	e7 70       	andi	r30, 0x07	; 7
     788:	f0 70       	andi	r31, 0x00	; 0
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	e8 54       	subi	r30, 0x48	; 72
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	85 91       	lpm	r24, Z+
     794:	94 91       	lpm	r25, Z
     796:	08 95       	ret

00000798 <timer1GetPrescaler>:
     798:	8e b5       	in	r24, 0x2e	; 46
     79a:	e8 2f       	mov	r30, r24
     79c:	ff 27       	eor	r31, r31
     79e:	e7 70       	andi	r30, 0x07	; 7
     7a0:	f0 70       	andi	r31, 0x00	; 0
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	e8 54       	subi	r30, 0x48	; 72
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	85 91       	lpm	r24, Z+
     7ac:	94 91       	lpm	r25, Z
     7ae:	08 95       	ret

000007b0 <timer2GetPrescaler>:
     7b0:	85 b5       	in	r24, 0x25	; 37
     7b2:	e8 2f       	mov	r30, r24
     7b4:	ff 27       	eor	r31, r31
     7b6:	e7 70       	andi	r30, 0x07	; 7
     7b8:	f0 70       	andi	r31, 0x00	; 0
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	e8 55       	subi	r30, 0x58	; 88
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	85 91       	lpm	r24, Z+
     7c4:	94 91       	lpm	r25, Z
     7c6:	08 95       	ret

000007c8 <timerAttach>:
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	40 f4       	brcc	.+16     	; 0x7dc
     7cc:	e8 2f       	mov	r30, r24
     7ce:	ff 27       	eor	r31, r31
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ec 56       	subi	r30, 0x6C	; 108
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	71 83       	std	Z+1, r23	; 0x01
     7da:	60 83       	st	Z, r22
     7dc:	08 95       	ret

000007de <timerPause>:
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	ec 01       	movw	r28, r24
     7ee:	d2 b6       	in	r13, 0x32	; 50
     7f0:	10 92 71 02 	sts	0x0271, r1
     7f4:	10 92 72 02 	sts	0x0272, r1
     7f8:	10 92 73 02 	sts	0x0273, r1
     7fc:	10 92 74 02 	sts	0x0274, r1
     800:	0e 94 c0 03 	call	0x780
     804:	9c 01       	movw	r18, r24
     806:	44 27       	eor	r20, r20
     808:	55 27       	eor	r21, r21
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	74 e2       	ldi	r23, 0x24	; 36
     80e:	84 ef       	ldi	r24, 0xF4	; 244
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 c1 0f 	call	0x1f82
     816:	29 3b       	cpi	r18, 0xB9	; 185
     818:	8d e8       	ldi	r24, 0x8D	; 141
     81a:	38 07       	cpc	r19, r24
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	48 07       	cpc	r20, r24
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	58 07       	cpc	r21, r24
     824:	c0 f4       	brcc	.+48     	; 0x856
     826:	87 e2       	ldi	r24, 0x27	; 39
     828:	c1 31       	cpi	r28, 0x11	; 17
     82a:	d8 07       	cpc	r29, r24
     82c:	a0 f4       	brcc	.+40     	; 0x856
     82e:	ce 01       	movw	r24, r28
     830:	aa 27       	eor	r26, r26
     832:	bb 27       	eor	r27, r27
     834:	bc 01       	movw	r22, r24
     836:	cd 01       	movw	r24, r26
     838:	0e 94 6c 0f 	call	0x1ed8
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	28 ee       	ldi	r18, 0xE8	; 232
     846:	33 e0       	ldi	r19, 0x03	; 3
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	0e 94 9f 0f 	call	0x1f3e
     850:	fa 01       	movw	r30, r20
     852:	e9 01       	movw	r28, r18
     854:	11 c0       	rjmp	.+34     	; 0x878
     856:	7e 01       	movw	r14, r28
     858:	00 27       	eor	r16, r16
     85a:	11 27       	eor	r17, r17
     85c:	ca 01       	movw	r24, r20
     85e:	b9 01       	movw	r22, r18
     860:	28 ee       	ldi	r18, 0xE8	; 232
     862:	33 e0       	ldi	r19, 0x03	; 3
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	0e 94 9f 0f 	call	0x1f3e
     86c:	c8 01       	movw	r24, r16
     86e:	b7 01       	movw	r22, r14
     870:	0e 94 6c 0f 	call	0x1ed8
     874:	fc 01       	movw	r30, r24
     876:	eb 01       	movw	r28, r22
     878:	80 91 71 02 	lds	r24, 0x0271
     87c:	90 91 72 02 	lds	r25, 0x0272
     880:	a0 91 73 02 	lds	r26, 0x0273
     884:	b0 91 74 02 	lds	r27, 0x0274
     888:	22 27       	eor	r18, r18
     88a:	38 2f       	mov	r19, r24
     88c:	49 2f       	mov	r20, r25
     88e:	5a 2f       	mov	r21, r26
     890:	82 b7       	in	r24, 0x32	; 50
     892:	99 27       	eor	r25, r25
     894:	aa 27       	eor	r26, r26
     896:	bb 27       	eor	r27, r27
     898:	28 2b       	or	r18, r24
     89a:	39 2b       	or	r19, r25
     89c:	4a 2b       	or	r20, r26
     89e:	5b 2b       	or	r21, r27
     8a0:	cd 0d       	add	r28, r13
     8a2:	d1 1d       	adc	r29, r1
     8a4:	e1 1d       	adc	r30, r1
     8a6:	f1 1d       	adc	r31, r1
     8a8:	2c 17       	cp	r18, r28
     8aa:	3d 07       	cpc	r19, r29
     8ac:	4e 07       	cpc	r20, r30
     8ae:	5f 07       	cpc	r21, r31
     8b0:	58 f5       	brcc	.+86     	; 0x908
     8b2:	80 91 71 02 	lds	r24, 0x0271
     8b6:	90 91 72 02 	lds	r25, 0x0272
     8ba:	a0 91 73 02 	lds	r26, 0x0273
     8be:	b0 91 74 02 	lds	r27, 0x0274
     8c2:	85 b7       	in	r24, 0x35	; 53
     8c4:	8f 78       	andi	r24, 0x8F	; 143
     8c6:	85 bf       	out	0x35, r24	; 53
     8c8:	85 b7       	in	r24, 0x35	; 53
     8ca:	80 68       	ori	r24, 0x80	; 128
     8cc:	85 bf       	out	0x35, r24	; 53
     8ce:	88 95       	sleep
     8d0:	85 b7       	in	r24, 0x35	; 53
     8d2:	8f 77       	andi	r24, 0x7F	; 127
     8d4:	85 bf       	out	0x35, r24	; 53
     8d6:	80 91 71 02 	lds	r24, 0x0271
     8da:	90 91 72 02 	lds	r25, 0x0272
     8de:	a0 91 73 02 	lds	r26, 0x0273
     8e2:	b0 91 74 02 	lds	r27, 0x0274
     8e6:	ba 2f       	mov	r27, r26
     8e8:	a9 2f       	mov	r26, r25
     8ea:	98 2f       	mov	r25, r24
     8ec:	88 27       	eor	r24, r24
     8ee:	22 b7       	in	r18, 0x32	; 50
     8f0:	33 27       	eor	r19, r19
     8f2:	44 27       	eor	r20, r20
     8f4:	55 27       	eor	r21, r21
     8f6:	82 2b       	or	r24, r18
     8f8:	93 2b       	or	r25, r19
     8fa:	a4 2b       	or	r26, r20
     8fc:	b5 2b       	or	r27, r21
     8fe:	8c 17       	cp	r24, r28
     900:	9d 07       	cpc	r25, r29
     902:	ae 07       	cpc	r26, r30
     904:	bf 07       	cpc	r27, r31
     906:	a8 f2       	brcs	.-86     	; 0x8b2
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	08 95       	ret

00000918 <timer0GetOverflowCount>:
     918:	80 91 6d 02 	lds	r24, 0x026D
     91c:	90 91 6e 02 	lds	r25, 0x026E
     920:	a0 91 6f 02 	lds	r26, 0x026F
     924:	b0 91 70 02 	lds	r27, 0x0270
     928:	bc 01       	movw	r22, r24
     92a:	cd 01       	movw	r24, r26
     92c:	08 95       	ret

0000092e <timer2GetOverflowCount>:
}

long timer2GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer2ClearOverflowCount() command was called)
	return Timer2Reg0;
     92e:	80 91 75 02 	lds	r24, 0x0275
     932:	90 91 76 02 	lds	r25, 0x0276
     936:	a0 91 77 02 	lds	r26, 0x0277
     93a:	b0 91 78 02 	lds	r27, 0x0278
}
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	08 95       	ret

00000944 <timer1PWMInit>:
#endif

void timer1PWMInit(u08 bitRes)
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     944:	89 30       	cpi	r24, 0x09	; 9
     946:	31 f4       	brne	.+12     	; 0x954
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     948:	8f b5       	in	r24, 0x2f	; 47
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     94e:	8f b5       	in	r24, 0x2f	; 47
     950:	8e 7f       	andi	r24, 0xFE	; 254
     952:	0a c0       	rjmp	.+20     	; 0x968
	}
	else if( bitRes == 10 )
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	19 f4       	brne	.+6      	; 0x95e
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     958:	8f b5       	in	r24, 0x2f	; 47
     95a:	82 60       	ori	r24, 0x02	; 2
     95c:	02 c0       	rjmp	.+4      	; 0x962
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     95e:	8f b5       	in	r24, 0x2f	; 47
     960:	8d 7f       	andi	r24, 0xFD	; 253
     962:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     964:	8f b5       	in	r24, 0x2f	; 47
     966:	81 60       	ori	r24, 0x01	; 1
     968:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     96a:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     96c:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     96e:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     970:	18 bc       	out	0x28, r1	; 40
     972:	08 95       	ret

00000974 <timer1PWMInitICR>:
}

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
     974:	9c 01       	movw	r18, r24
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     976:	8f b5       	in	r24, 0x2f	; 47
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1A,WGM11);
     97c:	8f b5       	in	r24, 0x2f	; 47
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1B,WGM12);
     982:	8e b5       	in	r24, 0x2e	; 46
     984:	88 60       	ori	r24, 0x08	; 8
     986:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1B,WGM13);
     988:	8e b5       	in	r24, 0x2e	; 46
     98a:	80 61       	ori	r24, 0x10	; 16
     98c:	8e bd       	out	0x2e, r24	; 46
	
	// set top count value
	ICR1 = topcount;
     98e:	37 bd       	out	0x27, r19	; 39
     990:	26 bd       	out	0x26, r18	; 38
	
	// clear output compare value A
	OCR1A = 0;
     992:	1b bc       	out	0x2b, r1	; 43
     994:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	OCR1B = 0;
     996:	19 bc       	out	0x29, r1	; 41
     998:	18 bc       	out	0x28, r1	; 40
     99a:	08 95       	ret

0000099c <timer1PWMAOff>:

}
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
	timer1PWMBOff();
}

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
	cbi(TCCR1A,COM1A0);
}

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
     99c:	8f b5       	in	r24, 0x2f	; 47
     99e:	8f 77       	andi	r24, 0x7F	; 127
     9a0:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     9a2:	8f b5       	in	r24, 0x2f	; 47
     9a4:	8f 7b       	andi	r24, 0xBF	; 191
     9a6:	8f bd       	out	0x2f, r24	; 47
     9a8:	08 95       	ret

000009aa <timer1PWMBOff>:
}

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
     9aa:	8f b5       	in	r24, 0x2f	; 47
     9ac:	8f 7d       	andi	r24, 0xDF	; 223
     9ae:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     9b0:	8f b5       	in	r24, 0x2f	; 47
     9b2:	8f 7e       	andi	r24, 0xEF	; 239
     9b4:	8f bd       	out	0x2f, r24	; 47
     9b6:	08 95       	ret

000009b8 <timer1PWMOff>:
     9b8:	8f b5       	in	r24, 0x2f	; 47
     9ba:	8d 7f       	andi	r24, 0xFD	; 253
     9bc:	8f bd       	out	0x2f, r24	; 47
     9be:	8f b5       	in	r24, 0x2f	; 47
     9c0:	8e 7f       	andi	r24, 0xFE	; 254
     9c2:	8f bd       	out	0x2f, r24	; 47
     9c4:	0e 94 ce 04 	call	0x99c
     9c8:	0e 94 d5 04 	call	0x9aa
     9cc:	08 95       	ret

000009ce <timer1PWMAOn>:
     9ce:	8f b5       	in	r24, 0x2f	; 47
     9d0:	80 68       	ori	r24, 0x80	; 128
     9d2:	8f bd       	out	0x2f, r24	; 47
     9d4:	8f b5       	in	r24, 0x2f	; 47
     9d6:	8f 7b       	andi	r24, 0xBF	; 191
     9d8:	8f bd       	out	0x2f, r24	; 47
     9da:	08 95       	ret

000009dc <timer1PWMBOn>:
     9dc:	8f b5       	in	r24, 0x2f	; 47
     9de:	80 62       	ori	r24, 0x20	; 32
     9e0:	8f bd       	out	0x2f, r24	; 47
     9e2:	8f b5       	in	r24, 0x2f	; 47
     9e4:	8f 7e       	andi	r24, 0xEF	; 239
     9e6:	8f bd       	out	0x2f, r24	; 47
     9e8:	08 95       	ret

000009ea <timer1PWMASet>:
}

void timer1PWMASet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel A
	// this PWM output is generated on OC1A pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     9ea:	9b bd       	out	0x2b, r25	; 43
     9ec:	8a bd       	out	0x2a, r24	; 42
     9ee:	08 95       	ret

000009f0 <timer1PWMBSet>:
}

void timer1PWMBSet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel B
	// this PWM output is generated on OC1B pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     9f0:	99 bd       	out	0x29, r25	; 41
     9f2:	88 bd       	out	0x28, r24	; 40
     9f4:	08 95       	ret

000009f6 <__vector_9>:
}

///!! WARINING -- CHANGED TO AVOID INTERFERENCE WITH AVRX  (See if it recovers...)
#ifdef SIG_OVERFLOW0
#else
//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{
	Timer0Reg0++;			// increment low-order counter

	// increment pause counter
	TimerPauseReg++;

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
		TimerIntFunc[TIMER0OVERFLOW_INT]();
}
#endif

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	ef 93       	push	r30
     a16:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     a18:	80 91 96 00 	lds	r24, 0x0096
     a1c:	90 91 97 00 	lds	r25, 0x0097
     a20:	89 2b       	or	r24, r25
     a22:	29 f0       	breq	.+10     	; 0xa2e
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     a24:	e0 91 96 00 	lds	r30, 0x0096
     a28:	f0 91 97 00 	lds	r31, 0x0097
     a2c:	09 95       	icall
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <__vector_5>:
}

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW2)
{
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	2f 93       	push	r18
     a5c:	3f 93       	push	r19
     a5e:	4f 93       	push	r20
     a60:	5f 93       	push	r21
     a62:	6f 93       	push	r22
     a64:	7f 93       	push	r23
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     a72:	80 91 75 02 	lds	r24, 0x0275
     a76:	90 91 76 02 	lds	r25, 0x0276
     a7a:	a0 91 77 02 	lds	r26, 0x0277
     a7e:	b0 91 78 02 	lds	r27, 0x0278
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 75 02 	sts	0x0275, r24
     a8c:	90 93 76 02 	sts	0x0276, r25
     a90:	a0 93 77 02 	sts	0x0277, r26
     a94:	b0 93 78 02 	sts	0x0278, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     a98:	80 91 9e 00 	lds	r24, 0x009E
     a9c:	90 91 9f 00 	lds	r25, 0x009F
     aa0:	89 2b       	or	r24, r25
     aa2:	29 f0       	breq	.+10     	; 0xaae
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     aa4:	e0 91 9e 00 	lds	r30, 0x009E
     aa8:	f0 91 9f 00 	lds	r31, 0x009F
     aac:	09 95       	icall
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <__vector_10>:
}
#endif

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE0)
{
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     af2:	80 91 a2 00 	lds	r24, 0x00A2
     af6:	90 91 a3 00 	lds	r25, 0x00A3
     afa:	89 2b       	or	r24, r25
     afc:	29 f0       	breq	.+10     	; 0xb08
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     afe:	e0 91 a2 00 	lds	r30, 0x00A2
     b02:	f0 91 a3 00 	lds	r31, 0x00A3
     b06:	09 95       	icall
     b08:	ff 91       	pop	r31
     b0a:	ef 91       	pop	r30
     b0c:	bf 91       	pop	r27
     b0e:	af 91       	pop	r26
     b10:	9f 91       	pop	r25
     b12:	8f 91       	pop	r24
     b14:	7f 91       	pop	r23
     b16:	6f 91       	pop	r22
     b18:	5f 91       	pop	r21
     b1a:	4f 91       	pop	r20
     b1c:	3f 91       	pop	r19
     b1e:	2f 91       	pop	r18
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_7>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1A)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     b4c:	80 91 98 00 	lds	r24, 0x0098
     b50:	90 91 99 00 	lds	r25, 0x0099
     b54:	89 2b       	or	r24, r25
     b56:	29 f0       	breq	.+10     	; 0xb62
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     b58:	e0 91 98 00 	lds	r30, 0x0098
     b5c:	f0 91 99 00 	lds	r31, 0x0099
     b60:	09 95       	icall
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_8>:
}

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1B)
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     ba6:	80 91 9a 00 	lds	r24, 0x009A
     baa:	90 91 9b 00 	lds	r25, 0x009B
     bae:	89 2b       	or	r24, r25
     bb0:	29 f0       	breq	.+10     	; 0xbbc
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     bb2:	e0 91 9a 00 	lds	r30, 0x009A
     bb6:	f0 91 9b 00 	lds	r31, 0x009B
     bba:	09 95       	icall
     bbc:	ff 91       	pop	r31
     bbe:	ef 91       	pop	r30
     bc0:	bf 91       	pop	r27
     bc2:	af 91       	pop	r26
     bc4:	9f 91       	pop	r25
     bc6:	8f 91       	pop	r24
     bc8:	7f 91       	pop	r23
     bca:	6f 91       	pop	r22
     bcc:	5f 91       	pop	r21
     bce:	4f 91       	pop	r20
     bd0:	3f 91       	pop	r19
     bd2:	2f 91       	pop	r18
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	1f 90       	pop	r1
     bdc:	18 95       	reti

00000bde <__vector_6>:
}

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(SIG_INPUT_CAPTURE1)
{
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     c00:	80 91 9c 00 	lds	r24, 0x009C
     c04:	90 91 9d 00 	lds	r25, 0x009D
     c08:	89 2b       	or	r24, r25
     c0a:	29 f0       	breq	.+10     	; 0xc16
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     c0c:	e0 91 9c 00 	lds	r30, 0x009C
     c10:	f0 91 9d 00 	lds	r31, 0x009D
     c14:	09 95       	icall
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <__vector_4>:
}

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE2)
{
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     c5a:	80 91 a0 00 	lds	r24, 0x00A0
     c5e:	90 91 a1 00 	lds	r25, 0x00A1
     c62:	89 2b       	or	r24, r25
     c64:	29 f0       	breq	.+10     	; 0xc70
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     c66:	e0 91 a0 00 	lds	r30, 0x00A0
     c6a:	f0 91 a1 00 	lds	r31, 0x00A1
     c6e:	09 95       	icall
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <servoInit>:
void servoInit(void)
{
	u08 channel;
	// disble the timer1 output compare A interrupt
	cbi(TIMSK, OCIE1A);
     c92:	89 b7       	in	r24, 0x39	; 57
     c94:	8f 7e       	andi	r24, 0xEF	; 239
     c96:	89 bf       	out	0x39, r24	; 57
	// set the prescaler for timer1
	timer1SetPrescaler(TIMER_CLK_DIV256);
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	0e 94 89 03 	call	0x712
	// attach the software PWM service routine to timer1 output compare A
	timerAttach(TIMER1OUTCOMPAREA_INT, servoService);
     c9e:	6c ee       	ldi	r22, 0xEC	; 236
     ca0:	76 e0       	ldi	r23, 0x06	; 6
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	0e 94 e4 03 	call	0x7c8
     ca8:	a2 e2       	ldi	r26, 0x22	; 34
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	55 e1       	ldi	r21, 0x15	; 21
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	ea e7       	ldi	r30, 0x7A	; 122
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	44 e0       	ldi	r20, 0x04	; 4
	// enable and clear channels
	for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
	{
		// set minimum position as default
		ServoChannels[channel].duty = SERVO_MIN;
     cbc:	b3 83       	std	Z+3, r27	; 0x03
     cbe:	a2 83       	std	Z+2, r26	; 0x02
		// set default port and pins assignments
		ServoChannels[channel].port = _SFR_IO_ADDR(SERVO_DEFAULT_PORT);
     cc0:	50 83       	st	Z, r21
		//ServoChannels[channel].port = (unsigned char)&SERVO_DEFAULT_PORT;
		ServoChannels[channel].pin = (1<<channel);
     cc2:	cb 01       	movw	r24, r22
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8
     cd0:	81 83       	std	Z+1, r24	; 0x01
     cd2:	41 50       	subi	r20, 0x01	; 1
     cd4:	2f 5f       	subi	r18, 0xFF	; 255
     cd6:	3f 4f       	sbci	r19, 0xFF	; 255
     cd8:	34 96       	adiw	r30, 0x04	; 4
     cda:	47 ff       	sbrs	r20, 7
     cdc:	ef cf       	rjmp	.-34     	; 0xcbc
		// set channel pin to output
		// THIS IS OBSOLETED BY THE DYNAMIC CHANNEL TO PORT,PIN ASSIGNMENTS
		//outb(SERVODDR, inb(SERVODDR) | (1<<channel));
	}
	// set PosTics
	ServoPosTics = 0;
     cde:	10 92 8f 02 	sts	0x028F, r1
     ce2:	10 92 8e 02 	sts	0x028E, r1
	// set PeriodTics
	ServoPeriodTics = SERVO_MAX*9;
     ce6:	8a ed       	ldi	r24, 0xDA	; 218
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	90 93 91 02 	sts	0x0291, r25
     cee:	80 93 90 02 	sts	0x0290, r24
	// set initial interrupt time
	u16 OCValue;
	// read in current value of output compare register OCR1A
	OCValue =  inb(OCR1AL);		// read low byte of OCR1A
     cf2:	2a b5       	in	r18, 0x2a	; 42
	OCValue += inb(OCR1AH)<<8;	// read high byte of OCR1A
     cf4:	8b b5       	in	r24, 0x2b	; 43
     cf6:	99 27       	eor	r25, r25
     cf8:	98 2f       	mov	r25, r24
     cfa:	88 27       	eor	r24, r24
     cfc:	82 0f       	add	r24, r18
     cfe:	91 1d       	adc	r25, r1
	// increment OCR1A value by nextTics
	OCValue += ServoPeriodTics; 
     d00:	86 52       	subi	r24, 0x26	; 38
     d02:	9b 4f       	sbci	r25, 0xFB	; 251
	// set future output compare time to this new value
	outb(OCR1AH, (OCValue>>8));			// write high byte
     d04:	29 2f       	mov	r18, r25
     d06:	33 27       	eor	r19, r19
     d08:	2b bd       	out	0x2b, r18	; 43
	outb(OCR1AL, (OCValue & 0x00FF));	// write low byte
     d0a:	8a bd       	out	0x2a, r24	; 42
	// enable the timer1 output compare A interrupt
	sbi(TIMSK, OCIE1A);
     d0c:	89 b7       	in	r24, 0x39	; 57
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	89 bf       	out	0x39, r24	; 57
     d12:	08 95       	ret

00000d14 <servoOff>:
}

//! turns off software PWM system
void servoOff(void)
{
	// disable the timer1 output compare A interrupt
	cbi(TIMSK, OCIE1A);
     d14:	89 b7       	in	r24, 0x39	; 57
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	89 bf       	out	0x39, r24	; 57
	// detach the service routine
	timerDetach(TIMER1OUTCOMPAREA_INT);
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	0e 94 66 03 	call	0x6cc
     d20:	08 95       	ret

00000d22 <servoSetChannelIO>:
}

//! set port and I/O pin for channel
void servoSetChannelIO(u08 channel, u08 port, u08 pin)
{
     d22:	24 2f       	mov	r18, r20
	ServoChannels[channel].port = port;
     d24:	e8 2f       	mov	r30, r24
     d26:	ff 27       	eor	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	e6 58       	subi	r30, 0x86	; 134
     d32:	fd 4f       	sbci	r31, 0xFD	; 253
     d34:	60 83       	st	Z, r22
	ServoChannels[channel].pin = (1<<(pin&0x07));
     d36:	33 27       	eor	r19, r19
     d38:	27 70       	andi	r18, 0x07	; 7
     d3a:	30 70       	andi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 c0       	rjmp	.+4      	; 0xd46
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	2a 95       	dec	r18
     d48:	e2 f7       	brpl	.-8      	; 0xd42
     d4a:	81 83       	std	Z+1, r24	; 0x01
     d4c:	08 95       	ret

00000d4e <servoSetPositionRaw>:
}

//! set servo position on channel
void servoSetPosition(u08 channel, u08 position)
{
	// input should be between 0 and SERVO_POSITION_MAX
	u16 pos_scaled;
	// calculate scaled position
	pos_scaled = ((u16)position*(SERVO_MAX-SERVO_MIN)/SERVO_POSITION_MAX)+SERVO_MIN;
	// set position
	servoSetPositionRaw(channel, pos_scaled);
}

//! get servo position on channel
u08 servoGetPosition(u08 channel)
{
	return (u08)( ((servoGetPositionRaw(channel)-SERVO_MIN)*SERVO_POSITION_MAX)/(SERVO_MAX-SERVO_MIN) );
}

//! set servo position on channel (raw unscaled format)
void servoSetPositionRaw(u08 channel, u16 position)
{
	// bind to limits
	position = MAX(position, SERVO_MIN);
     d4e:	62 32       	cpi	r22, 0x22	; 34
     d50:	71 05       	cpc	r23, r1
     d52:	10 f4       	brcc	.+4      	; 0xd58
     d54:	62 e2       	ldi	r22, 0x22	; 34
     d56:	70 e0       	ldi	r23, 0x00	; 0
	position = MIN(position, SERVO_MAX);
     d58:	6b 38       	cpi	r22, 0x8B	; 139
     d5a:	71 05       	cpc	r23, r1
     d5c:	10 f0       	brcs	.+4      	; 0xd62
     d5e:	6a e8       	ldi	r22, 0x8A	; 138
     d60:	70 e0       	ldi	r23, 0x00	; 0
	// set position
	ServoChannels[channel].duty = position;
     d62:	e8 2f       	mov	r30, r24
     d64:	ff 27       	eor	r31, r31
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e6 58       	subi	r30, 0x86	; 134
     d70:	fd 4f       	sbci	r31, 0xFD	; 253
     d72:	73 83       	std	Z+3, r23	; 0x03
     d74:	62 83       	std	Z+2, r22	; 0x02
     d76:	08 95       	ret

00000d78 <servoSetPosition>:
     d78:	28 2f       	mov	r18, r24
     d7a:	88 e6       	ldi	r24, 0x68	; 104
     d7c:	68 9f       	mul	r22, r24
     d7e:	c0 01       	movw	r24, r0
     d80:	11 24       	eor	r1, r1
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	0e 94 8b 0f 	call	0x1f16
     d8a:	cb 01       	movw	r24, r22
     d8c:	82 96       	adiw	r24, 0x22	; 34
     d8e:	bc 01       	movw	r22, r24
     d90:	82 2f       	mov	r24, r18
     d92:	0e 94 a7 06 	call	0xd4e
     d96:	08 95       	ret

00000d98 <servoGetPositionRaw>:
}

//! get servo position on channel (raw unscaled format)
u16 servoGetPositionRaw(u08 channel)
{
	return ServoChannels[channel].duty;
     d98:	e8 2f       	mov	r30, r24
     d9a:	ff 27       	eor	r31, r31
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	e6 58       	subi	r30, 0x86	; 134
     da6:	fd 4f       	sbci	r31, 0xFD	; 253
}
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	08 95       	ret

00000dae <servoGetPosition>:
     dae:	0e 94 cc 06 	call	0xd98
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	82 9f       	mul	r24, r18
     db8:	a0 01       	movw	r20, r0
     dba:	83 9f       	mul	r24, r19
     dbc:	50 0d       	add	r21, r0
     dbe:	92 9f       	mul	r25, r18
     dc0:	50 0d       	add	r21, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	ca 01       	movw	r24, r20
     dc6:	8e 5d       	subi	r24, 0xDE	; 222
     dc8:	91 42       	sbci	r25, 0x21	; 33
     dca:	68 e6       	ldi	r22, 0x68	; 104
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	0e 94 8b 0f 	call	0x1f16
     dd2:	cb 01       	movw	r24, r22
     dd4:	99 27       	eor	r25, r25
     dd6:	08 95       	ret

00000dd8 <servoService>:

void servoService(void)
{
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
	u16 nextTics;

	if(ServoChannel < SERVO_NUM_CHANNELS)
     ddc:	e0 91 79 02 	lds	r30, 0x0279
     de0:	e5 30       	cpi	r30, 0x05	; 5
     de2:	80 f4       	brcc	.+32     	; 0xe04
	{
		// turn off current channel
		outb(_SFR_IO8(ServoChannels[ServoChannel].port), inb(_SFR_IO8(ServoChannels[ServoChannel].port)) & ~(ServoChannels[ServoChannel].pin));
     de4:	ff 27       	eor	r31, r31
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	e6 58       	subi	r30, 0x86	; 134
     df0:	fd 4f       	sbci	r31, 0xFD	; 253
     df2:	80 81       	ld	r24, Z
     df4:	a8 2f       	mov	r26, r24
     df6:	bb 27       	eor	r27, r27
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	90 95       	com	r25
     dfc:	ed 01       	movw	r28, r26
     dfe:	88 a1       	ldd	r24, Y+32	; 0x20
     e00:	89 23       	and	r24, r25
     e02:	88 a3       	std	Y+32, r24	; 0x20
	}
	
	// next channel
	ServoChannel++;
     e04:	80 91 79 02 	lds	r24, 0x0279
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	80 93 79 02 	sts	0x0279, r24

	if(ServoChannel != SERVO_NUM_CHANNELS)
     e0e:	85 30       	cpi	r24, 0x05	; 5
     e10:	19 f1       	breq	.+70     	; 0xe58
	{
		// loop to channel 0 if needed
		if(ServoChannel > SERVO_NUM_CHANNELS)	ServoChannel = 0;
     e12:	86 30       	cpi	r24, 0x06	; 6
     e14:	10 f0       	brcs	.+4      	; 0xe1a
     e16:	10 92 79 02 	sts	0x0279, r1
		// turn on new channel
		outb(_SFR_IO8(ServoChannels[ServoChannel].port), inb(_SFR_IO8(ServoChannels[ServoChannel].port)) | (ServoChannels[ServoChannel].pin));
     e1a:	80 91 79 02 	lds	r24, 0x0279
     e1e:	e8 2f       	mov	r30, r24
     e20:	ff 27       	eor	r31, r31
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	e6 58       	subi	r30, 0x86	; 134
     e2c:	fd 4f       	sbci	r31, 0xFD	; 253
     e2e:	80 81       	ld	r24, Z
     e30:	a8 2f       	mov	r26, r24
     e32:	bb 27       	eor	r27, r27
     e34:	ed 01       	movw	r28, r26
     e36:	88 a1       	ldd	r24, Y+32	; 0x20
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	89 2b       	or	r24, r25
     e3c:	88 a3       	std	Y+32, r24	; 0x20
		// schedule turn off time
		nextTics = ServoChannels[ServoChannel].duty;
     e3e:	80 91 79 02 	lds	r24, 0x0279
     e42:	e8 2f       	mov	r30, r24
     e44:	ff 27       	eor	r31, r31
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	e6 58       	subi	r30, 0x86	; 134
     e50:	fd 4f       	sbci	r31, 0xFD	; 253
     e52:	42 81       	ldd	r20, Z+2	; 0x02
     e54:	53 81       	ldd	r21, Z+3	; 0x03
     e56:	0a c0       	rjmp	.+20     	; 0xe6c
	}
	else //(Channel == SERVO_NUM_CHANNELS)
	{
		// ***we could save time by precalculating this
		// schedule end-of-period
		nextTics = ServoPeriodTics-ServoPosTics;
     e58:	40 91 90 02 	lds	r20, 0x0290
     e5c:	50 91 91 02 	lds	r21, 0x0291
     e60:	80 91 8e 02 	lds	r24, 0x028E
     e64:	90 91 8f 02 	lds	r25, 0x028F
     e68:	48 1b       	sub	r20, r24
     e6a:	59 0b       	sbc	r21, r25
	}

	// schedule next interrupt
	u16 OCValue;
	// read in current value of output compare register OCR1A
	OCValue =  inb(OCR1AL);		// read low byte of OCR1A
     e6c:	2a b5       	in	r18, 0x2a	; 42
	OCValue += inb(OCR1AH)<<8;	// read high byte of OCR1A
     e6e:	8b b5       	in	r24, 0x2b	; 43
     e70:	99 27       	eor	r25, r25
     e72:	98 2f       	mov	r25, r24
     e74:	88 27       	eor	r24, r24
     e76:	82 0f       	add	r24, r18
     e78:	91 1d       	adc	r25, r1
	// increment OCR1A value by nextTics
	OCValue += nextTics;
     e7a:	84 0f       	add	r24, r20
     e7c:	95 1f       	adc	r25, r21
//	OCR1A+=nextTics;
	// set future output compare time to this new value
	outb(OCR1AH, (OCValue>>8));			// write high byte
     e7e:	29 2f       	mov	r18, r25
     e80:	33 27       	eor	r19, r19
     e82:	2b bd       	out	0x2b, r18	; 43
	outb(OCR1AL, (OCValue & 0x00FF));	// write low byte
     e84:	8a bd       	out	0x2a, r24	; 42
	// set our new tic position
	ServoPosTics += nextTics;
     e86:	80 91 8e 02 	lds	r24, 0x028E
     e8a:	90 91 8f 02 	lds	r25, 0x028F
     e8e:	84 0f       	add	r24, r20
     e90:	95 1f       	adc	r25, r21
     e92:	90 93 8f 02 	sts	0x028F, r25
     e96:	80 93 8e 02 	sts	0x028E, r24
	if(ServoPosTics >= ServoPeriodTics) ServoPosTics = 0;
     e9a:	20 91 90 02 	lds	r18, 0x0290
     e9e:	30 91 91 02 	lds	r19, 0x0291
     ea2:	82 17       	cp	r24, r18
     ea4:	93 07       	cpc	r25, r19
     ea6:	20 f0       	brcs	.+8      	; 0xeb0
     ea8:	10 92 8f 02 	sts	0x028F, r1
     eac:	10 92 8e 02 	sts	0x028E, r1
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <InitSerial0>:
     eb6:	89 b9       	out	0x09, r24	; 9
     eb8:	89 2f       	mov	r24, r25
     eba:	99 27       	eor	r25, r25
     ebc:	80 bd       	out	0x20, r24	; 32
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	8b b9       	out	0x0b, r24	; 11
     ec2:	88 e9       	ldi	r24, 0x98	; 152
     ec4:	8a b9       	out	0x0a, r24	; 10
     ec6:	86 e8       	ldi	r24, 0x86	; 134
     ec8:	80 bd       	out	0x20, r24	; 32
     eca:	89 eb       	ldi	r24, 0xB9	; 185
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	0e 94 0b 08 	call	0x1016
     ed2:	84 e6       	ldi	r24, 0x64	; 100
     ed4:	80 93 bf 02 	sts	0x02BF, r24
     ed8:	82 e9       	ldi	r24, 0x92	; 146
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 0b 08 	call	0x1016
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	80 93 98 02 	sts	0x0298, r24
     ee6:	08 95       	ret

00000ee8 <put_c0>:
     ee8:	68 2f       	mov	r22, r24
     eea:	82 e9       	ldi	r24, 0x92	; 146
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0e 94 a8 07 	call	0xf50
     ef2:	55 9a       	sbi	0x0a, 5	; 10
     ef4:	08 95       	ret

00000ef6 <put_char0>:
     ef6:	68 2f       	mov	r22, r24
     ef8:	82 e9       	ldi	r24, 0x92	; 146
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 e5 07 	call	0xfca
     f00:	55 9a       	sbi	0x0a, 5	; 10
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	08 95       	ret

00000f08 <get_c0>:
     f08:	89 eb       	ldi	r24, 0xB9	; 185
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	0e 94 c4 07 	call	0xf88
     f10:	08 95       	ret

00000f12 <get_char0>:
     f12:	89 eb       	ldi	r24, 0xB9	; 185
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 fa 07 	call	0xff4
     f1a:	08 95       	ret

00000f1c <__vector_13>:
     f1c:	0e 94 77 0d 	call	0x1aee
     f20:	57 98       	cbi	0x0a, 7	; 10
     f22:	78 94       	sei
     f24:	6c b1       	in	r22, 0x0c	; 12
     f26:	89 eb       	ldi	r24, 0xB9	; 185
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 a8 07 	call	0xf50
     f2e:	57 9a       	sbi	0x0a, 7	; 10
     f30:	0e 94 c3 0d 	call	0x1b86

00000f34 <__vector_14>:
     f34:	0e 94 77 0d 	call	0x1aee
     f38:	55 98       	cbi	0x0a, 5	; 10
     f3a:	78 94       	sei
     f3c:	82 e9       	ldi	r24, 0x92	; 146
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 c4 07 	call	0xf88
     f44:	97 fd       	sbrc	r25, 7
     f46:	02 c0       	rjmp	.+4      	; 0xf4c
     f48:	8c b9       	out	0x0c, r24	; 12
     f4a:	55 9a       	sbi	0x0a, 5	; 10
     f4c:	0e 94 c3 0d 	call	0x1b86

00000f50 <AvrXPutFifo>:
// and before the test. But this is not a race that will cause
// fifo corruption.

int16_t AvrXPutFifo(pAvrXFifo p, uint8_t c)
{
     f50:	dc 01       	movw	r26, r24
	uint8_t t = p->in+1;
     f52:	fc 01       	movw	r30, r24
     f54:	24 81       	ldd	r18, Z+4	; 0x04
     f56:	92 2f       	mov	r25, r18
     f58:	9f 5f       	subi	r25, 0xFF	; 255
	if (t >= p->size)
     f5a:	86 81       	ldd	r24, Z+6	; 0x06
     f5c:	98 17       	cp	r25, r24
     f5e:	08 f0       	brcs	.+2      	; 0xf62
		t = 0;
     f60:	90 e0       	ldi	r25, 0x00	; 0
	if (t == p->out)	// isFull()
     f62:	fd 01       	movw	r30, r26
     f64:	85 81       	ldd	r24, Z+5	; 0x05
     f66:	98 17       	cp	r25, r24
     f68:	19 f4       	brne	.+6      	; 0xf70
		return FIFO_ERR;
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	9f ef       	ldi	r25, 0xFF	; 255
     f6e:	08 95       	ret
	p->buf[p->in] = c;
     f70:	fd 01       	movw	r30, r26
     f72:	e2 0f       	add	r30, r18
     f74:	f1 1d       	adc	r31, r1
     f76:	67 83       	std	Z+7, r22	; 0x07
	p->in = t;
     f78:	fd 01       	movw	r30, r26
     f7a:	94 83       	std	Z+4, r25	; 0x04
	AvrXSetSemaphore(&p->Producer);
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 7a 0e 	call	0x1cf4
	return FIFO_OK;
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
}
     f86:	08 95       	ret

00000f88 <AvrXPullFifo>:

int16_t AvrXPullFifo(pAvrXFifo p)
{
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	dc 01       	movw	r26, r24
	if (p->in == p->out)	// isEmpty()
     f8e:	fc 01       	movw	r30, r24
     f90:	84 81       	ldd	r24, Z+4	; 0x04
     f92:	95 81       	ldd	r25, Z+5	; 0x05
     f94:	89 17       	cp	r24, r25
     f96:	19 f4       	brne	.+6      	; 0xf9e
		return FIFO_ERR;
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	13 c0       	rjmp	.+38     	; 0xfc4
	uint16_t c = p->buf[p->out];
     f9e:	fd 01       	movw	r30, r26
     fa0:	e9 0f       	add	r30, r25
     fa2:	f1 1d       	adc	r31, r1
     fa4:	87 81       	ldd	r24, Z+7	; 0x07
     fa6:	c8 2f       	mov	r28, r24
     fa8:	dd 27       	eor	r29, r29
	uint8_t t = p->out+1;
     faa:	9f 5f       	subi	r25, 0xFF	; 255
	if (t >= p->size)
     fac:	fd 01       	movw	r30, r26
     fae:	86 81       	ldd	r24, Z+6	; 0x06
     fb0:	98 17       	cp	r25, r24
     fb2:	08 f0       	brcs	.+2      	; 0xfb6
		t = 0;
     fb4:	90 e0       	ldi	r25, 0x00	; 0
	p->out = t;
     fb6:	fd 01       	movw	r30, r26
     fb8:	95 83       	std	Z+5, r25	; 0x05
	AvrXSetSemaphore(&p->Consumer);
     fba:	cd 01       	movw	r24, r26
     fbc:	02 96       	adiw	r24, 0x02	; 2
     fbe:	0e 94 7a 0e 	call	0x1cf4
	return c;
     fc2:	ce 01       	movw	r24, r28
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <AvrXWaitPutFifo>:
}

void AvrXWaitPutFifo(pAvrXFifo p, uint8_t c)
{
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
     fd2:	16 2f       	mov	r17, r22
	while (AvrXPutFifo(p, c) == FIFO_ERR)
     fd4:	04 c0       	rjmp	.+8      	; 0xfde
		AvrXWaitSemaphore(&p->Consumer);
     fd6:	ce 01       	movw	r24, r28
     fd8:	02 96       	adiw	r24, 0x02	; 2
     fda:	0e 94 63 0e 	call	0x1cc6
     fde:	61 2f       	mov	r22, r17
     fe0:	ce 01       	movw	r24, r28
     fe2:	0e 94 a8 07 	call	0xf50
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	a9 f3       	breq	.-22     	; 0xfd6
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	08 95       	ret

00000ff4 <AvrXWaitPullFifo>:
}

int16_t AvrXWaitPullFifo(pAvrXFifo p)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
	int16_t c;
	while ((c = AvrXPullFifo(p)) == FIFO_ERR)
     ffa:	03 c0       	rjmp	.+6      	; 0x1002
		AvrXWaitSemaphore(&p->Producer);
     ffc:	ce 01       	movw	r24, r28
     ffe:	0e 94 63 0e 	call	0x1cc6
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 c4 07 	call	0xf88
    1008:	2f ef       	ldi	r18, 0xFF	; 255
    100a:	8f 3f       	cpi	r24, 0xFF	; 255
    100c:	92 07       	cpc	r25, r18
    100e:	b1 f3       	breq	.-20     	; 0xffc
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <AvrXFlushFifo>:
	return c;
}

void AvrXFlushFifo(pAvrXFifo p)
{
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	8c 01       	movw	r16, r24
	p->in = 0;
    101c:	fc 01       	movw	r30, r24
    101e:	14 82       	std	Z+4, r1	; 0x04
	p->out = 0;
    1020:	15 82       	std	Z+5, r1	; 0x05
	AvrXResetSemaphore(&p->Consumer);
    1022:	02 96       	adiw	r24, 0x02	; 2
    1024:	0e 94 d6 0e 	call	0x1dac
	AvrXResetSemaphore(&p->Producer);
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 d6 0e 	call	0x1dac
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <AvrXPeekFifo>:
}

// Return next character to be removed (without removing it)

int16_t AvrXPeekFifo(pAvrXFifo p)
{
    1034:	fc 01       	movw	r30, r24
	if (p->in == p->out)
    1036:	84 81       	ldd	r24, Z+4	; 0x04
    1038:	95 81       	ldd	r25, Z+5	; 0x05
    103a:	89 17       	cp	r24, r25
    103c:	19 f4       	brne	.+6      	; 0x1044
		return FIFO_ERR;
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	08 95       	ret
	else
		return p->buf[p->out];
    1044:	e9 0f       	add	r30, r25
    1046:	f1 1d       	adc	r31, r1
    1048:	87 81       	ldd	r24, Z+7	; 0x07
    104a:	99 27       	eor	r25, r25
}
    104c:	08 95       	ret

0000104e <AvrXStatFifo>:

// Return size of FIFO (difference between in & out

int16_t AvrXStatFifo(pAvrXFifo p)
{
    104e:	fc 01       	movw	r30, r24
	uint8_t sreg = SREG;
    1050:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1052:	f8 94       	cli
	int16_t c = (uint16_t)p->in - (uint16_t)p->out;
    1054:	94 81       	ldd	r25, Z+4	; 0x04
    1056:	29 2f       	mov	r18, r25
    1058:	33 27       	eor	r19, r19
    105a:	95 81       	ldd	r25, Z+5	; 0x05
    105c:	29 1b       	sub	r18, r25
    105e:	31 09       	sbc	r19, r1
	SREG = sreg;
    1060:	8f bf       	out	0x3f, r24	; 63
	if (c < 0)
    1062:	37 ff       	sbrs	r19, 7
    1064:	03 c0       	rjmp	.+6      	; 0x106c
		c += p->size;
    1066:	86 81       	ldd	r24, Z+6	; 0x06
    1068:	28 0f       	add	r18, r24
    106a:	31 1d       	adc	r19, r1
	return c;
}
    106c:	c9 01       	movw	r24, r18
    106e:	08 95       	ret

00001070 <atoi>:
    1070:	fc 01       	movw	r30, r24
    1072:	88 27       	eor	r24, r24
    1074:	99 27       	eor	r25, r25
    1076:	e8 94       	clt

00001078 <.atoi_loop>:
    1078:	21 91       	ld	r18, Z+
    107a:	22 23       	and	r18, r18
    107c:	f1 f0       	breq	.+60     	; 0x10ba
    107e:	20 32       	cpi	r18, 0x20	; 32
    1080:	d9 f3       	breq	.-10     	; 0x1078
    1082:	29 30       	cpi	r18, 0x09	; 9
    1084:	c9 f3       	breq	.-14     	; 0x1078
    1086:	2a 30       	cpi	r18, 0x0A	; 10
    1088:	b9 f3       	breq	.-18     	; 0x1078
    108a:	2c 30       	cpi	r18, 0x0C	; 12
    108c:	a9 f3       	breq	.-22     	; 0x1078
    108e:	2d 30       	cpi	r18, 0x0D	; 13
    1090:	99 f3       	breq	.-26     	; 0x1078
    1092:	26 37       	cpi	r18, 0x76	; 118
    1094:	89 f3       	breq	.-30     	; 0x1078
    1096:	2b 32       	cpi	r18, 0x2B	; 43
    1098:	19 f0       	breq	.+6      	; 0x10a0
    109a:	2d 32       	cpi	r18, 0x2D	; 45
    109c:	21 f4       	brne	.+8      	; 0x10a6

0000109e <.atoi_neg>:
    109e:	68 94       	set

000010a0 <.atoi_loop2>:
    10a0:	21 91       	ld	r18, Z+
    10a2:	22 23       	and	r18, r18
    10a4:	51 f0       	breq	.+20     	; 0x10ba

000010a6 <.atoi_digit>:
    10a6:	20 33       	cpi	r18, 0x30	; 48
    10a8:	44 f0       	brlt	.+16     	; 0x10ba
    10aa:	2a 33       	cpi	r18, 0x3A	; 58
    10ac:	34 f4       	brge	.+12     	; 0x10ba
    10ae:	20 53       	subi	r18, 0x30	; 48
    10b0:	0e 94 1e 09 	call	0x123c
    10b4:	82 0f       	add	r24, r18
    10b6:	91 1d       	adc	r25, r1
    10b8:	f3 cf       	rjmp	.-26     	; 0x10a0

000010ba <.atoi_sig>:
    10ba:	81 15       	cp	r24, r1
    10bc:	91 05       	cpc	r25, r1
    10be:	21 f0       	breq	.+8      	; 0x10c8
    10c0:	1e f4       	brtc	.+6      	; 0x10c8
    10c2:	80 95       	com	r24
    10c4:	90 95       	com	r25
    10c6:	01 96       	adiw	r24, 0x01	; 1

000010c8 <.atoi_done>:
    10c8:	08 95       	ret

000010ca <fdevopen>:
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	8c 01       	movw	r16, r24
    10d4:	eb 01       	movw	r28, r22
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	a1 f1       	breq	.+104    	; 0x1142
    10da:	6c e0       	ldi	r22, 0x0C	; 12
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 24 0c 	call	0x1848
    10e6:	fc 01       	movw	r30, r24
    10e8:	89 2b       	or	r24, r25
    10ea:	21 f1       	breq	.+72     	; 0x1134
    10ec:	20 97       	sbiw	r28, 0x00	; 0
    10ee:	51 f0       	breq	.+20     	; 0x1104
    10f0:	d3 87       	std	Z+11, r29	; 0x0b
    10f2:	c2 87       	std	Z+10, r28	; 0x0a
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	23 83       	std	Z+3, r18	; 0x03
    10f8:	80 91 2f 03 	lds	r24, 0x032F
    10fc:	90 91 30 03 	lds	r25, 0x0330
    1100:	89 2b       	or	r24, r25
    1102:	d1 f0       	breq	.+52     	; 0x1138
    1104:	01 15       	cp	r16, r1
    1106:	11 05       	cpc	r17, r1
    1108:	a9 f0       	breq	.+42     	; 0x1134
    110a:	11 87       	std	Z+9, r17	; 0x09
    110c:	00 87       	std	Z+8, r16	; 0x08
    110e:	03 81       	ldd	r16, Z+3	; 0x03
    1110:	02 60       	ori	r16, 0x02	; 2
    1112:	03 83       	std	Z+3, r16	; 0x03
    1114:	a0 91 31 03 	lds	r26, 0x0331
    1118:	b0 91 32 03 	lds	r27, 0x0332
    111c:	ab 2b       	or	r26, r27
    111e:	51 f4       	brne	.+20     	; 0x1134
    1120:	f0 93 32 03 	sts	0x0332, r31
    1124:	e0 93 31 03 	sts	0x0331, r30
    1128:	c0 91 33 03 	lds	r28, 0x0333
    112c:	d0 91 34 03 	lds	r29, 0x0334
    1130:	cd 2b       	or	r28, r29
    1132:	51 f0       	breq	.+20     	; 0x1148
    1134:	cf 01       	movw	r24, r30
    1136:	0d c0       	rjmp	.+26     	; 0x1152
    1138:	f0 93 30 03 	sts	0x0330, r31
    113c:	e0 93 2f 03 	sts	0x032F, r30
    1140:	e1 cf       	rjmp	.-62     	; 0x1104
    1142:	67 2b       	or	r22, r23
    1144:	51 f6       	brne	.-108    	; 0x10da
    1146:	05 c0       	rjmp	.+10     	; 0x1152
    1148:	f0 93 34 03 	sts	0x0334, r31
    114c:	e0 93 33 03 	sts	0x0333, r30
    1150:	f1 cf       	rjmp	.-30     	; 0x1134
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <fgetc>:
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	82 2f       	mov	r24, r18
    1166:	99 27       	eor	r25, r25
    1168:	80 ff       	sbrs	r24, 0
    116a:	30 c0       	rjmp	.+96     	; 0x11cc
    116c:	86 fd       	sbrc	r24, 6
    116e:	16 c0       	rjmp	.+44     	; 0x119c
    1170:	82 ff       	sbrs	r24, 2
    1172:	1d c0       	rjmp	.+58     	; 0x11ae
    1174:	e8 81       	ld	r30, Y
    1176:	f9 81       	ldd	r31, Y+1	; 0x01
    1178:	31 91       	ld	r19, Z+
    117a:	43 2f       	mov	r20, r19
    117c:	55 27       	eor	r21, r21
    117e:	47 fd       	sbrc	r20, 7
    1180:	50 95       	com	r21
    1182:	f9 83       	std	Y+1, r31	; 0x01
    1184:	e8 83       	st	Y, r30
    1186:	41 15       	cp	r20, r1
    1188:	51 05       	cpc	r21, r1
    118a:	f1 f0       	breq	.+60     	; 0x11c8
    118c:	ae 81       	ldd	r26, Y+6	; 0x06
    118e:	bf 81       	ldd	r27, Y+7	; 0x07
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	bf 83       	std	Y+7, r27	; 0x07
    1194:	ae 83       	std	Y+6, r26	; 0x06
    1196:	84 2f       	mov	r24, r20
    1198:	99 27       	eor	r25, r25
    119a:	1a c0       	rjmp	.+52     	; 0x11d0
    119c:	2f 7b       	andi	r18, 0xBF	; 191
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	9f 81       	ldd	r25, Y+7	; 0x07
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	9f 83       	std	Y+7, r25	; 0x07
    11a8:	8e 83       	std	Y+6, r24	; 0x06
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	f5 cf       	rjmp	.-22     	; 0x1198
    11ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    11b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    11b2:	09 95       	icall
    11b4:	ac 01       	movw	r20, r24
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	4f 3f       	cpi	r20, 0xFF	; 255
    11ba:	58 07       	cpc	r21, r24
    11bc:	39 f7       	brne	.-50     	; 0x118c
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	20 61       	ori	r18, 0x10	; 16
    11c2:	2b 83       	std	Y+3, r18	; 0x03
    11c4:	ca 01       	movw	r24, r20
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0
    11c8:	20 62       	ori	r18, 0x20	; 32
    11ca:	2b 83       	std	Y+3, r18	; 0x03
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	9f ef       	ldi	r25, 0xFF	; 255
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <fputc>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	8c 01       	movw	r16, r24
    11e0:	eb 01       	movw	r28, r22
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	99 27       	eor	r25, r25
    11e6:	81 ff       	sbrs	r24, 1
    11e8:	22 c0       	rjmp	.+68     	; 0x122e
    11ea:	82 ff       	sbrs	r24, 2
    11ec:	14 c0       	rjmp	.+40     	; 0x1216
    11ee:	2e 81       	ldd	r18, Y+6	; 0x06
    11f0:	3f 81       	ldd	r19, Y+7	; 0x07
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	28 17       	cp	r18, r24
    11f8:	39 07       	cpc	r19, r25
    11fa:	3c f4       	brge	.+14     	; 0x120a
    11fc:	e8 81       	ld	r30, Y
    11fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1200:	01 93       	st	Z+, r16
    1202:	f9 83       	std	Y+1, r31	; 0x01
    1204:	e8 83       	st	Y, r30
    1206:	2e 81       	ldd	r18, Y+6	; 0x06
    1208:	3f 81       	ldd	r19, Y+7	; 0x07
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	3f 83       	std	Y+7, r19	; 0x07
    1210:	2e 83       	std	Y+6, r18	; 0x06
    1212:	c8 01       	movw	r24, r16
    1214:	0e c0       	rjmp	.+28     	; 0x1232
    1216:	e8 85       	ldd	r30, Y+8	; 0x08
    1218:	f9 85       	ldd	r31, Y+9	; 0x09
    121a:	80 2f       	mov	r24, r16
    121c:	09 95       	icall
    121e:	89 2b       	or	r24, r25
    1220:	31 f4       	brne	.+12     	; 0x122e
    1222:	ae 81       	ldd	r26, Y+6	; 0x06
    1224:	bf 81       	ldd	r27, Y+7	; 0x07
    1226:	11 96       	adiw	r26, 0x01	; 1
    1228:	bf 83       	std	Y+7, r27	; 0x07
    122a:	ae 83       	std	Y+6, r26	; 0x06
    122c:	f2 cf       	rjmp	.-28     	; 0x1212
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	08 95       	ret

0000123c <__mulhi_const_10>:
    123c:	7a e0       	ldi	r23, 0x0A	; 10
    123e:	97 9f       	mul	r25, r23
    1240:	90 2d       	mov	r25, r0
    1242:	87 9f       	mul	r24, r23
    1244:	80 2d       	mov	r24, r0
    1246:	91 0d       	add	r25, r1
    1248:	11 24       	eor	r1, r1
    124a:	08 95       	ret

0000124c <printf>:
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	e5 e0       	ldi	r30, 0x05	; 5
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	ec 0f       	add	r30, r28
    125a:	fd 1f       	adc	r31, r29
    125c:	81 91       	ld	r24, Z+
    125e:	91 91       	ld	r25, Z+
    1260:	af 01       	movw	r20, r30
    1262:	bc 01       	movw	r22, r24
    1264:	80 91 31 03 	lds	r24, 0x0331
    1268:	90 91 32 03 	lds	r25, 0x0332
    126c:	0e 94 67 09 	call	0x12ce
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <printf_P>:
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	45 e0       	ldi	r20, 0x05	; 5
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	4c 0f       	add	r20, r28
    1284:	5d 1f       	adc	r21, r29
    1286:	fa 01       	movw	r30, r20
    1288:	21 91       	ld	r18, Z+
    128a:	31 91       	ld	r19, Z+
    128c:	af 01       	movw	r20, r30
    128e:	a0 91 31 03 	lds	r26, 0x0331
    1292:	b0 91 32 03 	lds	r27, 0x0332
    1296:	fd 01       	movw	r30, r26
    1298:	83 81       	ldd	r24, Z+3	; 0x03
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	83 83       	std	Z+3, r24	; 0x03
    129e:	b9 01       	movw	r22, r18
    12a0:	80 91 31 03 	lds	r24, 0x0331
    12a4:	90 91 32 03 	lds	r25, 0x0332
    12a8:	0e 94 67 09 	call	0x12ce
    12ac:	e0 91 31 03 	lds	r30, 0x0331
    12b0:	f0 91 32 03 	lds	r31, 0x0332
    12b4:	23 81       	ldd	r18, Z+3	; 0x03
    12b6:	27 7f       	andi	r18, 0xF7	; 247
    12b8:	23 83       	std	Z+3, r18	; 0x03
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <strcpy>:
    12c0:	fb 01       	movw	r30, r22
    12c2:	dc 01       	movw	r26, r24

000012c4 <.strcpy_loop>:
    12c4:	01 90       	ld	r0, Z+
    12c6:	0d 92       	st	X+, r0
    12c8:	00 20       	and	r0, r0
    12ca:	e1 f7       	brne	.-8      	; 0x12c4
    12cc:	08 95       	ret

000012ce <vfprintf>:
    12ce:	2f 92       	push	r2
    12d0:	3f 92       	push	r3
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	62 97       	sbiw	r28, 0x12	; 18
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	ee 24       	eor	r14, r14
    1304:	ff 24       	eor	r15, r15
    1306:	87 01       	movw	r16, r14
    1308:	1c 01       	movw	r2, r24
    130a:	7e 87       	std	Y+14, r23	; 0x0e
    130c:	6d 87       	std	Y+13, r22	; 0x0d
    130e:	2a 01       	movw	r4, r20
    1310:	cc 24       	eor	r12, r12
    1312:	dd 24       	eor	r13, r13
    1314:	fc 01       	movw	r30, r24
    1316:	d7 82       	std	Z+7, r13	; 0x07
    1318:	c6 82       	std	Z+6, r12	; 0x06
    131a:	83 81       	ldd	r24, Z+3	; 0x03
    131c:	81 fd       	sbrc	r24, 1
    131e:	68 c2       	rjmp	.+1232   	; 0x17f0
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	78 c2       	rjmp	.+1264   	; 0x1816
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	9e 87       	std	Y+14, r25	; 0x0e
    132e:	8d 87       	std	Y+13, r24	; 0x0d
    1330:	c0 fe       	sbrs	r12, 0
    1332:	4b c2       	rjmp	.+1174   	; 0x17ca
    1334:	8f 85       	ldd	r24, Y+15	; 0x0f
    1336:	80 53       	subi	r24, 0x30	; 48
    1338:	8a 30       	cpi	r24, 0x0A	; 10
    133a:	d0 f4       	brcc	.+52     	; 0x1370
    133c:	9f 85       	ldd	r25, Y+15	; 0x0f
    133e:	90 33       	cpi	r25, 0x30	; 48
    1340:	39 f4       	brne	.+14     	; 0x1350
    1342:	66 20       	and	r6, r6
    1344:	29 f4       	brne	.+10     	; 0x1350
    1346:	c3 fc       	sbrc	r12, 3
    1348:	03 c0       	rjmp	.+6      	; 0x1350
    134a:	e0 e0       	ldi	r30, 0x00	; 0
    134c:	f1 e0       	ldi	r31, 0x01	; 1
    134e:	8d c0       	rjmp	.+282    	; 0x146a
    1350:	8a e0       	ldi	r24, 0x0A	; 10
    1352:	68 9e       	mul	r6, r24
    1354:	60 2c       	mov	r6, r0
    1356:	11 24       	eor	r1, r1
    1358:	ff 85       	ldd	r31, Y+15	; 0x0f
    135a:	6f 0e       	add	r6, r31
    135c:	20 ed       	ldi	r18, 0xD0	; 208
    135e:	62 0e       	add	r6, r18
    1360:	67 fe       	sbrs	r6, 7
    1362:	02 c0       	rjmp	.+4      	; 0x1368
    1364:	5f e7       	ldi	r21, 0x7F	; 127
    1366:	65 2e       	mov	r6, r21
    1368:	c3 fc       	sbrc	r12, 3
    136a:	42 c2       	rjmp	.+1156   	; 0x17f0
    136c:	76 2c       	mov	r7, r6
    136e:	40 c2       	rjmp	.+1152   	; 0x17f0
    1370:	c3 fe       	sbrs	r12, 3
    1372:	04 c0       	rjmp	.+8      	; 0x137c
    1374:	66 20       	and	r6, r6
    1376:	11 f4       	brne	.+4      	; 0x137c
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	64 2e       	mov	r6, r20
    137c:	ef 85       	ldd	r30, Y+15	; 0x0f
    137e:	8e 2f       	mov	r24, r30
    1380:	99 27       	eor	r25, r25
    1382:	87 fd       	sbrc	r24, 7
    1384:	90 95       	com	r25
    1386:	88 36       	cpi	r24, 0x68	; 104
    1388:	91 05       	cpc	r25, r1
    138a:	8c f5       	brge	.+98     	; 0x13ee
    138c:	85 36       	cpi	r24, 0x65	; 101
    138e:	91 05       	cpc	r25, r1
    1390:	0c f0       	brlt	.+2      	; 0x1394
    1392:	6e c0       	rjmp	.+220    	; 0x1470
    1394:	83 35       	cpi	r24, 0x53	; 83
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c
    139a:	93 c0       	rjmp	.+294    	; 0x14c2
    139c:	84 35       	cpi	r24, 0x54	; 84
    139e:	91 05       	cpc	r25, r1
    13a0:	cc f4       	brge	.+50     	; 0x13d4
    13a2:	8b 32       	cpi	r24, 0x2B	; 43
    13a4:	91 05       	cpc	r25, r1
    13a6:	09 f4       	brne	.+2      	; 0x13aa
    13a8:	49 c0       	rjmp	.+146    	; 0x143c
    13aa:	8c 32       	cpi	r24, 0x2C	; 44
    13ac:	91 05       	cpc	r25, r1
    13ae:	4c f4       	brge	.+18     	; 0x13c2
    13b0:	80 32       	cpi	r24, 0x20	; 32
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8
    13b6:	46 c0       	rjmp	.+140    	; 0x1444
    13b8:	83 32       	cpi	r24, 0x23	; 35
    13ba:	91 05       	cpc	r25, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0
    13be:	4a c0       	rjmp	.+148    	; 0x1454
    13c0:	fe c1       	rjmp	.+1020   	; 0x17be
    13c2:	8d 32       	cpi	r24, 0x2D	; 45
    13c4:	91 05       	cpc	r25, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca
    13c8:	40 c0       	rjmp	.+128    	; 0x144a
    13ca:	8e 32       	cpi	r24, 0x2E	; 46
    13cc:	91 05       	cpc	r25, r1
    13ce:	09 f4       	brne	.+2      	; 0x13d2
    13d0:	44 c0       	rjmp	.+136    	; 0x145a
    13d2:	f5 c1       	rjmp	.+1002   	; 0x17be
    13d4:	83 36       	cpi	r24, 0x63	; 99
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc
    13da:	50 c0       	rjmp	.+160    	; 0x147c
    13dc:	84 36       	cpi	r24, 0x64	; 100
    13de:	91 05       	cpc	r25, r1
    13e0:	0c f0       	brlt	.+2      	; 0x13e4
    13e2:	8a c0       	rjmp	.+276    	; 0x14f8
    13e4:	88 35       	cpi	r24, 0x58	; 88
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec
    13ea:	bc c0       	rjmp	.+376    	; 0x1564
    13ec:	e8 c1       	rjmp	.+976    	; 0x17be
    13ee:	80 37       	cpi	r24, 0x70	; 112
    13f0:	91 05       	cpc	r25, r1
    13f2:	09 f4       	brne	.+2      	; 0x13f6
    13f4:	b1 c0       	rjmp	.+354    	; 0x1558
    13f6:	81 37       	cpi	r24, 0x71	; 113
    13f8:	91 05       	cpc	r25, r1
    13fa:	84 f4       	brge	.+32     	; 0x141c
    13fc:	8c 36       	cpi	r24, 0x6C	; 108
    13fe:	91 05       	cpc	r25, r1
    1400:	91 f1       	breq	.+100    	; 0x1466
    1402:	8d 36       	cpi	r24, 0x6D	; 109
    1404:	91 05       	cpc	r25, r1
    1406:	2c f4       	brge	.+10     	; 0x1412
    1408:	89 36       	cpi	r24, 0x69	; 105
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410
    140e:	74 c0       	rjmp	.+232    	; 0x14f8
    1410:	d6 c1       	rjmp	.+940    	; 0x17be
    1412:	8f 36       	cpi	r24, 0x6F	; 111
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a
    1418:	9c c0       	rjmp	.+312    	; 0x1552
    141a:	d1 c1       	rjmp	.+930    	; 0x17be
    141c:	85 37       	cpi	r24, 0x75	; 117
    141e:	91 05       	cpc	r25, r1
    1420:	09 f4       	brne	.+2      	; 0x1424
    1422:	a2 c0       	rjmp	.+324    	; 0x1568
    1424:	86 37       	cpi	r24, 0x76	; 118
    1426:	91 05       	cpc	r25, r1
    1428:	24 f4       	brge	.+8      	; 0x1432
    142a:	83 37       	cpi	r24, 0x73	; 115
    142c:	91 05       	cpc	r25, r1
    142e:	71 f1       	breq	.+92     	; 0x148c
    1430:	c6 c1       	rjmp	.+908    	; 0x17be
    1432:	88 37       	cpi	r24, 0x78	; 120
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a
    1438:	95 c0       	rjmp	.+298    	; 0x1564
    143a:	c1 c1       	rjmp	.+898    	; 0x17be
    143c:	80 e1       	ldi	r24, 0x10	; 16
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	c8 2a       	or	r12, r24
    1442:	d9 2a       	or	r13, r25
    1444:	e0 e2       	ldi	r30, 0x20	; 32
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	10 c0       	rjmp	.+32     	; 0x146a
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	c8 2a       	or	r12, r24
    1450:	d9 2a       	or	r13, r25
    1452:	ce c1       	rjmp	.+924    	; 0x17f0
    1454:	e0 e4       	ldi	r30, 0x40	; 64
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	08 c0       	rjmp	.+16     	; 0x146a
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	c8 2a       	or	r12, r24
    1460:	d9 2a       	or	r13, r25
    1462:	66 24       	eor	r6, r6
    1464:	c5 c1       	rjmp	.+906    	; 0x17f0
    1466:	e4 e0       	ldi	r30, 0x04	; 4
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ce 2a       	or	r12, r30
    146c:	df 2a       	or	r13, r31
    146e:	c0 c1       	rjmp	.+896    	; 0x17f0
    1470:	3f e3       	ldi	r19, 0x3F	; 63
    1472:	e3 2e       	mov	r14, r19
    1474:	7a 94       	dec	r7
    1476:	f3 e6       	ldi	r31, 0x63	; 99
    1478:	ff 87       	std	Y+15, r31	; 0x0f
    147a:	3c c1       	rjmp	.+632    	; 0x16f4
    147c:	f2 01       	movw	r30, r4
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	48 0e       	add	r4, r24
    1484:	59 1e       	adc	r5, r25
    1486:	e0 80       	ld	r14, Z
    1488:	7a 94       	dec	r7
    148a:	34 c1       	rjmp	.+616    	; 0x16f4
    148c:	f2 01       	movw	r30, r4
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	48 0e       	add	r4, r24
    1494:	59 1e       	adc	r5, r25
    1496:	a0 81       	ld	r26, Z
    1498:	b1 81       	ldd	r27, Z+1	; 0x01
    149a:	7d 01       	movw	r14, r26
    149c:	c3 fe       	sbrs	r12, 3
    149e:	09 c0       	rjmp	.+18     	; 0x14b2
    14a0:	86 2d       	mov	r24, r6
    14a2:	99 27       	eor	r25, r25
    14a4:	87 fd       	sbrc	r24, 7
    14a6:	90 95       	com	r25
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 61 0d 	call	0x1ac2
    14b0:	1f c0       	rjmp	.+62     	; 0x14f0
    14b2:	fd 01       	movw	r30, r26
    14b4:	01 90       	ld	r0, Z+
    14b6:	00 20       	and	r0, r0
    14b8:	e9 f7       	brne	.-6      	; 0x14b4
    14ba:	31 97       	sbiw	r30, 0x01	; 1
    14bc:	ea 1b       	sub	r30, r26
    14be:	e8 8b       	std	Y+16, r30	; 0x10
    14c0:	18 c0       	rjmp	.+48     	; 0x14f2
    14c2:	f2 01       	movw	r30, r4
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	48 0e       	add	r4, r24
    14ca:	59 1e       	adc	r5, r25
    14cc:	01 90       	ld	r0, Z+
    14ce:	f0 81       	ld	r31, Z
    14d0:	e0 2d       	mov	r30, r0
    14d2:	7f 01       	movw	r14, r30
    14d4:	c3 fe       	sbrs	r12, 3
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea
    14d8:	86 2d       	mov	r24, r6
    14da:	99 27       	eor	r25, r25
    14dc:	87 fd       	sbrc	r24, 7
    14de:	90 95       	com	r25
    14e0:	bc 01       	movw	r22, r24
    14e2:	cf 01       	movw	r24, r30
    14e4:	0e 94 6c 0d 	call	0x1ad8
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0
    14ea:	cf 01       	movw	r24, r30
    14ec:	0e 94 58 0d 	call	0x1ab0
    14f0:	88 8b       	std	Y+16, r24	; 0x10
    14f2:	98 89       	ldd	r25, Y+16	; 0x10
    14f4:	79 1a       	sub	r7, r25
    14f6:	fe c0       	rjmp	.+508    	; 0x16f4
    14f8:	c2 fe       	sbrs	r12, 2
    14fa:	0a c0       	rjmp	.+20     	; 0x1510
    14fc:	f2 01       	movw	r30, r4
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	48 0e       	add	r4, r24
    1504:	59 1e       	adc	r5, r25
    1506:	20 81       	ld	r18, Z
    1508:	31 81       	ldd	r19, Z+1	; 0x01
    150a:	42 81       	ldd	r20, Z+2	; 0x02
    150c:	53 81       	ldd	r21, Z+3	; 0x03
    150e:	0c c0       	rjmp	.+24     	; 0x1528
    1510:	f2 01       	movw	r30, r4
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	48 0e       	add	r4, r24
    1518:	59 1e       	adc	r5, r25
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	9c 01       	movw	r18, r24
    1520:	44 27       	eor	r20, r20
    1522:	37 fd       	sbrc	r19, 7
    1524:	40 95       	com	r20
    1526:	54 2f       	mov	r21, r20
    1528:	79 01       	movw	r14, r18
    152a:	8a 01       	movw	r16, r20
    152c:	57 ff       	sbrs	r21, 7
    152e:	0c c0       	rjmp	.+24     	; 0x1548
    1530:	e2 e0       	ldi	r30, 0x02	; 2
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	ce 2a       	or	r12, r30
    1536:	df 2a       	or	r13, r31
    1538:	10 95       	com	r17
    153a:	00 95       	com	r16
    153c:	f0 94       	com	r15
    153e:	e0 94       	com	r14
    1540:	e1 1c       	adc	r14, r1
    1542:	f1 1c       	adc	r15, r1
    1544:	01 1d       	adc	r16, r1
    1546:	11 1d       	adc	r17, r1
    1548:	8f eb       	ldi	r24, 0xBF	; 191
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	c8 22       	and	r12, r24
    154e:	d9 22       	and	r13, r25
    1550:	27 c0       	rjmp	.+78     	; 0x15a0
    1552:	98 e0       	ldi	r25, 0x08	; 8
    1554:	98 8b       	std	Y+16, r25	; 0x10
    1556:	08 c0       	rjmp	.+16     	; 0x1568
    1558:	e0 e4       	ldi	r30, 0x40	; 64
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	ce 2a       	or	r12, r30
    155e:	df 2a       	or	r13, r31
    1560:	f8 e7       	ldi	r31, 0x78	; 120
    1562:	ff 87       	std	Y+15, r31	; 0x0f
    1564:	20 e1       	ldi	r18, 0x10	; 16
    1566:	28 8b       	std	Y+16, r18	; 0x10
    1568:	c2 fe       	sbrs	r12, 2
    156a:	0a c0       	rjmp	.+20     	; 0x1580
    156c:	f2 01       	movw	r30, r4
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	48 0e       	add	r4, r24
    1574:	59 1e       	adc	r5, r25
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	42 81       	ldd	r20, Z+2	; 0x02
    157c:	53 81       	ldd	r21, Z+3	; 0x03
    157e:	0a c0       	rjmp	.+20     	; 0x1594
    1580:	f2 01       	movw	r30, r4
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	48 0e       	add	r4, r24
    1588:	59 1e       	adc	r5, r25
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	9c 01       	movw	r18, r24
    1590:	44 27       	eor	r20, r20
    1592:	55 27       	eor	r21, r21
    1594:	79 01       	movw	r14, r18
    1596:	8a 01       	movw	r16, r20
    1598:	ef ec       	ldi	r30, 0xCF	; 207
    159a:	ff ef       	ldi	r31, 0xFF	; 255
    159c:	ce 22       	and	r12, r30
    159e:	df 22       	and	r13, r31
    15a0:	ce 01       	movw	r24, r28
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	9a 8b       	std	Y+18, r25	; 0x12
    15a6:	89 8b       	std	Y+17, r24	; 0x11
    15a8:	98 89       	ldd	r25, Y+16	; 0x10
    15aa:	89 2e       	mov	r8, r25
    15ac:	99 24       	eor	r9, r9
    15ae:	aa 24       	eor	r10, r10
    15b0:	bb 24       	eor	r11, r11
    15b2:	c8 01       	movw	r24, r16
    15b4:	b7 01       	movw	r22, r14
    15b6:	a5 01       	movw	r20, r10
    15b8:	94 01       	movw	r18, r8
    15ba:	0e 94 9f 0f 	call	0x1f3e
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	e9 89       	ldd	r30, Y+17	; 0x11
    15c4:	fa 89       	ldd	r31, Y+18	; 0x12
    15c6:	80 83       	st	Z, r24
    15c8:	8a 30       	cpi	r24, 0x0A	; 10
    15ca:	24 f0       	brlt	.+8      	; 0x15d4
    15cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    15ce:	8f 0f       	add	r24, r31
    15d0:	81 52       	subi	r24, 0x21	; 33
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6
    15d4:	80 5d       	subi	r24, 0xD0	; 208
    15d6:	e9 89       	ldd	r30, Y+17	; 0x11
    15d8:	fa 89       	ldd	r31, Y+18	; 0x12
    15da:	81 93       	st	Z+, r24
    15dc:	fa 8b       	std	Y+18, r31	; 0x12
    15de:	e9 8b       	std	Y+17, r30	; 0x11
    15e0:	c8 01       	movw	r24, r16
    15e2:	b7 01       	movw	r22, r14
    15e4:	a5 01       	movw	r20, r10
    15e6:	94 01       	movw	r18, r8
    15e8:	0e 94 9f 0f 	call	0x1f3e
    15ec:	79 01       	movw	r14, r18
    15ee:	8a 01       	movw	r16, r20
    15f0:	21 15       	cp	r18, r1
    15f2:	31 05       	cpc	r19, r1
    15f4:	41 05       	cpc	r20, r1
    15f6:	51 05       	cpc	r21, r1
    15f8:	e1 f6       	brne	.-72     	; 0x15b2
    15fa:	e9 88       	ldd	r14, Y+17	; 0x11
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	8c 0f       	add	r24, r28
    1602:	9d 1f       	adc	r25, r29
    1604:	e8 1a       	sub	r14, r24
    1606:	c6 01       	movw	r24, r12
    1608:	82 73       	andi	r24, 0x32	; 50
    160a:	90 70       	andi	r25, 0x00	; 0
    160c:	89 2b       	or	r24, r25
    160e:	09 f0       	breq	.+2      	; 0x1612
    1610:	7a 94       	dec	r7
    1612:	c6 fe       	sbrs	r12, 6
    1614:	0d c0       	rjmp	.+26     	; 0x1630
    1616:	87 2d       	mov	r24, r7
    1618:	99 27       	eor	r25, r25
    161a:	87 fd       	sbrc	r24, 7
    161c:	90 95       	com	r25
    161e:	e8 89       	ldd	r30, Y+16	; 0x10
    1620:	e0 31       	cpi	r30, 0x10	; 16
    1622:	21 f4       	brne	.+8      	; 0x162c
    1624:	2e ef       	ldi	r18, 0xFE	; 254
    1626:	72 2e       	mov	r7, r18
    1628:	78 0e       	add	r7, r24
    162a:	02 c0       	rjmp	.+4      	; 0x1630
    162c:	78 2e       	mov	r7, r24
    162e:	7a 94       	dec	r7
    1630:	c3 fe       	sbrs	r12, 3
    1632:	0f c0       	rjmp	.+30     	; 0x1652
    1634:	26 2d       	mov	r18, r6
    1636:	33 27       	eor	r19, r19
    1638:	27 fd       	sbrc	r18, 7
    163a:	30 95       	com	r19
    163c:	8e 2d       	mov	r24, r14
    163e:	99 27       	eor	r25, r25
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	2c f0       	brlt	.+10     	; 0x1650
    1646:	87 ef       	ldi	r24, 0xF7	; 247
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	c8 22       	and	r12, r24
    164c:	d9 22       	and	r13, r25
    164e:	01 c0       	rjmp	.+2      	; 0x1652
    1650:	6e 18       	sub	r6, r14
    1652:	c3 fe       	sbrs	r12, 3
    1654:	02 c0       	rjmp	.+4      	; 0x165a
    1656:	76 18       	sub	r7, r6
    1658:	01 c0       	rjmp	.+2      	; 0x165c
    165a:	7e 18       	sub	r7, r14
    165c:	c6 01       	movw	r24, r12
    165e:	80 78       	andi	r24, 0x80	; 128
    1660:	91 70       	andi	r25, 0x01	; 1
    1662:	89 2b       	or	r24, r25
    1664:	51 f4       	brne	.+20     	; 0x167a
    1666:	87 2d       	mov	r24, r7
    1668:	7a 94       	dec	r7
    166a:	18 16       	cp	r1, r24
    166c:	34 f4       	brge	.+12     	; 0x167a
    166e:	b1 01       	movw	r22, r2
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 eb 08 	call	0x11d6
    1678:	f6 cf       	rjmp	.-20     	; 0x1666
    167a:	c1 fe       	sbrs	r12, 1
    167c:	04 c0       	rjmp	.+8      	; 0x1686
    167e:	b1 01       	movw	r22, r2
    1680:	8d e2       	ldi	r24, 0x2D	; 45
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0b c0       	rjmp	.+22     	; 0x169c
    1686:	c4 fe       	sbrs	r12, 4
    1688:	04 c0       	rjmp	.+8      	; 0x1692
    168a:	b1 01       	movw	r22, r2
    168c:	8b e2       	ldi	r24, 0x2B	; 43
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	05 c0       	rjmp	.+10     	; 0x169c
    1692:	c5 fe       	sbrs	r12, 5
    1694:	05 c0       	rjmp	.+10     	; 0x16a0
    1696:	b1 01       	movw	r22, r2
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 eb 08 	call	0x11d6
    16a0:	c6 fe       	sbrs	r12, 6
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4
    16a4:	b1 01       	movw	r22, r2
    16a6:	80 e3       	ldi	r24, 0x30	; 48
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 eb 08 	call	0x11d6
    16ae:	98 89       	ldd	r25, Y+16	; 0x10
    16b0:	90 31       	cpi	r25, 0x10	; 16
    16b2:	41 f4       	brne	.+16     	; 0x16c4
    16b4:	b1 01       	movw	r22, r2
    16b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    16b8:	8e 2f       	mov	r24, r30
    16ba:	99 27       	eor	r25, r25
    16bc:	87 fd       	sbrc	r24, 7
    16be:	90 95       	com	r25
    16c0:	0e 94 eb 08 	call	0x11d6
    16c4:	d0 fe       	sbrs	r13, 0
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc
    16c8:	87 2d       	mov	r24, r7
    16ca:	7a 94       	dec	r7
    16cc:	18 16       	cp	r1, r24
    16ce:	34 f4       	brge	.+12     	; 0x16dc
    16d0:	b1 01       	movw	r22, r2
    16d2:	80 e3       	ldi	r24, 0x30	; 48
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 eb 08 	call	0x11d6
    16da:	f6 cf       	rjmp	.-20     	; 0x16c8
    16dc:	c3 fe       	sbrs	r12, 3
    16de:	0a c0       	rjmp	.+20     	; 0x16f4
    16e0:	86 2d       	mov	r24, r6
    16e2:	6a 94       	dec	r6
    16e4:	18 16       	cp	r1, r24
    16e6:	34 f4       	brge	.+12     	; 0x16f4
    16e8:	b1 01       	movw	r22, r2
    16ea:	80 e3       	ldi	r24, 0x30	; 48
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 eb 08 	call	0x11d6
    16f2:	f6 cf       	rjmp	.-20     	; 0x16e0
    16f4:	90 e8       	ldi	r25, 0x80	; 128
    16f6:	b9 2e       	mov	r11, r25
    16f8:	bc 20       	and	r11, r12
    16fa:	51 f4       	brne	.+20     	; 0x1710
    16fc:	87 2d       	mov	r24, r7
    16fe:	7a 94       	dec	r7
    1700:	18 16       	cp	r1, r24
    1702:	34 f4       	brge	.+12     	; 0x1710
    1704:	b1 01       	movw	r22, r2
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 eb 08 	call	0x11d6
    170e:	f6 cf       	rjmp	.-20     	; 0x16fc
    1710:	ff 85       	ldd	r31, Y+15	; 0x0f
    1712:	f3 36       	cpi	r31, 0x63	; 99
    1714:	41 f4       	brne	.+16     	; 0x1726
    1716:	8e 2d       	mov	r24, r14
    1718:	b1 01       	movw	r22, r2
    171a:	99 27       	eor	r25, r25
    171c:	87 fd       	sbrc	r24, 7
    171e:	90 95       	com	r25
    1720:	0e 94 eb 08 	call	0x11d6
    1724:	40 c0       	rjmp	.+128    	; 0x17a6
    1726:	2f 85       	ldd	r18, Y+15	; 0x0f
    1728:	23 37       	cpi	r18, 0x73	; 115
    172a:	b1 f4       	brne	.+44     	; 0x1758
    172c:	88 89       	ldd	r24, Y+16	; 0x10
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	88 8b       	std	Y+16, r24	; 0x10
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	c1 f1       	breq	.+112    	; 0x17a6
    1736:	f7 01       	movw	r30, r14
    1738:	80 81       	ld	r24, Z
    173a:	08 94       	sec
    173c:	e1 1c       	adc	r14, r1
    173e:	f1 1c       	adc	r15, r1
    1740:	b1 01       	movw	r22, r2
    1742:	99 27       	eor	r25, r25
    1744:	87 fd       	sbrc	r24, 7
    1746:	90 95       	com	r25
    1748:	0e 94 eb 08 	call	0x11d6
    174c:	98 89       	ldd	r25, Y+16	; 0x10
    174e:	91 50       	subi	r25, 0x01	; 1
    1750:	98 8b       	std	Y+16, r25	; 0x10
    1752:	9f 3f       	cpi	r25, 0xFF	; 255
    1754:	81 f7       	brne	.-32     	; 0x1736
    1756:	27 c0       	rjmp	.+78     	; 0x17a6
    1758:	ef 85       	ldd	r30, Y+15	; 0x0f
    175a:	e3 35       	cpi	r30, 0x53	; 83
    175c:	79 f4       	brne	.+30     	; 0x177c
    175e:	f8 89       	ldd	r31, Y+16	; 0x10
    1760:	f1 50       	subi	r31, 0x01	; 1
    1762:	f8 8b       	std	Y+16, r31	; 0x10
    1764:	ff 3f       	cpi	r31, 0xFF	; 255
    1766:	f9 f0       	breq	.+62     	; 0x17a6
    1768:	f7 01       	movw	r30, r14
    176a:	84 91       	lpm	r24, Z
    176c:	b1 01       	movw	r22, r2
    176e:	99 27       	eor	r25, r25
    1770:	0e 94 eb 08 	call	0x11d6
    1774:	08 94       	sec
    1776:	e1 1c       	adc	r14, r1
    1778:	f1 1c       	adc	r15, r1
    177a:	f1 cf       	rjmp	.-30     	; 0x175e
    177c:	6e 01       	movw	r12, r28
    177e:	08 94       	sec
    1780:	c1 1c       	adc	r12, r1
    1782:	d1 1c       	adc	r13, r1
    1784:	89 89       	ldd	r24, Y+17	; 0x11
    1786:	9a 89       	ldd	r25, Y+18	; 0x12
    1788:	8c 15       	cp	r24, r12
    178a:	9d 05       	cpc	r25, r13
    178c:	61 f0       	breq	.+24     	; 0x17a6
    178e:	e9 89       	ldd	r30, Y+17	; 0x11
    1790:	fa 89       	ldd	r31, Y+18	; 0x12
    1792:	82 91       	ld	r24, -Z
    1794:	fa 8b       	std	Y+18, r31	; 0x12
    1796:	e9 8b       	std	Y+17, r30	; 0x11
    1798:	b1 01       	movw	r22, r2
    179a:	99 27       	eor	r25, r25
    179c:	87 fd       	sbrc	r24, 7
    179e:	90 95       	com	r25
    17a0:	0e 94 eb 08 	call	0x11d6
    17a4:	ef cf       	rjmp	.-34     	; 0x1784
    17a6:	bb 20       	and	r11, r11
    17a8:	69 f0       	breq	.+26     	; 0x17c4
    17aa:	87 2d       	mov	r24, r7
    17ac:	7a 94       	dec	r7
    17ae:	18 16       	cp	r1, r24
    17b0:	4c f4       	brge	.+18     	; 0x17c4
    17b2:	b1 01       	movw	r22, r2
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 eb 08 	call	0x11d6
    17bc:	f6 cf       	rjmp	.-20     	; 0x17aa
    17be:	b1 01       	movw	r22, r2
    17c0:	0e 94 eb 08 	call	0x11d6
    17c4:	cc 24       	eor	r12, r12
    17c6:	dd 24       	eor	r13, r13
    17c8:	13 c0       	rjmp	.+38     	; 0x17f0
    17ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    17cc:	95 32       	cpi	r25, 0x25	; 37
    17ce:	41 f4       	brne	.+16     	; 0x17e0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	c8 2e       	mov	r12, r24
    17d4:	d1 2c       	mov	r13, r1
    17d6:	66 24       	eor	r6, r6
    17d8:	76 2c       	mov	r7, r6
    17da:	ea e0       	ldi	r30, 0x0A	; 10
    17dc:	e8 8b       	std	Y+16, r30	; 0x10
    17de:	08 c0       	rjmp	.+16     	; 0x17f0
    17e0:	b1 01       	movw	r22, r2
    17e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    17e4:	8f 2f       	mov	r24, r31
    17e6:	99 27       	eor	r25, r25
    17e8:	87 fd       	sbrc	r24, 7
    17ea:	90 95       	com	r25
    17ec:	0e 94 eb 08 	call	0x11d6
    17f0:	f1 01       	movw	r30, r2
    17f2:	83 81       	ldd	r24, Z+3	; 0x03
    17f4:	83 ff       	sbrs	r24, 3
    17f6:	04 c0       	rjmp	.+8      	; 0x1800
    17f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    17fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    17fc:	f4 91       	lpm	r31, Z
    17fe:	03 c0       	rjmp	.+6      	; 0x1806
    1800:	ed 85       	ldd	r30, Y+13	; 0x0d
    1802:	fe 85       	ldd	r31, Y+14	; 0x0e
    1804:	f0 81       	ld	r31, Z
    1806:	ff 87       	std	Y+15, r31	; 0x0f
    1808:	2f 85       	ldd	r18, Y+15	; 0x0f
    180a:	22 23       	and	r18, r18
    180c:	09 f0       	breq	.+2      	; 0x1810
    180e:	8b cd       	rjmp	.-1258   	; 0x1326
    1810:	f1 01       	movw	r30, r2
    1812:	86 81       	ldd	r24, Z+6	; 0x06
    1814:	97 81       	ldd	r25, Z+7	; 0x07
    1816:	62 96       	adiw	r28, 0x12	; 18
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	4f 90       	pop	r4
    1842:	3f 90       	pop	r3
    1844:	2f 90       	pop	r2
    1846:	08 95       	ret

00001848 <calloc>:
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	86 9f       	mul	r24, r22
    1852:	80 01       	movw	r16, r0
    1854:	87 9f       	mul	r24, r23
    1856:	10 0d       	add	r17, r0
    1858:	96 9f       	mul	r25, r22
    185a:	10 0d       	add	r17, r0
    185c:	11 24       	eor	r1, r1
    185e:	c8 01       	movw	r24, r16
    1860:	0e 94 40 0c 	call	0x1880
    1864:	ec 01       	movw	r28, r24
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	29 f0       	breq	.+10     	; 0x1874
    186a:	a8 01       	movw	r20, r16
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	0e 94 51 0d 	call	0x1aa2
    1874:	ce 01       	movw	r24, r28
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <malloc>:
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	9c 01       	movw	r18, r24
    1886:	02 97       	sbiw	r24, 0x02	; 2
    1888:	10 f4       	brcc	.+4      	; 0x188e
    188a:	22 e0       	ldi	r18, 0x02	; 2
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	60 91 37 03 	lds	r22, 0x0337
    1896:	70 91 38 03 	lds	r23, 0x0338
    189a:	fb 01       	movw	r30, r22
    189c:	da 01       	movw	r26, r20
    189e:	61 15       	cp	r22, r1
    18a0:	71 05       	cpc	r23, r1
    18a2:	69 f1       	breq	.+90     	; 0x18fe
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	82 17       	cp	r24, r18
    18aa:	93 07       	cpc	r25, r19
    18ac:	09 f4       	brne	.+2      	; 0x18b0
    18ae:	52 c0       	rjmp	.+164    	; 0x1954
    18b0:	28 17       	cp	r18, r24
    18b2:	39 07       	cpc	r19, r25
    18b4:	38 f4       	brcc	.+14     	; 0x18c4
    18b6:	41 15       	cp	r20, r1
    18b8:	51 05       	cpc	r21, r1
    18ba:	19 f0       	breq	.+6      	; 0x18c2
    18bc:	84 17       	cp	r24, r20
    18be:	95 07       	cpc	r25, r21
    18c0:	08 f4       	brcc	.+2      	; 0x18c4
    18c2:	ac 01       	movw	r20, r24
    18c4:	df 01       	movw	r26, r30
    18c6:	02 80       	ldd	r0, Z+2	; 0x02
    18c8:	f3 81       	ldd	r31, Z+3	; 0x03
    18ca:	e0 2d       	mov	r30, r0
    18cc:	30 97       	sbiw	r30, 0x00	; 0
    18ce:	51 f7       	brne	.-44     	; 0x18a4
    18d0:	41 15       	cp	r20, r1
    18d2:	51 05       	cpc	r21, r1
    18d4:	a1 f0       	breq	.+40     	; 0x18fe
    18d6:	da 01       	movw	r26, r20
    18d8:	a2 1b       	sub	r26, r18
    18da:	b3 0b       	sbc	r27, r19
    18dc:	14 97       	sbiw	r26, 0x04	; 4
    18de:	08 f4       	brcc	.+2      	; 0x18e2
    18e0:	43 c0       	rjmp	.+134    	; 0x1968
    18e2:	db 01       	movw	r26, r22
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa
    18e6:	6d 91       	ld	r22, X+
    18e8:	7c 91       	ld	r23, X
    18ea:	11 97       	sbiw	r26, 0x01	; 1
    18ec:	64 17       	cp	r22, r20
    18ee:	75 07       	cpc	r23, r21
    18f0:	09 f4       	brne	.+2      	; 0x18f4
    18f2:	50 c0       	rjmp	.+160    	; 0x1994
    18f4:	fd 01       	movw	r30, r26
    18f6:	a2 81       	ldd	r26, Z+2	; 0x02
    18f8:	b3 81       	ldd	r27, Z+3	; 0x03
    18fa:	10 97       	sbiw	r26, 0x00	; 0
    18fc:	a1 f7       	brne	.-24     	; 0x18e6
    18fe:	e0 91 35 03 	lds	r30, 0x0335
    1902:	f0 91 36 03 	lds	r31, 0x0336
    1906:	30 97       	sbiw	r30, 0x00	; 0
    1908:	41 f4       	brne	.+16     	; 0x191a
    190a:	e0 91 8f 00 	lds	r30, 0x008F
    190e:	f0 91 90 00 	lds	r31, 0x0090
    1912:	f0 93 36 03 	sts	0x0336, r31
    1916:	e0 93 35 03 	sts	0x0335, r30
    191a:	40 91 8d 00 	lds	r20, 0x008D
    191e:	50 91 8e 00 	lds	r21, 0x008E
    1922:	41 15       	cp	r20, r1
    1924:	51 05       	cpc	r21, r1
    1926:	29 f1       	breq	.+74     	; 0x1972
    1928:	4e 1b       	sub	r20, r30
    192a:	5f 0b       	sbc	r21, r31
    192c:	42 17       	cp	r20, r18
    192e:	53 07       	cpc	r21, r19
    1930:	e8 f0       	brcs	.+58     	; 0x196c
    1932:	c9 01       	movw	r24, r18
    1934:	02 96       	adiw	r24, 0x02	; 2
    1936:	48 17       	cp	r20, r24
    1938:	59 07       	cpc	r21, r25
    193a:	c0 f0       	brcs	.+48     	; 0x196c
    193c:	ef 01       	movw	r28, r30
    193e:	c2 0f       	add	r28, r18
    1940:	d3 1f       	adc	r29, r19
    1942:	22 96       	adiw	r28, 0x02	; 2
    1944:	d0 93 36 03 	sts	0x0336, r29
    1948:	c0 93 35 03 	sts	0x0335, r28
    194c:	21 93       	st	Z+, r18
    194e:	31 93       	st	Z+, r19
    1950:	cf 01       	movw	r24, r30
    1952:	42 c0       	rjmp	.+132    	; 0x19d8
    1954:	10 97       	sbiw	r26, 0x00	; 0
    1956:	b1 f0       	breq	.+44     	; 0x1984
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	ed 01       	movw	r28, r26
    195e:	9b 83       	std	Y+3, r25	; 0x03
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	cf 01       	movw	r24, r30
    1964:	02 96       	adiw	r24, 0x02	; 2
    1966:	38 c0       	rjmp	.+112    	; 0x19d8
    1968:	9a 01       	movw	r18, r20
    196a:	bb cf       	rjmp	.-138    	; 0x18e2
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	33 c0       	rjmp	.+102    	; 0x19d8
    1972:	4d b7       	in	r20, 0x3d	; 61
    1974:	5e b7       	in	r21, 0x3e	; 62
    1976:	a0 91 91 00 	lds	r26, 0x0091
    197a:	b0 91 92 00 	lds	r27, 0x0092
    197e:	4a 1b       	sub	r20, r26
    1980:	5b 0b       	sbc	r21, r27
    1982:	d2 cf       	rjmp	.-92     	; 0x1928
    1984:	22 81       	ldd	r18, Z+2	; 0x02
    1986:	33 81       	ldd	r19, Z+3	; 0x03
    1988:	30 93 38 03 	sts	0x0338, r19
    198c:	20 93 37 03 	sts	0x0337, r18
    1990:	cf 01       	movw	r24, r30
    1992:	e8 cf       	rjmp	.-48     	; 0x1964
    1994:	24 17       	cp	r18, r20
    1996:	35 07       	cpc	r19, r21
    1998:	61 f0       	breq	.+24     	; 0x19b2
    199a:	ea 01       	movw	r28, r20
    199c:	c2 1b       	sub	r28, r18
    199e:	d3 0b       	sbc	r29, r19
    19a0:	fd 01       	movw	r30, r26
    19a2:	ec 0f       	add	r30, r28
    19a4:	fd 1f       	adc	r31, r29
    19a6:	21 93       	st	Z+, r18
    19a8:	31 93       	st	Z+, r19
    19aa:	22 97       	sbiw	r28, 0x02	; 2
    19ac:	cd 93       	st	X+, r28
    19ae:	dc 93       	st	X, r29
    19b0:	cf cf       	rjmp	.-98     	; 0x1950
    19b2:	30 97       	sbiw	r30, 0x00	; 0
    19b4:	41 f0       	breq	.+16     	; 0x19c6
    19b6:	ed 01       	movw	r28, r26
    19b8:	4a 81       	ldd	r20, Y+2	; 0x02
    19ba:	5b 81       	ldd	r21, Y+3	; 0x03
    19bc:	53 83       	std	Z+3, r21	; 0x03
    19be:	42 83       	std	Z+2, r20	; 0x02
    19c0:	cd 01       	movw	r24, r26
    19c2:	02 96       	adiw	r24, 0x02	; 2
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8
    19c6:	fd 01       	movw	r30, r26
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	90 93 38 03 	sts	0x0338, r25
    19d0:	80 93 37 03 	sts	0x0337, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	f5 cf       	rjmp	.-22     	; 0x19c2
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <free>:
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	09 f4       	brne	.+2      	; 0x19e8
    19e6:	5a c0       	rjmp	.+180    	; 0x1a9c
    19e8:	dc 01       	movw	r26, r24
    19ea:	12 97       	sbiw	r26, 0x02	; 2
    19ec:	ed 01       	movw	r28, r26
    19ee:	1b 82       	std	Y+3, r1	; 0x03
    19f0:	1a 82       	std	Y+2, r1	; 0x02
    19f2:	80 91 37 03 	lds	r24, 0x0337
    19f6:	90 91 38 03 	lds	r25, 0x0338
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	d9 f1       	breq	.+118    	; 0x1a74
    19fe:	fc 01       	movw	r30, r24
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	ea 17       	cp	r30, r26
    1a06:	fb 07       	cpc	r31, r27
    1a08:	48 f4       	brcc	.+18     	; 0x1a1c
    1a0a:	af 01       	movw	r20, r30
    1a0c:	02 80       	ldd	r0, Z+2	; 0x02
    1a0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a10:	e0 2d       	mov	r30, r0
    1a12:	30 97       	sbiw	r30, 0x00	; 0
    1a14:	a1 f0       	breq	.+40     	; 0x1a3e
    1a16:	ea 17       	cp	r30, r26
    1a18:	fb 07       	cpc	r31, r27
    1a1a:	b8 f3       	brcs	.-18     	; 0x1a0a
    1a1c:	ed 01       	movw	r28, r26
    1a1e:	fb 83       	std	Y+3, r31	; 0x03
    1a20:	ea 83       	std	Y+2, r30	; 0x02
    1a22:	2d 91       	ld	r18, X+
    1a24:	3c 91       	ld	r19, X
    1a26:	11 97       	sbiw	r26, 0x01	; 1
    1a28:	e9 01       	movw	r28, r18
    1a2a:	ca 0f       	add	r28, r26
    1a2c:	db 1f       	adc	r29, r27
    1a2e:	ce 01       	movw	r24, r28
    1a30:	02 96       	adiw	r24, 0x02	; 2
    1a32:	8e 17       	cp	r24, r30
    1a34:	9f 07       	cpc	r25, r31
    1a36:	19 f1       	breq	.+70     	; 0x1a7e
    1a38:	41 15       	cp	r20, r1
    1a3a:	51 05       	cpc	r21, r1
    1a3c:	d9 f0       	breq	.+54     	; 0x1a74
    1a3e:	ea 01       	movw	r28, r20
    1a40:	bb 83       	std	Y+3, r27	; 0x03
    1a42:	aa 83       	std	Y+2, r26	; 0x02
    1a44:	ca 01       	movw	r24, r20
    1a46:	02 96       	adiw	r24, 0x02	; 2
    1a48:	28 81       	ld	r18, Y
    1a4a:	39 81       	ldd	r19, Y+1	; 0x01
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	8a 17       	cp	r24, r26
    1a52:	9b 07       	cpc	r25, r27
    1a54:	19 f5       	brne	.+70     	; 0x1a9c
    1a56:	6d 91       	ld	r22, X+
    1a58:	7c 91       	ld	r23, X
    1a5a:	11 97       	sbiw	r26, 0x01	; 1
    1a5c:	26 0f       	add	r18, r22
    1a5e:	37 1f       	adc	r19, r23
    1a60:	2e 5f       	subi	r18, 0xFE	; 254
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	39 83       	std	Y+1, r19	; 0x01
    1a66:	28 83       	st	Y, r18
    1a68:	fd 01       	movw	r30, r26
    1a6a:	42 81       	ldd	r20, Z+2	; 0x02
    1a6c:	53 81       	ldd	r21, Z+3	; 0x03
    1a6e:	5b 83       	std	Y+3, r21	; 0x03
    1a70:	4a 83       	std	Y+2, r20	; 0x02
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c
    1a74:	b0 93 38 03 	sts	0x0338, r27
    1a78:	a0 93 37 03 	sts	0x0337, r26
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c
    1a7e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a80:	7b 81       	ldd	r23, Y+3	; 0x03
    1a82:	26 0f       	add	r18, r22
    1a84:	37 1f       	adc	r19, r23
    1a86:	2e 5f       	subi	r18, 0xFE	; 254
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	11 96       	adiw	r26, 0x01	; 1
    1a8c:	3c 93       	st	X, r19
    1a8e:	2e 93       	st	-X, r18
    1a90:	22 81       	ldd	r18, Z+2	; 0x02
    1a92:	33 81       	ldd	r19, Z+3	; 0x03
    1a94:	fd 01       	movw	r30, r26
    1a96:	33 83       	std	Z+3, r19	; 0x03
    1a98:	22 83       	std	Z+2, r18	; 0x02
    1a9a:	ce cf       	rjmp	.-100    	; 0x1a38
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <memset>:
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8

00001aa6 <.memset_loop>:
    1aa6:	6d 93       	st	X+, r22

00001aa8 <.memset_start>:
    1aa8:	41 50       	subi	r20, 0x01	; 1
    1aaa:	50 40       	sbci	r21, 0x00	; 0
    1aac:	e0 f7       	brcc	.-8      	; 0x1aa6
    1aae:	08 95       	ret

00001ab0 <strlen_P>:
    1ab0:	fc 01       	movw	r30, r24

00001ab2 <.strlen_P_loop>:
    1ab2:	05 90       	lpm	r0, Z+
    1ab4:	00 20       	and	r0, r0
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2
    1ab8:	80 95       	com	r24
    1aba:	90 95       	com	r25
    1abc:	8e 0f       	add	r24, r30
    1abe:	9f 1f       	adc	r25, r31
    1ac0:	08 95       	ret

00001ac2 <strnlen>:
    1ac2:	fc 01       	movw	r30, r24

00001ac4 <.strnlen_loop>:
    1ac4:	61 50       	subi	r22, 0x01	; 1
    1ac6:	70 40       	sbci	r23, 0x00	; 0
    1ac8:	01 90       	ld	r0, Z+
    1aca:	01 10       	cpse	r0, r1
    1acc:	d8 f7       	brcc	.-10     	; 0x1ac4
    1ace:	80 95       	com	r24
    1ad0:	90 95       	com	r25
    1ad2:	8e 0f       	add	r24, r30
    1ad4:	9f 1f       	adc	r25, r31
    1ad6:	08 95       	ret

00001ad8 <strnlen_P>:
    1ad8:	fc 01       	movw	r30, r24
    1ada:	61 50       	subi	r22, 0x01	; 1
    1adc:	70 40       	sbci	r23, 0x00	; 0
    1ade:	05 90       	lpm	r0, Z+
    1ae0:	01 10       	cpse	r0, r1
    1ae2:	d8 f7       	brcc	.-10     	; 0x1ada
    1ae4:	80 95       	com	r24
    1ae6:	90 95       	com	r25
    1ae8:	8e 0f       	add	r24, r30
    1aea:	9f 1f       	adc	r25, r31
    1aec:	08 95       	ret

00001aee <IntProlog>:
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	bf 93       	push	r27
    1af4:	af 93       	push	r26
    1af6:	9f 93       	push	r25
    1af8:	d3 e0       	ldi	r29, 0x03	; 3
    1afa:	c4 e2       	ldi	r28, 0x24	; 36
    1afc:	9f b7       	in	r25, 0x3f	; 63
    1afe:	ae 81       	ldd	r26, Y+6	; 0x06
    1b00:	af 5f       	subi	r26, 0xFF	; 255
    1b02:	ae 83       	std	Y+6, r26	; 0x06
    1b04:	60 f0       	brcs	.+24     	; 0x1b1e
    1b06:	aa 81       	ldd	r26, Y+2	; 0x02
    1b08:	bb 81       	ldd	r27, Y+3	; 0x03
    1b0a:	ba 2b       	or	r27, r26
    1b0c:	41 f4       	brne	.+16     	; 0x1b1e
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	fe 81       	ldd	r31, Y+6	; 0x06
    1b14:	ef 81       	ldd	r30, Y+7	; 0x07
    1b16:	29 96       	adiw	r28, 0x09	; 9
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	09 94       	ijmp

00001b1e <SaveContext>:
    1b1e:	8f 93       	push	r24
    1b20:	7f 93       	push	r23
    1b22:	6f 93       	push	r22
    1b24:	5f 93       	push	r21
    1b26:	4f 93       	push	r20
    1b28:	3f 93       	push	r19
    1b2a:	2f 93       	push	r18
    1b2c:	1f 93       	push	r17
    1b2e:	0f 93       	push	r16
    1b30:	ff 92       	push	r15
    1b32:	ef 92       	push	r14
    1b34:	df 92       	push	r13
    1b36:	cf 92       	push	r12
    1b38:	bf 92       	push	r11
    1b3a:	af 92       	push	r10
    1b3c:	9f 92       	push	r9
    1b3e:	8f 92       	push	r8
    1b40:	7f 92       	push	r7
    1b42:	6f 92       	push	r6
    1b44:	5f 92       	push	r5
    1b46:	4f 92       	push	r4
    1b48:	3f 92       	push	r3
    1b4a:	2f 92       	push	r2
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	9f 93       	push	r25
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b58:	39 a1       	ldd	r19, Y+33	; 0x21
    1b5a:	48 a1       	ldd	r20, Y+32	; 0x20
    1b5c:	e8 a3       	std	Y+32, r30	; 0x20
    1b5e:	f9 a3       	std	Y+33, r31	; 0x21
    1b60:	70 f0       	brcs	.+28     	; 0x1b7e
    1b62:	f3 e0       	ldi	r31, 0x03	; 3
    1b64:	e4 e2       	ldi	r30, 0x24	; 36
    1b66:	d3 81       	ldd	r29, Z+3	; 0x03
    1b68:	c2 81       	ldd	r28, Z+2	; 0x02
    1b6a:	be b7       	in	r27, 0x3e	; 62
    1b6c:	ad b7       	in	r26, 0x3d	; 61
    1b6e:	bd 83       	std	Y+5, r27	; 0x05
    1b70:	ac 83       	std	Y+4, r26	; 0x04
    1b72:	24 81       	ldd	r18, Z+4	; 0x04
    1b74:	2d bf       	out	0x3d, r18	; 61
    1b76:	25 81       	ldd	r18, Z+5	; 0x05
    1b78:	2e bf       	out	0x3e, r18	; 62
    1b7a:	ca 2f       	mov	r28, r26
    1b7c:	db 2f       	mov	r29, r27

00001b7e <AlreadyInKernel>:
    1b7e:	11 24       	eor	r1, r1
    1b80:	e3 2f       	mov	r30, r19
    1b82:	f4 2f       	mov	r31, r20
    1b84:	09 94       	ijmp

00001b86 <Epilog>:
    1b86:	ef 91       	pop	r30
    1b88:	ef 91       	pop	r30

00001b8a <_Epilog>:
    1b8a:	e4 e2       	ldi	r30, 0x24	; 36
    1b8c:	f3 e0       	ldi	r31, 0x03	; 3
    1b8e:	f8 94       	cli
    1b90:	06 81       	ldd	r16, Z+6	; 0x06
    1b92:	0a 95       	dec	r16
    1b94:	06 83       	std	Z+6, r16	; 0x06
    1b96:	54 f4       	brge	.+20     	; 0x1bac
    1b98:	d1 81       	ldd	r29, Z+1	; 0x01
    1b9a:	c0 81       	ld	r28, Z
    1b9c:	d3 83       	std	Z+3, r29	; 0x03
    1b9e:	c2 83       	std	Z+2, r28	; 0x02
    1ba0:	20 96       	adiw	r28, 0x00	; 0
    1ba2:	39 f1       	breq	.+78     	; 0x1bf2
    1ba4:	bd 81       	ldd	r27, Y+5	; 0x05
    1ba6:	ac 81       	ldd	r26, Y+4	; 0x04
    1ba8:	ad bf       	out	0x3d, r26	; 61
    1baa:	be bf       	out	0x3e, r27	; 62

00001bac <SkipTaskSwap>:
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	2f 90       	pop	r2
    1bb6:	3f 90       	pop	r3
    1bb8:	4f 90       	pop	r4
    1bba:	5f 90       	pop	r5
    1bbc:	6f 90       	pop	r6
    1bbe:	7f 90       	pop	r7
    1bc0:	8f 90       	pop	r8
    1bc2:	9f 90       	pop	r9
    1bc4:	af 90       	pop	r10
    1bc6:	bf 90       	pop	r11
    1bc8:	cf 90       	pop	r12
    1bca:	df 90       	pop	r13
    1bcc:	ef 90       	pop	r14
    1bce:	ff 90       	pop	r15
    1bd0:	0f 91       	pop	r16
    1bd2:	1f 91       	pop	r17
    1bd4:	2f 91       	pop	r18
    1bd6:	3f 91       	pop	r19
    1bd8:	4f 91       	pop	r20
    1bda:	5f 91       	pop	r21
    1bdc:	6f 91       	pop	r22
    1bde:	7f 91       	pop	r23
    1be0:	8f 91       	pop	r24
    1be2:	9f 91       	pop	r25
    1be4:	af 91       	pop	r26
    1be6:	bf 91       	pop	r27
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	ef 91       	pop	r30
    1bee:	ff 91       	pop	r31
    1bf0:	18 95       	reti

00001bf2 <_IdleTask>:
    1bf2:	78 94       	sei
    1bf4:	88 95       	sleep

00001bf6 <snooze>:
    1bf6:	fd cf       	rjmp	.-6      	; 0x1bf2

00001bf8 <AvrXSetKernelStack>:
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	80 50       	subi	r24, 0x00	; 0
    1bfe:	90 40       	sbci	r25, 0x00	; 0
    1c00:	11 f4       	brne	.+4      	; 0x1c06
    1c02:	8d b7       	in	r24, 0x3d	; 61
    1c04:	9e b7       	in	r25, 0x3e	; 62

00001c06 <sks1>:
    1c06:	80 93 28 03 	sts	0x0328, r24
    1c0a:	90 93 29 03 	sts	0x0329, r25
    1c0e:	09 94       	ijmp

00001c10 <AvrXRunTask>:
    1c10:	01 d0       	rcall	.+2      	; 0x1c14
    1c12:	23 c0       	rjmp	.+70     	; 0x1c5a

00001c14 <AvrXInitTask>:
    1c14:	e8 2f       	mov	r30, r24
    1c16:	f9 2f       	mov	r31, r25
    1c18:	1d d0       	rcall	.+58     	; 0x1c54
    1c1a:	a0 2d       	mov	r26, r0
    1c1c:	1b d0       	rcall	.+54     	; 0x1c54
    1c1e:	b0 2d       	mov	r27, r0
    1c20:	19 d0       	rcall	.+50     	; 0x1c54
    1c22:	0c 92       	st	X, r0
    1c24:	17 d0       	rcall	.+46     	; 0x1c54
    1c26:	0e 92       	st	-X, r0
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	51 e2       	ldi	r21, 0x21	; 33

00001c2e <PushRegisters>:
    1c2e:	4e 93       	st	-X, r20
    1c30:	5a 95       	dec	r21
    1c32:	e9 f7       	brne	.-6      	; 0x1c2e
    1c34:	11 97       	sbiw	r26, 0x01	; 1
    1c36:	0e d0       	rcall	.+28     	; 0x1c54
    1c38:	80 2d       	mov	r24, r0
    1c3a:	0c d0       	rcall	.+24     	; 0x1c54
    1c3c:	90 2d       	mov	r25, r0
    1c3e:	0a d0       	rcall	.+20     	; 0x1c54
    1c40:	e8 2f       	mov	r30, r24
    1c42:	f9 2f       	mov	r31, r25
    1c44:	a4 83       	std	Z+4, r26	; 0x04
    1c46:	b5 83       	std	Z+5, r27	; 0x05
    1c48:	03 82       	std	Z+3, r0	; 0x03
    1c4a:	a0 e6       	ldi	r26, 0x60	; 96
    1c4c:	a2 83       	std	Z+2, r26	; 0x02
    1c4e:	41 83       	std	Z+1, r20	; 0x01
    1c50:	40 83       	st	Z, r20
    1c52:	08 95       	ret

00001c54 <lpm_inc>:
    1c54:	c8 95       	lpm
    1c56:	31 96       	adiw	r30, 0x01	; 1
    1c58:	08 95       	ret

00001c5a <AvrXResume>:
    1c5a:	f8 94       	cli
    1c5c:	48 df       	rcall	.-368    	; 0x1aee
    1c5e:	78 94       	sei
    1c60:	e8 2f       	mov	r30, r24
    1c62:	f9 2f       	mov	r31, r25
    1c64:	22 81       	ldd	r18, Z+2	; 0x02
    1c66:	2f 7d       	andi	r18, 0xDF	; 223
    1c68:	22 83       	std	Z+2, r18	; 0x02
    1c6a:	26 ff       	sbrs	r18, 6
    1c6c:	03 c0       	rjmp	.+6      	; 0x1c74
    1c6e:	2f 7b       	andi	r18, 0xBF	; 191
    1c70:	22 83       	std	Z+2, r18	; 0x02
    1c72:	01 d0       	rcall	.+2      	; 0x1c76

00001c74 <ar00>:
    1c74:	8a cf       	rjmp	.-236    	; 0x1b8a

00001c76 <_QueuePid>:
    1c76:	e8 2f       	mov	r30, r24
    1c78:	f9 2f       	mov	r31, r25
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	22 81       	ldd	r18, Z+2	; 0x02
    1c7e:	20 73       	andi	r18, 0x30	; 48
    1c80:	e1 f4       	brne	.+56     	; 0x1cba
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	43 81       	ldd	r20, Z+3	; 0x03
    1c88:	c4 e2       	ldi	r28, 0x24	; 36
    1c8a:	d3 e0       	ldi	r29, 0x03	; 3
    1c8c:	2f b7       	in	r18, 0x3f	; 63
    1c8e:	f8 94       	cli

00001c90 <_qp00>:
    1c90:	33 95       	inc	r19
    1c92:	ec 2f       	mov	r30, r28
    1c94:	fd 2f       	mov	r31, r29
    1c96:	c0 81       	ld	r28, Z
    1c98:	d1 81       	ldd	r29, Z+1	; 0x01
    1c9a:	20 96       	adiw	r28, 0x00	; 0
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4
    1c9e:	5b 81       	ldd	r21, Y+3	; 0x03
    1ca0:	45 17       	cp	r20, r21
    1ca2:	b0 f7       	brcc	.-20     	; 0x1c90

00001ca4 <_qp01>:
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
    1ca8:	f9 2f       	mov	r31, r25
    1caa:	e8 2f       	mov	r30, r24
    1cac:	d1 83       	std	Z+1, r29	; 0x01
    1cae:	c0 83       	st	Z, r28
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	83 2f       	mov	r24, r19
    1cb6:	2f bf       	out	0x3f, r18	; 63
    1cb8:	08 95       	ret

00001cba <_qpSUSPEND>:
    1cba:	83 2f       	mov	r24, r19
    1cbc:	20 64       	ori	r18, 0x40	; 64
    1cbe:	22 83       	std	Z+2, r18	; 0x02
    1cc0:	08 95       	ret

00001cc2 <AvrXWaitMessageAck>:
    1cc2:	8e 5f       	subi	r24, 0xFE	; 254
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255

00001cc6 <AvrXWaitSemaphore>:
    1cc6:	e8 2f       	mov	r30, r24
    1cc8:	f9 2f       	mov	r31, r25
    1cca:	f8 94       	cli
    1ccc:	20 81       	ld	r18, Z
    1cce:	31 81       	ldd	r19, Z+1	; 0x01
    1cd0:	21 50       	subi	r18, 0x01	; 1
    1cd2:	30 40       	sbci	r19, 0x00	; 0
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc
    1cd6:	20 83       	st	Z, r18
    1cd8:	31 83       	std	Z+1, r19	; 0x01
    1cda:	18 95       	reti

00001cdc <aws01>:
    1cdc:	08 df       	rcall	.-496    	; 0x1aee
    1cde:	e4 e2       	ldi	r30, 0x24	; 36
    1ce0:	f3 e0       	ldi	r31, 0x03	; 3
    1ce2:	73 81       	ldd	r23, Z+3	; 0x03
    1ce4:	62 81       	ldd	r22, Z+2	; 0x02
    1ce6:	3c d0       	rcall	.+120    	; 0x1d60
    1ce8:	e8 2f       	mov	r30, r24
    1cea:	f9 2f       	mov	r31, r25
    1cec:	2b d0       	rcall	.+86     	; 0x1d44
    1cee:	4d cf       	rjmp	.-358    	; 0x1b8a

00001cf0 <AvrXAckMessage>:
    1cf0:	8e 5f       	subi	r24, 0xFE	; 254
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255

00001cf4 <AvrXSetSemaphore>:
    1cf4:	0c d0       	rcall	.+24     	; 0x1d0e
    1cf6:	90 91 2a 03 	lds	r25, 0x032A
    1cfa:	93 95       	inc	r25
    1cfc:	89 2b       	or	r24, r25
    1cfe:	09 f0       	breq	.+2      	; 0x1d02
    1d00:	08 95       	ret

00001d02 <axss0>:
    1d02:	f8 94       	cli
    1d04:	f4 de       	rcall	.-536    	; 0x1aee
    1d06:	78 94       	sei
    1d08:	40 cf       	rjmp	.-384    	; 0x1b8a

00001d0a <AvrXIntSetObjectSemaphore>:
    1d0a:	8e 5f       	subi	r24, 0xFE	; 254
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255

00001d0e <AvrXIntSetSemaphore>:
    1d0e:	e8 2f       	mov	r30, r24
    1d10:	f9 2f       	mov	r31, r25
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	2f b7       	in	r18, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	60 81       	ld	r22, Z
    1d1e:	86 17       	cp	r24, r22
    1d20:	97 07       	cpc	r25, r23
    1d22:	28 f0       	brcs	.+10     	; 0x1d2e
    1d24:	80 83       	st	Z, r24
    1d26:	91 83       	std	Z+1, r25	; 0x01

00001d28 <BogusSemaphore>:
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	2f bf       	out	0x3f, r18	; 63
    1d2c:	08 95       	ret

00001d2e <aiss00>:
    1d2e:	8f e5       	ldi	r24, 0x5F	; 95
    1d30:	86 17       	cp	r24, r22
    1d32:	97 07       	cpc	r25, r23
    1d34:	c8 f7       	brcc	.-14     	; 0x1d28
    1d36:	23 d0       	rcall	.+70     	; 0x1d7e
    1d38:	2f bf       	out	0x3f, r18	; 63
    1d3a:	86 2f       	mov	r24, r22
    1d3c:	97 2f       	mov	r25, r23
    1d3e:	9b cf       	rjmp	.-202    	; 0x1c76

00001d40 <_ao00>:
    1d40:	e2 2f       	mov	r30, r18
    1d42:	f3 2f       	mov	r31, r19

00001d44 <_AppendObject>:
    1d44:	20 81       	ld	r18, Z
    1d46:	31 81       	ldd	r19, Z+1	; 0x01
    1d48:	20 50       	subi	r18, 0x00	; 0
    1d4a:	30 40       	sbci	r19, 0x00	; 0
    1d4c:	c9 f7       	brne	.-14     	; 0x1d40
    1d4e:	71 83       	std	Z+1, r23	; 0x01
    1d50:	60 83       	st	Z, r22
    1d52:	f7 2f       	mov	r31, r23
    1d54:	e6 2f       	mov	r30, r22
    1d56:	31 83       	std	Z+1, r19	; 0x01
    1d58:	20 83       	st	Z, r18
    1d5a:	08 95       	ret

00001d5c <_ro00>:
    1d5c:	f3 2f       	mov	r31, r19
    1d5e:	e2 2f       	mov	r30, r18

00001d60 <_RemoveObject>:
    1d60:	20 81       	ld	r18, Z
    1d62:	31 81       	ldd	r19, Z+1	; 0x01
    1d64:	62 17       	cp	r22, r18
    1d66:	73 07       	cpc	r23, r19
    1d68:	51 f0       	breq	.+20     	; 0x1d7e
    1d6a:	20 50       	subi	r18, 0x00	; 0
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	b1 f7       	brne	.-20     	; 0x1d5c
    1d70:	08 95       	ret

00001d72 <_RemoveFirstObject>:
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	60 50       	subi	r22, 0x00	; 0
    1d78:	70 40       	sbci	r23, 0x00	; 0
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e
    1d7c:	08 95       	ret

00001d7e <_RemoveObjectAt>:
    1d7e:	4c 2f       	mov	r20, r28
    1d80:	5d 2f       	mov	r21, r29
    1d82:	c6 2f       	mov	r28, r22
    1d84:	d7 2f       	mov	r29, r23
    1d86:	79 81       	ldd	r23, Y+1	; 0x01
    1d88:	68 81       	ld	r22, Y
    1d8a:	71 83       	std	Z+1, r23	; 0x01
    1d8c:	60 83       	st	Z, r22
    1d8e:	e6 2f       	mov	r30, r22
    1d90:	f7 2f       	mov	r31, r23
    1d92:	66 27       	eor	r22, r22
    1d94:	68 83       	st	Y, r22
    1d96:	69 83       	std	Y+1, r22	; 0x01
    1d98:	7d 2f       	mov	r23, r29
    1d9a:	6c 2f       	mov	r22, r28
    1d9c:	c4 2f       	mov	r28, r20
    1d9e:	d5 2f       	mov	r29, r21
    1da0:	98 94       	clz
    1da2:	08 95       	ret

00001da4 <AvrXIntResetObjectSemaphore>:
    1da4:	e8 2f       	mov	r30, r24
    1da6:	f9 2f       	mov	r31, r25
    1da8:	32 96       	adiw	r30, 0x02	; 2
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0

00001dac <AvrXIntResetSemaphore>:
    1dac:	f9 2f       	mov	r31, r25
    1dae:	e8 2f       	mov	r30, r24

00001db0 <ars00>:
    1db0:	f8 94       	cli
    1db2:	40 81       	ld	r20, Z
    1db4:	51 81       	ldd	r21, Z+1	; 0x01
    1db6:	41 50       	subi	r20, 0x01	; 1
    1db8:	50 40       	sbci	r21, 0x00	; 0
    1dba:	11 f0       	breq	.+4      	; 0x1dc0
    1dbc:	4f 5f       	subi	r20, 0xFF	; 255
    1dbe:	5f 4f       	sbci	r21, 0xFF	; 255

00001dc0 <ars01>:
    1dc0:	51 83       	std	Z+1, r21	; 0x01
    1dc2:	40 83       	st	Z, r20
    1dc4:	18 95       	reti

00001dc6 <AvrXDelay>:
    1dc6:	01 d0       	rcall	.+2      	; 0x1dca
    1dc8:	7c cf       	rjmp	.-264    	; 0x1cc2

00001dca <AvrXStartTimer>:
    1dca:	60 50       	subi	r22, 0x00	; 0
    1dcc:	70 40       	sbci	r23, 0x00	; 0
    1dce:	09 f4       	brne	.+2      	; 0x1dd2
    1dd0:	8f cf       	rjmp	.-226    	; 0x1cf0

00001dd2 <CountNotZero>:
    1dd2:	f8 94       	cli
    1dd4:	8c de       	rcall	.-744    	; 0x1aee
    1dd6:	78 94       	sei
    1dd8:	e5 df       	rcall	.-54     	; 0x1da4
    1dda:	ec e2       	ldi	r30, 0x2C	; 44
    1ddc:	f3 e0       	ldi	r31, 0x03	; 3
    1dde:	f8 94       	cli
    1de0:	20 91 2e 03 	lds	r18, 0x032E
    1de4:	2a 95       	dec	r18
    1de6:	20 93 2e 03 	sts	0x032E, r18
    1dea:	78 94       	sei

00001dec <ast00>:
    1dec:	ce 2f       	mov	r28, r30
    1dee:	df 2f       	mov	r29, r31
    1df0:	e8 81       	ld	r30, Y
    1df2:	f9 81       	ldd	r31, Y+1	; 0x01
    1df4:	30 96       	adiw	r30, 0x00	; 0
    1df6:	59 f0       	breq	.+22     	; 0x1e0e
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	62 1b       	sub	r22, r18
    1dfe:	73 0b       	sbc	r23, r19
    1e00:	a8 f7       	brcc	.-22     	; 0x1dec
    1e02:	62 0f       	add	r22, r18
    1e04:	73 1f       	adc	r23, r19
    1e06:	26 1b       	sub	r18, r22
    1e08:	37 0b       	sbc	r19, r23
    1e0a:	24 83       	std	Z+4, r18	; 0x04
    1e0c:	35 83       	std	Z+5, r19	; 0x05

00001e0e <ast01>:
    1e0e:	99 83       	std	Y+1, r25	; 0x01
    1e10:	88 83       	st	Y, r24
    1e12:	d9 2f       	mov	r29, r25
    1e14:	c8 2f       	mov	r28, r24
    1e16:	f9 83       	std	Y+1, r31	; 0x01
    1e18:	e8 83       	st	Y, r30
    1e1a:	6c 83       	std	Y+4, r22	; 0x04
    1e1c:	7d 83       	std	Y+5, r23	; 0x05
    1e1e:	3c d0       	rcall	.+120    	; 0x1e98
    1e20:	b4 ce       	rjmp	.-664    	; 0x1b8a

00001e22 <AvrXTimerHandler>:
    1e22:	f8 94       	cli
    1e24:	20 91 2e 03 	lds	r18, 0x032E
    1e28:	21 50       	subi	r18, 0x01	; 1
    1e2a:	20 93 2e 03 	sts	0x032E, r18
    1e2e:	78 94       	sei
    1e30:	08 f0       	brcs	.+2      	; 0x1e34
    1e32:	08 95       	ret

00001e34 <ati00>:
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	d0 91 2d 03 	lds	r29, 0x032D
    1e40:	c0 91 2c 03 	lds	r28, 0x032C
    1e44:	20 96       	adiw	r28, 0x00	; 0
    1e46:	21 f1       	breq	.+72     	; 0x1e90
    1e48:	fd 81       	ldd	r31, Y+5	; 0x05
    1e4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e4c:	31 97       	sbiw	r30, 0x01	; 1
    1e4e:	fd 83       	std	Y+5, r31	; 0x05
    1e50:	ec 83       	std	Y+4, r30	; 0x04

00001e52 <ati01>:
    1e52:	ef 2b       	or	r30, r31
    1e54:	e9 f4       	brne	.+58     	; 0x1e90
    1e56:	a8 81       	ld	r26, Y
    1e58:	b9 81       	ldd	r27, Y+1	; 0x01
    1e5a:	b0 93 2d 03 	sts	0x032D, r27
    1e5e:	a0 93 2c 03 	sts	0x032C, r26
    1e62:	f9 83       	std	Y+1, r31	; 0x01
    1e64:	e8 83       	st	Y, r30
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	82 50       	subi	r24, 0x02	; 2
    1e6c:	90 40       	sbci	r25, 0x00	; 0
    1e6e:	31 f4       	brne	.+12     	; 0x1e7c
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	9f 81       	ldd	r25, Y+7	; 0x07
    1e74:	7d 2f       	mov	r23, r29
    1e76:	6c 2f       	mov	r22, r28
    1e78:	1d d0       	rcall	.+58     	; 0x1eb4
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82

00001e7c <ati04>:
    1e7c:	8c 2f       	mov	r24, r28
    1e7e:	9d 2f       	mov	r25, r29
    1e80:	44 df       	rcall	.-376    	; 0x1d0a

00001e82 <ati03>:
    1e82:	10 96       	adiw	r26, 0x00	; 0
    1e84:	29 f0       	breq	.+10     	; 0x1e90
    1e86:	ca 2f       	mov	r28, r26
    1e88:	db 2f       	mov	r29, r27
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8e:	e1 cf       	rjmp	.-62     	; 0x1e52

00001e90 <ati02>:
    1e90:	bf 91       	pop	r27
    1e92:	af 91       	pop	r26
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28

00001e98 <TimerHandler>:
    1e98:	f8 94       	cli
    1e9a:	20 91 2e 03 	lds	r18, 0x032E
    1e9e:	23 95       	inc	r18
    1ea0:	20 93 2e 03 	sts	0x032E, r18
    1ea4:	78 94       	sei
    1ea6:	31 f6       	brne	.-116    	; 0x1e34
    1ea8:	08 95       	ret

00001eaa <AvrXSendMessage>:
    1eaa:	f8 94       	cli
    1eac:	20 de       	rcall	.-960    	; 0x1aee
    1eae:	78 94       	sei
    1eb0:	01 d0       	rcall	.+2      	; 0x1eb4
    1eb2:	6b ce       	rjmp	.-810    	; 0x1b8a

00001eb4 <AvrXIntSendMessage>:
    1eb4:	f9 2f       	mov	r31, r25
    1eb6:	e8 2f       	mov	r30, r24
    1eb8:	45 df       	rcall	.-374    	; 0x1d44
    1eba:	27 cf       	rjmp	.-434    	; 0x1d0a

00001ebc <AvrXWaitMessage>:
    1ebc:	e8 2f       	mov	r30, r24
    1ebe:	f9 2f       	mov	r31, r25
    1ec0:	f8 94       	cli
    1ec2:	57 df       	rcall	.-338    	; 0x1d72
    1ec4:	78 94       	sei
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0
    1ec8:	fc de       	rcall	.-520    	; 0x1cc2
    1eca:	82 50       	subi	r24, 0x02	; 2
    1ecc:	90 40       	sbci	r25, 0x00	; 0
    1ece:	f6 cf       	rjmp	.-20     	; 0x1ebc

00001ed0 <_rm01>:
    1ed0:	69 df       	rcall	.-302    	; 0x1da4
    1ed2:	86 2f       	mov	r24, r22
    1ed4:	97 2f       	mov	r25, r23
    1ed6:	08 95       	ret

00001ed8 <__mulsi3>:
    1ed8:	62 9f       	mul	r22, r18
    1eda:	d0 01       	movw	r26, r0
    1edc:	73 9f       	mul	r23, r19
    1ede:	f0 01       	movw	r30, r0
    1ee0:	82 9f       	mul	r24, r18
    1ee2:	e0 0d       	add	r30, r0
    1ee4:	f1 1d       	adc	r31, r1
    1ee6:	64 9f       	mul	r22, r20
    1ee8:	e0 0d       	add	r30, r0
    1eea:	f1 1d       	adc	r31, r1
    1eec:	92 9f       	mul	r25, r18
    1eee:	f0 0d       	add	r31, r0
    1ef0:	83 9f       	mul	r24, r19
    1ef2:	f0 0d       	add	r31, r0
    1ef4:	74 9f       	mul	r23, r20
    1ef6:	f0 0d       	add	r31, r0
    1ef8:	65 9f       	mul	r22, r21
    1efa:	f0 0d       	add	r31, r0
    1efc:	99 27       	eor	r25, r25
    1efe:	72 9f       	mul	r23, r18
    1f00:	b0 0d       	add	r27, r0
    1f02:	e1 1d       	adc	r30, r1
    1f04:	f9 1f       	adc	r31, r25
    1f06:	63 9f       	mul	r22, r19
    1f08:	b0 0d       	add	r27, r0
    1f0a:	e1 1d       	adc	r30, r1
    1f0c:	f9 1f       	adc	r31, r25
    1f0e:	bd 01       	movw	r22, r26
    1f10:	cf 01       	movw	r24, r30
    1f12:	11 24       	eor	r1, r1
    1f14:	08 95       	ret

00001f16 <__udivmodhi4>:
    1f16:	aa 1b       	sub	r26, r26
    1f18:	bb 1b       	sub	r27, r27
    1f1a:	51 e1       	ldi	r21, 0x11	; 17
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c

00001f1e <__udivmodhi4_loop>:
    1f1e:	aa 1f       	adc	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	a6 17       	cp	r26, r22
    1f24:	b7 07       	cpc	r27, r23
    1f26:	10 f0       	brcs	.+4      	; 0x1f2c
    1f28:	a6 1b       	sub	r26, r22
    1f2a:	b7 0b       	sbc	r27, r23

00001f2c <__udivmodhi4_ep>:
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	5a 95       	dec	r21
    1f32:	a9 f7       	brne	.-22     	; 0x1f1e
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	08 95       	ret

00001f3e <__udivmodsi4>:
    1f3e:	a1 e2       	ldi	r26, 0x21	; 33
    1f40:	1a 2e       	mov	r1, r26
    1f42:	aa 1b       	sub	r26, r26
    1f44:	bb 1b       	sub	r27, r27
    1f46:	fd 01       	movw	r30, r26
    1f48:	0d c0       	rjmp	.+26     	; 0x1f64

00001f4a <__udivmodsi4_loop>:
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	ee 1f       	adc	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	a2 17       	cp	r26, r18
    1f54:	b3 07       	cpc	r27, r19
    1f56:	e4 07       	cpc	r30, r20
    1f58:	f5 07       	cpc	r31, r21
    1f5a:	20 f0       	brcs	.+8      	; 0x1f64
    1f5c:	a2 1b       	sub	r26, r18
    1f5e:	b3 0b       	sbc	r27, r19
    1f60:	e4 0b       	sbc	r30, r20
    1f62:	f5 0b       	sbc	r31, r21

00001f64 <__udivmodsi4_ep>:
    1f64:	66 1f       	adc	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	1a 94       	dec	r1
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a
    1f70:	60 95       	com	r22
    1f72:	70 95       	com	r23
    1f74:	80 95       	com	r24
    1f76:	90 95       	com	r25
    1f78:	9b 01       	movw	r18, r22
    1f7a:	ac 01       	movw	r20, r24
    1f7c:	bd 01       	movw	r22, r26
    1f7e:	cf 01       	movw	r24, r30
    1f80:	08 95       	ret

00001f82 <__divmodsi4>:
    1f82:	97 fb       	bst	r25, 7
    1f84:	09 2e       	mov	r0, r25
    1f86:	05 26       	eor	r0, r21
    1f88:	0e d0       	rcall	.+28     	; 0x1fa6
    1f8a:	57 fd       	sbrc	r21, 7
    1f8c:	04 d0       	rcall	.+8      	; 0x1f96
    1f8e:	d7 df       	rcall	.-82     	; 0x1f3e
    1f90:	0a d0       	rcall	.+20     	; 0x1fa6
    1f92:	00 1c       	adc	r0, r0
    1f94:	38 f4       	brcc	.+14     	; 0x1fa4

00001f96 <__divmodsi4_neg2>:
    1f96:	50 95       	com	r21
    1f98:	40 95       	com	r20
    1f9a:	30 95       	com	r19
    1f9c:	21 95       	neg	r18
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	4f 4f       	sbci	r20, 0xFF	; 255
    1fa2:	5f 4f       	sbci	r21, 0xFF	; 255

00001fa4 <__divmodsi4_exit>:
    1fa4:	08 95       	ret

00001fa6 <__divmodsi4_neg1>:
    1fa6:	f6 f7       	brtc	.-4      	; 0x1fa4
    1fa8:	90 95       	com	r25
    1faa:	80 95       	com	r24
    1fac:	70 95       	com	r23
    1fae:	61 95       	neg	r22
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	08 95       	ret

00001fb8 <_exit>:
    1fb8:	ff cf       	rjmp	.-2      	; 0x1fb8
