
AvrXSimpleSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ec6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001ec6  00001f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000219  00800090  00800090  00001f8a  2**2
                  ALLOC
  3 .noinit       00000000  008002a9  008002a9  00001f8a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001f8a  2**0
                  CONTENTS
  5 .stab         00006a98  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00002be0  00000000  00000000  00008a24  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4 <__init>
       4:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      10:	0c 94 9d 05 	jmp	0xb3a <__vector_4>
      14:	0c 94 a9 04 	jmp	0x952 <__vector_5>
      18:	0c 94 70 05 	jmp	0xae0 <__vector_6>
      1c:	0c 94 16 05 	jmp	0xa2c <__vector_7>
      20:	0c 94 43 05 	jmp	0xa86 <__vector_8>
      24:	0c 94 7c 04 	jmp	0x8f8 <__vector_9>
      28:	0c 94 e9 04 	jmp	0x9d2 <__vector_10>
      2c:	0c 94 f5 00 	jmp	0x1ea <__vector_11>
      30:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      34:	0c 94 7b 07 	jmp	0xef6 <__vector_13>
      38:	0c 94 85 07 	jmp	0xf0a <__vector_14>
      3c:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa <__bad_interrupt>

00000054 <__ctors_end>:
      54:	68 02       	muls	r22, r24
      56:	ad 01       	movw	r20, r26
      58:	55 01       	movw	r10, r10
      5a:	01 e1       	ldi	r16, 0x11	; 17

0000005b <getUAVStatusTcb>:
      5b:	e1 01 26 01 6d 01 04                                ..&.m..

00000062 <__c.1904>:
      62:	77 20 25 64 2c 00                                   w %d,.

00000068 <__c.1902>:
      68:	71 20 25 64 2c 00                                   q %d,.

0000006e <__c.1900>:
      6e:	62 20 25 64 2c 00                                   b %d,.

00000074 <__c.1898>:
      74:	66 20 25 64 2c 00                                   f %d,.

0000007a <__c.1896>:
      7a:	67 20 25 64 2c 00                                   g %d,.

00000080 <__c.1894>:
      80:	73 20 25 64 2c 00                                   s %d,.

00000086 <__c.1892>:
      86:	61 20 30 34 33 2e 33 32 32 33 6e 2c 00              a 043.3223n,.

00000093 <__c.1890>:
      93:	61 20 30 37 32 2e 35 37 35 39 45 2c 00              a 072.5759E,.

000000a0 <__c.1888>:
      a0:	63 20 25 64 2c 00                                   c %d,.

000000a6 <__c.1886>:
      a6:	31 00                                               1.

000000a8 <TimerRTCPrescaleFactor>:
      a8:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000000b8 <TimerPrescaleFactor>:
      b8:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000000c4 <__init>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf e5       	ldi	r28, 0x5F	; 95
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	10 e0       	ldi	r17, 0x00	; 0
      d2:	a0 e6       	ldi	r26, 0x60	; 96
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e6 ec       	ldi	r30, 0xC6	; 198
      d8:	fe e1       	ldi	r31, 0x1E	; 30
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	a0 39       	cpi	r26, 0x90	; 144
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	a0 e9       	ldi	r26, 0x90	; 144
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a9 3a       	cpi	r26, 0xA9	; 169
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0c 94 b0 02 	jmp	0x560 <main>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0x0 <__heap_end>

000000fe <parserInit>:

void parserInit(void)
{
	// initialize input buffer
	parserBufferLength = 0;
      fe:	10 92 6c 01 	sts	0x016C, r1
	// initialize executing function
	ParserExecFunction = 0;
     102:	10 92 a5 00 	sts	0x00A5, r1
     106:	10 92 a4 00 	sts	0x00A4, r1
	// initialize command list
	parserNumCommands = 0;
     10a:	10 92 ba 00 	sts	0x00BA, r1
     10e:	08 95       	ret

00000110 <parserAddCommand>:
}


void parserAddCommand(unsigned char* newCmdString, ParserFuncPtrType newCmdFuncPtr)
{
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	ac 01       	movw	r20, r24
     116:	8b 01       	movw	r16, r22
	// add command string to end of command list
	strcpy(CommandList[parserNumCommands], newCmdString);
     118:	80 91 ba 00 	lds	r24, 0x00BA
     11c:	2f e0       	ldi	r18, 0x0F	; 15
     11e:	82 9f       	mul	r24, r18
     120:	c0 01       	movw	r24, r0
     122:	11 24       	eor	r1, r1
     124:	ba 01       	movw	r22, r20
     126:	81 54       	subi	r24, 0x41	; 65
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	0e 94 bc 07 	call	0xf78 <strcpy>
	// add command function ptr to end of function list
	ParserFunctionList[parserNumCommands] = newCmdFuncPtr;
     12e:	80 91 ba 00 	lds	r24, 0x00BA
     132:	e8 2f       	mov	r30, r24
     134:	ff 27       	eor	r31, r31
     136:	ee 0f       	add	r30, r30
     138:	ff 1f       	adc	r31, r31
     13a:	ea 55       	subi	r30, 0x5A	; 90
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	11 83       	std	Z+1, r17	; 0x01
     140:	00 83       	st	Z, r16
	// increment number of registered commands
	parserNumCommands++;
     142:	8f 5f       	subi	r24, 0xFF	; 255
     144:	80 93 ba 00 	sts	0x00BA, r24
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	08 95       	ret

0000014e <parserSetOutputFunc>:
}


void parserSetOutputFunc(void (*output_func)(unsigned char c))
{
	// set new output function
	parserOutputFunc = output_func;
     14e:	90 93 a3 00 	sts	0x00A3, r25
     152:	80 93 a2 00 	sts	0x00A2, r24
     156:	08 95       	ret

00000158 <parserProcessInputString>:
}


void parserInputFunc(unsigned char c)
{
	// process the received character
	
	if (c != '\r')		//anything other than return character must be a part of the command
	{	
		// echo character to the output
//		parserOutputFunc(c);
		// add it to the command line buffer
		parserBuffer[parserBufferLength] = c;
		// update buffer length
		parserBufferLength++;
	}
	else				//return character -> process command
	{
		// add null termination to command
		parserBuffer[parserBufferLength] = 0;
		// command is complete, process it
		parserProcessInputString();
		// reset buffer
		parserBufferLength = 0;
	}
}


void parserProcessInputString(void)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	c0 e0       	ldi	r28, 0x00	; 0
     15e:	d0 e0       	ldi	r29, 0x00	; 0
     160:	22 c0       	rjmp	.+68     	; 0x1a6 <parserProcessInputString+0x4e>
	unsigned char cmdIndex;

	// search command list for match with entered command
	for(cmdIndex=0; cmdIndex<parserNumCommands; cmdIndex++)
	{
		if( !strncmp(CommandList[cmdIndex], parserBuffer, 1) )		//command is first char of buffer
     162:	ae 2f       	mov	r26, r30
     164:	bb 27       	eor	r27, r27
     166:	8f e0       	ldi	r24, 0x0F	; 15
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	a8 9f       	mul	r26, r24
     16c:	f0 01       	movw	r30, r0
     16e:	a9 9f       	mul	r26, r25
     170:	f0 0d       	add	r31, r0
     172:	b8 9f       	mul	r27, r24
     174:	f0 0d       	add	r31, r0
     176:	11 24       	eor	r1, r1
     178:	e1 54       	subi	r30, 0x41	; 65
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	90 81       	ld	r25, Z
     17e:	80 91 5b 01 	lds	r24, 0x015B
     182:	98 17       	cp	r25, r24
     184:	79 f4       	brne	.+30     	; 0x1a4 <parserProcessInputString+0x4c>
		{
			// user-entered command matched a command in the list (database)
			ParserExecFunction = ParserFunctionList[cmdIndex];
     186:	aa 0f       	add	r26, r26
     188:	bb 1f       	adc	r27, r27
     18a:	aa 55       	subi	r26, 0x5A	; 90
     18c:	bf 4f       	sbci	r27, 0xFF	; 255
     18e:	ed 91       	ld	r30, X+
     190:	fc 91       	ld	r31, X
     192:	f0 93 a5 00 	sts	0x00A5, r31
     196:	e0 93 a4 00 	sts	0x00A4, r30
			// run the corresponding function
			ParserExecFunction();
     19a:	09 95       	icall
			// reset
			ParserExecFunction = 0;
     19c:	10 92 a5 00 	sts	0x00A5, r1
     1a0:	10 92 a4 00 	sts	0x00A4, r1
     1a4:	21 96       	adiw	r28, 0x01	; 1
     1a6:	ec 2f       	mov	r30, r28
     1a8:	80 91 ba 00 	lds	r24, 0x00BA
     1ac:	c8 17       	cp	r28, r24
     1ae:	c8 f2       	brcs	.-78     	; 0x162 <parserProcessInputString+0xa>
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <parserInputFunc>:
     1b6:	90 91 6c 01 	lds	r25, 0x016C
     1ba:	8d 30       	cpi	r24, 0x0D	; 13
     1bc:	49 f0       	breq	.+18     	; 0x1d0 <parserInputFunc+0x1a>
     1be:	e9 2f       	mov	r30, r25
     1c0:	ff 27       	eor	r31, r31
     1c2:	e5 5a       	subi	r30, 0xA5	; 165
     1c4:	fe 4f       	sbci	r31, 0xFE	; 254
     1c6:	80 83       	st	Z, r24
     1c8:	9f 5f       	subi	r25, 0xFF	; 255
     1ca:	90 93 6c 01 	sts	0x016C, r25
     1ce:	08 95       	ret
     1d0:	e9 2f       	mov	r30, r25
     1d2:	ff 27       	eor	r31, r31
     1d4:	e5 5a       	subi	r30, 0xA5	; 165
     1d6:	fe 4f       	sbci	r31, 0xFE	; 254
     1d8:	10 82       	st	Z, r1
     1da:	0e 94 ac 00 	call	0x158 <parserProcessInputString>
     1de:	10 92 6c 01 	sts	0x016C, r1
     1e2:	08 95       	ret

000001e4 <parserGetArgStr>:
		}
	}
}

// return string pointer to argument [argnum]
unsigned char* parserGetArgStr(void)
{
	return &parserBuffer[2];		//spec states that commands are 1 char followed by a space followed by the arg, so the
}									//arg must start at idx 2
     1e4:	8d e5       	ldi	r24, 0x5D	; 93
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	08 95       	ret

000001ea <__vector_11>:
 */

AVRX_SIGINT(SIG_OVERFLOW0)
{
    IntProlog();                // Switch to kernel stack/context
     1ea:	0e 94 ea 0c 	call	0x19d4 <IntProlog>
    TCNT0 += TCNT0_INIT;		// Add to pre-load to account for any missed clocks
     1ee:	82 b7       	in	r24, 0x32	; 50
     1f0:	8f 53       	subi	r24, 0x3F	; 63
     1f2:	82 bf       	out	0x32, r24	; 50
    AvrXTimerHandler();         // Call Time queue manager
     1f4:	0e 94 86 0e 	call	0x1d0c <AvrXTimerHandler>
    Epilog();                   // Return to tasks
     1f8:	0e 94 36 0d 	call	0x1a6c <Epilog>

000001fc <myputs>:
}



// Super simple string printers...

// PutString from RAM
void myputs(int (*putch)(char), const uint8_t * psz)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	8c 01       	movw	r16, r24
     206:	eb 01       	movw	r28, r22
     208:	03 c0       	rjmp	.+6      	; 0x210 <myputs+0x14>
	while (*psz != 0)
		(*putch)(*psz++);
     20a:	21 96       	adiw	r28, 0x01	; 1
     20c:	f8 01       	movw	r30, r16
     20e:	09 95       	icall
     210:	88 81       	ld	r24, Y
     212:	88 23       	and	r24, r24
     214:	d1 f7       	brne	.-12     	; 0x20a <myputs+0xe>
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <myputs_P>:
}

// PutString from FLASH
void myputs_P(int (*putch)(char), const uint8_t * psz)
{
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	8c 01       	movw	r16, r24
     22a:	eb 01       	movw	r28, r22
     22c:	05 c0       	rjmp	.+10     	; 0x238 <myputs_P+0x18>
	while (__LPM(psz) != 0)
		(*putch)(__LPM(psz++));
     22e:	21 96       	adiw	r28, 0x01	; 1
     230:	f9 01       	movw	r30, r18
     232:	84 91       	lpm	r24, Z
     234:	f8 01       	movw	r30, r16
     236:	09 95       	icall
     238:	9e 01       	movw	r18, r28
     23a:	fe 01       	movw	r30, r28
     23c:	84 91       	lpm	r24, Z
     23e:	88 23       	and	r24, r24
     240:	b1 f7       	brne	.-20     	; 0x22e <myputs_P+0xe>
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	08 95       	ret

0000024c <getUAVStatus>:
}

//#if (USART_CHANNELS & CHANNEL_0)

//tell the ground station I am OK by sending a "1" 10 times a second
AVRX_GCC_TASKDEF(getUAVStatus, 76, 4)
{	
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	26 97       	sbiw	r28, 0x06	; 6
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		printf_P(PSTR("1"));
     260:	86 ea       	ldi	r24, 0xA6	; 166
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	0e 94 a7 08 	call	0x114e <printf_P>
		putchar('\r');
     26c:	60 91 a1 02 	lds	r22, 0x02A1
     270:	70 91 a2 02 	lds	r23, 0x02A2
     274:	8d e0       	ldi	r24, 0x0D	; 13
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 58 08 	call	0x10b0 <fputc>
		if (DEBUG) putchar('\n');
     27c:	60 91 a1 02 	lds	r22, 0x02A1
     280:	70 91 a2 02 	lds	r23, 0x02A2
     284:	8a e0       	ldi	r24, 0x0A	; 10
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 58 08 	call	0x10b0 <fputc>
		AvrXDelay(&timer, 250);
     28c:	6a ef       	ldi	r22, 0xFA	; 250
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 58 0e 	call	0x1cb0 <AvrXDelay>
		printf_P(PSTR("c %d,"), 120);   	// c/3 evaluates to an int, even it c is not a multiple of
     298:	88 e7       	ldi	r24, 0x78	; 120
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9f 93       	push	r25
     29e:	8f 93       	push	r24
     2a0:	80 ea       	ldi	r24, 0xA0	; 160
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	9f 93       	push	r25
     2a6:	8f 93       	push	r24
     2a8:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("a 072.5759E,")); 
     2ac:	83 e9       	ldi	r24, 0x93	; 147
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("a 043.3223n,")); 
     2b8:	86 e8       	ldi	r24, 0x86	; 134
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	0e 94 a7 08 	call	0x114e <printf_P>
		AvrXDelay(&timer, 250);
     2c4:	6a ef       	ldi	r22, 0xFA	; 250
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	ce 01       	movw	r24, r28
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	0e 94 58 0e 	call	0x1cb0 <AvrXDelay>
		printf_P(PSTR("s %d,"), 3);  
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	80 e8       	ldi	r24, 0x80	; 128
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	9f 93       	push	r25
     2de:	8f 93       	push	r24
     2e0:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("g %d,"), 5);
     2e4:	85 e0       	ldi	r24, 0x05	; 5
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	8a e7       	ldi	r24, 0x7A	; 122
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("f %d,"), 80); 
     2f8:	80 e5       	ldi	r24, 0x50	; 80
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	84 e7       	ldi	r24, 0x74	; 116
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("b %d,"), 35); 
     30c:	83 e2       	ldi	r24, 0x23	; 35
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	9f 93       	push	r25
     312:	8f 93       	push	r24
     314:	8e e6       	ldi	r24, 0x6E	; 110
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	9f 93       	push	r25
     31a:	8f 93       	push	r24
     31c:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("q %d,"), 23);  
     320:	87 e1       	ldi	r24, 0x17	; 23
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9f 93       	push	r25
     326:	8f 93       	push	r24
     328:	88 e6       	ldi	r24, 0x68	; 104
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	0e 94 a7 08 	call	0x114e <printf_P>
		printf_P(PSTR("w %d,"), 70);
     334:	86 e4       	ldi	r24, 0x46	; 70
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	9f 93       	push	r25
     33a:	8f 93       	push	r24
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	9f 93       	push	r25
     342:	8f 93       	push	r24
     344:	0e 94 a7 08 	call	0x114e <printf_P>
	}
     348:	8d b7       	in	r24, 0x3d	; 61
     34a:	9e b7       	in	r25, 0x3e	; 62
     34c:	82 96       	adiw	r24, 0x22	; 34
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	9e bf       	out	0x3e, r25	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	8d bf       	out	0x3d, r24	; 61
     358:	83 cf       	rjmp	.-250    	; 0x260 <getUAVStatus+0x14>

0000035a <getCommands>:
}







AVRX_GCC_TASKDEF(getCommands, 100, 1)
{	
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	26 97       	sbiw	r28, 0x06	; 6
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	16 c0       	rjmp	.+44     	; 0x39c <getCommands+0x42>
	int c;		
	TimerControlBlock timer;
	
	while (1)
	{
		while ((c = getchar()) != EOF)
		{	
			if (c == '\r')
     370:	0d 30       	cpi	r16, 0x0D	; 13
     372:	11 05       	cpc	r17, r1
     374:	81 f4       	brne	.+32     	; 0x396 <getCommands+0x3c>
			{	putchar('\r');
     376:	60 91 a1 02 	lds	r22, 0x02A1
     37a:	70 91 a2 02 	lds	r23, 0x02A2
     37e:	8d e0       	ldi	r24, 0x0D	; 13
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 58 08 	call	0x10b0 <fputc>
				putchar('\n');
     386:	60 91 a1 02 	lds	r22, 0x02A1
     38a:	70 91 a2 02 	lds	r23, 0x02A2
     38e:	8a e0       	ldi	r24, 0x0A	; 10
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 58 08 	call	0x10b0 <fputc>
			}
			parserInputFunc(c);
     396:	80 2f       	mov	r24, r16
     398:	0e 94 db 00 	call	0x1b6 <parserInputFunc>
     39c:	80 91 9f 02 	lds	r24, 0x029F
     3a0:	90 91 a0 02 	lds	r25, 0x02A0
     3a4:	0e 94 15 08 	call	0x102a <fgetc>
     3a8:	8c 01       	movw	r16, r24
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	0f 3f       	cpi	r16, 0xFF	; 255
     3ae:	18 07       	cpc	r17, r24
     3b0:	f9 f6       	brne	.-66     	; 0x370 <getCommands+0x16>
		}
		AvrXDelay(&timer, 5);
     3b2:	65 e0       	ldi	r22, 0x05	; 5
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 58 0e 	call	0x1cb0 <AvrXDelay>
     3be:	ee cf       	rjmp	.-36     	; 0x39c <getCommands+0x42>

000003c0 <parserGetArgInt>:

//return argument as a long
int parserGetArgInt(void)
{
	char* endptr;
	return atoi(parserGetArgStr());
     3c0:	8d e5       	ldi	r24, 0x5D	; 93
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 8f 07 	call	0xf1e <atoi>
     3c8:	08 95       	ret

000003ca <setCamTiltServo>:
	}
}


	


int main(void)
{
    AvrXSetKernelStack(0);

	MCUCR = _BV(SE);
	TCNT0 = TCNT0_INIT;
#if defined (__AVR_ATmega103__) || defined (__ATmega103__)
	TCCR0 =  ((1<<CS02) | (1<<CS01));
#elif defined (__AVR_ATmega128__) || defined (__ATmega128__) || defined (__AVR_ATmega64__) || defined (__ATmega64__)
	TCCR0 =  ((1<<CS2) | (1<<CS1));
#else	// Most other chips...  Note: some are TCCR0 and some are TCCR0B...
	TCCR0 =  (1<<CS02);
#endif
	TIMSK = _BV(TOIE0);

    InitSerial0(BAUD(57600));
    fdevopen(put_char0, get_c0,0);		// Set up standard I/O

	// initialize parser system
	parserInit();
	// direct output to uart (serial port)
	parserSetOutputFunc(put_char0);
	// add commands to the command database
	parserAddCommand("l",		setLeftServo);
	parserAddCommand("r",		setRightServo);
    parserAddCommand("t", 		setThrottleServo);
	parserAddCommand("p", 		setCamPanServo);
	parserAddCommand("i", 		setCamTiltServo);
	
	// initialize the timer system -- FROM AVRLIB
	//timerInit();
	
	//////////////////////////////////////////////////Servos//////////////////////////
	servoInit();
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);
	servoSetChannelIO(1, _SFR_IO_ADDR(PORTC), PC1);
	servoSetChannelIO(2, _SFR_IO_ADDR(PORTC), PC2);
	servoSetChannelIO(3, _SFR_IO_ADDR(PORTC), PC3);
	servoSetChannelIO(4, _SFR_IO_ADDR(PORTC), PC4);

	// set port pins to output
	outb(DDRC, 0x1F);

	
	#define SPEED_SERVO	1
	//////////////////////////////////////////////////////////////////////////////////
	
	AvrXRunTask(TCB(getCommands));
	AvrXRunTask(TCB(getUAVStatus));

    
	Epilog();
	return(0);
}

void setLeftServo(void)
{	
	leftServoPos = parserGetArgInt();
	servoSetPosition(LEFT_SERVO_CHAN, (char)leftServoPos);
	if (DEBUG)
	{	printf("e0");
		putchar('\r');
		putchar('\n');
	}
}

void setRightServo(void)
{	
	rightServoPos = parserGetArgInt();
	servoSetPosition(RIGHT_SERVO_CHAN, (char)rightServoPos);
	if (DEBUG)
	{	printf("e0");
		putchar('\r');
		putchar('\n');
	}
}

void setThrottleServo(void)
{
	throttleServoPos = parserGetArgInt();
	servoSetPosition(THROTTLE_SERVO_CHAN, (char)throttleServoPos);
	if (DEBUG)
	{	printf("e0");
		putchar('\r');
		putchar('\n');
	}
}

void setCamPanServo(void)
{
	camPanServoPos = parserGetArgInt();
	servoSetPosition(CAM_PAN_SERVO_CHAN, (char)camPanServoPos);
	if (DEBUG)
	{	printf("e0");
		putchar('\r');
		putchar('\n');
	}
}

void setCamTiltServo(void)
{
	camTiltServoPos = parserGetArgInt();
     3ca:	0e 94 e0 01 	call	0x3c0 <parserGetArgInt>
     3ce:	90 93 bc 00 	sts	0x00BC, r25
     3d2:	80 93 bb 00 	sts	0x00BB, r24
	servoSetPosition(CAM_TILT_SERVO_CHAN, (char)camTiltServoPos);
     3d6:	99 27       	eor	r25, r25
     3d8:	87 fd       	sbrc	r24, 7
     3da:	90 95       	com	r25
     3dc:	bc 01       	movw	r22, r24
     3de:	84 e0       	ldi	r24, 0x04	; 4
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 1e 07 	call	0xe3c <servoSetPosition>
	if (DEBUG)
	{	printf("Camera Tilt Servo Set: %d", camTiltServoPos);
     3e6:	80 91 bb 00 	lds	r24, 0x00BB
     3ea:	90 91 bc 00 	lds	r25, 0x00BC
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	82 e6       	ldi	r24, 0x62	; 98
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 85 08 	call	0x110a <printf>
		putchar('\r');
     3fe:	60 91 a1 02 	lds	r22, 0x02A1
     402:	70 91 a2 02 	lds	r23, 0x02A2
     406:	8d e0       	ldi	r24, 0x0D	; 13
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 58 08 	call	0x10b0 <fputc>
		putchar('\n');
     40e:	60 91 a1 02 	lds	r22, 0x02A1
     412:	70 91 a2 02 	lds	r23, 0x02A2
     416:	8a e0       	ldi	r24, 0x0A	; 10
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 58 08 	call	0x10b0 <fputc>
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	08 95       	ret

00000428 <setCamPanServo>:
     428:	0e 94 e0 01 	call	0x3c0 <parserGetArgInt>
     42c:	90 93 a1 00 	sts	0x00A1, r25
     430:	80 93 a0 00 	sts	0x00A0, r24
     434:	99 27       	eor	r25, r25
     436:	87 fd       	sbrc	r24, 7
     438:	90 95       	com	r25
     43a:	bc 01       	movw	r22, r24
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 1e 07 	call	0xe3c <servoSetPosition>
     444:	8c e7       	ldi	r24, 0x7C	; 124
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	9f 93       	push	r25
     44a:	8f 93       	push	r24
     44c:	0e 94 85 08 	call	0x110a <printf>
     450:	60 91 a1 02 	lds	r22, 0x02A1
     454:	70 91 a2 02 	lds	r23, 0x02A2
     458:	8d e0       	ldi	r24, 0x0D	; 13
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 58 08 	call	0x10b0 <fputc>
     460:	60 91 a1 02 	lds	r22, 0x02A1
     464:	70 91 a2 02 	lds	r23, 0x02A2
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 58 08 	call	0x10b0 <fputc>
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	08 95       	ret

00000476 <setThrottleServo>:
     476:	0e 94 e0 01 	call	0x3c0 <parserGetArgInt>
     47a:	90 93 6b 01 	sts	0x016B, r25
     47e:	80 93 6a 01 	sts	0x016A, r24
     482:	99 27       	eor	r25, r25
     484:	87 fd       	sbrc	r24, 7
     486:	90 95       	com	r25
     488:	bc 01       	movw	r22, r24
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 1e 07 	call	0xe3c <servoSetPosition>
     492:	8c e7       	ldi	r24, 0x7C	; 124
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0e 94 85 08 	call	0x110a <printf>
     49e:	60 91 a1 02 	lds	r22, 0x02A1
     4a2:	70 91 a2 02 	lds	r23, 0x02A2
     4a6:	8d e0       	ldi	r24, 0x0D	; 13
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 58 08 	call	0x10b0 <fputc>
     4ae:	60 91 a1 02 	lds	r22, 0x02A1
     4b2:	70 91 a2 02 	lds	r23, 0x02A2
     4b6:	8a e0       	ldi	r24, 0x0A	; 10
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 58 08 	call	0x10b0 <fputc>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	08 95       	ret

000004c4 <setRightServo>:
     4c4:	0e 94 e0 01 	call	0x3c0 <parserGetArgInt>
     4c8:	90 93 be 00 	sts	0x00BE, r25
     4cc:	80 93 bd 00 	sts	0x00BD, r24
     4d0:	99 27       	eor	r25, r25
     4d2:	87 fd       	sbrc	r24, 7
     4d4:	90 95       	com	r25
     4d6:	bc 01       	movw	r22, r24
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 1e 07 	call	0xe3c <servoSetPosition>
     4e0:	8c e7       	ldi	r24, 0x7C	; 124
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	0e 94 85 08 	call	0x110a <printf>
     4ec:	60 91 a1 02 	lds	r22, 0x02A1
     4f0:	70 91 a2 02 	lds	r23, 0x02A2
     4f4:	8d e0       	ldi	r24, 0x0D	; 13
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 58 08 	call	0x10b0 <fputc>
     4fc:	60 91 a1 02 	lds	r22, 0x02A1
     500:	70 91 a2 02 	lds	r23, 0x02A2
     504:	8a e0       	ldi	r24, 0x0A	; 10
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 58 08 	call	0x10b0 <fputc>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	08 95       	ret

00000512 <setLeftServo>:
     512:	0e 94 e0 01 	call	0x3c0 <parserGetArgInt>
     516:	90 93 61 00 	sts	0x0061, r25
     51a:	80 93 60 00 	sts	0x0060, r24
     51e:	99 27       	eor	r25, r25
     520:	87 fd       	sbrc	r24, 7
     522:	90 95       	com	r25
     524:	bc 01       	movw	r22, r24
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 1e 07 	call	0xe3c <servoSetPosition>
     52e:	8c e7       	ldi	r24, 0x7C	; 124
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	0e 94 85 08 	call	0x110a <printf>
     53a:	60 91 a1 02 	lds	r22, 0x02A1
     53e:	70 91 a2 02 	lds	r23, 0x02A2
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 58 08 	call	0x10b0 <fputc>
     54a:	60 91 a1 02 	lds	r22, 0x02A1
     54e:	70 91 a2 02 	lds	r23, 0x02A2
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 58 08 	call	0x10b0 <fputc>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	08 95       	ret

00000560 <main>:
     560:	cf e5       	ldi	r28, 0x5F	; 95
     562:	d8 e0       	ldi	r29, 0x08	; 8
     564:	de bf       	out	0x3e, r29	; 62
     566:	cd bf       	out	0x3d, r28	; 61
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 6f 0d 	call	0x1ade <AvrXSetKernelStack>
     570:	80 e8       	ldi	r24, 0x80	; 128
     572:	85 bf       	out	0x35, r24	; 53
     574:	81 ec       	ldi	r24, 0xC1	; 193
     576:	82 bf       	out	0x32, r24	; 50
     578:	84 e0       	ldi	r24, 0x04	; 4
     57a:	83 bf       	out	0x33, r24	; 51
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	89 bf       	out	0x39, r24	; 57
     580:	81 e2       	ldi	r24, 0x21	; 33
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 3e 07 	call	0xe7c <InitSerial0>
     588:	0a e5       	ldi	r16, 0x5A	; 90
     58a:	17 e0       	ldi	r17, 0x07	; 7
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	66 e6       	ldi	r22, 0x66	; 102
     592:	77 e0       	ldi	r23, 0x07	; 7
     594:	c8 01       	movw	r24, r16
     596:	0e 94 cb 07 	call	0xf96 <fdevopen>
     59a:	10 92 6c 01 	sts	0x016C, r1
     59e:	10 92 a5 00 	sts	0x00A5, r1
     5a2:	10 92 a4 00 	sts	0x00A4, r1
     5a6:	10 92 ba 00 	sts	0x00BA, r1
     5aa:	10 93 a3 00 	sts	0x00A3, r17
     5ae:	00 93 a2 00 	sts	0x00A2, r16
     5b2:	69 e8       	ldi	r22, 0x89	; 137
     5b4:	72 e0       	ldi	r23, 0x02	; 2
     5b6:	8f e7       	ldi	r24, 0x7F	; 127
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 88 00 	call	0x110 <parserAddCommand>
     5be:	62 e6       	ldi	r22, 0x62	; 98
     5c0:	72 e0       	ldi	r23, 0x02	; 2
     5c2:	81 e8       	ldi	r24, 0x81	; 129
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 88 00 	call	0x110 <parserAddCommand>
     5ca:	6b e3       	ldi	r22, 0x3B	; 59
     5cc:	72 e0       	ldi	r23, 0x02	; 2
     5ce:	83 e8       	ldi	r24, 0x83	; 131
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 88 00 	call	0x110 <parserAddCommand>
     5d6:	64 e1       	ldi	r22, 0x14	; 20
     5d8:	72 e0       	ldi	r23, 0x02	; 2
     5da:	85 e8       	ldi	r24, 0x85	; 133
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 88 00 	call	0x110 <parserAddCommand>
     5e2:	65 ee       	ldi	r22, 0xE5	; 229
     5e4:	71 e0       	ldi	r23, 0x01	; 1
     5e6:	87 e8       	ldi	r24, 0x87	; 135
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 88 00 	call	0x110 <parserAddCommand>
     5ee:	0e 94 1c 06 	call	0xc38 <servoInit>
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	65 e1       	ldi	r22, 0x15	; 21
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 63 06 	call	0xcc6 <servoSetChannelIO>
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	65 e1       	ldi	r22, 0x15	; 21
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 63 06 	call	0xcc6 <servoSetChannelIO>
     612:	42 e0       	ldi	r20, 0x02	; 2
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	65 e1       	ldi	r22, 0x15	; 21
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 63 06 	call	0xcc6 <servoSetChannelIO>
     622:	43 e0       	ldi	r20, 0x03	; 3
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	65 e1       	ldi	r22, 0x15	; 21
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 63 06 	call	0xcc6 <servoSetChannelIO>
     632:	44 e0       	ldi	r20, 0x04	; 4
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	65 e1       	ldi	r22, 0x15	; 21
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 63 06 	call	0xcc6 <servoSetChannelIO>
     642:	8f e1       	ldi	r24, 0x1F	; 31
     644:	84 bb       	out	0x14, r24	; 20
     646:	84 e5       	ldi	r24, 0x54	; 84
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 7b 0d 	call	0x1af6 <AvrXRunTask>
     64e:	8b e5       	ldi	r24, 0x5B	; 91
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 7b 0d 	call	0x1af6 <AvrXRunTask>
     656:	0e 94 36 0d 	call	0x1a6c <Epilog>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0c 94 62 0f 	jmp	0x1ec4 <_exit>

00000662 <delay_us>:
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 
     662:	03 96       	adiw	r24, 0x03	; 3
     664:	65 e0       	ldi	r22, 0x05	; 5
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	0e 94 11 0f 	call	0x1e22 <__udivmodhi4>
     66c:	88 27       	eor	r24, r24
     66e:	99 27       	eor	r25, r25
     670:	24 e0       	ldi	r18, 0x04	; 4
     672:	66 0f       	add	r22, r22
     674:	77 1f       	adc	r23, r23
     676:	88 1f       	adc	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	2a 95       	dec	r18
     67c:	d1 f7       	brne	.-12     	; 0x672 <delay_us+0x10>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <delay_us+0x26>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	26 17       	cp	r18, r22
     68a:	37 07       	cpc	r19, r23
     68c:	d8 f3       	brcs	.-10     	; 0x684 <delay_us+0x22>
     68e:	08 95       	ret

00000690 <timerDetach>:
}
/*
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 4000;

	unsigned short cnt;
	asm volatile ("\n"
                  "L_dl1%=:\n\t"
                  "mov %A0, %A2\n\t"
                  "mov %B0, %B2\n"
                  "L_dl2%=:\n\t"
                  "sbiw %A0, 1\n\t"
                  "brne L_dl2%=\n\t"
                  "dec %1\n\t" "brne L_dl1%=\n\t":"=&w" (cnt)
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
	timer1Init();
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
	#endif
	// enable interrupts
	sei();
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt

	timer0ClearOverflowCount();				// initialize time registers
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
	outb(TCNT1H, 0);						// reset TCNT1
	outb(TCNT1L, 0);
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow

	timer2ClearOverflowCount();				// initialize time registers
}
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
}
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
}

u16 timer1GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR1B) & TIMER_PRESCALE_MASK)));
}

#ifdef TCNT2	// support timer2 only if it exists
u16 timer2GetPrescaler(void)
{
	//TODO: can we assume for all 3-timer AVR processors,
	// that timer2 is the RTC timer?

	// get the current prescaler setting
	return (pgm_read_word(TimerRTCPrescaleFactor+(inb(TCCR2) & TIMER_PRESCALE_MASK)));
}
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
	}
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     690:	88 30       	cpi	r24, 0x08	; 8
     692:	40 f4       	brcc	.+16     	; 0x6a4 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     694:	e8 2f       	mov	r30, r24
     696:	ff 27       	eor	r31, r31
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e0 57       	subi	r30, 0x70	; 112
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	11 82       	std	Z+1, r1	; 0x01
     6a2:	10 82       	st	Z, r1
     6a4:	08 95       	ret

000006a6 <timer0SetPrescaler>:
     6a6:	93 b7       	in	r25, 0x33	; 51
     6a8:	98 7f       	andi	r25, 0xF8	; 248
     6aa:	98 2b       	or	r25, r24
     6ac:	93 bf       	out	0x33, r25	; 51
     6ae:	08 95       	ret

000006b0 <timer0ClearOverflowCount>:
	}
}
/*
u32 timerMsToTics(u16 ms)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of timer tics in x milliseconds
	return (ms*(F_CPU/(prescaleDiv*256)))/1000;
}

u16 timerTicsToMs(u32 tics)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
	// pauses for exactly <pause_ms> number of milliseconds
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
	// reset pause timer overflow count
	TimerPauseReg = 0;
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
	{
		if( TimerPauseReg < (pause>>8));
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
			sleep_mode();
		}
	}

	/* old inaccurate code, for reference
	
	// calculate delay for [pause_ms] milliseconds
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	u32 pause = (pause_ms*(F_CPU/(prescaleDiv*256)))/1000;
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     6b0:	10 92 69 02 	sts	0x0269, r1
     6b4:	10 92 6a 02 	sts	0x026A, r1
     6b8:	10 92 6b 02 	sts	0x026B, r1
     6bc:	10 92 6c 02 	sts	0x026C, r1
     6c0:	08 95       	ret

000006c2 <timer1SetPrescaler>:
     6c2:	9e b5       	in	r25, 0x2e	; 46
     6c4:	98 7f       	andi	r25, 0xF8	; 248
     6c6:	98 2b       	or	r25, r24
     6c8:	9e bd       	out	0x2e, r25	; 46
     6ca:	08 95       	ret

000006cc <timer2SetPrescaler>:
     6cc:	95 b5       	in	r25, 0x25	; 37
     6ce:	98 7f       	andi	r25, 0xF8	; 248
     6d0:	98 2b       	or	r25, r24
     6d2:	95 bd       	out	0x25, r25	; 37
     6d4:	08 95       	ret

000006d6 <timer2ClearOverflowCount>:
}

long timer0GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer0ClearOverflowCount() command was called)
	return Timer0Reg0;
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     6d6:	10 92 71 02 	sts	0x0271, r1
     6da:	10 92 72 02 	sts	0x0272, r1
     6de:	10 92 73 02 	sts	0x0273, r1
     6e2:	10 92 74 02 	sts	0x0274, r1
     6e6:	08 95       	ret

000006e8 <timer0GetPrescaler>:
     6e8:	e3 b7       	in	r30, 0x33	; 51
     6ea:	ff 27       	eor	r31, r31
     6ec:	e7 70       	andi	r30, 0x07	; 7
     6ee:	f0 70       	andi	r31, 0x00	; 0
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e8 54       	subi	r30, 0x48	; 72
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	85 91       	lpm	r24, Z+
     6fa:	94 91       	lpm	r25, Z
     6fc:	08 95       	ret

000006fe <timer1GetPrescaler>:
     6fe:	ee b5       	in	r30, 0x2e	; 46
     700:	ff 27       	eor	r31, r31
     702:	e7 70       	andi	r30, 0x07	; 7
     704:	f0 70       	andi	r31, 0x00	; 0
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	e8 54       	subi	r30, 0x48	; 72
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	85 91       	lpm	r24, Z+
     710:	94 91       	lpm	r25, Z
     712:	08 95       	ret

00000714 <timer2GetPrescaler>:
     714:	e5 b5       	in	r30, 0x25	; 37
     716:	ff 27       	eor	r31, r31
     718:	e7 70       	andi	r30, 0x07	; 7
     71a:	f0 70       	andi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	e8 55       	subi	r30, 0x58	; 88
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	85 91       	lpm	r24, Z+
     726:	94 91       	lpm	r25, Z
     728:	08 95       	ret

0000072a <timerAttach>:
     72a:	88 30       	cpi	r24, 0x08	; 8
     72c:	40 f4       	brcc	.+16     	; 0x73e <timerAttach+0x14>
     72e:	e8 2f       	mov	r30, r24
     730:	ff 27       	eor	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e0 57       	subi	r30, 0x70	; 112
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	71 83       	std	Z+1, r23	; 0x01
     73c:	60 83       	st	Z, r22
     73e:	08 95       	ret

00000740 <timerPause>:
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	7c 01       	movw	r14, r24
     74c:	d2 b6       	in	r13, 0x32	; 50
     74e:	10 92 6d 02 	sts	0x026D, r1
     752:	10 92 6e 02 	sts	0x026E, r1
     756:	10 92 6f 02 	sts	0x026F, r1
     75a:	10 92 70 02 	sts	0x0270, r1
     75e:	0e 94 74 03 	call	0x6e8 <timer0GetPrescaler>
     762:	9c 01       	movw	r18, r24
     764:	44 27       	eor	r20, r20
     766:	55 27       	eor	r21, r21
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	74 e2       	ldi	r23, 0x24	; 36
     76c:	84 ef       	ldi	r24, 0xF4	; 244
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 47 0f 	call	0x1e8e <__divmodsi4>
     774:	29 3b       	cpi	r18, 0xB9	; 185
     776:	8d e8       	ldi	r24, 0x8D	; 141
     778:	38 07       	cpc	r19, r24
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	48 07       	cpc	r20, r24
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	58 07       	cpc	r21, r24
     782:	98 f4       	brcc	.+38     	; 0x7aa <timerPause+0x6a>
     784:	81 e1       	ldi	r24, 0x11	; 17
     786:	e8 16       	cp	r14, r24
     788:	87 e2       	ldi	r24, 0x27	; 39
     78a:	f8 06       	cpc	r15, r24
     78c:	70 f4       	brcc	.+28     	; 0x7aa <timerPause+0x6a>
     78e:	b7 01       	movw	r22, r14
     790:	88 27       	eor	r24, r24
     792:	99 27       	eor	r25, r25
     794:	0e 94 f2 0e 	call	0x1de4 <__mulsi3>
     798:	28 ee       	ldi	r18, 0xE8	; 232
     79a:	33 e0       	ldi	r19, 0x03	; 3
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	0e 94 25 0f 	call	0x1e4a <__udivmodsi4>
     7a4:	79 01       	movw	r14, r18
     7a6:	8a 01       	movw	r16, r20
     7a8:	23 c0       	rjmp	.+70     	; 0x7f0 <timerPause+0xb0>
     7aa:	00 27       	eor	r16, r16
     7ac:	11 27       	eor	r17, r17
     7ae:	ca 01       	movw	r24, r20
     7b0:	b9 01       	movw	r22, r18
     7b2:	28 ee       	ldi	r18, 0xE8	; 232
     7b4:	33 e0       	ldi	r19, 0x03	; 3
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	0e 94 25 0f 	call	0x1e4a <__udivmodsi4>
     7be:	c8 01       	movw	r24, r16
     7c0:	b7 01       	movw	r22, r14
     7c2:	0e 94 f2 0e 	call	0x1de4 <__mulsi3>
     7c6:	7b 01       	movw	r14, r22
     7c8:	8c 01       	movw	r16, r24
     7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <timerPause+0xb0>
     7cc:	80 91 6d 02 	lds	r24, 0x026D
     7d0:	90 91 6e 02 	lds	r25, 0x026E
     7d4:	a0 91 6f 02 	lds	r26, 0x026F
     7d8:	b0 91 70 02 	lds	r27, 0x0270
     7dc:	85 b7       	in	r24, 0x35	; 53
     7de:	8f 78       	andi	r24, 0x8F	; 143
     7e0:	85 bf       	out	0x35, r24	; 53
     7e2:	85 b7       	in	r24, 0x35	; 53
     7e4:	80 68       	ori	r24, 0x80	; 128
     7e6:	85 bf       	out	0x35, r24	; 53
     7e8:	88 95       	sleep
     7ea:	85 b7       	in	r24, 0x35	; 53
     7ec:	8f 77       	andi	r24, 0x7F	; 127
     7ee:	85 bf       	out	0x35, r24	; 53
     7f0:	80 91 6d 02 	lds	r24, 0x026D
     7f4:	90 91 6e 02 	lds	r25, 0x026E
     7f8:	a0 91 6f 02 	lds	r26, 0x026F
     7fc:	b0 91 70 02 	lds	r27, 0x0270
     800:	22 b7       	in	r18, 0x32	; 50
     802:	ba 2f       	mov	r27, r26
     804:	a9 2f       	mov	r26, r25
     806:	98 2f       	mov	r25, r24
     808:	88 27       	eor	r24, r24
     80a:	33 27       	eor	r19, r19
     80c:	44 27       	eor	r20, r20
     80e:	55 27       	eor	r21, r21
     810:	82 2b       	or	r24, r18
     812:	93 2b       	or	r25, r19
     814:	a4 2b       	or	r26, r20
     816:	b5 2b       	or	r27, r21
     818:	a8 01       	movw	r20, r16
     81a:	97 01       	movw	r18, r14
     81c:	2d 0d       	add	r18, r13
     81e:	31 1d       	adc	r19, r1
     820:	41 1d       	adc	r20, r1
     822:	51 1d       	adc	r21, r1
     824:	82 17       	cp	r24, r18
     826:	93 07       	cpc	r25, r19
     828:	a4 07       	cpc	r26, r20
     82a:	b5 07       	cpc	r27, r21
     82c:	78 f2       	brcs	.-98     	; 0x7cc <timerPause+0x8c>
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	08 95       	ret

0000083a <timer0GetOverflowCount>:
     83a:	60 91 69 02 	lds	r22, 0x0269
     83e:	70 91 6a 02 	lds	r23, 0x026A
     842:	80 91 6b 02 	lds	r24, 0x026B
     846:	90 91 6c 02 	lds	r25, 0x026C
     84a:	08 95       	ret

0000084c <timer2GetOverflowCount>:
}

long timer2GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer2ClearOverflowCount() command was called)
	return Timer2Reg0;
     84c:	60 91 71 02 	lds	r22, 0x0271
     850:	70 91 72 02 	lds	r23, 0x0272
     854:	80 91 73 02 	lds	r24, 0x0273
     858:	90 91 74 02 	lds	r25, 0x0274
     85c:	08 95       	ret

0000085e <timer1PWMInit>:
}
#endif

void timer1PWMInit(u08 bitRes)
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     85e:	89 30       	cpi	r24, 0x09	; 9
     860:	31 f4       	brne	.+12     	; 0x86e <__stack+0xf>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     862:	8f b5       	in	r24, 0x2f	; 47
     864:	82 60       	ori	r24, 0x02	; 2
     866:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     868:	8f b5       	in	r24, 0x2f	; 47
     86a:	8e 7f       	andi	r24, 0xFE	; 254
     86c:	0a c0       	rjmp	.+20     	; 0x882 <__stack+0x23>
	}
	else if( bitRes == 10 )
     86e:	8a 30       	cpi	r24, 0x0A	; 10
     870:	19 f4       	brne	.+6      	; 0x878 <__stack+0x19>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     872:	8f b5       	in	r24, 0x2f	; 47
     874:	82 60       	ori	r24, 0x02	; 2
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     878:	8f b5       	in	r24, 0x2f	; 47
     87a:	8d 7f       	andi	r24, 0xFD	; 253
     87c:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     87e:	8f b5       	in	r24, 0x2f	; 47
     880:	81 60       	ori	r24, 0x01	; 1
     882:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     884:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     886:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     888:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     88a:	18 bc       	out	0x28, r1	; 40
     88c:	08 95       	ret

0000088e <timer1PWMInitICR>:
}

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     88e:	2f b5       	in	r18, 0x2f	; 47
     890:	2e 7f       	andi	r18, 0xFE	; 254
     892:	2f bd       	out	0x2f, r18	; 47
	sbi(TCCR1A,WGM11);
     894:	2f b5       	in	r18, 0x2f	; 47
     896:	22 60       	ori	r18, 0x02	; 2
     898:	2f bd       	out	0x2f, r18	; 47
	sbi(TCCR1B,WGM12);
     89a:	2e b5       	in	r18, 0x2e	; 46
     89c:	28 60       	ori	r18, 0x08	; 8
     89e:	2e bd       	out	0x2e, r18	; 46
	sbi(TCCR1B,WGM13);
     8a0:	2e b5       	in	r18, 0x2e	; 46
     8a2:	20 61       	ori	r18, 0x10	; 16
     8a4:	2e bd       	out	0x2e, r18	; 46
	
	// set top count value
	ICR1 = topcount;
     8a6:	97 bd       	out	0x27, r25	; 39
     8a8:	86 bd       	out	0x26, r24	; 38
	
	// clear output compare value A
	OCR1A = 0;
     8aa:	1b bc       	out	0x2b, r1	; 43
     8ac:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	OCR1B = 0;
     8ae:	19 bc       	out	0x29, r1	; 41
     8b0:	18 bc       	out	0x28, r1	; 40
     8b2:	08 95       	ret

000008b4 <timer1PWMAOff>:

}
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
	timer1PWMBOff();
}

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
	cbi(TCCR1A,COM1A0);
}

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
     8b4:	8f b5       	in	r24, 0x2f	; 47
     8b6:	8f 77       	andi	r24, 0x7F	; 127
     8b8:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     8ba:	8f b5       	in	r24, 0x2f	; 47
     8bc:	8f 7b       	andi	r24, 0xBF	; 191
     8be:	8f bd       	out	0x2f, r24	; 47
     8c0:	08 95       	ret

000008c2 <timer1PWMBOff>:
}

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
     8c2:	8f b5       	in	r24, 0x2f	; 47
     8c4:	8f 7d       	andi	r24, 0xDF	; 223
     8c6:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     8c8:	8f b5       	in	r24, 0x2f	; 47
     8ca:	8f 7e       	andi	r24, 0xEF	; 239
     8cc:	8f bd       	out	0x2f, r24	; 47
     8ce:	08 95       	ret

000008d0 <timer1PWMAOn>:
     8d0:	8f b5       	in	r24, 0x2f	; 47
     8d2:	80 68       	ori	r24, 0x80	; 128
     8d4:	8f bd       	out	0x2f, r24	; 47
     8d6:	8f b5       	in	r24, 0x2f	; 47
     8d8:	8f 7b       	andi	r24, 0xBF	; 191
     8da:	8f bd       	out	0x2f, r24	; 47
     8dc:	08 95       	ret

000008de <timer1PWMBOn>:
     8de:	8f b5       	in	r24, 0x2f	; 47
     8e0:	80 62       	ori	r24, 0x20	; 32
     8e2:	8f bd       	out	0x2f, r24	; 47
     8e4:	8f b5       	in	r24, 0x2f	; 47
     8e6:	8f 7e       	andi	r24, 0xEF	; 239
     8e8:	8f bd       	out	0x2f, r24	; 47
     8ea:	08 95       	ret

000008ec <timer1PWMASet>:
}

void timer1PWMASet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel A
	// this PWM output is generated on OC1A pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     8ec:	9b bd       	out	0x2b, r25	; 43
     8ee:	8a bd       	out	0x2a, r24	; 42
     8f0:	08 95       	ret

000008f2 <timer1PWMBSet>:
}

void timer1PWMBSet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel B
	// this PWM output is generated on OC1B pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     8f2:	99 bd       	out	0x29, r25	; 41
     8f4:	88 bd       	out	0x28, r24	; 40
     8f6:	08 95       	ret

000008f8 <__vector_9>:
}

///!! WARINING -- CHANGED TO AVOID INTERFERENCE WITH AVRX  (See if it recovers...)
#ifdef SIG_OVERFLOW0
#else
//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{
	Timer0Reg0++;			// increment low-order counter

	// increment pause counter
	TimerPauseReg++;

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
		TimerIntFunc[TIMER0OVERFLOW_INT]();
}
#endif

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     91a:	80 91 92 00 	lds	r24, 0x0092
     91e:	90 91 93 00 	lds	r25, 0x0093
     922:	89 2b       	or	r24, r25
     924:	29 f0       	breq	.+10     	; 0x930 <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     926:	e0 91 92 00 	lds	r30, 0x0092
     92a:	f0 91 93 00 	lds	r31, 0x0093
     92e:	09 95       	icall
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_5>:
}

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW2)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     974:	80 91 71 02 	lds	r24, 0x0271
     978:	90 91 72 02 	lds	r25, 0x0272
     97c:	a0 91 73 02 	lds	r26, 0x0273
     980:	b0 91 74 02 	lds	r27, 0x0274
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	a1 1d       	adc	r26, r1
     988:	b1 1d       	adc	r27, r1
     98a:	80 93 71 02 	sts	0x0271, r24
     98e:	90 93 72 02 	sts	0x0272, r25
     992:	a0 93 73 02 	sts	0x0273, r26
     996:	b0 93 74 02 	sts	0x0274, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     99a:	80 91 9a 00 	lds	r24, 0x009A
     99e:	90 91 9b 00 	lds	r25, 0x009B
     9a2:	89 2b       	or	r24, r25
     9a4:	29 f0       	breq	.+10     	; 0x9b0 <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     9a6:	e0 91 9a 00 	lds	r30, 0x009A
     9aa:	f0 91 9b 00 	lds	r31, 0x009B
     9ae:	09 95       	icall
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_10>:
}
#endif

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE0)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     9f4:	80 91 9e 00 	lds	r24, 0x009E
     9f8:	90 91 9f 00 	lds	r25, 0x009F
     9fc:	89 2b       	or	r24, r25
     9fe:	29 f0       	breq	.+10     	; 0xa0a <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     a00:	e0 91 9e 00 	lds	r30, 0x009E
     a04:	f0 91 9f 00 	lds	r31, 0x009F
     a08:	09 95       	icall
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_7>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1A)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     a4e:	80 91 94 00 	lds	r24, 0x0094
     a52:	90 91 95 00 	lds	r25, 0x0095
     a56:	89 2b       	or	r24, r25
     a58:	29 f0       	breq	.+10     	; 0xa64 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     a5a:	e0 91 94 00 	lds	r30, 0x0094
     a5e:	f0 91 95 00 	lds	r31, 0x0095
     a62:	09 95       	icall
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <__vector_8>:
}

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1B)
{
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     aa8:	80 91 96 00 	lds	r24, 0x0096
     aac:	90 91 97 00 	lds	r25, 0x0097
     ab0:	89 2b       	or	r24, r25
     ab2:	29 f0       	breq	.+10     	; 0xabe <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     ab4:	e0 91 96 00 	lds	r30, 0x0096
     ab8:	f0 91 97 00 	lds	r31, 0x0097
     abc:	09 95       	icall
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <__vector_6>:
}

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(SIG_INPUT_CAPTURE1)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     b02:	80 91 98 00 	lds	r24, 0x0098
     b06:	90 91 99 00 	lds	r25, 0x0099
     b0a:	89 2b       	or	r24, r25
     b0c:	29 f0       	breq	.+10     	; 0xb18 <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     b0e:	e0 91 98 00 	lds	r30, 0x0098
     b12:	f0 91 99 00 	lds	r31, 0x0099
     b16:	09 95       	icall
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_4>:
}

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE2)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	2f 93       	push	r18
     b46:	3f 93       	push	r19
     b48:	4f 93       	push	r20
     b4a:	5f 93       	push	r21
     b4c:	6f 93       	push	r22
     b4e:	7f 93       	push	r23
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     b5c:	80 91 9c 00 	lds	r24, 0x009C
     b60:	90 91 9d 00 	lds	r25, 0x009D
     b64:	89 2b       	or	r24, r25
     b66:	29 f0       	breq	.+10     	; 0xb72 <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     b68:	e0 91 9c 00 	lds	r30, 0x009C
     b6c:	f0 91 9d 00 	lds	r31, 0x009D
     b70:	09 95       	icall
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <timer0Init>:
     b94:	83 b7       	in	r24, 0x33	; 51
     b96:	88 7f       	andi	r24, 0xF8	; 248
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	83 bf       	out	0x33, r24	; 51
     b9c:	12 be       	out	0x32, r1	; 50
     b9e:	89 b7       	in	r24, 0x39	; 57
     ba0:	81 60       	ori	r24, 0x01	; 1
     ba2:	89 bf       	out	0x39, r24	; 57
     ba4:	10 92 69 02 	sts	0x0269, r1
     ba8:	10 92 6a 02 	sts	0x026A, r1
     bac:	10 92 6b 02 	sts	0x026B, r1
     bb0:	10 92 6c 02 	sts	0x026C, r1
     bb4:	08 95       	ret

00000bb6 <timer1Init>:
     bb6:	8e b5       	in	r24, 0x2e	; 46
     bb8:	88 7f       	andi	r24, 0xF8	; 248
     bba:	83 60       	ori	r24, 0x03	; 3
     bbc:	8e bd       	out	0x2e, r24	; 46
     bbe:	1d bc       	out	0x2d, r1	; 45
     bc0:	1c bc       	out	0x2c, r1	; 44
     bc2:	89 b7       	in	r24, 0x39	; 57
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	89 bf       	out	0x39, r24	; 57
     bc8:	08 95       	ret

00000bca <timer2Init>:
     bca:	85 b5       	in	r24, 0x25	; 37
     bcc:	88 7f       	andi	r24, 0xF8	; 248
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	85 bd       	out	0x25, r24	; 37
     bd2:	14 bc       	out	0x24, r1	; 36
     bd4:	89 b7       	in	r24, 0x39	; 57
     bd6:	80 64       	ori	r24, 0x40	; 64
     bd8:	89 bf       	out	0x39, r24	; 57
     bda:	10 92 71 02 	sts	0x0271, r1
     bde:	10 92 72 02 	sts	0x0272, r1
     be2:	10 92 73 02 	sts	0x0273, r1
     be6:	10 92 74 02 	sts	0x0274, r1
     bea:	08 95       	ret

00000bec <timerInit>:
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	e0 e9       	ldi	r30, 0x90	; 144
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	11 82       	std	Z+1, r1	; 0x01
     bf6:	10 82       	st	Z, r1
     bf8:	32 96       	adiw	r30, 0x02	; 2
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	91 05       	cpc	r25, r1
     c00:	c9 f7       	brne	.-14     	; 0xbf4 <timerInit+0x8>
     c02:	0e 94 ca 05 	call	0xb94 <timer0Init>
     c06:	0e 94 db 05 	call	0xbb6 <timer1Init>
     c0a:	0e 94 e5 05 	call	0xbca <timer2Init>
     c0e:	78 94       	sei
     c10:	08 95       	ret

00000c12 <timer1PWMOff>:
     c12:	8f b5       	in	r24, 0x2f	; 47
     c14:	8d 7f       	andi	r24, 0xFD	; 253
     c16:	8f bd       	out	0x2f, r24	; 47
     c18:	8f b5       	in	r24, 0x2f	; 47
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	8f bd       	out	0x2f, r24	; 47
     c1e:	8f b5       	in	r24, 0x2f	; 47
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	8f bd       	out	0x2f, r24	; 47
     c24:	8f b5       	in	r24, 0x2f	; 47
     c26:	8f 7b       	andi	r24, 0xBF	; 191
     c28:	8f bd       	out	0x2f, r24	; 47
     c2a:	8f b5       	in	r24, 0x2f	; 47
     c2c:	8f 7d       	andi	r24, 0xDF	; 223
     c2e:	8f bd       	out	0x2f, r24	; 47
     c30:	8f b5       	in	r24, 0x2f	; 47
     c32:	8f 7e       	andi	r24, 0xEF	; 239
     c34:	8f bd       	out	0x2f, r24	; 47
     c36:	08 95       	ret

00000c38 <servoInit>:
void servoInit(void)
{
	u08 channel;
	// disble the timer1 output compare A interrupt
	cbi(TIMSK, OCIE1A);
     c38:	89 b7       	in	r24, 0x39	; 57
     c3a:	8f 7e       	andi	r24, 0xEF	; 239
     c3c:	89 bf       	out	0x39, r24	; 57
	// set the prescaler for timer1
	timer1SetPrescaler(TIMER_CLK_DIV256);
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	0e 94 61 03 	call	0x6c2 <timer1SetPrescaler>
	// attach the software PWM service routine to timer1 output compare A
	timerAttach(TIMER1OUTCOMPAREA_INT, servoService);
     c44:	66 e9       	ldi	r22, 0x96	; 150
     c46:	76 e0       	ldi	r23, 0x06	; 6
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	0e 94 95 03 	call	0x72a <timerAttach>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	e6 e7       	ldi	r30, 0x76	; 118
     c54:	f2 e0       	ldi	r31, 0x02	; 2
     c56:	62 e2       	ldi	r22, 0x22	; 34
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	a5 e1       	ldi	r26, 0x15	; 21
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	50 e0       	ldi	r21, 0x00	; 0
	// enable and clear channels
	for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
	{
		// set minimum position as default
		ServoChannels[channel].duty = SERVO_MIN;
     c60:	73 83       	std	Z+3, r23	; 0x03
     c62:	62 83       	std	Z+2, r22	; 0x02
		// set default port and pins assignments
		ServoChannels[channel].port = _SFR_IO_ADDR(SERVO_DEFAULT_PORT);
     c64:	a0 83       	st	Z, r26
		//ServoChannels[channel].port = (unsigned char)&SERVO_DEFAULT_PORT;
		ServoChannels[channel].pin = (1<<channel);
     c66:	ca 01       	movw	r24, r20
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <servoInit+0x38>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <servoInit+0x34>
     c74:	81 83       	std	Z+1, r24	; 0x01
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	34 96       	adiw	r30, 0x04	; 4
     c7c:	25 30       	cpi	r18, 0x05	; 5
     c7e:	31 05       	cpc	r19, r1
     c80:	79 f7       	brne	.-34     	; 0xc60 <servoInit+0x28>
		// set channel pin to output
		// THIS IS OBSOLETED BY THE DYNAMIC CHANNEL TO PORT,PIN ASSIGNMENTS
		//outb(SERVODDR, inb(SERVODDR) | (1<<channel));
	}
	// set PosTics
	ServoPosTics = 0;
     c82:	10 92 8b 02 	sts	0x028B, r1
     c86:	10 92 8a 02 	sts	0x028A, r1
	// set PeriodTics
	ServoPeriodTics = SERVO_MAX*9;
     c8a:	8a ed       	ldi	r24, 0xDA	; 218
     c8c:	94 e0       	ldi	r25, 0x04	; 4
     c8e:	90 93 8d 02 	sts	0x028D, r25
     c92:	80 93 8c 02 	sts	0x028C, r24
	// set initial interrupt time
	u16 OCValue;
	// read in current value of output compare register OCR1A
	OCValue =  inb(OCR1AL);		// read low byte of OCR1A
     c96:	2a b5       	in	r18, 0x2a	; 42
	OCValue += inb(OCR1AH)<<8;	// read high byte of OCR1A
     c98:	8b b5       	in	r24, 0x2b	; 43
     c9a:	99 27       	eor	r25, r25
     c9c:	98 2f       	mov	r25, r24
     c9e:	88 27       	eor	r24, r24
     ca0:	82 0f       	add	r24, r18
     ca2:	91 1d       	adc	r25, r1
	// increment OCR1A value by nextTics
	OCValue += ServoPeriodTics; 
     ca4:	86 52       	subi	r24, 0x26	; 38
     ca6:	9b 4f       	sbci	r25, 0xFB	; 251
	// set future output compare time to this new value
	outb(OCR1AH, (OCValue>>8));			// write high byte
     ca8:	29 2f       	mov	r18, r25
     caa:	33 27       	eor	r19, r19
     cac:	2b bd       	out	0x2b, r18	; 43
	outb(OCR1AL, (OCValue & 0x00FF));	// write low byte
     cae:	8a bd       	out	0x2a, r24	; 42
	// enable the timer1 output compare A interrupt
	sbi(TIMSK, OCIE1A);
     cb0:	89 b7       	in	r24, 0x39	; 57
     cb2:	80 61       	ori	r24, 0x10	; 16
     cb4:	89 bf       	out	0x39, r24	; 57
     cb6:	08 95       	ret

00000cb8 <servoOff>:
}

//! turns off software PWM system
void servoOff(void)
{
	// disable the timer1 output compare A interrupt
	cbi(TIMSK, OCIE1A);
     cb8:	89 b7       	in	r24, 0x39	; 57
     cba:	8f 7e       	andi	r24, 0xEF	; 239
     cbc:	89 bf       	out	0x39, r24	; 57
	// detach the service routine
	timerDetach(TIMER1OUTCOMPAREA_INT);
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	0e 94 48 03 	call	0x690 <timerDetach>
     cc4:	08 95       	ret

00000cc6 <servoSetChannelIO>:
}

//! set port and I/O pin for channel
void servoSetChannelIO(u08 channel, u08 port, u08 pin)
{
	ServoChannels[channel].port = port;
     cc6:	e8 2f       	mov	r30, r24
     cc8:	ff 27       	eor	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	ea 58       	subi	r30, 0x8A	; 138
     cd4:	fd 4f       	sbci	r31, 0xFD	; 253
     cd6:	60 83       	st	Z, r22
	ServoChannels[channel].pin = (1<<(pin&0x07));
     cd8:	47 70       	andi	r20, 0x07	; 7
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <servoSetChannelIO+0x1e>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	4a 95       	dec	r20
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <servoSetChannelIO+0x1a>
     ce8:	81 83       	std	Z+1, r24	; 0x01
     cea:	08 95       	ret

00000cec <servoSetPositionRaw>:
}

//! set servo position on channel
void servoSetPosition(u08 channel, u08 position)
{
	// input should be between 0 and SERVO_POSITION_MAX
	u16 pos_scaled;
	// calculate scaled position
	pos_scaled = ((u16)position*(SERVO_MAX-SERVO_MIN)/SERVO_POSITION_MAX)+SERVO_MIN;
	// set position
	servoSetPositionRaw(channel, pos_scaled);
}

//! get servo position on channel
u08 servoGetPosition(u08 channel)
{
	return (u08)( ((servoGetPositionRaw(channel)-SERVO_MIN)*SERVO_POSITION_MAX)/(SERVO_MAX-SERVO_MIN) );
}

//! set servo position on channel (raw unscaled format)
void servoSetPositionRaw(u08 channel, u16 position)
{
	// bind to limits
	position = MAX(position, SERVO_MIN);
     cec:	62 32       	cpi	r22, 0x22	; 34
     cee:	71 05       	cpc	r23, r1
     cf0:	10 f4       	brcc	.+4      	; 0xcf6 <servoSetPositionRaw+0xa>
     cf2:	62 e2       	ldi	r22, 0x22	; 34
     cf4:	70 e0       	ldi	r23, 0x00	; 0
	position = MIN(position, SERVO_MAX);
	// set position
	ServoChannels[channel].duty = position;
     cf6:	e8 2f       	mov	r30, r24
     cf8:	ff 27       	eor	r31, r31
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	ea 58       	subi	r30, 0x8A	; 138
     d04:	fd 4f       	sbci	r31, 0xFD	; 253
     d06:	6b 38       	cpi	r22, 0x8B	; 139
     d08:	71 05       	cpc	r23, r1
     d0a:	10 f0       	brcs	.+4      	; 0xd10 <servoSetPositionRaw+0x24>
     d0c:	6a e8       	ldi	r22, 0x8A	; 138
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	73 83       	std	Z+3, r23	; 0x03
     d12:	62 83       	std	Z+2, r22	; 0x02
     d14:	08 95       	ret

00000d16 <servoGetPositionRaw>:
}

//! get servo position on channel (raw unscaled format)
u16 servoGetPositionRaw(u08 channel)
{
     d16:	e8 2f       	mov	r30, r24
     d18:	ff 27       	eor	r31, r31
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	ea 58       	subi	r30, 0x8A	; 138
     d24:	fd 4f       	sbci	r31, 0xFD	; 253
	return ServoChannels[channel].duty;
}
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	08 95       	ret

00000d2c <servoService>:

void servoService(void)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
	u16 nextTics;

	if(ServoChannel < SERVO_NUM_CHANNELS)
     d30:	e0 91 75 02 	lds	r30, 0x0275
     d34:	e5 30       	cpi	r30, 0x05	; 5
     d36:	78 f4       	brcc	.+30     	; 0xd56 <servoService+0x2a>
	{
		// turn off current channel
		outb(_SFR_IO8(ServoChannels[ServoChannel].port), inb(_SFR_IO8(ServoChannels[ServoChannel].port)) & ~(ServoChannels[ServoChannel].pin));
     d38:	ff 27       	eor	r31, r31
     d3a:	ee 0f       	add	r30, r30
     d3c:	ff 1f       	adc	r31, r31
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	ea 58       	subi	r30, 0x8A	; 138
     d44:	fd 4f       	sbci	r31, 0xFD	; 253
     d46:	a0 81       	ld	r26, Z
     d48:	bb 27       	eor	r27, r27
     d4a:	ed 01       	movw	r28, r26
     d4c:	98 a1       	ldd	r25, Y+32	; 0x20
     d4e:	81 81       	ldd	r24, Z+1	; 0x01
     d50:	80 95       	com	r24
     d52:	98 23       	and	r25, r24
     d54:	98 a3       	std	Y+32, r25	; 0x20
	}
	
	// next channel
	ServoChannel++;
     d56:	80 91 75 02 	lds	r24, 0x0275
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	80 93 75 02 	sts	0x0275, r24

	if(ServoChannel != SERVO_NUM_CHANNELS)
     d60:	85 30       	cpi	r24, 0x05	; 5
     d62:	01 f1       	breq	.+64     	; 0xda4 <servoService+0x78>
	{
		// loop to channel 0 if needed
		if(ServoChannel > SERVO_NUM_CHANNELS)	ServoChannel = 0;
     d64:	86 30       	cpi	r24, 0x06	; 6
     d66:	10 f0       	brcs	.+4      	; 0xd6c <servoService+0x40>
     d68:	10 92 75 02 	sts	0x0275, r1
		// turn on new channel
		outb(_SFR_IO8(ServoChannels[ServoChannel].port), inb(_SFR_IO8(ServoChannels[ServoChannel].port)) | (ServoChannels[ServoChannel].pin));
     d6c:	e0 91 75 02 	lds	r30, 0x0275
     d70:	ff 27       	eor	r31, r31
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ea 58       	subi	r30, 0x8A	; 138
     d7c:	fd 4f       	sbci	r31, 0xFD	; 253
     d7e:	a0 81       	ld	r26, Z
     d80:	bb 27       	eor	r27, r27
     d82:	ed 01       	movw	r28, r26
     d84:	88 a1       	ldd	r24, Y+32	; 0x20
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	89 2b       	or	r24, r25
     d8a:	88 a3       	std	Y+32, r24	; 0x20
		// schedule turn off time
		nextTics = ServoChannels[ServoChannel].duty;
     d8c:	e0 91 75 02 	lds	r30, 0x0275
     d90:	ff 27       	eor	r31, r31
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ea 58       	subi	r30, 0x8A	; 138
     d9c:	fd 4f       	sbci	r31, 0xFD	; 253
     d9e:	42 81       	ldd	r20, Z+2	; 0x02
     da0:	53 81       	ldd	r21, Z+3	; 0x03
     da2:	0a c0       	rjmp	.+20     	; 0xdb8 <servoService+0x8c>
	}
	else //(Channel == SERVO_NUM_CHANNELS)
	{
		// ***we could save time by precalculating this
		// schedule end-of-period
		nextTics = ServoPeriodTics-ServoPosTics;
     da4:	40 91 8c 02 	lds	r20, 0x028C
     da8:	50 91 8d 02 	lds	r21, 0x028D
     dac:	80 91 8a 02 	lds	r24, 0x028A
     db0:	90 91 8b 02 	lds	r25, 0x028B
     db4:	48 1b       	sub	r20, r24
     db6:	59 0b       	sbc	r21, r25
	}

	// schedule next interrupt
	u16 OCValue;
	// read in current value of output compare register OCR1A
	OCValue =  inb(OCR1AL);		// read low byte of OCR1A
     db8:	2a b5       	in	r18, 0x2a	; 42
	OCValue += inb(OCR1AH)<<8;	// read high byte of OCR1A
     dba:	8b b5       	in	r24, 0x2b	; 43
     dbc:	99 27       	eor	r25, r25
     dbe:	98 2f       	mov	r25, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	82 0f       	add	r24, r18
     dc4:	91 1d       	adc	r25, r1
	// increment OCR1A value by nextTics
	OCValue += nextTics;
     dc6:	84 0f       	add	r24, r20
     dc8:	95 1f       	adc	r25, r21
//	OCR1A+=nextTics;
	// set future output compare time to this new value
	outb(OCR1AH, (OCValue>>8));			// write high byte
     dca:	29 2f       	mov	r18, r25
     dcc:	33 27       	eor	r19, r19
     dce:	2b bd       	out	0x2b, r18	; 43
	outb(OCR1AL, (OCValue & 0x00FF));	// write low byte
     dd0:	8a bd       	out	0x2a, r24	; 42
	// set our new tic position
	ServoPosTics += nextTics;
     dd2:	80 91 8a 02 	lds	r24, 0x028A
     dd6:	90 91 8b 02 	lds	r25, 0x028B
     dda:	84 0f       	add	r24, r20
     ddc:	95 1f       	adc	r25, r21
     dde:	90 93 8b 02 	sts	0x028B, r25
     de2:	80 93 8a 02 	sts	0x028A, r24
	if(ServoPosTics >= ServoPeriodTics) ServoPosTics = 0;
     de6:	20 91 8c 02 	lds	r18, 0x028C
     dea:	30 91 8d 02 	lds	r19, 0x028D
     dee:	82 17       	cp	r24, r18
     df0:	93 07       	cpc	r25, r19
     df2:	20 f0       	brcs	.+8      	; 0xdfc <servoService+0xd0>
     df4:	10 92 8b 02 	sts	0x028B, r1
     df8:	10 92 8a 02 	sts	0x028A, r1
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <servoGetPosition>:
     e02:	e8 2f       	mov	r30, r24
     e04:	ff 27       	eor	r31, r31
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ea 58       	subi	r30, 0x8A	; 138
     e10:	fd 4f       	sbci	r31, 0xFD	; 253
     e12:	22 81       	ldd	r18, Z+2	; 0x02
     e14:	33 81       	ldd	r19, Z+3	; 0x03
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	ac 01       	movw	r20, r24
     e1c:	24 9f       	mul	r18, r20
     e1e:	c0 01       	movw	r24, r0
     e20:	25 9f       	mul	r18, r21
     e22:	90 0d       	add	r25, r0
     e24:	34 9f       	mul	r19, r20
     e26:	90 0d       	add	r25, r0
     e28:	11 24       	eor	r1, r1
     e2a:	8e 5d       	subi	r24, 0xDE	; 222
     e2c:	91 42       	sbci	r25, 0x21	; 33
     e2e:	68 e6       	ldi	r22, 0x68	; 104
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 11 0f 	call	0x1e22 <__udivmodhi4>
     e36:	cb 01       	movw	r24, r22
     e38:	99 27       	eor	r25, r25
     e3a:	08 95       	ret

00000e3c <servoSetPosition>:
     e3c:	28 2f       	mov	r18, r24
     e3e:	88 e6       	ldi	r24, 0x68	; 104
     e40:	68 9f       	mul	r22, r24
     e42:	c0 01       	movw	r24, r0
     e44:	11 24       	eor	r1, r1
     e46:	6f ef       	ldi	r22, 0xFF	; 255
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 11 0f 	call	0x1e22 <__udivmodhi4>
     e4e:	6e 5d       	subi	r22, 0xDE	; 222
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	62 32       	cpi	r22, 0x22	; 34
     e54:	71 05       	cpc	r23, r1
     e56:	10 f4       	brcc	.+4      	; 0xe5c <servoSetPosition+0x20>
     e58:	62 e2       	ldi	r22, 0x22	; 34
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	e2 2f       	mov	r30, r18
     e5e:	ff 27       	eor	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	ea 58       	subi	r30, 0x8A	; 138
     e6a:	fd 4f       	sbci	r31, 0xFD	; 253
     e6c:	6b 38       	cpi	r22, 0x8B	; 139
     e6e:	71 05       	cpc	r23, r1
     e70:	10 f0       	brcs	.+4      	; 0xe76 <servoSetPosition+0x3a>
     e72:	6a e8       	ldi	r22, 0x8A	; 138
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	73 83       	std	Z+3, r23	; 0x03
     e78:	62 83       	std	Z+2, r22	; 0x02
     e7a:	08 95       	ret

00000e7c <InitSerial0>:
     e7c:	89 b9       	out	0x09, r24	; 9
     e7e:	89 2f       	mov	r24, r25
     e80:	99 27       	eor	r25, r25
     e82:	80 bd       	out	0x20, r24	; 32
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	8b b9       	out	0x0b, r24	; 11
     e88:	88 eb       	ldi	r24, 0xB8	; 184
     e8a:	8a b9       	out	0x0a, r24	; 10
     e8c:	86 e8       	ldi	r24, 0x86	; 134
     e8e:	80 bd       	out	0x20, r24	; 32
     e90:	08 95       	ret

00000e92 <put_c0>:
     e92:	1f 93       	push	r17
     e94:	18 2f       	mov	r17, r24
     e96:	8e e8       	ldi	r24, 0x8E	; 142
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 47 0e 	call	0x1c8e <AvrXIntTestSemaphore>
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	19 f0       	breq	.+6      	; 0xea8 <put_c0+0x16>
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <put_c0+0x1e>
     ea8:	1c b9       	out	0x0c, r17	; 12
     eaa:	55 9a       	sbi	0x0a, 5	; 10
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	1f 91       	pop	r17
     eb2:	08 95       	ret

00000eb4 <put_char0>:
     eb4:	1f 93       	push	r17
     eb6:	18 2f       	mov	r17, r24
     eb8:	8e e8       	ldi	r24, 0x8E	; 142
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	0e 94 d6 0d 	call	0x1bac <AvrXWaitSemaphore>
     ec0:	1c b9       	out	0x0c, r17	; 12
     ec2:	55 9a       	sbi	0x0a, 5	; 10
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	1f 91       	pop	r17
     eca:	08 95       	ret

00000ecc <get_c0>:
     ecc:	80 e9       	ldi	r24, 0x90	; 144
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 47 0e 	call	0x1c8e <AvrXIntTestSemaphore>
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	19 f0       	breq	.+6      	; 0xede <get_c0+0x12>
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	08 95       	ret
     ede:	8c b1       	in	r24, 0x0c	; 12
     ee0:	57 9a       	sbi	0x0a, 7	; 10
     ee2:	99 27       	eor	r25, r25
     ee4:	08 95       	ret

00000ee6 <get_char0>:
     ee6:	80 e9       	ldi	r24, 0x90	; 144
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	0e 94 d6 0d 	call	0x1bac <AvrXWaitSemaphore>
     eee:	8c b1       	in	r24, 0x0c	; 12
     ef0:	57 9a       	sbi	0x0a, 7	; 10
     ef2:	99 27       	eor	r25, r25
     ef4:	08 95       	ret

00000ef6 <__vector_13>:
     ef6:	0e 94 ea 0c 	call	0x19d4 <IntProlog>
     efa:	57 98       	cbi	0x0a, 7	; 10
     efc:	78 94       	sei
     efe:	80 e9       	ldi	r24, 0x90	; 144
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	0e 94 ed 0d 	call	0x1bda <AvrXSetSemaphore>
     f06:	0e 94 36 0d 	call	0x1a6c <Epilog>

00000f0a <__vector_14>:
     f0a:	0e 94 ea 0c 	call	0x19d4 <IntProlog>
     f0e:	55 98       	cbi	0x0a, 5	; 10
     f10:	78 94       	sei
     f12:	8e e8       	ldi	r24, 0x8E	; 142
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 ed 0d 	call	0x1bda <AvrXSetSemaphore>
     f1a:	0e 94 36 0d 	call	0x1a6c <Epilog>

00000f1e <atoi>:
     f1e:	fc 01       	movw	r30, r24
     f20:	88 27       	eor	r24, r24
     f22:	99 27       	eor	r25, r25
     f24:	e8 94       	clt
     f26:	21 91       	ld	r18, Z+
     f28:	22 23       	and	r18, r18
     f2a:	f1 f0       	breq	.+60     	; 0xf68 <atoi+0x4a>
     f2c:	20 32       	cpi	r18, 0x20	; 32
     f2e:	d9 f3       	breq	.-10     	; 0xf26 <atoi+0x8>
     f30:	29 30       	cpi	r18, 0x09	; 9
     f32:	c9 f3       	breq	.-14     	; 0xf26 <atoi+0x8>
     f34:	2a 30       	cpi	r18, 0x0A	; 10
     f36:	b9 f3       	breq	.-18     	; 0xf26 <atoi+0x8>
     f38:	2c 30       	cpi	r18, 0x0C	; 12
     f3a:	a9 f3       	breq	.-22     	; 0xf26 <atoi+0x8>
     f3c:	2d 30       	cpi	r18, 0x0D	; 13
     f3e:	99 f3       	breq	.-26     	; 0xf26 <atoi+0x8>
     f40:	26 37       	cpi	r18, 0x76	; 118
     f42:	89 f3       	breq	.-30     	; 0xf26 <atoi+0x8>
     f44:	2b 32       	cpi	r18, 0x2B	; 43
     f46:	19 f0       	breq	.+6      	; 0xf4e <atoi+0x30>
     f48:	2d 32       	cpi	r18, 0x2D	; 45
     f4a:	21 f4       	brne	.+8      	; 0xf54 <atoi+0x36>
     f4c:	68 94       	set
     f4e:	21 91       	ld	r18, Z+
     f50:	22 23       	and	r18, r18
     f52:	51 f0       	breq	.+20     	; 0xf68 <atoi+0x4a>
     f54:	20 33       	cpi	r18, 0x30	; 48
     f56:	44 f0       	brlt	.+16     	; 0xf68 <atoi+0x4a>
     f58:	2a 33       	cpi	r18, 0x3A	; 58
     f5a:	34 f4       	brge	.+12     	; 0xf68 <atoi+0x4a>
     f5c:	20 53       	subi	r18, 0x30	; 48
     f5e:	0e 94 c3 07 	call	0xf86 <__mulhi_const_10>
     f62:	82 0f       	add	r24, r18
     f64:	91 1d       	adc	r25, r1
     f66:	f3 cf       	rjmp	.-26     	; 0xf4e <atoi+0x30>
     f68:	81 15       	cp	r24, r1
     f6a:	91 05       	cpc	r25, r1
     f6c:	21 f0       	breq	.+8      	; 0xf76 <atoi+0x58>
     f6e:	1e f4       	brtc	.+6      	; 0xf76 <atoi+0x58>
     f70:	80 95       	com	r24
     f72:	90 95       	com	r25
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	08 95       	ret

00000f78 <strcpy>:
     f78:	fb 01       	movw	r30, r22
     f7a:	dc 01       	movw	r26, r24
     f7c:	01 90       	ld	r0, Z+
     f7e:	0d 92       	st	X+, r0
     f80:	00 20       	and	r0, r0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <strcpy+0x4>
     f84:	08 95       	ret

00000f86 <__mulhi_const_10>:
     f86:	7a e0       	ldi	r23, 0x0A	; 10
     f88:	97 9f       	mul	r25, r23
     f8a:	90 2d       	mov	r25, r0
     f8c:	87 9f       	mul	r24, r23
     f8e:	80 2d       	mov	r24, r0
     f90:	91 0d       	add	r25, r1
     f92:	11 24       	eor	r1, r1
     f94:	08 95       	ret

00000f96 <fdevopen>:
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	8c 01       	movw	r16, r24
     fa0:	eb 01       	movw	r28, r22
     fa2:	89 2b       	or	r24, r25
     fa4:	11 f4       	brne	.+4      	; 0xfaa <fdevopen+0x14>
     fa6:	67 2b       	or	r22, r23
     fa8:	c1 f1       	breq	.+112    	; 0x101a <fdevopen+0x84>
     faa:	6e e0       	ldi	r22, 0x0E	; 14
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 ac 0b 	call	0x1758 <calloc>
     fb6:	fc 01       	movw	r30, r24
     fb8:	89 2b       	or	r24, r25
     fba:	79 f1       	breq	.+94     	; 0x101a <fdevopen+0x84>
     fbc:	80 e8       	ldi	r24, 0x80	; 128
     fbe:	83 83       	std	Z+3, r24	; 0x03
     fc0:	20 97       	sbiw	r28, 0x00	; 0
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <fdevopen+0x4a>
     fc4:	d3 87       	std	Z+11, r29	; 0x0b
     fc6:	c2 87       	std	Z+10, r28	; 0x0a
     fc8:	81 e8       	ldi	r24, 0x81	; 129
     fca:	83 83       	std	Z+3, r24	; 0x03
     fcc:	80 91 9f 02 	lds	r24, 0x029F
     fd0:	90 91 a0 02 	lds	r25, 0x02A0
     fd4:	89 2b       	or	r24, r25
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <fdevopen+0x4a>
     fd8:	f0 93 a0 02 	sts	0x02A0, r31
     fdc:	e0 93 9f 02 	sts	0x029F, r30
     fe0:	01 15       	cp	r16, r1
     fe2:	11 05       	cpc	r17, r1
     fe4:	e1 f0       	breq	.+56     	; 0x101e <fdevopen+0x88>
     fe6:	11 87       	std	Z+9, r17	; 0x09
     fe8:	00 87       	std	Z+8, r16	; 0x08
     fea:	83 81       	ldd	r24, Z+3	; 0x03
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	83 83       	std	Z+3, r24	; 0x03
     ff0:	80 91 a1 02 	lds	r24, 0x02A1
     ff4:	90 91 a2 02 	lds	r25, 0x02A2
     ff8:	89 2b       	or	r24, r25
     ffa:	89 f4       	brne	.+34     	; 0x101e <fdevopen+0x88>
     ffc:	f0 93 a2 02 	sts	0x02A2, r31
    1000:	e0 93 a1 02 	sts	0x02A1, r30
    1004:	80 91 a3 02 	lds	r24, 0x02A3
    1008:	90 91 a4 02 	lds	r25, 0x02A4
    100c:	89 2b       	or	r24, r25
    100e:	39 f4       	brne	.+14     	; 0x101e <fdevopen+0x88>
    1010:	f0 93 a4 02 	sts	0x02A4, r31
    1014:	e0 93 a3 02 	sts	0x02A3, r30
    1018:	02 c0       	rjmp	.+4      	; 0x101e <fdevopen+0x88>
    101a:	e0 e0       	ldi	r30, 0x00	; 0
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	cf 01       	movw	r24, r30
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <fgetc>:
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	82 2f       	mov	r24, r18
    1034:	99 27       	eor	r25, r25
    1036:	80 ff       	sbrs	r24, 0
    1038:	19 c0       	rjmp	.+50     	; 0x106c <fgetc+0x42>
    103a:	86 ff       	sbrs	r24, 6
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <fgetc+0x28>
    103e:	2f 7b       	andi	r18, 0xBF	; 191
    1040:	2b 83       	std	Y+3, r18	; 0x03
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	9f 81       	ldd	r25, Y+7	; 0x07
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	9f 83       	std	Y+7, r25	; 0x07
    104a:	8e 83       	std	Y+6, r24	; 0x06
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	99 27       	eor	r25, r25
    1050:	2c c0       	rjmp	.+88     	; 0x10aa <fgetc+0x80>
    1052:	82 ff       	sbrs	r24, 2
    1054:	12 c0       	rjmp	.+36     	; 0x107a <fgetc+0x50>
    1056:	e8 81       	ld	r30, Y
    1058:	f9 81       	ldd	r31, Y+1	; 0x01
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	55 27       	eor	r21, r21
    1060:	47 fd       	sbrc	r20, 7
    1062:	50 95       	com	r21
    1064:	88 23       	and	r24, r24
    1066:	29 f4       	brne	.+10     	; 0x1072 <fgetc+0x48>
    1068:	20 62       	ori	r18, 0x20	; 32
    106a:	2b 83       	std	Y+3, r18	; 0x03
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	1c c0       	rjmp	.+56     	; 0x10aa <fgetc+0x80>
    1072:	31 96       	adiw	r30, 0x01	; 1
    1074:	f9 83       	std	Y+1, r31	; 0x01
    1076:	e8 83       	st	Y, r30
    1078:	11 c0       	rjmp	.+34     	; 0x109c <fgetc+0x72>
    107a:	ea 85       	ldd	r30, Y+10	; 0x0a
    107c:	fb 85       	ldd	r31, Y+11	; 0x0b
    107e:	ce 01       	movw	r24, r28
    1080:	09 95       	icall
    1082:	ac 01       	movw	r20, r24
    1084:	97 ff       	sbrs	r25, 7
    1086:	0a c0       	rjmp	.+20     	; 0x109c <fgetc+0x72>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	4f 5f       	subi	r20, 0xFF	; 255
    108c:	5f 4f       	sbci	r21, 0xFF	; 255
    108e:	11 f4       	brne	.+4      	; 0x1094 <fgetc+0x6a>
    1090:	90 e1       	ldi	r25, 0x10	; 16
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <fgetc+0x6c>
    1094:	90 e2       	ldi	r25, 0x20	; 32
    1096:	89 2b       	or	r24, r25
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	e8 cf       	rjmp	.-48     	; 0x106c <fgetc+0x42>
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	9f 81       	ldd	r25, Y+7	; 0x07
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	9f 83       	std	Y+7, r25	; 0x07
    10a4:	8e 83       	std	Y+6, r24	; 0x06
    10a6:	84 2f       	mov	r24, r20
    10a8:	99 27       	eor	r25, r25
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <fputc>:
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	8c 01       	movw	r16, r24
    10ba:	eb 01       	movw	r28, r22
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	99 27       	eor	r25, r25
    10c0:	81 ff       	sbrs	r24, 1
    10c2:	1b c0       	rjmp	.+54     	; 0x10fa <fputc+0x4a>
    10c4:	82 ff       	sbrs	r24, 2
    10c6:	0d c0       	rjmp	.+26     	; 0x10e2 <fputc+0x32>
    10c8:	2e 81       	ldd	r18, Y+6	; 0x06
    10ca:	3f 81       	ldd	r19, Y+7	; 0x07
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	64 f4       	brge	.+24     	; 0x10ee <fputc+0x3e>
    10d6:	e8 81       	ld	r30, Y
    10d8:	f9 81       	ldd	r31, Y+1	; 0x01
    10da:	01 93       	st	Z+, r16
    10dc:	f9 83       	std	Y+1, r31	; 0x01
    10de:	e8 83       	st	Y, r30
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <fputc+0x3e>
    10e2:	e8 85       	ldd	r30, Y+8	; 0x08
    10e4:	f9 85       	ldd	r31, Y+9	; 0x09
    10e6:	80 2f       	mov	r24, r16
    10e8:	09 95       	icall
    10ea:	89 2b       	or	r24, r25
    10ec:	31 f4       	brne	.+12     	; 0x10fa <fputc+0x4a>
    10ee:	8e 81       	ldd	r24, Y+6	; 0x06
    10f0:	9f 81       	ldd	r25, Y+7	; 0x07
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	9f 83       	std	Y+7, r25	; 0x07
    10f6:	8e 83       	std	Y+6, r24	; 0x06
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <fputc+0x4e>
    10fa:	0f ef       	ldi	r16, 0xFF	; 255
    10fc:	1f ef       	ldi	r17, 0xFF	; 255
    10fe:	c8 01       	movw	r24, r16
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <printf>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	22 97       	sbiw	r28, 0x02	; 2
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	e7 e0       	ldi	r30, 0x07	; 7
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	ec 0f       	add	r30, r28
    1124:	fd 1f       	adc	r31, r29
    1126:	61 91       	ld	r22, Z+
    1128:	71 91       	ld	r23, Z+
    112a:	fa 83       	std	Y+2, r31	; 0x02
    112c:	e9 83       	std	Y+1, r30	; 0x01
    112e:	af 01       	movw	r20, r30
    1130:	80 91 a1 02 	lds	r24, 0x02A1
    1134:	90 91 a2 02 	lds	r25, 0x02A2
    1138:	0e 94 d8 08 	call	0x11b0 <vfprintf>
    113c:	22 96       	adiw	r28, 0x02	; 2
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <printf_P>:
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	22 97       	sbiw	r28, 0x02	; 2
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	e7 e0       	ldi	r30, 0x07	; 7
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	ec 0f       	add	r30, r28
    1168:	fd 1f       	adc	r31, r29
    116a:	61 91       	ld	r22, Z+
    116c:	71 91       	ld	r23, Z+
    116e:	fa 83       	std	Y+2, r31	; 0x02
    1170:	e9 83       	std	Y+1, r30	; 0x01
    1172:	e0 91 a1 02 	lds	r30, 0x02A1
    1176:	f0 91 a2 02 	lds	r31, 0x02A2
    117a:	83 81       	ldd	r24, Z+3	; 0x03
    117c:	88 60       	ori	r24, 0x08	; 8
    117e:	83 83       	std	Z+3, r24	; 0x03
    1180:	49 81       	ldd	r20, Y+1	; 0x01
    1182:	5a 81       	ldd	r21, Y+2	; 0x02
    1184:	80 91 a1 02 	lds	r24, 0x02A1
    1188:	90 91 a2 02 	lds	r25, 0x02A2
    118c:	0e 94 d8 08 	call	0x11b0 <vfprintf>
    1190:	e0 91 a1 02 	lds	r30, 0x02A1
    1194:	f0 91 a2 02 	lds	r31, 0x02A2
    1198:	23 81       	ldd	r18, Z+3	; 0x03
    119a:	27 7f       	andi	r18, 0xF7	; 247
    119c:	23 83       	std	Z+3, r18	; 0x03
    119e:	22 96       	adiw	r28, 0x02	; 2
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <vfprintf>:
    11b0:	2f 92       	push	r2
    11b2:	3f 92       	push	r3
    11b4:	4f 92       	push	r4
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	62 97       	sbiw	r28, 0x12	; 18
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	88 24       	eor	r8, r8
    11e6:	99 24       	eor	r9, r9
    11e8:	54 01       	movw	r10, r8
    11ea:	2c 01       	movw	r4, r24
    11ec:	7a 8b       	std	Y+18, r23	; 0x12
    11ee:	69 8b       	std	Y+17, r22	; 0x11
    11f0:	3a 01       	movw	r6, r20
    11f2:	fc 01       	movw	r30, r24
    11f4:	17 82       	std	Z+7, r1	; 0x07
    11f6:	16 82       	std	Z+6, r1	; 0x06
    11f8:	83 81       	ldd	r24, Z+3	; 0x03
    11fa:	81 fd       	sbrc	r24, 1
    11fc:	6e c2       	rjmp	.+1244   	; 0x16da <vfprintf+0x52a>
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	91 c2       	rjmp	.+1314   	; 0x1726 <vfprintf+0x576>
    1204:	29 89       	ldd	r18, Y+17	; 0x11
    1206:	3a 89       	ldd	r19, Y+18	; 0x12
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	3a 8b       	std	Y+18, r19	; 0x12
    120e:	29 8b       	std	Y+17, r18	; 0x11
    1210:	c0 fe       	sbrs	r12, 0
    1212:	66 c2       	rjmp	.+1228   	; 0x16e0 <vfprintf+0x530>
    1214:	83 2d       	mov	r24, r3
    1216:	80 53       	subi	r24, 0x30	; 48
    1218:	8a 30       	cpi	r24, 0x0A	; 10
    121a:	e0 f4       	brcc	.+56     	; 0x1254 <vfprintf+0xa4>
    121c:	30 e3       	ldi	r19, 0x30	; 48
    121e:	33 16       	cp	r3, r19
    1220:	41 f4       	brne	.+16     	; 0x1232 <vfprintf+0x82>
    1222:	8d 85       	ldd	r24, Y+13	; 0x0d
    1224:	88 23       	and	r24, r24
    1226:	29 f4       	brne	.+10     	; 0x1232 <vfprintf+0x82>
    1228:	c3 fc       	sbrc	r12, 3
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <vfprintf+0x82>
    122c:	e0 e0       	ldi	r30, 0x00	; 0
    122e:	f1 e0       	ldi	r31, 0x01	; 1
    1230:	7b c0       	rjmp	.+246    	; 0x1328 <vfprintf+0x178>
    1232:	8a e0       	ldi	r24, 0x0A	; 10
    1234:	fd 85       	ldd	r31, Y+13	; 0x0d
    1236:	f8 02       	muls	r31, r24
    1238:	c0 01       	movw	r24, r0
    123a:	11 24       	eor	r1, r1
    123c:	38 0e       	add	r3, r24
    123e:	23 2d       	mov	r18, r3
    1240:	20 53       	subi	r18, 0x30	; 48
    1242:	2d 87       	std	Y+13, r18	; 0x0d
    1244:	27 ff       	sbrs	r18, 7
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x9c>
    1248:	3f e7       	ldi	r19, 0x7F	; 127
    124a:	3d 87       	std	Y+13, r19	; 0x0d
    124c:	c3 fc       	sbrc	r12, 3
    124e:	5a c2       	rjmp	.+1204   	; 0x1704 <vfprintf+0x554>
    1250:	2d 84       	ldd	r2, Y+13	; 0x0d
    1252:	58 c2       	rjmp	.+1200   	; 0x1704 <vfprintf+0x554>
    1254:	c6 01       	movw	r24, r12
    1256:	b3 e0       	ldi	r27, 0x03	; 3
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	ba 95       	dec	r27
    125e:	e1 f7       	brne	.-8      	; 0x1258 <vfprintf+0xa8>
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	28 2f       	mov	r18, r24
    1266:	88 23       	and	r24, r24
    1268:	29 f0       	breq	.+10     	; 0x1274 <vfprintf+0xc4>
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	88 23       	and	r24, r24
    126e:	11 f4       	brne	.+4      	; 0x1274 <vfprintf+0xc4>
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	9d 87       	std	Y+13, r25	; 0x0d
    1274:	83 2d       	mov	r24, r3
    1276:	99 27       	eor	r25, r25
    1278:	87 fd       	sbrc	r24, 7
    127a:	90 95       	com	r25
    127c:	e7 e6       	ldi	r30, 0x67	; 103
    127e:	e3 15       	cp	r30, r3
    1280:	64 f1       	brlt	.+88     	; 0x12da <vfprintf+0x12a>
    1282:	f5 e6       	ldi	r31, 0x65	; 101
    1284:	3f 16       	cp	r3, r31
    1286:	0c f0       	brlt	.+2      	; 0x128a <vfprintf+0xda>
    1288:	65 c0       	rjmp	.+202    	; 0x1354 <vfprintf+0x1a4>
    128a:	33 e5       	ldi	r19, 0x53	; 83
    128c:	33 16       	cp	r3, r19
    128e:	09 f4       	brne	.+2      	; 0x1292 <vfprintf+0xe2>
    1290:	8f c0       	rjmp	.+286    	; 0x13b0 <vfprintf+0x200>
    1292:	33 15       	cp	r19, r3
    1294:	b4 f0       	brlt	.+44     	; 0x12c2 <vfprintf+0x112>
    1296:	eb e2       	ldi	r30, 0x2B	; 43
    1298:	3e 16       	cp	r3, r30
    129a:	09 f4       	brne	.+2      	; 0x129e <vfprintf+0xee>
    129c:	3f c0       	rjmp	.+126    	; 0x131c <vfprintf+0x16c>
    129e:	e3 15       	cp	r30, r3
    12a0:	44 f0       	brlt	.+16     	; 0x12b2 <vfprintf+0x102>
    12a2:	f0 e2       	ldi	r31, 0x20	; 32
    12a4:	3f 16       	cp	r3, r31
    12a6:	f1 f1       	breq	.+124    	; 0x1324 <vfprintf+0x174>
    12a8:	23 e2       	ldi	r18, 0x23	; 35
    12aa:	32 16       	cp	r3, r18
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <vfprintf+0x100>
    12ae:	12 c2       	rjmp	.+1060   	; 0x16d4 <vfprintf+0x524>
    12b0:	41 c0       	rjmp	.+130    	; 0x1334 <vfprintf+0x184>
    12b2:	3d e2       	ldi	r19, 0x2D	; 45
    12b4:	33 16       	cp	r3, r19
    12b6:	d9 f1       	breq	.+118    	; 0x132e <vfprintf+0x17e>
    12b8:	ee e2       	ldi	r30, 0x2E	; 46
    12ba:	3e 16       	cp	r3, r30
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <vfprintf+0x110>
    12be:	0a c2       	rjmp	.+1044   	; 0x16d4 <vfprintf+0x524>
    12c0:	3e c0       	rjmp	.+124    	; 0x133e <vfprintf+0x18e>
    12c2:	f3 e6       	ldi	r31, 0x63	; 99
    12c4:	3f 16       	cp	r3, r31
    12c6:	09 f4       	brne	.+2      	; 0x12ca <vfprintf+0x11a>
    12c8:	4b c0       	rjmp	.+150    	; 0x1360 <vfprintf+0x1b0>
    12ca:	f3 15       	cp	r31, r3
    12cc:	0c f4       	brge	.+2      	; 0x12d0 <vfprintf+0x120>
    12ce:	8a c0       	rjmp	.+276    	; 0x13e4 <vfprintf+0x234>
    12d0:	28 e5       	ldi	r18, 0x58	; 88
    12d2:	32 16       	cp	r3, r18
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <vfprintf+0x128>
    12d6:	fe c1       	rjmp	.+1020   	; 0x16d4 <vfprintf+0x524>
    12d8:	b5 c0       	rjmp	.+362    	; 0x1444 <vfprintf+0x294>
    12da:	30 e7       	ldi	r19, 0x70	; 112
    12dc:	33 16       	cp	r3, r19
    12de:	09 f4       	brne	.+2      	; 0x12e2 <vfprintf+0x132>
    12e0:	ab c0       	rjmp	.+342    	; 0x1438 <vfprintf+0x288>
    12e2:	33 15       	cp	r19, r3
    12e4:	5c f0       	brlt	.+22     	; 0x12fc <vfprintf+0x14c>
    12e6:	ec e6       	ldi	r30, 0x6C	; 108
    12e8:	3e 16       	cp	r3, r30
    12ea:	79 f1       	breq	.+94     	; 0x134a <vfprintf+0x19a>
    12ec:	ff e6       	ldi	r31, 0x6F	; 111
    12ee:	3f 16       	cp	r3, r31
    12f0:	91 f0       	breq	.+36     	; 0x1316 <vfprintf+0x166>
    12f2:	29 e6       	ldi	r18, 0x69	; 105
    12f4:	32 16       	cp	r3, r18
    12f6:	09 f0       	breq	.+2      	; 0x12fa <vfprintf+0x14a>
    12f8:	ed c1       	rjmp	.+986    	; 0x16d4 <vfprintf+0x524>
    12fa:	74 c0       	rjmp	.+232    	; 0x13e4 <vfprintf+0x234>
    12fc:	35 e7       	ldi	r19, 0x75	; 117
    12fe:	33 16       	cp	r3, r19
    1300:	09 f4       	brne	.+2      	; 0x1304 <vfprintf+0x154>
    1302:	a2 c0       	rjmp	.+324    	; 0x1448 <vfprintf+0x298>
    1304:	e8 e7       	ldi	r30, 0x78	; 120
    1306:	3e 16       	cp	r3, r30
    1308:	09 f4       	brne	.+2      	; 0x130c <vfprintf+0x15c>
    130a:	9c c0       	rjmp	.+312    	; 0x1444 <vfprintf+0x294>
    130c:	f3 e7       	ldi	r31, 0x73	; 115
    130e:	3f 16       	cp	r3, r31
    1310:	09 f0       	breq	.+2      	; 0x1314 <vfprintf+0x164>
    1312:	e0 c1       	rjmp	.+960    	; 0x16d4 <vfprintf+0x524>
    1314:	2d c0       	rjmp	.+90     	; 0x1370 <vfprintf+0x1c0>
    1316:	28 e0       	ldi	r18, 0x08	; 8
    1318:	28 8b       	std	Y+16, r18	; 0x10
    131a:	96 c0       	rjmp	.+300    	; 0x1448 <vfprintf+0x298>
    131c:	80 e1       	ldi	r24, 0x10	; 16
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	c8 2a       	or	r12, r24
    1322:	d9 2a       	or	r13, r25
    1324:	e0 e2       	ldi	r30, 0x20	; 32
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	ce 2a       	or	r12, r30
    132a:	df 2a       	or	r13, r31
    132c:	eb c1       	rjmp	.+982    	; 0x1704 <vfprintf+0x554>
    132e:	20 e8       	ldi	r18, 0x80	; 128
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	0d c0       	rjmp	.+26     	; 0x134e <vfprintf+0x19e>
    1334:	80 e4       	ldi	r24, 0x40	; 64
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	c8 2a       	or	r12, r24
    133a:	d9 2a       	or	r13, r25
    133c:	e3 c1       	rjmp	.+966    	; 0x1704 <vfprintf+0x554>
    133e:	e8 e0       	ldi	r30, 0x08	; 8
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	ce 2a       	or	r12, r30
    1344:	df 2a       	or	r13, r31
    1346:	1d 86       	std	Y+13, r1	; 0x0d
    1348:	dd c1       	rjmp	.+954    	; 0x1704 <vfprintf+0x554>
    134a:	24 e0       	ldi	r18, 0x04	; 4
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	c2 2a       	or	r12, r18
    1350:	d3 2a       	or	r13, r19
    1352:	d8 c1       	rjmp	.+944    	; 0x1704 <vfprintf+0x554>
    1354:	af e3       	ldi	r26, 0x3F	; 63
    1356:	8a 2e       	mov	r8, r26
    1358:	2a 94       	dec	r2
    135a:	f3 e6       	ldi	r31, 0x63	; 99
    135c:	3f 2e       	mov	r3, r31
    135e:	44 c1       	rjmp	.+648    	; 0x15e8 <vfprintf+0x438>
    1360:	f3 01       	movw	r30, r6
    1362:	80 80       	ld	r8, Z
    1364:	2a 94       	dec	r2
    1366:	22 e0       	ldi	r18, 0x02	; 2
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	62 0e       	add	r6, r18
    136c:	73 1e       	adc	r7, r19
    136e:	3c c1       	rjmp	.+632    	; 0x15e8 <vfprintf+0x438>
    1370:	83 01       	movw	r16, r6
    1372:	0e 5f       	subi	r16, 0xFE	; 254
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	f3 01       	movw	r30, r6
    1378:	a0 81       	ld	r26, Z
    137a:	b1 81       	ldd	r27, Z+1	; 0x01
    137c:	4d 01       	movw	r8, r26
    137e:	22 23       	and	r18, r18
    1380:	51 f0       	breq	.+20     	; 0x1396 <vfprintf+0x1e6>
    1382:	fd 85       	ldd	r31, Y+13	; 0x0d
    1384:	6f 2f       	mov	r22, r31
    1386:	77 27       	eor	r23, r23
    1388:	67 fd       	sbrc	r22, 7
    138a:	70 95       	com	r23
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 df 0c 	call	0x19be <strnlen>
    1392:	88 8b       	std	Y+16, r24	; 0x10
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <vfprintf+0x1f4>
    1396:	fd 01       	movw	r30, r26
    1398:	01 90       	ld	r0, Z+
    139a:	00 20       	and	r0, r0
    139c:	e9 f7       	brne	.-6      	; 0x1398 <vfprintf+0x1e8>
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	ea 1b       	sub	r30, r26
    13a2:	e8 8b       	std	Y+16, r30	; 0x10
    13a4:	28 89       	ldd	r18, Y+16	; 0x10
    13a6:	22 1a       	sub	r2, r18
    13a8:	38 01       	movw	r6, r16
    13aa:	e3 e7       	ldi	r30, 0x73	; 115
    13ac:	3e 2e       	mov	r3, r30
    13ae:	1c c1       	rjmp	.+568    	; 0x15e8 <vfprintf+0x438>
    13b0:	83 01       	movw	r16, r6
    13b2:	0e 5f       	subi	r16, 0xFE	; 254
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	f3 01       	movw	r30, r6
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	4c 01       	movw	r8, r24
    13be:	22 23       	and	r18, r18
    13c0:	41 f0       	breq	.+16     	; 0x13d2 <vfprintf+0x222>
    13c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    13c4:	6f 2f       	mov	r22, r31
    13c6:	77 27       	eor	r23, r23
    13c8:	67 fd       	sbrc	r22, 7
    13ca:	70 95       	com	r23
    13cc:	0e 94 ca 0c 	call	0x1994 <strnlen_P>
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <vfprintf+0x226>
    13d2:	0e 94 c1 0c 	call	0x1982 <strlen_P>
    13d6:	88 8b       	std	Y+16, r24	; 0x10
    13d8:	28 89       	ldd	r18, Y+16	; 0x10
    13da:	22 1a       	sub	r2, r18
    13dc:	38 01       	movw	r6, r16
    13de:	73 e5       	ldi	r23, 0x53	; 83
    13e0:	37 2e       	mov	r3, r23
    13e2:	02 c1       	rjmp	.+516    	; 0x15e8 <vfprintf+0x438>
    13e4:	c2 fe       	sbrs	r12, 2
    13e6:	08 c0       	rjmp	.+16     	; 0x13f8 <vfprintf+0x248>
    13e8:	f3 01       	movw	r30, r6
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	a2 81       	ldd	r26, Z+2	; 0x02
    13f0:	b3 81       	ldd	r27, Z+3	; 0x03
    13f2:	24 e0       	ldi	r18, 0x04	; 4
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <vfprintf+0x25a>
    13f8:	f3 01       	movw	r30, r6
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	aa 27       	eor	r26, r26
    1400:	97 fd       	sbrc	r25, 7
    1402:	a0 95       	com	r26
    1404:	ba 2f       	mov	r27, r26
    1406:	22 e0       	ldi	r18, 0x02	; 2
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	62 0e       	add	r6, r18
    140c:	73 1e       	adc	r7, r19
    140e:	4c 01       	movw	r8, r24
    1410:	5d 01       	movw	r10, r26
    1412:	b7 ff       	sbrs	r27, 7
    1414:	0c c0       	rjmp	.+24     	; 0x142e <vfprintf+0x27e>
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	c8 2a       	or	r12, r24
    141c:	d9 2a       	or	r13, r25
    141e:	b0 94       	com	r11
    1420:	a0 94       	com	r10
    1422:	90 94       	com	r9
    1424:	80 94       	com	r8
    1426:	81 1c       	adc	r8, r1
    1428:	91 1c       	adc	r9, r1
    142a:	a1 1c       	adc	r10, r1
    142c:	b1 1c       	adc	r11, r1
    142e:	ef eb       	ldi	r30, 0xBF	; 191
    1430:	ff ef       	ldi	r31, 0xFF	; 255
    1432:	ce 22       	and	r12, r30
    1434:	df 22       	and	r13, r31
    1436:	21 c0       	rjmp	.+66     	; 0x147a <vfprintf+0x2ca>
    1438:	20 e4       	ldi	r18, 0x40	; 64
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	c2 2a       	or	r12, r18
    143e:	d3 2a       	or	r13, r19
    1440:	68 e7       	ldi	r22, 0x78	; 120
    1442:	36 2e       	mov	r3, r22
    1444:	30 e1       	ldi	r19, 0x10	; 16
    1446:	38 8b       	std	Y+16, r19	; 0x10
    1448:	c2 fe       	sbrs	r12, 2
    144a:	08 c0       	rjmp	.+16     	; 0x145c <vfprintf+0x2ac>
    144c:	f3 01       	movw	r30, r6
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	a2 81       	ldd	r26, Z+2	; 0x02
    1454:	b3 81       	ldd	r27, Z+3	; 0x03
    1456:	24 e0       	ldi	r18, 0x04	; 4
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	07 c0       	rjmp	.+14     	; 0x146a <vfprintf+0x2ba>
    145c:	f3 01       	movw	r30, r6
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	aa 27       	eor	r26, r26
    1464:	bb 27       	eor	r27, r27
    1466:	22 e0       	ldi	r18, 0x02	; 2
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	62 0e       	add	r6, r18
    146c:	73 1e       	adc	r7, r19
    146e:	4c 01       	movw	r8, r24
    1470:	5d 01       	movw	r10, r26
    1472:	8f ec       	ldi	r24, 0xCF	; 207
    1474:	9f ef       	ldi	r25, 0xFF	; 255
    1476:	c8 22       	and	r12, r24
    1478:	d9 22       	and	r13, r25
    147a:	85 01       	movw	r16, r10
    147c:	74 01       	movw	r14, r8
    147e:	fe 01       	movw	r30, r28
    1480:	31 96       	adiw	r30, 0x01	; 1
    1482:	ff 87       	std	Y+15, r31	; 0x0f
    1484:	ee 87       	std	Y+14, r30	; 0x0e
    1486:	f8 89       	ldd	r31, Y+16	; 0x10
    1488:	8f 2e       	mov	r8, r31
    148a:	99 24       	eor	r9, r9
    148c:	aa 24       	eor	r10, r10
    148e:	bb 24       	eor	r11, r11
    1490:	c8 01       	movw	r24, r16
    1492:	b7 01       	movw	r22, r14
    1494:	a5 01       	movw	r20, r10
    1496:	94 01       	movw	r18, r8
    1498:	0e 94 25 0f 	call	0x1e4a <__udivmodsi4>
    149c:	6a 30       	cpi	r22, 0x0A	; 10
    149e:	1c f0       	brlt	.+6      	; 0x14a6 <vfprintf+0x2f6>
    14a0:	63 0d       	add	r22, r3
    14a2:	61 52       	subi	r22, 0x21	; 33
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <vfprintf+0x2f8>
    14a6:	60 5d       	subi	r22, 0xD0	; 208
    14a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    14aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ac:	61 93       	st	Z+, r22
    14ae:	ff 87       	std	Y+15, r31	; 0x0f
    14b0:	ee 87       	std	Y+14, r30	; 0x0e
    14b2:	c8 01       	movw	r24, r16
    14b4:	b7 01       	movw	r22, r14
    14b6:	a5 01       	movw	r20, r10
    14b8:	94 01       	movw	r18, r8
    14ba:	0e 94 25 0f 	call	0x1e4a <__udivmodsi4>
    14be:	79 01       	movw	r14, r18
    14c0:	8a 01       	movw	r16, r20
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	41 05       	cpc	r20, r1
    14c8:	51 05       	cpc	r21, r1
    14ca:	11 f7       	brne	.-60     	; 0x1490 <vfprintf+0x2e0>
    14cc:	88 24       	eor	r8, r8
    14ce:	99 24       	eor	r9, r9
    14d0:	54 01       	movw	r10, r8
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    14d8:	48 1b       	sub	r20, r24
    14da:	84 2e       	mov	r8, r20
    14dc:	c6 01       	movw	r24, r12
    14de:	82 73       	andi	r24, 0x32	; 50
    14e0:	90 70       	andi	r25, 0x00	; 0
    14e2:	89 2b       	or	r24, r25
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <vfprintf+0x338>
    14e6:	2a 94       	dec	r2
    14e8:	c6 fe       	sbrs	r12, 6
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <vfprintf+0x34a>
    14ec:	f8 89       	ldd	r31, Y+16	; 0x10
    14ee:	f0 31       	cpi	r31, 0x10	; 16
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <vfprintf+0x346>
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <vfprintf+0x348>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	28 1a       	sub	r2, r24
    14fa:	c3 fe       	sbrs	r12, 3
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <vfprintf+0x372>
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	28 2f       	mov	r18, r24
    1502:	33 27       	eor	r19, r19
    1504:	27 fd       	sbrc	r18, 7
    1506:	30 95       	com	r19
    1508:	84 2f       	mov	r24, r20
    150a:	99 27       	eor	r25, r25
    150c:	82 17       	cp	r24, r18
    150e:	93 07       	cpc	r25, r19
    1510:	2c f0       	brlt	.+10     	; 0x151c <vfprintf+0x36c>
    1512:	e7 ef       	ldi	r30, 0xF7	; 247
    1514:	ff ef       	ldi	r31, 0xFF	; 255
    1516:	ce 22       	and	r12, r30
    1518:	df 22       	and	r13, r31
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <vfprintf+0x372>
    151c:	fd 85       	ldd	r31, Y+13	; 0x0d
    151e:	f4 1b       	sub	r31, r20
    1520:	fd 87       	std	Y+13, r31	; 0x0d
    1522:	c6 01       	movw	r24, r12
    1524:	53 e0       	ldi	r21, 0x03	; 3
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	5a 95       	dec	r21
    152c:	e1 f7       	brne	.-8      	; 0x1526 <vfprintf+0x376>
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	08 2f       	mov	r16, r24
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <vfprintf+0x38e>
    1538:	2d 85       	ldd	r18, Y+13	; 0x0d
    153a:	22 1a       	sub	r2, r18
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <vfprintf+0x390>
    153e:	24 1a       	sub	r2, r20
    1540:	c6 01       	movw	r24, r12
    1542:	80 78       	andi	r24, 0x80	; 128
    1544:	91 70       	andi	r25, 0x01	; 1
    1546:	89 2b       	or	r24, r25
    1548:	69 f4       	brne	.+26     	; 0x1564 <vfprintf+0x3b4>
    154a:	82 2d       	mov	r24, r2
    154c:	06 c0       	rjmp	.+12     	; 0x155a <vfprintf+0x3aa>
    154e:	b2 01       	movw	r22, r4
    1550:	80 e2       	ldi	r24, 0x20	; 32
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 58 08 	call	0x10b0 <fputc>
    1558:	81 2f       	mov	r24, r17
    155a:	18 2f       	mov	r17, r24
    155c:	11 50       	subi	r17, 0x01	; 1
    155e:	18 16       	cp	r1, r24
    1560:	b4 f3       	brlt	.-20     	; 0x154e <vfprintf+0x39e>
    1562:	21 2e       	mov	r2, r17
    1564:	c1 fe       	sbrs	r12, 1
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <vfprintf+0x3c0>
    1568:	b2 01       	movw	r22, r4
    156a:	8d e2       	ldi	r24, 0x2D	; 45
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0b c0       	rjmp	.+22     	; 0x1586 <vfprintf+0x3d6>
    1570:	c4 fe       	sbrs	r12, 4
    1572:	04 c0       	rjmp	.+8      	; 0x157c <vfprintf+0x3cc>
    1574:	b2 01       	movw	r22, r4
    1576:	8b e2       	ldi	r24, 0x2B	; 43
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <vfprintf+0x3d6>
    157c:	c5 fe       	sbrs	r12, 5
    157e:	05 c0       	rjmp	.+10     	; 0x158a <vfprintf+0x3da>
    1580:	b2 01       	movw	r22, r4
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 58 08 	call	0x10b0 <fputc>
    158a:	c6 fe       	sbrs	r12, 6
    158c:	0f c0       	rjmp	.+30     	; 0x15ac <vfprintf+0x3fc>
    158e:	b2 01       	movw	r22, r4
    1590:	80 e3       	ldi	r24, 0x30	; 48
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 58 08 	call	0x10b0 <fputc>
    1598:	38 89       	ldd	r19, Y+16	; 0x10
    159a:	30 31       	cpi	r19, 0x10	; 16
    159c:	39 f4       	brne	.+14     	; 0x15ac <vfprintf+0x3fc>
    159e:	b2 01       	movw	r22, r4
    15a0:	83 2d       	mov	r24, r3
    15a2:	99 27       	eor	r25, r25
    15a4:	87 fd       	sbrc	r24, 7
    15a6:	90 95       	com	r25
    15a8:	0e 94 58 08 	call	0x10b0 <fputc>
    15ac:	d0 fe       	sbrs	r13, 0
    15ae:	0d c0       	rjmp	.+26     	; 0x15ca <vfprintf+0x41a>
    15b0:	82 2d       	mov	r24, r2
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0x410>
    15b4:	b2 01       	movw	r22, r4
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 58 08 	call	0x10b0 <fputc>
    15be:	81 2f       	mov	r24, r17
    15c0:	18 2f       	mov	r17, r24
    15c2:	11 50       	subi	r17, 0x01	; 1
    15c4:	18 16       	cp	r1, r24
    15c6:	b4 f3       	brlt	.-20     	; 0x15b4 <vfprintf+0x404>
    15c8:	21 2e       	mov	r2, r17
    15ca:	00 23       	and	r16, r16
    15cc:	69 f0       	breq	.+26     	; 0x15e8 <vfprintf+0x438>
    15ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <vfprintf+0x42e>
    15d2:	b2 01       	movw	r22, r4
    15d4:	80 e3       	ldi	r24, 0x30	; 48
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 58 08 	call	0x10b0 <fputc>
    15dc:	21 2f       	mov	r18, r17
    15de:	12 2f       	mov	r17, r18
    15e0:	11 50       	subi	r17, 0x01	; 1
    15e2:	12 16       	cp	r1, r18
    15e4:	b4 f3       	brlt	.-20     	; 0x15d2 <vfprintf+0x422>
    15e6:	1d 87       	std	Y+13, r17	; 0x0d
    15e8:	c6 01       	movw	r24, r12
    15ea:	88 0f       	add	r24, r24
    15ec:	89 2f       	mov	r24, r25
    15ee:	88 1f       	adc	r24, r24
    15f0:	99 0b       	sbc	r25, r25
    15f2:	91 95       	neg	r25
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	c2 2e       	mov	r12, r18
    15f8:	d1 2c       	mov	r13, r1
    15fa:	c8 22       	and	r12, r24
    15fc:	d9 22       	and	r13, r25
    15fe:	80 fd       	sbrc	r24, 0
    1600:	0d c0       	rjmp	.+26     	; 0x161c <vfprintf+0x46c>
    1602:	82 2d       	mov	r24, r2
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <vfprintf+0x462>
    1606:	b2 01       	movw	r22, r4
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 58 08 	call	0x10b0 <fputc>
    1610:	81 2f       	mov	r24, r17
    1612:	18 2f       	mov	r17, r24
    1614:	11 50       	subi	r17, 0x01	; 1
    1616:	18 16       	cp	r1, r24
    1618:	b4 f3       	brlt	.-20     	; 0x1606 <vfprintf+0x456>
    161a:	21 2e       	mov	r2, r17
    161c:	83 e6       	ldi	r24, 0x63	; 99
    161e:	38 16       	cp	r3, r24
    1620:	41 f4       	brne	.+16     	; 0x1632 <vfprintf+0x482>
    1622:	b2 01       	movw	r22, r4
    1624:	88 2d       	mov	r24, r8
    1626:	99 27       	eor	r25, r25
    1628:	87 fd       	sbrc	r24, 7
    162a:	90 95       	com	r25
    162c:	0e 94 58 08 	call	0x10b0 <fputc>
    1630:	41 c0       	rjmp	.+130    	; 0x16b4 <vfprintf+0x504>
    1632:	93 e7       	ldi	r25, 0x73	; 115
    1634:	39 16       	cp	r3, r25
    1636:	91 f4       	brne	.+36     	; 0x165c <vfprintf+0x4ac>
    1638:	84 01       	movw	r16, r8
    163a:	ff 24       	eor	r15, r15
    163c:	0a c0       	rjmp	.+20     	; 0x1652 <vfprintf+0x4a2>
    163e:	f8 01       	movw	r30, r16
    1640:	81 91       	ld	r24, Z+
    1642:	8f 01       	movw	r16, r30
    1644:	b2 01       	movw	r22, r4
    1646:	99 27       	eor	r25, r25
    1648:	87 fd       	sbrc	r24, 7
    164a:	90 95       	com	r25
    164c:	0e 94 58 08 	call	0x10b0 <fputc>
    1650:	fa 94       	dec	r15
    1652:	88 89       	ldd	r24, Y+16	; 0x10
    1654:	81 95       	neg	r24
    1656:	f8 16       	cp	r15, r24
    1658:	91 f7       	brne	.-28     	; 0x163e <vfprintf+0x48e>
    165a:	16 c0       	rjmp	.+44     	; 0x1688 <vfprintf+0x4d8>
    165c:	23 e5       	ldi	r18, 0x53	; 83
    165e:	32 16       	cp	r3, r18
    1660:	19 f0       	breq	.+6      	; 0x1668 <vfprintf+0x4b8>
    1662:	0e 85       	ldd	r16, Y+14	; 0x0e
    1664:	1f 85       	ldd	r17, Y+15	; 0x0f
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <vfprintf+0x4f6>
    1668:	84 01       	movw	r16, r8
    166a:	ff 24       	eor	r15, r15
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <vfprintf+0x4d0>
    166e:	f8 01       	movw	r30, r16
    1670:	84 91       	lpm	r24, Z
    1672:	b2 01       	movw	r22, r4
    1674:	99 27       	eor	r25, r25
    1676:	0e 94 58 08 	call	0x10b0 <fputc>
    167a:	0f 5f       	subi	r16, 0xFF	; 255
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	fa 94       	dec	r15
    1680:	88 89       	ldd	r24, Y+16	; 0x10
    1682:	81 95       	neg	r24
    1684:	f8 16       	cp	r15, r24
    1686:	99 f7       	brne	.-26     	; 0x166e <vfprintf+0x4be>
    1688:	f8 89       	ldd	r31, Y+16	; 0x10
    168a:	ff 0d       	add	r31, r15
    168c:	f1 50       	subi	r31, 0x01	; 1
    168e:	f8 8b       	std	Y+16, r31	; 0x10
    1690:	48 01       	movw	r8, r16
    1692:	10 c0       	rjmp	.+32     	; 0x16b4 <vfprintf+0x504>
    1694:	f8 01       	movw	r30, r16
    1696:	82 91       	ld	r24, -Z
    1698:	8f 01       	movw	r16, r30
    169a:	b2 01       	movw	r22, r4
    169c:	99 27       	eor	r25, r25
    169e:	87 fd       	sbrc	r24, 7
    16a0:	90 95       	com	r25
    16a2:	0e 94 58 08 	call	0x10b0 <fputc>
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	08 17       	cp	r16, r24
    16ac:	19 07       	cpc	r17, r25
    16ae:	91 f7       	brne	.-28     	; 0x1694 <vfprintf+0x4e4>
    16b0:	1f 87       	std	Y+15, r17	; 0x0f
    16b2:	0e 87       	std	Y+14, r16	; 0x0e
    16b4:	cd 28       	or	r12, r13
    16b6:	89 f0       	breq	.+34     	; 0x16da <vfprintf+0x52a>
    16b8:	82 2d       	mov	r24, r2
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <vfprintf+0x518>
    16bc:	b2 01       	movw	r22, r4
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 58 08 	call	0x10b0 <fputc>
    16c6:	81 2f       	mov	r24, r17
    16c8:	18 2f       	mov	r17, r24
    16ca:	11 50       	subi	r17, 0x01	; 1
    16cc:	18 16       	cp	r1, r24
    16ce:	b4 f3       	brlt	.-20     	; 0x16bc <vfprintf+0x50c>
    16d0:	21 2e       	mov	r2, r17
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x52a>
    16d4:	b2 01       	movw	r22, r4
    16d6:	0e 94 58 08 	call	0x10b0 <fputc>
    16da:	cc 24       	eor	r12, r12
    16dc:	dd 24       	eor	r13, r13
    16de:	12 c0       	rjmp	.+36     	; 0x1704 <vfprintf+0x554>
    16e0:	f5 e2       	ldi	r31, 0x25	; 37
    16e2:	3f 16       	cp	r3, r31
    16e4:	41 f4       	brne	.+16     	; 0x16f6 <vfprintf+0x546>
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	c8 2e       	mov	r12, r24
    16ea:	d1 2c       	mov	r13, r1
    16ec:	1d 86       	std	Y+13, r1	; 0x0d
    16ee:	22 24       	eor	r2, r2
    16f0:	2a e0       	ldi	r18, 0x0A	; 10
    16f2:	28 8b       	std	Y+16, r18	; 0x10
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <vfprintf+0x554>
    16f6:	b2 01       	movw	r22, r4
    16f8:	83 2d       	mov	r24, r3
    16fa:	99 27       	eor	r25, r25
    16fc:	87 fd       	sbrc	r24, 7
    16fe:	90 95       	com	r25
    1700:	0e 94 58 08 	call	0x10b0 <fputc>
    1704:	f2 01       	movw	r30, r4
    1706:	83 81       	ldd	r24, Z+3	; 0x03
    1708:	83 ff       	sbrs	r24, 3
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <vfprintf+0x564>
    170c:	e9 89       	ldd	r30, Y+17	; 0x11
    170e:	fa 89       	ldd	r31, Y+18	; 0x12
    1710:	34 90       	lpm	r3, Z
    1712:	03 c0       	rjmp	.+6      	; 0x171a <vfprintf+0x56a>
    1714:	e9 89       	ldd	r30, Y+17	; 0x11
    1716:	fa 89       	ldd	r31, Y+18	; 0x12
    1718:	30 80       	ld	r3, Z
    171a:	33 20       	and	r3, r3
    171c:	09 f0       	breq	.+2      	; 0x1720 <vfprintf+0x570>
    171e:	72 cd       	rjmp	.-1308   	; 0x1204 <vfprintf+0x54>
    1720:	f2 01       	movw	r30, r4
    1722:	86 81       	ldd	r24, Z+6	; 0x06
    1724:	97 81       	ldd	r25, Z+7	; 0x07
    1726:	62 96       	adiw	r28, 0x12	; 18
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	bf 90       	pop	r11
    1744:	af 90       	pop	r10
    1746:	9f 90       	pop	r9
    1748:	8f 90       	pop	r8
    174a:	7f 90       	pop	r7
    174c:	6f 90       	pop	r6
    174e:	5f 90       	pop	r5
    1750:	4f 90       	pop	r4
    1752:	3f 90       	pop	r3
    1754:	2f 90       	pop	r2
    1756:	08 95       	ret

00001758 <calloc>:
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	86 9f       	mul	r24, r22
    1762:	80 01       	movw	r16, r0
    1764:	87 9f       	mul	r24, r23
    1766:	10 0d       	add	r17, r0
    1768:	96 9f       	mul	r25, r22
    176a:	10 0d       	add	r17, r0
    176c:	11 24       	eor	r1, r1
    176e:	c8 01       	movw	r24, r16
    1770:	0e 94 c8 0b 	call	0x1790 <malloc>
    1774:	ec 01       	movw	r28, r24
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	29 f0       	breq	.+10     	; 0x1784 <calloc+0x2c>
    177a:	a8 01       	movw	r20, r16
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	0e 94 d5 0c 	call	0x19aa <memset>
    1784:	ce 01       	movw	r24, r28
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	08 95       	ret

00001790 <malloc>:
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ac 01       	movw	r20, r24
    1796:	02 97       	sbiw	r24, 0x02	; 2
    1798:	10 f4       	brcc	.+4      	; 0x179e <malloc+0xe>
    179a:	42 e0       	ldi	r20, 0x02	; 2
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	a0 91 a7 02 	lds	r26, 0x02A7
    17a2:	b0 91 a8 02 	lds	r27, 0x02A8
    17a6:	fd 01       	movw	r30, r26
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	c0 e0       	ldi	r28, 0x00	; 0
    17ae:	d0 e0       	ldi	r29, 0x00	; 0
    17b0:	20 c0       	rjmp	.+64     	; 0x17f2 <malloc+0x62>
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	84 17       	cp	r24, r20
    17b8:	95 07       	cpc	r25, r21
    17ba:	69 f4       	brne	.+26     	; 0x17d6 <malloc+0x46>
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	20 97       	sbiw	r28, 0x00	; 0
    17c2:	19 f0       	breq	.+6      	; 0x17ca <malloc+0x3a>
    17c4:	9b 83       	std	Y+3, r25	; 0x03
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <malloc+0x42>
    17ca:	90 93 a8 02 	sts	0x02A8, r25
    17ce:	80 93 a7 02 	sts	0x02A7, r24
    17d2:	cf 01       	movw	r24, r30
    17d4:	32 c0       	rjmp	.+100    	; 0x183a <malloc+0xaa>
    17d6:	48 17       	cp	r20, r24
    17d8:	59 07       	cpc	r21, r25
    17da:	38 f4       	brcc	.+14     	; 0x17ea <malloc+0x5a>
    17dc:	21 15       	cp	r18, r1
    17de:	31 05       	cpc	r19, r1
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <malloc+0x58>
    17e2:	82 17       	cp	r24, r18
    17e4:	93 07       	cpc	r25, r19
    17e6:	08 f4       	brcc	.+2      	; 0x17ea <malloc+0x5a>
    17e8:	9c 01       	movw	r18, r24
    17ea:	ef 01       	movw	r28, r30
    17ec:	02 80       	ldd	r0, Z+2	; 0x02
    17ee:	f3 81       	ldd	r31, Z+3	; 0x03
    17f0:	e0 2d       	mov	r30, r0
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	f1 f6       	brne	.-68     	; 0x17b2 <malloc+0x22>
    17f6:	21 15       	cp	r18, r1
    17f8:	31 05       	cpc	r19, r1
    17fa:	89 f1       	breq	.+98     	; 0x185e <malloc+0xce>
    17fc:	c9 01       	movw	r24, r18
    17fe:	84 1b       	sub	r24, r20
    1800:	95 0b       	sbc	r25, r21
    1802:	04 97       	sbiw	r24, 0x04	; 4
    1804:	08 f4       	brcc	.+2      	; 0x1808 <malloc+0x78>
    1806:	a9 01       	movw	r20, r18
    1808:	e0 e0       	ldi	r30, 0x00	; 0
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	26 c0       	rjmp	.+76     	; 0x185a <malloc+0xca>
    180e:	8d 91       	ld	r24, X+
    1810:	9c 91       	ld	r25, X
    1812:	11 97       	sbiw	r26, 0x01	; 1
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	e9 f4       	brne	.+58     	; 0x1854 <malloc+0xc4>
    181a:	48 17       	cp	r20, r24
    181c:	59 07       	cpc	r21, r25
    181e:	79 f4       	brne	.+30     	; 0x183e <malloc+0xae>
    1820:	ed 01       	movw	r28, r26
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	19 f0       	breq	.+6      	; 0x1830 <malloc+0xa0>
    182a:	93 83       	std	Z+3, r25	; 0x03
    182c:	82 83       	std	Z+2, r24	; 0x02
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <malloc+0xa8>
    1830:	90 93 a8 02 	sts	0x02A8, r25
    1834:	80 93 a7 02 	sts	0x02A7, r24
    1838:	cd 01       	movw	r24, r26
    183a:	02 96       	adiw	r24, 0x02	; 2
    183c:	49 c0       	rjmp	.+146    	; 0x18d0 <malloc+0x140>
    183e:	84 1b       	sub	r24, r20
    1840:	95 0b       	sbc	r25, r21
    1842:	fd 01       	movw	r30, r26
    1844:	e8 0f       	add	r30, r24
    1846:	f9 1f       	adc	r31, r25
    1848:	41 93       	st	Z+, r20
    184a:	51 93       	st	Z+, r21
    184c:	02 97       	sbiw	r24, 0x02	; 2
    184e:	8d 93       	st	X+, r24
    1850:	9c 93       	st	X, r25
    1852:	3a c0       	rjmp	.+116    	; 0x18c8 <malloc+0x138>
    1854:	fd 01       	movw	r30, r26
    1856:	a2 81       	ldd	r26, Z+2	; 0x02
    1858:	b3 81       	ldd	r27, Z+3	; 0x03
    185a:	10 97       	sbiw	r26, 0x00	; 0
    185c:	c1 f6       	brne	.-80     	; 0x180e <malloc+0x7e>
    185e:	80 91 a5 02 	lds	r24, 0x02A5
    1862:	90 91 a6 02 	lds	r25, 0x02A6
    1866:	89 2b       	or	r24, r25
    1868:	41 f4       	brne	.+16     	; 0x187a <malloc+0xea>
    186a:	80 91 8b 00 	lds	r24, 0x008B
    186e:	90 91 8c 00 	lds	r25, 0x008C
    1872:	90 93 a6 02 	sts	0x02A6, r25
    1876:	80 93 a5 02 	sts	0x02A5, r24
    187a:	20 91 89 00 	lds	r18, 0x0089
    187e:	30 91 8a 00 	lds	r19, 0x008A
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	41 f4       	brne	.+16     	; 0x1898 <malloc+0x108>
    1888:	2d b7       	in	r18, 0x3d	; 61
    188a:	3e b7       	in	r19, 0x3e	; 62
    188c:	80 91 8d 00 	lds	r24, 0x008D
    1890:	90 91 8e 00 	lds	r25, 0x008E
    1894:	28 1b       	sub	r18, r24
    1896:	39 0b       	sbc	r19, r25
    1898:	e0 91 a5 02 	lds	r30, 0x02A5
    189c:	f0 91 a6 02 	lds	r31, 0x02A6
    18a0:	2e 1b       	sub	r18, r30
    18a2:	3f 0b       	sbc	r19, r31
    18a4:	24 17       	cp	r18, r20
    18a6:	35 07       	cpc	r19, r21
    18a8:	88 f0       	brcs	.+34     	; 0x18cc <malloc+0x13c>
    18aa:	ca 01       	movw	r24, r20
    18ac:	02 96       	adiw	r24, 0x02	; 2
    18ae:	28 17       	cp	r18, r24
    18b0:	39 07       	cpc	r19, r25
    18b2:	60 f0       	brcs	.+24     	; 0x18cc <malloc+0x13c>
    18b4:	cf 01       	movw	r24, r30
    18b6:	84 0f       	add	r24, r20
    18b8:	95 1f       	adc	r25, r21
    18ba:	02 96       	adiw	r24, 0x02	; 2
    18bc:	90 93 a6 02 	sts	0x02A6, r25
    18c0:	80 93 a5 02 	sts	0x02A5, r24
    18c4:	41 93       	st	Z+, r20
    18c6:	51 93       	st	Z+, r21
    18c8:	cf 01       	movw	r24, r30
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <malloc+0x140>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <free>:
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <free+0xa>
    18de:	4e c0       	rjmp	.+156    	; 0x197c <free+0xa6>
    18e0:	ec 01       	movw	r28, r24
    18e2:	22 97       	sbiw	r28, 0x02	; 2
    18e4:	1b 82       	std	Y+3, r1	; 0x03
    18e6:	1a 82       	std	Y+2, r1	; 0x02
    18e8:	a0 91 a7 02 	lds	r26, 0x02A7
    18ec:	b0 91 a8 02 	lds	r27, 0x02A8
    18f0:	10 97       	sbiw	r26, 0x00	; 0
    18f2:	11 f1       	breq	.+68     	; 0x1938 <free+0x62>
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <free+0x26>
    18fa:	dc 01       	movw	r26, r24
    18fc:	ac 17       	cp	r26, r28
    18fe:	bd 07       	cpc	r27, r29
    1900:	00 f1       	brcs	.+64     	; 0x1942 <free+0x6c>
    1902:	bb 83       	std	Y+3, r27	; 0x03
    1904:	aa 83       	std	Y+2, r26	; 0x02
    1906:	fe 01       	movw	r30, r28
    1908:	21 91       	ld	r18, Z+
    190a:	31 91       	ld	r19, Z+
    190c:	e2 0f       	add	r30, r18
    190e:	f3 1f       	adc	r31, r19
    1910:	ea 17       	cp	r30, r26
    1912:	fb 07       	cpc	r31, r27
    1914:	71 f4       	brne	.+28     	; 0x1932 <free+0x5c>
    1916:	8d 91       	ld	r24, X+
    1918:	9c 91       	ld	r25, X
    191a:	11 97       	sbiw	r26, 0x01	; 1
    191c:	28 0f       	add	r18, r24
    191e:	39 1f       	adc	r19, r25
    1920:	2e 5f       	subi	r18, 0xFE	; 254
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	39 83       	std	Y+1, r19	; 0x01
    1926:	28 83       	st	Y, r18
    1928:	fd 01       	movw	r30, r26
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	9b 83       	std	Y+3, r25	; 0x03
    1930:	8a 83       	std	Y+2, r24	; 0x02
    1932:	41 15       	cp	r20, r1
    1934:	51 05       	cpc	r21, r1
    1936:	59 f4       	brne	.+22     	; 0x194e <free+0x78>
    1938:	d0 93 a8 02 	sts	0x02A8, r29
    193c:	c0 93 a7 02 	sts	0x02A7, r28
    1940:	1d c0       	rjmp	.+58     	; 0x197c <free+0xa6>
    1942:	fd 01       	movw	r30, r26
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	ad 01       	movw	r20, r26
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	b1 f6       	brne	.-84     	; 0x18fa <free+0x24>
    194e:	fa 01       	movw	r30, r20
    1950:	d3 83       	std	Z+3, r29	; 0x03
    1952:	c2 83       	std	Z+2, r28	; 0x02
    1954:	21 91       	ld	r18, Z+
    1956:	31 91       	ld	r19, Z+
    1958:	e2 0f       	add	r30, r18
    195a:	f3 1f       	adc	r31, r19
    195c:	ec 17       	cp	r30, r28
    195e:	fd 07       	cpc	r31, r29
    1960:	69 f4       	brne	.+26     	; 0x197c <free+0xa6>
    1962:	88 81       	ld	r24, Y
    1964:	99 81       	ldd	r25, Y+1	; 0x01
    1966:	28 0f       	add	r18, r24
    1968:	39 1f       	adc	r19, r25
    196a:	2e 5f       	subi	r18, 0xFE	; 254
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	fa 01       	movw	r30, r20
    1970:	31 83       	std	Z+1, r19	; 0x01
    1972:	20 83       	st	Z, r18
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	93 83       	std	Z+3, r25	; 0x03
    197a:	82 83       	std	Z+2, r24	; 0x02
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <strlen_P>:
    1982:	fc 01       	movw	r30, r24
    1984:	05 90       	lpm	r0, Z+
    1986:	00 20       	and	r0, r0
    1988:	e9 f7       	brne	.-6      	; 0x1984 <strlen_P+0x2>
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	8e 0f       	add	r24, r30
    1990:	9f 1f       	adc	r25, r31
    1992:	08 95       	ret

00001994 <strnlen_P>:
    1994:	fc 01       	movw	r30, r24
    1996:	05 90       	lpm	r0, Z+
    1998:	61 50       	subi	r22, 0x01	; 1
    199a:	70 40       	sbci	r23, 0x00	; 0
    199c:	01 10       	cpse	r0, r1
    199e:	d8 f7       	brcc	.-10     	; 0x1996 <strnlen_P+0x2>
    19a0:	80 95       	com	r24
    19a2:	90 95       	com	r25
    19a4:	8e 0f       	add	r24, r30
    19a6:	9f 1f       	adc	r25, r31
    19a8:	08 95       	ret

000019aa <memset>:
    19aa:	dc 01       	movw	r26, r24
    19ac:	40 ff       	sbrs	r20, 0
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <memset+0xc>
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <memset+0xa>
    19b2:	6d 93       	st	X+, r22
    19b4:	6d 93       	st	X+, r22
    19b6:	42 50       	subi	r20, 0x02	; 2
    19b8:	50 40       	sbci	r21, 0x00	; 0
    19ba:	d8 f7       	brcc	.-10     	; 0x19b2 <memset+0x8>
    19bc:	08 95       	ret

000019be <strnlen>:
    19be:	fc 01       	movw	r30, r24
    19c0:	61 50       	subi	r22, 0x01	; 1
    19c2:	70 40       	sbci	r23, 0x00	; 0
    19c4:	01 90       	ld	r0, Z+
    19c6:	01 10       	cpse	r0, r1
    19c8:	d8 f7       	brcc	.-10     	; 0x19c0 <strnlen+0x2>
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	8e 0f       	add	r24, r30
    19d0:	9f 1f       	adc	r25, r31
    19d2:	08 95       	ret

000019d4 <IntProlog>:
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	bf 93       	push	r27
    19da:	af 93       	push	r26
    19dc:	9f 93       	push	r25
    19de:	d2 e0       	ldi	r29, 0x02	; 2
    19e0:	c4 e9       	ldi	r28, 0x94	; 148
    19e2:	9f b7       	in	r25, 0x3f	; 63
    19e4:	ae 81       	ldd	r26, Y+6	; 0x06
    19e6:	af 5f       	subi	r26, 0xFF	; 255
    19e8:	ae 83       	std	Y+6, r26	; 0x06
    19ea:	60 f0       	brcs	.+24     	; 0x1a04 <SaveContext>
    19ec:	aa 81       	ldd	r26, Y+2	; 0x02
    19ee:	bb 81       	ldd	r27, Y+3	; 0x03
    19f0:	ba 2b       	or	r27, r26
    19f2:	41 f4       	brne	.+16     	; 0x1a04 <SaveContext>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	fe 81       	ldd	r31, Y+6	; 0x06
    19fa:	ef 81       	ldd	r30, Y+7	; 0x07
    19fc:	29 96       	adiw	r28, 0x09	; 9
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	09 94       	ijmp

00001a04 <SaveContext>:
    1a04:	8f 93       	push	r24
    1a06:	7f 93       	push	r23
    1a08:	6f 93       	push	r22
    1a0a:	5f 93       	push	r21
    1a0c:	4f 93       	push	r20
    1a0e:	3f 93       	push	r19
    1a10:	2f 93       	push	r18
    1a12:	1f 93       	push	r17
    1a14:	0f 93       	push	r16
    1a16:	ff 92       	push	r15
    1a18:	ef 92       	push	r14
    1a1a:	df 92       	push	r13
    1a1c:	cf 92       	push	r12
    1a1e:	bf 92       	push	r11
    1a20:	af 92       	push	r10
    1a22:	9f 92       	push	r9
    1a24:	8f 92       	push	r8
    1a26:	7f 92       	push	r7
    1a28:	6f 92       	push	r6
    1a2a:	5f 92       	push	r5
    1a2c:	4f 92       	push	r4
    1a2e:	3f 92       	push	r3
    1a30:	2f 92       	push	r2
    1a32:	1f 92       	push	r1
    1a34:	0f 92       	push	r0
    1a36:	9f 93       	push	r25
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a3e:	39 a1       	ldd	r19, Y+33	; 0x21
    1a40:	48 a1       	ldd	r20, Y+32	; 0x20
    1a42:	e8 a3       	std	Y+32, r30	; 0x20
    1a44:	f9 a3       	std	Y+33, r31	; 0x21
    1a46:	70 f0       	brcs	.+28     	; 0x1a64 <AlreadyInKernel>
    1a48:	f2 e0       	ldi	r31, 0x02	; 2
    1a4a:	e4 e9       	ldi	r30, 0x94	; 148
    1a4c:	d3 81       	ldd	r29, Z+3	; 0x03
    1a4e:	c2 81       	ldd	r28, Z+2	; 0x02
    1a50:	be b7       	in	r27, 0x3e	; 62
    1a52:	ad b7       	in	r26, 0x3d	; 61
    1a54:	bd 83       	std	Y+5, r27	; 0x05
    1a56:	ac 83       	std	Y+4, r26	; 0x04
    1a58:	24 81       	ldd	r18, Z+4	; 0x04
    1a5a:	2d bf       	out	0x3d, r18	; 61
    1a5c:	25 81       	ldd	r18, Z+5	; 0x05
    1a5e:	2e bf       	out	0x3e, r18	; 62
    1a60:	ca 2f       	mov	r28, r26
    1a62:	db 2f       	mov	r29, r27

00001a64 <AlreadyInKernel>:
    1a64:	11 24       	eor	r1, r1
    1a66:	e3 2f       	mov	r30, r19
    1a68:	f4 2f       	mov	r31, r20
    1a6a:	09 94       	ijmp

00001a6c <Epilog>:
    1a6c:	ef 91       	pop	r30
    1a6e:	ef 91       	pop	r30

00001a70 <_Epilog>:
    1a70:	e4 e9       	ldi	r30, 0x94	; 148
    1a72:	f2 e0       	ldi	r31, 0x02	; 2
    1a74:	f8 94       	cli
    1a76:	06 81       	ldd	r16, Z+6	; 0x06
    1a78:	0a 95       	dec	r16
    1a7a:	06 83       	std	Z+6, r16	; 0x06
    1a7c:	54 f4       	brge	.+20     	; 0x1a92 <SkipTaskSwap>
    1a7e:	d1 81       	ldd	r29, Z+1	; 0x01
    1a80:	c0 81       	ld	r28, Z
    1a82:	d3 83       	std	Z+3, r29	; 0x03
    1a84:	c2 83       	std	Z+2, r28	; 0x02
    1a86:	20 96       	adiw	r28, 0x00	; 0
    1a88:	39 f1       	breq	.+78     	; 0x1ad8 <_IdleTask>
    1a8a:	bd 81       	ldd	r27, Y+5	; 0x05
    1a8c:	ac 81       	ldd	r26, Y+4	; 0x04
    1a8e:	ad bf       	out	0x3d, r26	; 61
    1a90:	be bf       	out	0x3e, r27	; 62

00001a92 <SkipTaskSwap>:
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	2f 90       	pop	r2
    1a9c:	3f 90       	pop	r3
    1a9e:	4f 90       	pop	r4
    1aa0:	5f 90       	pop	r5
    1aa2:	6f 90       	pop	r6
    1aa4:	7f 90       	pop	r7
    1aa6:	8f 90       	pop	r8
    1aa8:	9f 90       	pop	r9
    1aaa:	af 90       	pop	r10
    1aac:	bf 90       	pop	r11
    1aae:	cf 90       	pop	r12
    1ab0:	df 90       	pop	r13
    1ab2:	ef 90       	pop	r14
    1ab4:	ff 90       	pop	r15
    1ab6:	0f 91       	pop	r16
    1ab8:	1f 91       	pop	r17
    1aba:	2f 91       	pop	r18
    1abc:	3f 91       	pop	r19
    1abe:	4f 91       	pop	r20
    1ac0:	5f 91       	pop	r21
    1ac2:	6f 91       	pop	r22
    1ac4:	7f 91       	pop	r23
    1ac6:	8f 91       	pop	r24
    1ac8:	9f 91       	pop	r25
    1aca:	af 91       	pop	r26
    1acc:	bf 91       	pop	r27
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	ef 91       	pop	r30
    1ad4:	ff 91       	pop	r31
    1ad6:	18 95       	reti

00001ad8 <_IdleTask>:
    1ad8:	78 94       	sei
    1ada:	88 95       	sleep

00001adc <snooze>:
    1adc:	fd cf       	rjmp	.-6      	; 0x1ad8 <_IdleTask>

00001ade <AvrXSetKernelStack>:
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	80 50       	subi	r24, 0x00	; 0
    1ae4:	90 40       	sbci	r25, 0x00	; 0
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <sks1>
    1ae8:	8d b7       	in	r24, 0x3d	; 61
    1aea:	9e b7       	in	r25, 0x3e	; 62

00001aec <sks1>:
    1aec:	80 93 98 02 	sts	0x0298, r24
    1af0:	90 93 99 02 	sts	0x0299, r25
    1af4:	09 94       	ijmp

00001af6 <AvrXRunTask>:
    1af6:	01 d0       	rcall	.+2      	; 0x1afa <AvrXInitTask>
    1af8:	23 c0       	rjmp	.+70     	; 0x1b40 <AvrXResume>

00001afa <AvrXInitTask>:
    1afa:	e8 2f       	mov	r30, r24
    1afc:	f9 2f       	mov	r31, r25
    1afe:	1d d0       	rcall	.+58     	; 0x1b3a <lpm_inc>
    1b00:	a0 2d       	mov	r26, r0
    1b02:	1b d0       	rcall	.+54     	; 0x1b3a <lpm_inc>
    1b04:	b0 2d       	mov	r27, r0
    1b06:	19 d0       	rcall	.+50     	; 0x1b3a <lpm_inc>
    1b08:	0c 92       	st	X, r0
    1b0a:	17 d0       	rcall	.+46     	; 0x1b3a <lpm_inc>
    1b0c:	0e 92       	st	-X, r0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	51 e2       	ldi	r21, 0x21	; 33

00001b14 <PushRegisters>:
    1b14:	4e 93       	st	-X, r20
    1b16:	5a 95       	dec	r21
    1b18:	e9 f7       	brne	.-6      	; 0x1b14 <PushRegisters>
    1b1a:	11 97       	sbiw	r26, 0x01	; 1
    1b1c:	0e d0       	rcall	.+28     	; 0x1b3a <lpm_inc>
    1b1e:	80 2d       	mov	r24, r0
    1b20:	0c d0       	rcall	.+24     	; 0x1b3a <lpm_inc>
    1b22:	90 2d       	mov	r25, r0
    1b24:	0a d0       	rcall	.+20     	; 0x1b3a <lpm_inc>
    1b26:	e8 2f       	mov	r30, r24
    1b28:	f9 2f       	mov	r31, r25
    1b2a:	a4 83       	std	Z+4, r26	; 0x04
    1b2c:	b5 83       	std	Z+5, r27	; 0x05
    1b2e:	03 82       	std	Z+3, r0	; 0x03
    1b30:	a0 e6       	ldi	r26, 0x60	; 96
    1b32:	a2 83       	std	Z+2, r26	; 0x02
    1b34:	41 83       	std	Z+1, r20	; 0x01
    1b36:	40 83       	st	Z, r20
    1b38:	08 95       	ret

00001b3a <lpm_inc>:
    1b3a:	c8 95       	lpm
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	08 95       	ret

00001b40 <AvrXResume>:
    1b40:	f8 94       	cli
    1b42:	48 df       	rcall	.-368    	; 0x19d4 <IntProlog>
    1b44:	78 94       	sei
    1b46:	e8 2f       	mov	r30, r24
    1b48:	f9 2f       	mov	r31, r25
    1b4a:	22 81       	ldd	r18, Z+2	; 0x02
    1b4c:	2f 7d       	andi	r18, 0xDF	; 223
    1b4e:	22 83       	std	Z+2, r18	; 0x02
    1b50:	26 ff       	sbrs	r18, 6
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <ar00>
    1b54:	2f 7b       	andi	r18, 0xBF	; 191
    1b56:	22 83       	std	Z+2, r18	; 0x02
    1b58:	01 d0       	rcall	.+2      	; 0x1b5c <_QueuePid>

00001b5a <ar00>:
    1b5a:	8a cf       	rjmp	.-236    	; 0x1a70 <_Epilog>

00001b5c <_QueuePid>:
    1b5c:	e8 2f       	mov	r30, r24
    1b5e:	f9 2f       	mov	r31, r25
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	22 81       	ldd	r18, Z+2	; 0x02
    1b64:	20 73       	andi	r18, 0x30	; 48
    1b66:	e1 f4       	brne	.+56     	; 0x1ba0 <_qpSUSPEND>
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	43 81       	ldd	r20, Z+3	; 0x03
    1b6e:	c4 e9       	ldi	r28, 0x94	; 148
    1b70:	d2 e0       	ldi	r29, 0x02	; 2
    1b72:	2f b7       	in	r18, 0x3f	; 63
    1b74:	f8 94       	cli

00001b76 <_qp00>:
    1b76:	33 95       	inc	r19
    1b78:	ec 2f       	mov	r30, r28
    1b7a:	fd 2f       	mov	r31, r29
    1b7c:	c0 81       	ld	r28, Z
    1b7e:	d1 81       	ldd	r29, Z+1	; 0x01
    1b80:	20 96       	adiw	r28, 0x00	; 0
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <_qp01>
    1b84:	5b 81       	ldd	r21, Y+3	; 0x03
    1b86:	45 17       	cp	r20, r21
    1b88:	b0 f7       	brcc	.-20     	; 0x1b76 <_qp00>

00001b8a <_qp01>:
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
    1b8e:	f9 2f       	mov	r31, r25
    1b90:	e8 2f       	mov	r30, r24
    1b92:	d1 83       	std	Z+1, r29	; 0x01
    1b94:	c0 83       	st	Z, r28
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	83 2f       	mov	r24, r19
    1b9c:	2f bf       	out	0x3f, r18	; 63
    1b9e:	08 95       	ret

00001ba0 <_qpSUSPEND>:
    1ba0:	83 2f       	mov	r24, r19
    1ba2:	20 64       	ori	r18, 0x40	; 64
    1ba4:	22 83       	std	Z+2, r18	; 0x02
    1ba6:	08 95       	ret

00001ba8 <AvrXWaitMessageAck>:
    1ba8:	8e 5f       	subi	r24, 0xFE	; 254
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255

00001bac <AvrXWaitSemaphore>:
    1bac:	e8 2f       	mov	r30, r24
    1bae:	f9 2f       	mov	r31, r25
    1bb0:	f8 94       	cli
    1bb2:	20 81       	ld	r18, Z
    1bb4:	31 81       	ldd	r19, Z+1	; 0x01
    1bb6:	21 50       	subi	r18, 0x01	; 1
    1bb8:	30 40       	sbci	r19, 0x00	; 0
    1bba:	19 f4       	brne	.+6      	; 0x1bc2 <aws01>
    1bbc:	20 83       	st	Z, r18
    1bbe:	31 83       	std	Z+1, r19	; 0x01
    1bc0:	18 95       	reti

00001bc2 <aws01>:
    1bc2:	08 df       	rcall	.-496    	; 0x19d4 <IntProlog>
    1bc4:	e4 e9       	ldi	r30, 0x94	; 148
    1bc6:	f2 e0       	ldi	r31, 0x02	; 2
    1bc8:	73 81       	ldd	r23, Z+3	; 0x03
    1bca:	62 81       	ldd	r22, Z+2	; 0x02
    1bcc:	3c d0       	rcall	.+120    	; 0x1c46 <_RemoveObject>
    1bce:	e8 2f       	mov	r30, r24
    1bd0:	f9 2f       	mov	r31, r25
    1bd2:	2b d0       	rcall	.+86     	; 0x1c2a <_AppendObject>
    1bd4:	4d cf       	rjmp	.-358    	; 0x1a70 <_Epilog>

00001bd6 <AvrXAckMessage>:
    1bd6:	8e 5f       	subi	r24, 0xFE	; 254
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255

00001bda <AvrXSetSemaphore>:
    1bda:	0c d0       	rcall	.+24     	; 0x1bf4 <AvrXIntSetSemaphore>
    1bdc:	90 91 9a 02 	lds	r25, 0x029A
    1be0:	93 95       	inc	r25
    1be2:	89 2b       	or	r24, r25
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <axss0>
    1be6:	08 95       	ret

00001be8 <axss0>:
    1be8:	f8 94       	cli
    1bea:	f4 de       	rcall	.-536    	; 0x19d4 <IntProlog>
    1bec:	78 94       	sei
    1bee:	40 cf       	rjmp	.-384    	; 0x1a70 <_Epilog>

00001bf0 <AvrXIntSetObjectSemaphore>:
    1bf0:	8e 5f       	subi	r24, 0xFE	; 254
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255

00001bf4 <AvrXIntSetSemaphore>:
    1bf4:	e8 2f       	mov	r30, r24
    1bf6:	f9 2f       	mov	r31, r25
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	2f b7       	in	r18, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	60 81       	ld	r22, Z
    1c04:	86 17       	cp	r24, r22
    1c06:	97 07       	cpc	r25, r23
    1c08:	28 f0       	brcs	.+10     	; 0x1c14 <aiss00>
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01

00001c0e <BogusSemaphore>:
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	2f bf       	out	0x3f, r18	; 63
    1c12:	08 95       	ret

00001c14 <aiss00>:
    1c14:	8f e5       	ldi	r24, 0x5F	; 95
    1c16:	86 17       	cp	r24, r22
    1c18:	97 07       	cpc	r25, r23
    1c1a:	c8 f7       	brcc	.-14     	; 0x1c0e <BogusSemaphore>
    1c1c:	23 d0       	rcall	.+70     	; 0x1c64 <_RemoveObjectAt>
    1c1e:	2f bf       	out	0x3f, r18	; 63
    1c20:	86 2f       	mov	r24, r22
    1c22:	97 2f       	mov	r25, r23
    1c24:	9b cf       	rjmp	.-202    	; 0x1b5c <_QueuePid>

00001c26 <_ao00>:
    1c26:	e2 2f       	mov	r30, r18
    1c28:	f3 2f       	mov	r31, r19

00001c2a <_AppendObject>:
    1c2a:	20 81       	ld	r18, Z
    1c2c:	31 81       	ldd	r19, Z+1	; 0x01
    1c2e:	20 50       	subi	r18, 0x00	; 0
    1c30:	30 40       	sbci	r19, 0x00	; 0
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <_ao00>
    1c34:	71 83       	std	Z+1, r23	; 0x01
    1c36:	60 83       	st	Z, r22
    1c38:	f7 2f       	mov	r31, r23
    1c3a:	e6 2f       	mov	r30, r22
    1c3c:	31 83       	std	Z+1, r19	; 0x01
    1c3e:	20 83       	st	Z, r18
    1c40:	08 95       	ret

00001c42 <_ro00>:
    1c42:	f3 2f       	mov	r31, r19
    1c44:	e2 2f       	mov	r30, r18

00001c46 <_RemoveObject>:
    1c46:	20 81       	ld	r18, Z
    1c48:	31 81       	ldd	r19, Z+1	; 0x01
    1c4a:	62 17       	cp	r22, r18
    1c4c:	73 07       	cpc	r23, r19
    1c4e:	51 f0       	breq	.+20     	; 0x1c64 <_RemoveObjectAt>
    1c50:	20 50       	subi	r18, 0x00	; 0
    1c52:	30 40       	sbci	r19, 0x00	; 0
    1c54:	b1 f7       	brne	.-20     	; 0x1c42 <_ro00>
    1c56:	08 95       	ret

00001c58 <_RemoveFirstObject>:
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	60 50       	subi	r22, 0x00	; 0
    1c5e:	70 40       	sbci	r23, 0x00	; 0
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <_RemoveObjectAt>
    1c62:	08 95       	ret

00001c64 <_RemoveObjectAt>:
    1c64:	4c 2f       	mov	r20, r28
    1c66:	5d 2f       	mov	r21, r29
    1c68:	c6 2f       	mov	r28, r22
    1c6a:	d7 2f       	mov	r29, r23
    1c6c:	79 81       	ldd	r23, Y+1	; 0x01
    1c6e:	68 81       	ld	r22, Y
    1c70:	71 83       	std	Z+1, r23	; 0x01
    1c72:	60 83       	st	Z, r22
    1c74:	e6 2f       	mov	r30, r22
    1c76:	f7 2f       	mov	r31, r23
    1c78:	66 27       	eor	r22, r22
    1c7a:	68 83       	st	Y, r22
    1c7c:	69 83       	std	Y+1, r22	; 0x01
    1c7e:	7d 2f       	mov	r23, r29
    1c80:	6c 2f       	mov	r22, r28
    1c82:	c4 2f       	mov	r28, r20
    1c84:	d5 2f       	mov	r29, r21
    1c86:	98 94       	clz
    1c88:	08 95       	ret

00001c8a <AvrXTestMessageAck>:
    1c8a:	8e 5f       	subi	r24, 0xFE	; 254
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255

00001c8e <AvrXIntTestSemaphore>:
    1c8e:	f9 2f       	mov	r31, r25
    1c90:	e8 2f       	mov	r30, r24
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	f8 94       	cli
    1c98:	20 81       	ld	r18, Z
    1c9a:	31 81       	ldd	r19, Z+1	; 0x01
    1c9c:	28 1b       	sub	r18, r24
    1c9e:	39 0b       	sbc	r19, r25
    1ca0:	21 f0       	breq	.+8      	; 0x1caa <aits01>
    1ca2:	08 f0       	brcs	.+2      	; 0x1ca6 <aits00>
    1ca4:	8e 5f       	subi	r24, 0xFE	; 254

00001ca6 <aits00>:
    1ca6:	81 50       	subi	r24, 0x01	; 1
    1ca8:	18 95       	reti

00001caa <aits01>:
    1caa:	21 83       	std	Z+1, r18	; 0x01
    1cac:	30 83       	st	Z, r19
    1cae:	18 95       	reti

00001cb0 <AvrXDelay>:
    1cb0:	01 d0       	rcall	.+2      	; 0x1cb4 <AvrXStartTimer>
    1cb2:	7a cf       	rjmp	.-268    	; 0x1ba8 <AvrXWaitMessageAck>

00001cb4 <AvrXStartTimer>:
    1cb4:	60 50       	subi	r22, 0x00	; 0
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <CountNotZero>
    1cba:	8d cf       	rjmp	.-230    	; 0x1bd6 <AvrXAckMessage>

00001cbc <CountNotZero>:
    1cbc:	f8 94       	cli
    1cbe:	8a de       	rcall	.-748    	; 0x19d4 <IntProlog>
    1cc0:	78 94       	sei
    1cc2:	68 d0       	rcall	.+208    	; 0x1d94 <AvrXIntResetObjectSemaphore>
    1cc4:	ec e9       	ldi	r30, 0x9C	; 156
    1cc6:	f2 e0       	ldi	r31, 0x02	; 2
    1cc8:	f8 94       	cli
    1cca:	20 91 9e 02 	lds	r18, 0x029E
    1cce:	2a 95       	dec	r18
    1cd0:	20 93 9e 02 	sts	0x029E, r18
    1cd4:	78 94       	sei

00001cd6 <ast00>:
    1cd6:	ce 2f       	mov	r28, r30
    1cd8:	df 2f       	mov	r29, r31
    1cda:	e8 81       	ld	r30, Y
    1cdc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cde:	30 96       	adiw	r30, 0x00	; 0
    1ce0:	59 f0       	breq	.+22     	; 0x1cf8 <ast01>
    1ce2:	24 81       	ldd	r18, Z+4	; 0x04
    1ce4:	35 81       	ldd	r19, Z+5	; 0x05
    1ce6:	62 1b       	sub	r22, r18
    1ce8:	73 0b       	sbc	r23, r19
    1cea:	a8 f7       	brcc	.-22     	; 0x1cd6 <ast00>
    1cec:	62 0f       	add	r22, r18
    1cee:	73 1f       	adc	r23, r19
    1cf0:	26 1b       	sub	r18, r22
    1cf2:	37 0b       	sbc	r19, r23
    1cf4:	24 83       	std	Z+4, r18	; 0x04
    1cf6:	35 83       	std	Z+5, r19	; 0x05

00001cf8 <ast01>:
    1cf8:	99 83       	std	Y+1, r25	; 0x01
    1cfa:	88 83       	st	Y, r24
    1cfc:	d9 2f       	mov	r29, r25
    1cfe:	c8 2f       	mov	r28, r24
    1d00:	f9 83       	std	Y+1, r31	; 0x01
    1d02:	e8 83       	st	Y, r30
    1d04:	6c 83       	std	Y+4, r22	; 0x04
    1d06:	7d 83       	std	Y+5, r23	; 0x05
    1d08:	3c d0       	rcall	.+120    	; 0x1d82 <TimerHandler>
    1d0a:	b2 ce       	rjmp	.-668    	; 0x1a70 <_Epilog>

00001d0c <AvrXTimerHandler>:
    1d0c:	f8 94       	cli
    1d0e:	20 91 9e 02 	lds	r18, 0x029E
    1d12:	21 50       	subi	r18, 0x01	; 1
    1d14:	20 93 9e 02 	sts	0x029E, r18
    1d18:	78 94       	sei
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <ati00>
    1d1c:	08 95       	ret

00001d1e <ati00>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	af 93       	push	r26
    1d24:	bf 93       	push	r27
    1d26:	d0 91 9d 02 	lds	r29, 0x029D
    1d2a:	c0 91 9c 02 	lds	r28, 0x029C
    1d2e:	20 96       	adiw	r28, 0x00	; 0
    1d30:	21 f1       	breq	.+72     	; 0x1d7a <ati02>
    1d32:	fd 81       	ldd	r31, Y+5	; 0x05
    1d34:	ec 81       	ldd	r30, Y+4	; 0x04
    1d36:	31 97       	sbiw	r30, 0x01	; 1
    1d38:	fd 83       	std	Y+5, r31	; 0x05
    1d3a:	ec 83       	std	Y+4, r30	; 0x04

00001d3c <ati01>:
    1d3c:	ef 2b       	or	r30, r31
    1d3e:	e9 f4       	brne	.+58     	; 0x1d7a <ati02>
    1d40:	a8 81       	ld	r26, Y
    1d42:	b9 81       	ldd	r27, Y+1	; 0x01
    1d44:	b0 93 9d 02 	sts	0x029D, r27
    1d48:	a0 93 9c 02 	sts	0x029C, r26
    1d4c:	f9 83       	std	Y+1, r31	; 0x01
    1d4e:	e8 83       	st	Y, r30
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	82 50       	subi	r24, 0x02	; 2
    1d56:	90 40       	sbci	r25, 0x00	; 0
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <ati04>
    1d5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5e:	7d 2f       	mov	r23, r29
    1d60:	6c 2f       	mov	r22, r28
    1d62:	2e d0       	rcall	.+92     	; 0x1dc0 <AvrXIntSendMessage>
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <ati03>

00001d66 <ati04>:
    1d66:	8c 2f       	mov	r24, r28
    1d68:	9d 2f       	mov	r25, r29
    1d6a:	42 df       	rcall	.-380    	; 0x1bf0 <AvrXIntSetObjectSemaphore>

00001d6c <ati03>:
    1d6c:	10 96       	adiw	r26, 0x00	; 0
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <ati02>
    1d70:	ca 2f       	mov	r28, r26
    1d72:	db 2f       	mov	r29, r27
    1d74:	fd 81       	ldd	r31, Y+5	; 0x05
    1d76:	ec 81       	ldd	r30, Y+4	; 0x04
    1d78:	e1 cf       	rjmp	.-62     	; 0x1d3c <ati01>

00001d7a <ati02>:
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28

00001d82 <TimerHandler>:
    1d82:	f8 94       	cli
    1d84:	20 91 9e 02 	lds	r18, 0x029E
    1d88:	23 95       	inc	r18
    1d8a:	20 93 9e 02 	sts	0x029E, r18
    1d8e:	78 94       	sei
    1d90:	31 f6       	brne	.-116    	; 0x1d1e <ati00>
    1d92:	08 95       	ret

00001d94 <AvrXIntResetObjectSemaphore>:
    1d94:	e8 2f       	mov	r30, r24
    1d96:	f9 2f       	mov	r31, r25
    1d98:	32 96       	adiw	r30, 0x02	; 2
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <ars00>

00001d9c <AvrXIntResetSemaphore>:
    1d9c:	f9 2f       	mov	r31, r25
    1d9e:	e8 2f       	mov	r30, r24

00001da0 <ars00>:
    1da0:	f8 94       	cli
    1da2:	40 81       	ld	r20, Z
    1da4:	51 81       	ldd	r21, Z+1	; 0x01
    1da6:	41 50       	subi	r20, 0x01	; 1
    1da8:	50 40       	sbci	r21, 0x00	; 0
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <ars01>
    1dac:	4f 5f       	subi	r20, 0xFF	; 255
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255

00001db0 <ars01>:
    1db0:	51 83       	std	Z+1, r21	; 0x01
    1db2:	40 83       	st	Z, r20
    1db4:	18 95       	reti

00001db6 <AvrXSendMessage>:
    1db6:	f8 94       	cli
    1db8:	0d de       	rcall	.-998    	; 0x19d4 <IntProlog>
    1dba:	78 94       	sei
    1dbc:	01 d0       	rcall	.+2      	; 0x1dc0 <AvrXIntSendMessage>
    1dbe:	58 ce       	rjmp	.-848    	; 0x1a70 <_Epilog>

00001dc0 <AvrXIntSendMessage>:
    1dc0:	f9 2f       	mov	r31, r25
    1dc2:	e8 2f       	mov	r30, r24
    1dc4:	32 df       	rcall	.-412    	; 0x1c2a <_AppendObject>
    1dc6:	14 cf       	rjmp	.-472    	; 0x1bf0 <AvrXIntSetObjectSemaphore>

00001dc8 <AvrXWaitMessage>:
    1dc8:	e8 2f       	mov	r30, r24
    1dca:	f9 2f       	mov	r31, r25
    1dcc:	f8 94       	cli
    1dce:	44 df       	rcall	.-376    	; 0x1c58 <_RemoveFirstObject>
    1dd0:	78 94       	sei
    1dd2:	21 f4       	brne	.+8      	; 0x1ddc <_rm01>
    1dd4:	e9 de       	rcall	.-558    	; 0x1ba8 <AvrXWaitMessageAck>
    1dd6:	82 50       	subi	r24, 0x02	; 2
    1dd8:	90 40       	sbci	r25, 0x00	; 0
    1dda:	f6 cf       	rjmp	.-20     	; 0x1dc8 <AvrXWaitMessage>

00001ddc <_rm01>:
    1ddc:	db df       	rcall	.-74     	; 0x1d94 <AvrXIntResetObjectSemaphore>
    1dde:	86 2f       	mov	r24, r22
    1de0:	97 2f       	mov	r25, r23
    1de2:	08 95       	ret

00001de4 <__mulsi3>:
    1de4:	62 9f       	mul	r22, r18
    1de6:	d0 01       	movw	r26, r0
    1de8:	73 9f       	mul	r23, r19
    1dea:	f0 01       	movw	r30, r0
    1dec:	82 9f       	mul	r24, r18
    1dee:	e0 0d       	add	r30, r0
    1df0:	f1 1d       	adc	r31, r1
    1df2:	64 9f       	mul	r22, r20
    1df4:	e0 0d       	add	r30, r0
    1df6:	f1 1d       	adc	r31, r1
    1df8:	92 9f       	mul	r25, r18
    1dfa:	f0 0d       	add	r31, r0
    1dfc:	83 9f       	mul	r24, r19
    1dfe:	f0 0d       	add	r31, r0
    1e00:	74 9f       	mul	r23, r20
    1e02:	f0 0d       	add	r31, r0
    1e04:	65 9f       	mul	r22, r21
    1e06:	f0 0d       	add	r31, r0
    1e08:	99 27       	eor	r25, r25
    1e0a:	72 9f       	mul	r23, r18
    1e0c:	b0 0d       	add	r27, r0
    1e0e:	e1 1d       	adc	r30, r1
    1e10:	f9 1f       	adc	r31, r25
    1e12:	63 9f       	mul	r22, r19
    1e14:	b0 0d       	add	r27, r0
    1e16:	e1 1d       	adc	r30, r1
    1e18:	f9 1f       	adc	r31, r25
    1e1a:	bd 01       	movw	r22, r26
    1e1c:	cf 01       	movw	r24, r30
    1e1e:	11 24       	eor	r1, r1
    1e20:	08 95       	ret

00001e22 <__udivmodhi4>:
    1e22:	aa 1b       	sub	r26, r26
    1e24:	bb 1b       	sub	r27, r27
    1e26:	51 e1       	ldi	r21, 0x11	; 17
    1e28:	07 c0       	rjmp	.+14     	; 0x1e38 <__udivmodhi4_ep>

00001e2a <__udivmodhi4_loop>:
    1e2a:	aa 1f       	adc	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	a6 17       	cp	r26, r22
    1e30:	b7 07       	cpc	r27, r23
    1e32:	10 f0       	brcs	.+4      	; 0x1e38 <__udivmodhi4_ep>
    1e34:	a6 1b       	sub	r26, r22
    1e36:	b7 0b       	sbc	r27, r23

00001e38 <__udivmodhi4_ep>:
    1e38:	88 1f       	adc	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	5a 95       	dec	r21
    1e3e:	a9 f7       	brne	.-22     	; 0x1e2a <__udivmodhi4_loop>
    1e40:	80 95       	com	r24
    1e42:	90 95       	com	r25
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	08 95       	ret

00001e4a <__udivmodsi4>:
    1e4a:	a1 e2       	ldi	r26, 0x21	; 33
    1e4c:	1a 2e       	mov	r1, r26
    1e4e:	aa 1b       	sub	r26, r26
    1e50:	bb 1b       	sub	r27, r27
    1e52:	fd 01       	movw	r30, r26
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <__udivmodsi4_ep>

00001e56 <__udivmodsi4_loop>:
    1e56:	aa 1f       	adc	r26, r26
    1e58:	bb 1f       	adc	r27, r27
    1e5a:	ee 1f       	adc	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	a2 17       	cp	r26, r18
    1e60:	b3 07       	cpc	r27, r19
    1e62:	e4 07       	cpc	r30, r20
    1e64:	f5 07       	cpc	r31, r21
    1e66:	20 f0       	brcs	.+8      	; 0x1e70 <__udivmodsi4_ep>
    1e68:	a2 1b       	sub	r26, r18
    1e6a:	b3 0b       	sbc	r27, r19
    1e6c:	e4 0b       	sbc	r30, r20
    1e6e:	f5 0b       	sbc	r31, r21

00001e70 <__udivmodsi4_ep>:
    1e70:	66 1f       	adc	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	88 1f       	adc	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	1a 94       	dec	r1
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <__udivmodsi4_loop>
    1e7c:	60 95       	com	r22
    1e7e:	70 95       	com	r23
    1e80:	80 95       	com	r24
    1e82:	90 95       	com	r25
    1e84:	9b 01       	movw	r18, r22
    1e86:	ac 01       	movw	r20, r24
    1e88:	bd 01       	movw	r22, r26
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	08 95       	ret

00001e8e <__divmodsi4>:
    1e8e:	97 fb       	bst	r25, 7
    1e90:	09 2e       	mov	r0, r25
    1e92:	05 26       	eor	r0, r21
    1e94:	0e d0       	rcall	.+28     	; 0x1eb2 <__divmodsi4_neg1>
    1e96:	57 fd       	sbrc	r21, 7
    1e98:	04 d0       	rcall	.+8      	; 0x1ea2 <__divmodsi4_neg2>
    1e9a:	d7 df       	rcall	.-82     	; 0x1e4a <__udivmodsi4>
    1e9c:	0a d0       	rcall	.+20     	; 0x1eb2 <__divmodsi4_neg1>
    1e9e:	00 1c       	adc	r0, r0
    1ea0:	38 f4       	brcc	.+14     	; 0x1eb0 <__divmodsi4_exit>

00001ea2 <__divmodsi4_neg2>:
    1ea2:	50 95       	com	r21
    1ea4:	40 95       	com	r20
    1ea6:	30 95       	com	r19
    1ea8:	21 95       	neg	r18
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	4f 4f       	sbci	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255

00001eb0 <__divmodsi4_exit>:
    1eb0:	08 95       	ret

00001eb2 <__divmodsi4_neg1>:
    1eb2:	f6 f7       	brtc	.-4      	; 0x1eb0 <__divmodsi4_exit>
    1eb4:	90 95       	com	r25
    1eb6:	80 95       	com	r24
    1eb8:	70 95       	com	r23
    1eba:	61 95       	neg	r22
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	08 95       	ret

00001ec4 <_exit>:
    1ec4:	ff cf       	rjmp	.-2      	; 0x1ec4 <_exit>
