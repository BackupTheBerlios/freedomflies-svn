
AvrXBufferedSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000022a6  0000233a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005c7  00800076  00800076  00002350  2**2
                  ALLOC
  3 .noinit       00000000  0080063d  0080063d  00002350  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00002350  2**0
                  CONTENTS
  5 .stab         00006c90  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00003652  00000000  00000000  00008fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 00 	jmp	0x140
       4:	0c 94 bb 00 	jmp	0x176
       8:	0c 94 bb 00 	jmp	0x176
       c:	0c 94 bb 00 	jmp	0x176
      10:	0c 94 08 04 	jmp	0x810
      14:	0c 94 14 03 	jmp	0x628
      18:	0c 94 db 03 	jmp	0x7b6
      1c:	0c 94 81 03 	jmp	0x702
      20:	0c 94 ae 03 	jmp	0x75c
      24:	0c 94 e7 02 	jmp	0x5ce
      28:	0c 94 54 03 	jmp	0x6a8
      2c:	0c 94 47 05 	jmp	0xa8e
      30:	0c 94 bb 00 	jmp	0x176
      34:	0c 94 06 09 	jmp	0x120c
      38:	0c 94 12 09 	jmp	0x1224
      3c:	0c 94 bb 00 	jmp	0x176
      40:	0c 94 bb 00 	jmp	0x176
      44:	0c 94 bb 00 	jmp	0x176
      48:	0c 94 bb 00 	jmp	0x176
      4c:	0c 94 bb 00 	jmp	0x176
      50:	0c 94 bb 00 	jmp	0x176

00000054 <__ctors_end>:
      54:	55 02       	muls	r21, r21
      56:	f8 07       	cpc	r31, r24
      58:	d1 02       	muls	r29, r17
      5a:	03 94       	inc	r0

0000005b <getCommandsTcb>:
      5b:	94 05 d6 07 d5 01 05                                .......

00000062 <getPitchAndRollTcb>:
      62:	ca 02 59 07 cb 02 04                                ..Y....

00000069 <getFuelAndBatteryTcb>:
      69:	0d 05 18 07 99 04 04                                .......

00000070 <getGPSDataTcb>:
      70:	4b 03 8d 06 97 00 04                                K......

00000077 <getGroundspeedTcb>:
      77:	ba 03 41 06 91 00 04                                ..A....

0000007e <getAirspeedTcb>:
      7e:	29 04 f5 05 d7 02 04                                )......

00000085 <getCompassHeadingTcb>:
      85:	30 01 9d 05 9f 00 04                                0......

0000008c <getUAVStatusTcb>:
      8c:	98 04 7c 05 56 02 04                                ..|.V..

00000093 <TimerRTCPrescaleFactor>:
      93:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000000a3 <TimerPrescaleFactor>:
      a3:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000000af <__c.20>:
      af:	31 00                                               1.

000000b1 <__c.18>:
      b1:	63 20 25 64 00                                      c %d.

000000b6 <__c.19>:
      b6:	63 20 25 64 00                                      c %d.

000000bb <__c.16>:
      bb:	73 20 25 64 00                                      s %d.

000000c0 <__c.17>:
      c0:	73 20 25 64 00                                      s %d.

000000c5 <__c.14>:
      c5:	67 20 25 64 00                                      g %d.

000000ca <__c.15>:
      ca:	67 20 25 64 00                                      g %d.

000000cf <__c.8>:
      cf:	61 20 30 36 37 2e 35 37 35 39 45 00                 a 067.5759E.

000000db <__c.9>:
      db:	6f 20 38 39 2e 31 32 33 34 35 4e 00                 o 89.12345N.

000000e7 <__c.10>:
      e7:	7a 20 25 64 00                                      z %d.

000000ec <__c.11>:
      ec:	61 20 31 30 31 2e 34 35 31 32 57 00                 a 101.4512W.

000000f8 <__c.12>:
      f8:	6f 20 30 35 2e 39 38 37 36 35 53 00                 o 05.98765S.

00000104 <__c.13>:
     104:	7a 20 25 64 00                                      z %d.

00000109 <__c.6>:
     109:	62 20 25 64 00                                      b %d.

0000010e <__c.7>:
     10e:	66 20 25 64 00                                      f %d.

00000113 <__c.2>:
     113:	71 20 25 64 00                                      q %d.

00000118 <__c.3>:
     118:	77 20 25 64 00                                      w %d.

0000011d <__c.4>:
     11d:	71 20 25 64 00                                      q %d.

00000122 <__c.5>:
     122:	77 20 25 64 00                                      w %d.

00000127 <__c.0>:
     127:	49 20 66 6f 75 6e 64 65 64 20 52 68 69 7a 6f 6d     I founded Rhizom
     137:	65 21 0d 0a 00                                      e!...

0000013c <__c.1>:
     13c:	25 64 20 00                                         %d .

00000140 <__init>:
     140:	11 24       	eor	r1, r1
     142:	1f be       	out	0x3f, r1	; 63
     144:	cf e5       	ldi	r28, 0x5F	; 95
     146:	d8 e0       	ldi	r29, 0x08	; 8
     148:	de bf       	out	0x3e, r29	; 62
     14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_copy_data>:
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	a0 e6       	ldi	r26, 0x60	; 96
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	e6 ea       	ldi	r30, 0xA6	; 166
     154:	f2 e2       	ldi	r31, 0x22	; 34
     156:	02 c0       	rjmp	.+4      	; 0x15c

00000158 <.do_copy_data_loop>:
     158:	05 90       	lpm	r0, Z+
     15a:	0d 92       	st	X+, r0

0000015c <.do_copy_data_start>:
     15c:	a6 37       	cpi	r26, 0x76	; 118
     15e:	b1 07       	cpc	r27, r17
     160:	d9 f7       	brne	.-10     	; 0x158

00000162 <__do_clear_bss>:
     162:	16 e0       	ldi	r17, 0x06	; 6
     164:	a6 e7       	ldi	r26, 0x76	; 118
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	01 c0       	rjmp	.+2      	; 0x16c

0000016a <.do_clear_bss_loop>:
     16a:	1d 92       	st	X+, r1

0000016c <.do_clear_bss_start>:
     16c:	ad 33       	cpi	r26, 0x3D	; 61
     16e:	b1 07       	cpc	r27, r17
     170:	e1 f7       	brne	.-8      	; 0x16a
     172:	0c 94 23 08 	jmp	0x1046

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0x0

0000017a <parserInit>:

void parserInit(void)
{
	// initialize input buffer
	parserBufferLength = 0;
     17a:	10 92 ec 01 	sts	0x01EC, r1
	// initialize executing function
	ParserExecFunction = 0;
     17e:	10 92 a6 00 	sts	0x00A6, r1
     182:	10 92 a5 00 	sts	0x00A5, r1
	// initialize command list
	parserNumCommands = 0;
     186:	10 92 bb 00 	sts	0x00BB, r1
     18a:	08 95       	ret

0000018c <parserAddCommand>:
}


void parserAddCommand(unsigned char* newCmdString, ParserFuncPtrType newCmdFuncPtr)
{
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	9c 01       	movw	r18, r24
     192:	8b 01       	movw	r16, r22
	// add command string to end of command list
	strcpy(CommandList[parserNumCommands], newCmdString);
     194:	90 91 bb 00 	lds	r25, 0x00BB
     198:	8f e0       	ldi	r24, 0x0F	; 15
     19a:	98 9f       	mul	r25, r24
     19c:	c0 01       	movw	r24, r0
     19e:	11 24       	eor	r1, r1
     1a0:	b9 01       	movw	r22, r18
     1a2:	8b 5c       	subi	r24, 0xCB	; 203
     1a4:	9e 4f       	sbci	r25, 0xFE	; 254
     1a6:	0e 94 c3 0a 	call	0x1586
	// add command function ptr to end of function list
	ParserFunctionList[parserNumCommands] = newCmdFuncPtr;
     1aa:	80 91 bb 00 	lds	r24, 0x00BB
     1ae:	e8 2f       	mov	r30, r24
     1b0:	ff 27       	eor	r31, r31
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	e9 55       	subi	r30, 0x59	; 89
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	11 83       	std	Z+1, r17	; 0x01
     1bc:	00 83       	st	Z, r16
	// increment number of registered commands
	parserNumCommands++;
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	80 93 bb 00 	sts	0x00BB, r24
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	08 95       	ret

000001ca <parserSetOutputFunc>:
}


void parserSetOutputFunc(void (*output_func)(unsigned char c))
{
	// set new output function
	parserOutputFunc = output_func;
     1ca:	90 93 9e 00 	sts	0x009E, r25
     1ce:	80 93 9d 00 	sts	0x009D, r24
     1d2:	08 95       	ret

000001d4 <parserProcessInputString>:
}


void parserInputFunc(unsigned char c)
{
	// process the received character
	
	if (c != '\r')		//anything other than return character must be a part of the command
	{	
		// echo character to the output
//		parserOutputFunc(c);
		// add it to the command line buffer
		parserBuffer[parserBufferLength] = c;
		// update buffer length
		parserBufferLength++;
	}
	else				//return character -> process command
	{
		// add null termination to command
		parserBuffer[parserBufferLength] = 0;
		// command is complete, process it
		parserProcessInputString();
		// reset buffer
		parserBufferLength = 0;
	}
}


void parserProcessInputString(void)
{
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
	unsigned char cmdIndex;

	// search command list for match with entered command
	for(cmdIndex=0; cmdIndex<parserNumCommands; cmdIndex++)
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	80 91 bb 00 	lds	r24, 0x00BB
     1e0:	18 17       	cp	r17, r24
     1e2:	48 f5       	brcc	.+82     	; 0x236
	{
		if( !strncmp(CommandList[cmdIndex], parserBuffer, 1) )		//command is first char of buffer
     1e4:	a1 2f       	mov	r26, r17
     1e6:	bb 27       	eor	r27, r27
     1e8:	fd 01       	movw	r30, r26
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	ee 0f       	add	r30, r30
     1ee:	ff 1f       	adc	r31, r31
     1f0:	8a 95       	dec	r24
     1f2:	e1 f7       	brne	.-8      	; 0x1ec
     1f4:	ea 1b       	sub	r30, r26
     1f6:	fb 0b       	sbc	r31, r27
     1f8:	eb 5c       	subi	r30, 0xCB	; 203
     1fa:	fe 4f       	sbci	r31, 0xFE	; 254
     1fc:	80 81       	ld	r24, Z
     1fe:	c8 2f       	mov	r28, r24
     200:	dd 27       	eor	r29, r29
     202:	80 91 db 01 	lds	r24, 0x01DB
     206:	c8 1b       	sub	r28, r24
     208:	d1 09       	sbc	r29, r1
     20a:	20 97       	sbiw	r28, 0x00	; 0
     20c:	79 f4       	brne	.+30     	; 0x22c
		{
			// user-entered command matched a command in the list (database)
			ParserExecFunction = ParserFunctionList[cmdIndex];
     20e:	aa 0f       	add	r26, r26
     210:	bb 1f       	adc	r27, r27
     212:	a9 55       	subi	r26, 0x59	; 89
     214:	bf 4f       	sbci	r27, 0xFF	; 255
     216:	ed 91       	ld	r30, X+
     218:	fc 91       	ld	r31, X
     21a:	f0 93 a6 00 	sts	0x00A6, r31
     21e:	e0 93 a5 00 	sts	0x00A5, r30
			// run the corresponding function
			ParserExecFunction();
     222:	09 95       	icall
			// reset
			ParserExecFunction = 0;
     224:	d0 93 a6 00 	sts	0x00A6, r29
     228:	c0 93 a5 00 	sts	0x00A5, r28
     22c:	1f 5f       	subi	r17, 0xFF	; 255
     22e:	80 91 bb 00 	lds	r24, 0x00BB
     232:	18 17       	cp	r17, r24
     234:	b8 f2       	brcs	.-82     	; 0x1e4
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	08 95       	ret

0000023e <parserInputFunc>:
     23e:	90 91 ec 01 	lds	r25, 0x01EC
     242:	8d 30       	cpi	r24, 0x0D	; 13
     244:	49 f0       	breq	.+18     	; 0x258
     246:	e9 2f       	mov	r30, r25
     248:	ff 27       	eor	r31, r31
     24a:	e5 52       	subi	r30, 0x25	; 37
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	80 83       	st	Z, r24
     250:	9f 5f       	subi	r25, 0xFF	; 255
     252:	90 93 ec 01 	sts	0x01EC, r25
     256:	08 95       	ret
     258:	e9 2f       	mov	r30, r25
     25a:	ff 27       	eor	r31, r31
     25c:	e5 52       	subi	r30, 0x25	; 37
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	10 82       	st	Z, r1
     262:	0e 94 ea 00 	call	0x1d4
     266:	10 92 ec 01 	sts	0x01EC, r1
     26a:	08 95       	ret

0000026c <parserGetArgStr>:
		}
	}
}

// return string pointer to argument [argnum]
unsigned char* parserGetArgStr(void)
{
	return &parserBuffer[2];		//spec states that commands are 1 char followed by a space followed by the arg, so the
}									//arg must start at idx 2
     26c:	8d ed       	ldi	r24, 0xDD	; 221
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	08 95       	ret

00000272 <parserGetArgInt>:

//return argument as a long
int parserGetArgInt(void)
{
	char* endptr;
	return atoi(parserGetArgStr());
     272:	0e 94 36 01 	call	0x26c
     276:	0e 94 b0 09 	call	0x1360
     27a:	08 95       	ret

0000027c <delay_us>:
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 
     27c:	03 96       	adiw	r24, 0x03	; 3
     27e:	65 e0       	ldi	r22, 0x05	; 5
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	0e 94 ee 10 	call	0x21dc
     286:	cb 01       	movw	r24, r22
     288:	aa 27       	eor	r26, r26
     28a:	bb 27       	eor	r27, r27
     28c:	24 e0       	ldi	r18, 0x04	; 4
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	aa 1f       	adc	r26, r26
     294:	bb 1f       	adc	r27, r27
     296:	2a 95       	dec	r18
     298:	d1 f7       	brne	.-12     	; 0x28e

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	11 f0       	breq	.+4      	; 0x2a2
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	fc cf       	rjmp	.-8      	; 0x29a
     2a2:	08 95       	ret

000002a4 <timerDetach>:
}
/*
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 4000;

	unsigned short cnt;
	asm volatile ("\n"
                  "L_dl1%=:\n\t"
                  "mov %A0, %A2\n\t"
                  "mov %B0, %B2\n"
                  "L_dl2%=:\n\t"
                  "sbiw %A0, 1\n\t"
                  "brne L_dl2%=\n\t"
                  "dec %1\n\t" "brne L_dl1%=\n\t":"=&w" (cnt)
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
	timer1Init();
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
	#endif
	// enable interrupts
	sei();
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt

	timer0ClearOverflowCount();				// initialize time registers
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
	outb(TCNT1H, 0);						// reset TCNT1
	outb(TCNT1L, 0);
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow

	timer2ClearOverflowCount();				// initialize time registers
}
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
}
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
}

u16 timer1GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR1B) & TIMER_PRESCALE_MASK)));
}

#ifdef TCNT2	// support timer2 only if it exists
u16 timer2GetPrescaler(void)
{
	//TODO: can we assume for all 3-timer AVR processors,
	// that timer2 is the RTC timer?

	// get the current prescaler setting
	return (pgm_read_word(TimerRTCPrescaleFactor+(inb(TCCR2) & TIMER_PRESCALE_MASK)));
}
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
	}
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     2a4:	88 30       	cpi	r24, 0x08	; 8
     2a6:	40 f4       	brcc	.+16     	; 0x2b8
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     2a8:	e8 2f       	mov	r30, r24
     2aa:	ff 27       	eor	r31, r31
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	ea 58       	subi	r30, 0x8A	; 138
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	11 82       	std	Z+1, r1	; 0x01
     2b6:	10 82       	st	Z, r1
     2b8:	08 95       	ret

000002ba <timer0SetPrescaler>:
     2ba:	93 b7       	in	r25, 0x33	; 51
     2bc:	98 7f       	andi	r25, 0xF8	; 248
     2be:	98 2b       	or	r25, r24
     2c0:	93 bf       	out	0x33, r25	; 51
     2c2:	08 95       	ret

000002c4 <timer0ClearOverflowCount>:
	}
}
/*
u32 timerMsToTics(u16 ms)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of timer tics in x milliseconds
	return (ms*(F_CPU/(prescaleDiv*256)))/1000;
}

u16 timerTicsToMs(u32 tics)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
	// pauses for exactly <pause_ms> number of milliseconds
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
	// reset pause timer overflow count
	TimerPauseReg = 0;
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
	{
		if( TimerPauseReg < (pause>>8));
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
			sleep_mode();
		}
	}

	/* old inaccurate code, for reference
	
	// calculate delay for [pause_ms] milliseconds
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	u32 pause = (pause_ms*(F_CPU/(prescaleDiv*256)))/1000;
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     2c4:	10 92 31 01 	sts	0x0131, r1
     2c8:	10 92 32 01 	sts	0x0132, r1
     2cc:	10 92 33 01 	sts	0x0133, r1
     2d0:	10 92 34 01 	sts	0x0134, r1
     2d4:	08 95       	ret

000002d6 <timer0Init>:
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 5d 01 	call	0x2ba
     2dc:	12 be       	out	0x32, r1	; 50
     2de:	89 b7       	in	r24, 0x39	; 57
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	89 bf       	out	0x39, r24	; 57
     2e4:	0e 94 62 01 	call	0x2c4
     2e8:	08 95       	ret

000002ea <timer1SetPrescaler>:
     2ea:	9e b5       	in	r25, 0x2e	; 46
     2ec:	98 7f       	andi	r25, 0xF8	; 248
     2ee:	98 2b       	or	r25, r24
     2f0:	9e bd       	out	0x2e, r25	; 46
     2f2:	08 95       	ret

000002f4 <timer1Init>:
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	0e 94 75 01 	call	0x2ea
     2fa:	1d bc       	out	0x2d, r1	; 45
     2fc:	1c bc       	out	0x2c, r1	; 44
     2fe:	89 b7       	in	r24, 0x39	; 57
     300:	84 60       	ori	r24, 0x04	; 4
     302:	89 bf       	out	0x39, r24	; 57
     304:	08 95       	ret

00000306 <timer2SetPrescaler>:
     306:	95 b5       	in	r25, 0x25	; 37
     308:	98 7f       	andi	r25, 0xF8	; 248
     30a:	98 2b       	or	r25, r24
     30c:	95 bd       	out	0x25, r25	; 37
     30e:	08 95       	ret

00000310 <timer2ClearOverflowCount>:
}

long timer0GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer0ClearOverflowCount() command was called)
	return Timer0Reg0;
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     310:	10 92 cf 01 	sts	0x01CF, r1
     314:	10 92 d0 01 	sts	0x01D0, r1
     318:	10 92 d1 01 	sts	0x01D1, r1
     31c:	10 92 d2 01 	sts	0x01D2, r1
     320:	08 95       	ret

00000322 <timer2Init>:
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	0e 94 83 01 	call	0x306
     328:	14 bc       	out	0x24, r1	; 36
     32a:	89 b7       	in	r24, 0x39	; 57
     32c:	80 64       	ori	r24, 0x40	; 64
     32e:	89 bf       	out	0x39, r24	; 57
     330:	0e 94 88 01 	call	0x310
     334:	08 95       	ret

00000336 <timerInit>:
     336:	cf 93       	push	r28
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	8c 2f       	mov	r24, r28
     33c:	0e 94 52 01 	call	0x2a4
     340:	cf 5f       	subi	r28, 0xFF	; 255
     342:	c8 30       	cpi	r28, 0x08	; 8
     344:	d0 f3       	brcs	.-12     	; 0x33a
     346:	0e 94 6b 01 	call	0x2d6
     34a:	0e 94 7a 01 	call	0x2f4
     34e:	0e 94 91 01 	call	0x322
     352:	78 94       	sei
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <timer0GetPrescaler>:
     358:	83 b7       	in	r24, 0x33	; 51
     35a:	e8 2f       	mov	r30, r24
     35c:	ff 27       	eor	r31, r31
     35e:	e7 70       	andi	r30, 0x07	; 7
     360:	f0 70       	andi	r31, 0x00	; 0
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ed 55       	subi	r30, 0x5D	; 93
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	85 91       	lpm	r24, Z+
     36c:	94 91       	lpm	r25, Z
     36e:	08 95       	ret

00000370 <timer1GetPrescaler>:
     370:	8e b5       	in	r24, 0x2e	; 46
     372:	e8 2f       	mov	r30, r24
     374:	ff 27       	eor	r31, r31
     376:	e7 70       	andi	r30, 0x07	; 7
     378:	f0 70       	andi	r31, 0x00	; 0
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	ed 55       	subi	r30, 0x5D	; 93
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	85 91       	lpm	r24, Z+
     384:	94 91       	lpm	r25, Z
     386:	08 95       	ret

00000388 <timer2GetPrescaler>:
     388:	85 b5       	in	r24, 0x25	; 37
     38a:	e8 2f       	mov	r30, r24
     38c:	ff 27       	eor	r31, r31
     38e:	e7 70       	andi	r30, 0x07	; 7
     390:	f0 70       	andi	r31, 0x00	; 0
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ed 56       	subi	r30, 0x6D	; 109
     398:	ff 4f       	sbci	r31, 0xFF	; 255
     39a:	85 91       	lpm	r24, Z+
     39c:	94 91       	lpm	r25, Z
     39e:	08 95       	ret

000003a0 <timerAttach>:
     3a0:	88 30       	cpi	r24, 0x08	; 8
     3a2:	40 f4       	brcc	.+16     	; 0x3b4
     3a4:	e8 2f       	mov	r30, r24
     3a6:	ff 27       	eor	r31, r31
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	ea 58       	subi	r30, 0x8A	; 138
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	71 83       	std	Z+1, r23	; 0x01
     3b2:	60 83       	st	Z, r22
     3b4:	08 95       	ret

000003b6 <timerPause>:
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	d2 b6       	in	r13, 0x32	; 50
     3c8:	10 92 cb 01 	sts	0x01CB, r1
     3cc:	10 92 cc 01 	sts	0x01CC, r1
     3d0:	10 92 cd 01 	sts	0x01CD, r1
     3d4:	10 92 ce 01 	sts	0x01CE, r1
     3d8:	0e 94 ac 01 	call	0x358
     3dc:	9c 01       	movw	r18, r24
     3de:	44 27       	eor	r20, r20
     3e0:	55 27       	eor	r21, r21
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	74 e2       	ldi	r23, 0x24	; 36
     3e6:	84 ef       	ldi	r24, 0xF4	; 244
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 37 11 	call	0x226e
     3ee:	29 3b       	cpi	r18, 0xB9	; 185
     3f0:	8d e8       	ldi	r24, 0x8D	; 141
     3f2:	38 07       	cpc	r19, r24
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	48 07       	cpc	r20, r24
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	58 07       	cpc	r21, r24
     3fc:	c0 f4       	brcc	.+48     	; 0x42e
     3fe:	87 e2       	ldi	r24, 0x27	; 39
     400:	c1 31       	cpi	r28, 0x11	; 17
     402:	d8 07       	cpc	r29, r24
     404:	a0 f4       	brcc	.+40     	; 0x42e
     406:	ce 01       	movw	r24, r28
     408:	aa 27       	eor	r26, r26
     40a:	bb 27       	eor	r27, r27
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	0e 94 cf 10 	call	0x219e
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	bc 01       	movw	r22, r24
     41a:	cd 01       	movw	r24, r26
     41c:	28 ee       	ldi	r18, 0xE8	; 232
     41e:	33 e0       	ldi	r19, 0x03	; 3
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	0e 94 15 11 	call	0x222a
     428:	fa 01       	movw	r30, r20
     42a:	e9 01       	movw	r28, r18
     42c:	11 c0       	rjmp	.+34     	; 0x450
     42e:	7e 01       	movw	r14, r28
     430:	00 27       	eor	r16, r16
     432:	11 27       	eor	r17, r17
     434:	ca 01       	movw	r24, r20
     436:	b9 01       	movw	r22, r18
     438:	28 ee       	ldi	r18, 0xE8	; 232
     43a:	33 e0       	ldi	r19, 0x03	; 3
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	0e 94 15 11 	call	0x222a
     444:	c8 01       	movw	r24, r16
     446:	b7 01       	movw	r22, r14
     448:	0e 94 cf 10 	call	0x219e
     44c:	fc 01       	movw	r30, r24
     44e:	eb 01       	movw	r28, r22
     450:	80 91 cb 01 	lds	r24, 0x01CB
     454:	90 91 cc 01 	lds	r25, 0x01CC
     458:	a0 91 cd 01 	lds	r26, 0x01CD
     45c:	b0 91 ce 01 	lds	r27, 0x01CE
     460:	22 27       	eor	r18, r18
     462:	38 2f       	mov	r19, r24
     464:	49 2f       	mov	r20, r25
     466:	5a 2f       	mov	r21, r26
     468:	82 b7       	in	r24, 0x32	; 50
     46a:	99 27       	eor	r25, r25
     46c:	aa 27       	eor	r26, r26
     46e:	bb 27       	eor	r27, r27
     470:	28 2b       	or	r18, r24
     472:	39 2b       	or	r19, r25
     474:	4a 2b       	or	r20, r26
     476:	5b 2b       	or	r21, r27
     478:	cd 0d       	add	r28, r13
     47a:	d1 1d       	adc	r29, r1
     47c:	e1 1d       	adc	r30, r1
     47e:	f1 1d       	adc	r31, r1
     480:	2c 17       	cp	r18, r28
     482:	3d 07       	cpc	r19, r29
     484:	4e 07       	cpc	r20, r30
     486:	5f 07       	cpc	r21, r31
     488:	58 f5       	brcc	.+86     	; 0x4e0
     48a:	80 91 cb 01 	lds	r24, 0x01CB
     48e:	90 91 cc 01 	lds	r25, 0x01CC
     492:	a0 91 cd 01 	lds	r26, 0x01CD
     496:	b0 91 ce 01 	lds	r27, 0x01CE
     49a:	85 b7       	in	r24, 0x35	; 53
     49c:	8f 78       	andi	r24, 0x8F	; 143
     49e:	85 bf       	out	0x35, r24	; 53
     4a0:	85 b7       	in	r24, 0x35	; 53
     4a2:	80 68       	ori	r24, 0x80	; 128
     4a4:	85 bf       	out	0x35, r24	; 53
     4a6:	88 95       	sleep
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	8f 77       	andi	r24, 0x7F	; 127
     4ac:	85 bf       	out	0x35, r24	; 53
     4ae:	80 91 cb 01 	lds	r24, 0x01CB
     4b2:	90 91 cc 01 	lds	r25, 0x01CC
     4b6:	a0 91 cd 01 	lds	r26, 0x01CD
     4ba:	b0 91 ce 01 	lds	r27, 0x01CE
     4be:	ba 2f       	mov	r27, r26
     4c0:	a9 2f       	mov	r26, r25
     4c2:	98 2f       	mov	r25, r24
     4c4:	88 27       	eor	r24, r24
     4c6:	22 b7       	in	r18, 0x32	; 50
     4c8:	33 27       	eor	r19, r19
     4ca:	44 27       	eor	r20, r20
     4cc:	55 27       	eor	r21, r21
     4ce:	82 2b       	or	r24, r18
     4d0:	93 2b       	or	r25, r19
     4d2:	a4 2b       	or	r26, r20
     4d4:	b5 2b       	or	r27, r21
     4d6:	8c 17       	cp	r24, r28
     4d8:	9d 07       	cpc	r25, r29
     4da:	ae 07       	cpc	r26, r30
     4dc:	bf 07       	cpc	r27, r31
     4de:	a8 f2       	brcs	.-86     	; 0x48a
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	08 95       	ret

000004f0 <timer0GetOverflowCount>:
     4f0:	80 91 31 01 	lds	r24, 0x0131
     4f4:	90 91 32 01 	lds	r25, 0x0132
     4f8:	a0 91 33 01 	lds	r26, 0x0133
     4fc:	b0 91 34 01 	lds	r27, 0x0134
     500:	bc 01       	movw	r22, r24
     502:	cd 01       	movw	r24, r26
     504:	08 95       	ret

00000506 <timer2GetOverflowCount>:
}

long timer2GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer2ClearOverflowCount() command was called)
	return Timer2Reg0;
     506:	80 91 cf 01 	lds	r24, 0x01CF
     50a:	90 91 d0 01 	lds	r25, 0x01D0
     50e:	a0 91 d1 01 	lds	r26, 0x01D1
     512:	b0 91 d2 01 	lds	r27, 0x01D2
}
     516:	bc 01       	movw	r22, r24
     518:	cd 01       	movw	r24, r26
     51a:	08 95       	ret

0000051c <timer1PWMInit>:
#endif

void timer1PWMInit(u08 bitRes)
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     51c:	89 30       	cpi	r24, 0x09	; 9
     51e:	31 f4       	brne	.+12     	; 0x52c
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     520:	8f b5       	in	r24, 0x2f	; 47
     522:	82 60       	ori	r24, 0x02	; 2
     524:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     526:	8f b5       	in	r24, 0x2f	; 47
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	0a c0       	rjmp	.+20     	; 0x540
	}
	else if( bitRes == 10 )
     52c:	8a 30       	cpi	r24, 0x0A	; 10
     52e:	19 f4       	brne	.+6      	; 0x536
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     530:	8f b5       	in	r24, 0x2f	; 47
     532:	82 60       	ori	r24, 0x02	; 2
     534:	02 c0       	rjmp	.+4      	; 0x53a
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     536:	8f b5       	in	r24, 0x2f	; 47
     538:	8d 7f       	andi	r24, 0xFD	; 253
     53a:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     53c:	8f b5       	in	r24, 0x2f	; 47
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     542:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     544:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     546:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     548:	18 bc       	out	0x28, r1	; 40
     54a:	08 95       	ret

0000054c <timer1PWMInitICR>:
}

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
     54c:	9c 01       	movw	r18, r24
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     54e:	8f b5       	in	r24, 0x2f	; 47
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1A,WGM11);
     554:	8f b5       	in	r24, 0x2f	; 47
     556:	82 60       	ori	r24, 0x02	; 2
     558:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1B,WGM12);
     55a:	8e b5       	in	r24, 0x2e	; 46
     55c:	88 60       	ori	r24, 0x08	; 8
     55e:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1B,WGM13);
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	80 61       	ori	r24, 0x10	; 16
     564:	8e bd       	out	0x2e, r24	; 46
	
	// set top count value
	ICR1 = topcount;
     566:	37 bd       	out	0x27, r19	; 39
     568:	26 bd       	out	0x26, r18	; 38
	
	// clear output compare value A
	OCR1A = 0;
     56a:	1b bc       	out	0x2b, r1	; 43
     56c:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	OCR1B = 0;
     56e:	19 bc       	out	0x29, r1	; 41
     570:	18 bc       	out	0x28, r1	; 40
     572:	08 95       	ret

00000574 <timer1PWMAOff>:

}
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
	timer1PWMBOff();
}

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
	cbi(TCCR1A,COM1A0);
}

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
     574:	8f b5       	in	r24, 0x2f	; 47
     576:	8f 77       	andi	r24, 0x7F	; 127
     578:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     57a:	8f b5       	in	r24, 0x2f	; 47
     57c:	8f 7b       	andi	r24, 0xBF	; 191
     57e:	8f bd       	out	0x2f, r24	; 47
     580:	08 95       	ret

00000582 <timer1PWMBOff>:
}

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
     582:	8f b5       	in	r24, 0x2f	; 47
     584:	8f 7d       	andi	r24, 0xDF	; 223
     586:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     588:	8f b5       	in	r24, 0x2f	; 47
     58a:	8f 7e       	andi	r24, 0xEF	; 239
     58c:	8f bd       	out	0x2f, r24	; 47
     58e:	08 95       	ret

00000590 <timer1PWMOff>:
     590:	8f b5       	in	r24, 0x2f	; 47
     592:	8d 7f       	andi	r24, 0xFD	; 253
     594:	8f bd       	out	0x2f, r24	; 47
     596:	8f b5       	in	r24, 0x2f	; 47
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	8f bd       	out	0x2f, r24	; 47
     59c:	0e 94 ba 02 	call	0x574
     5a0:	0e 94 c1 02 	call	0x582
     5a4:	08 95       	ret

000005a6 <timer1PWMAOn>:
     5a6:	8f b5       	in	r24, 0x2f	; 47
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	8f bd       	out	0x2f, r24	; 47
     5ac:	8f b5       	in	r24, 0x2f	; 47
     5ae:	8f 7b       	andi	r24, 0xBF	; 191
     5b0:	8f bd       	out	0x2f, r24	; 47
     5b2:	08 95       	ret

000005b4 <timer1PWMBOn>:
     5b4:	8f b5       	in	r24, 0x2f	; 47
     5b6:	80 62       	ori	r24, 0x20	; 32
     5b8:	8f bd       	out	0x2f, r24	; 47
     5ba:	8f b5       	in	r24, 0x2f	; 47
     5bc:	8f 7e       	andi	r24, 0xEF	; 239
     5be:	8f bd       	out	0x2f, r24	; 47
     5c0:	08 95       	ret

000005c2 <timer1PWMASet>:
}

void timer1PWMASet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel A
	// this PWM output is generated on OC1A pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     5c2:	9b bd       	out	0x2b, r25	; 43
     5c4:	8a bd       	out	0x2a, r24	; 42
     5c6:	08 95       	ret

000005c8 <timer1PWMBSet>:
}

void timer1PWMBSet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel B
	// this PWM output is generated on OC1B pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     5c8:	99 bd       	out	0x29, r25	; 41
     5ca:	88 bd       	out	0x28, r24	; 40
     5cc:	08 95       	ret

000005ce <__vector_9>:
}
/*
//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{
	Timer0Reg0++;			// increment low-order counter

	// increment pause counter
	TimerPauseReg++;

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
		TimerIntFunc[TIMER0OVERFLOW_INT]();
}
*/

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	2f 93       	push	r18
     5da:	3f 93       	push	r19
     5dc:	4f 93       	push	r20
     5de:	5f 93       	push	r21
     5e0:	6f 93       	push	r22
     5e2:	7f 93       	push	r23
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	af 93       	push	r26
     5ea:	bf 93       	push	r27
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     5f0:	80 91 78 00 	lds	r24, 0x0078
     5f4:	90 91 79 00 	lds	r25, 0x0079
     5f8:	89 2b       	or	r24, r25
     5fa:	29 f0       	breq	.+10     	; 0x606
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     5fc:	e0 91 78 00 	lds	r30, 0x0078
     600:	f0 91 79 00 	lds	r31, 0x0079
     604:	09 95       	icall
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	bf 91       	pop	r27
     60c:	af 91       	pop	r26
     60e:	9f 91       	pop	r25
     610:	8f 91       	pop	r24
     612:	7f 91       	pop	r23
     614:	6f 91       	pop	r22
     616:	5f 91       	pop	r21
     618:	4f 91       	pop	r20
     61a:	3f 91       	pop	r19
     61c:	2f 91       	pop	r18
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_5>:
}

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW2)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	2f 93       	push	r18
     634:	3f 93       	push	r19
     636:	4f 93       	push	r20
     638:	5f 93       	push	r21
     63a:	6f 93       	push	r22
     63c:	7f 93       	push	r23
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	ef 93       	push	r30
     648:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     64a:	80 91 cf 01 	lds	r24, 0x01CF
     64e:	90 91 d0 01 	lds	r25, 0x01D0
     652:	a0 91 d1 01 	lds	r26, 0x01D1
     656:	b0 91 d2 01 	lds	r27, 0x01D2
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	a1 1d       	adc	r26, r1
     65e:	b1 1d       	adc	r27, r1
     660:	80 93 cf 01 	sts	0x01CF, r24
     664:	90 93 d0 01 	sts	0x01D0, r25
     668:	a0 93 d1 01 	sts	0x01D1, r26
     66c:	b0 93 d2 01 	sts	0x01D2, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     670:	80 91 80 00 	lds	r24, 0x0080
     674:	90 91 81 00 	lds	r25, 0x0081
     678:	89 2b       	or	r24, r25
     67a:	29 f0       	breq	.+10     	; 0x686
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     67c:	e0 91 80 00 	lds	r30, 0x0080
     680:	f0 91 81 00 	lds	r31, 0x0081
     684:	09 95       	icall
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_10>:
}
#endif

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE0)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     6ca:	80 91 84 00 	lds	r24, 0x0084
     6ce:	90 91 85 00 	lds	r25, 0x0085
     6d2:	89 2b       	or	r24, r25
     6d4:	29 f0       	breq	.+10     	; 0x6e0
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     6d6:	e0 91 84 00 	lds	r30, 0x0084
     6da:	f0 91 85 00 	lds	r31, 0x0085
     6de:	09 95       	icall
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_7>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1A)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     724:	80 91 7a 00 	lds	r24, 0x007A
     728:	90 91 7b 00 	lds	r25, 0x007B
     72c:	89 2b       	or	r24, r25
     72e:	29 f0       	breq	.+10     	; 0x73a
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     730:	e0 91 7a 00 	lds	r30, 0x007A
     734:	f0 91 7b 00 	lds	r31, 0x007B
     738:	09 95       	icall
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <__vector_8>:
}

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1B)
{
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     77e:	80 91 7c 00 	lds	r24, 0x007C
     782:	90 91 7d 00 	lds	r25, 0x007D
     786:	89 2b       	or	r24, r25
     788:	29 f0       	breq	.+10     	; 0x794
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     78a:	e0 91 7c 00 	lds	r30, 0x007C
     78e:	f0 91 7d 00 	lds	r31, 0x007D
     792:	09 95       	icall
     794:	ff 91       	pop	r31
     796:	ef 91       	pop	r30
     798:	bf 91       	pop	r27
     79a:	af 91       	pop	r26
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	7f 91       	pop	r23
     7a2:	6f 91       	pop	r22
     7a4:	5f 91       	pop	r21
     7a6:	4f 91       	pop	r20
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <__vector_6>:
}

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(SIG_INPUT_CAPTURE1)
{
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     7d8:	80 91 7e 00 	lds	r24, 0x007E
     7dc:	90 91 7f 00 	lds	r25, 0x007F
     7e0:	89 2b       	or	r24, r25
     7e2:	29 f0       	breq	.+10     	; 0x7ee
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     7e4:	e0 91 7e 00 	lds	r30, 0x007E
     7e8:	f0 91 7f 00 	lds	r31, 0x007F
     7ec:	09 95       	icall
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_4>:
}

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE2)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     832:	80 91 82 00 	lds	r24, 0x0082
     836:	90 91 83 00 	lds	r25, 0x0083
     83a:	89 2b       	or	r24, r25
     83c:	29 f0       	breq	.+10     	; 0x848
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     83e:	e0 91 82 00 	lds	r30, 0x0082
     842:	f0 91 83 00 	lds	r31, 0x0083
     846:	09 95       	icall
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <servoInit>:
     86a:	89 b7       	in	r24, 0x39	; 57
     86c:	8f 7e       	andi	r24, 0xEF	; 239
     86e:	89 bf       	out	0x39, r24	; 57
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	0e 94 75 01 	call	0x2ea
     876:	68 ed       	ldi	r22, 0xD8	; 216
     878:	74 e0       	ldi	r23, 0x04	; 4
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 d0 01 	call	0x3a0
     880:	a2 e2       	ldi	r26, 0x22	; 34
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	55 e1       	ldi	r21, 0x15	; 21
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	e7 e8       	ldi	r30, 0x87	; 135
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	b3 83       	std	Z+3, r27	; 0x03
     896:	a2 83       	std	Z+2, r26	; 0x02
     898:	50 83       	st	Z, r21
     89a:	cb 01       	movw	r24, r22
     89c:	02 2e       	mov	r0, r18
     89e:	02 c0       	rjmp	.+4      	; 0x8a4
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	0a 94       	dec	r0
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0
     8a8:	81 83       	std	Z+1, r24	; 0x01
     8aa:	41 50       	subi	r20, 0x01	; 1
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	34 96       	adiw	r30, 0x04	; 4
     8b2:	47 ff       	sbrs	r20, 7
     8b4:	ef cf       	rjmp	.-34     	; 0x894
     8b6:	10 92 c1 00 	sts	0x00C1, r1
     8ba:	10 92 c0 00 	sts	0x00C0, r1
     8be:	8a ed       	ldi	r24, 0xDA	; 218
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	90 93 d4 01 	sts	0x01D4, r25
     8c6:	80 93 d3 01 	sts	0x01D3, r24
     8ca:	2a b5       	in	r18, 0x2a	; 42
     8cc:	8b b5       	in	r24, 0x2b	; 43
     8ce:	99 27       	eor	r25, r25
     8d0:	98 2f       	mov	r25, r24
     8d2:	88 27       	eor	r24, r24
     8d4:	82 0f       	add	r24, r18
     8d6:	91 1d       	adc	r25, r1
     8d8:	86 52       	subi	r24, 0x26	; 38
     8da:	9b 4f       	sbci	r25, 0xFB	; 251
     8dc:	29 2f       	mov	r18, r25
     8de:	33 27       	eor	r19, r19
     8e0:	2b bd       	out	0x2b, r18	; 43
     8e2:	8a bd       	out	0x2a, r24	; 42
     8e4:	89 b7       	in	r24, 0x39	; 57
     8e6:	80 61       	ori	r24, 0x10	; 16
     8e8:	89 bf       	out	0x39, r24	; 57
     8ea:	08 95       	ret

000008ec <servoOff>:
     8ec:	89 b7       	in	r24, 0x39	; 57
     8ee:	8f 7e       	andi	r24, 0xEF	; 239
     8f0:	89 bf       	out	0x39, r24	; 57
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	0e 94 52 01 	call	0x2a4
     8f8:	08 95       	ret

000008fa <servoSetChannelIO>:
     8fa:	24 2f       	mov	r18, r20
     8fc:	e8 2f       	mov	r30, r24
     8fe:	ff 27       	eor	r31, r31
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	e9 57       	subi	r30, 0x79	; 121
     90a:	ff 4f       	sbci	r31, 0xFF	; 255
     90c:	60 83       	st	Z, r22
     90e:	33 27       	eor	r19, r19
     910:	27 70       	andi	r18, 0x07	; 7
     912:	30 70       	andi	r19, 0x00	; 0
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	02 c0       	rjmp	.+4      	; 0x91e
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	2a 95       	dec	r18
     920:	e2 f7       	brpl	.-8      	; 0x91a
     922:	81 83       	std	Z+1, r24	; 0x01
     924:	08 95       	ret

00000926 <servoSetPositionRaw>:
     926:	62 32       	cpi	r22, 0x22	; 34
     928:	71 05       	cpc	r23, r1
     92a:	10 f4       	brcc	.+4      	; 0x930
     92c:	62 e2       	ldi	r22, 0x22	; 34
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	6b 38       	cpi	r22, 0x8B	; 139
     932:	71 05       	cpc	r23, r1
     934:	10 f0       	brcs	.+4      	; 0x93a
     936:	6a e8       	ldi	r22, 0x8A	; 138
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	e8 2f       	mov	r30, r24
     93c:	ff 27       	eor	r31, r31
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	e9 57       	subi	r30, 0x79	; 121
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	73 83       	std	Z+3, r23	; 0x03
     94c:	62 83       	std	Z+2, r22	; 0x02
     94e:	08 95       	ret

00000950 <servoSetPosition>:
     950:	28 2f       	mov	r18, r24
     952:	88 e6       	ldi	r24, 0x68	; 104
     954:	68 9f       	mul	r22, r24
     956:	c0 01       	movw	r24, r0
     958:	11 24       	eor	r1, r1
     95a:	6f ef       	ldi	r22, 0xFF	; 255
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 ee 10 	call	0x21dc
     962:	cb 01       	movw	r24, r22
     964:	82 96       	adiw	r24, 0x22	; 34
     966:	bc 01       	movw	r22, r24
     968:	82 2f       	mov	r24, r18
     96a:	0e 94 93 04 	call	0x926
     96e:	08 95       	ret

00000970 <servoGetPositionRaw>:
     970:	e8 2f       	mov	r30, r24
     972:	ff 27       	eor	r31, r31
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	e9 57       	subi	r30, 0x79	; 121
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	82 81       	ldd	r24, Z+2	; 0x02
     982:	93 81       	ldd	r25, Z+3	; 0x03
     984:	08 95       	ret

00000986 <servoGetPosition>:
     986:	0e 94 b8 04 	call	0x970
     98a:	2f ef       	ldi	r18, 0xFF	; 255
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	82 9f       	mul	r24, r18
     990:	a0 01       	movw	r20, r0
     992:	83 9f       	mul	r24, r19
     994:	50 0d       	add	r21, r0
     996:	92 9f       	mul	r25, r18
     998:	50 0d       	add	r21, r0
     99a:	11 24       	eor	r1, r1
     99c:	ca 01       	movw	r24, r20
     99e:	8e 5d       	subi	r24, 0xDE	; 222
     9a0:	91 42       	sbci	r25, 0x21	; 33
     9a2:	68 e6       	ldi	r22, 0x68	; 104
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 ee 10 	call	0x21dc
     9aa:	cb 01       	movw	r24, r22
     9ac:	99 27       	eor	r25, r25
     9ae:	08 95       	ret

000009b0 <servoService>:
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	e0 91 86 00 	lds	r30, 0x0086
     9b8:	e2 30       	cpi	r30, 0x02	; 2
     9ba:	80 f4       	brcc	.+32     	; 0x9dc
     9bc:	ff 27       	eor	r31, r31
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	e9 57       	subi	r30, 0x79	; 121
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	80 81       	ld	r24, Z
     9cc:	a8 2f       	mov	r26, r24
     9ce:	bb 27       	eor	r27, r27
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	90 95       	com	r25
     9d4:	ed 01       	movw	r28, r26
     9d6:	88 a1       	ldd	r24, Y+32	; 0x20
     9d8:	89 23       	and	r24, r25
     9da:	88 a3       	std	Y+32, r24	; 0x20
     9dc:	80 91 86 00 	lds	r24, 0x0086
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	80 93 86 00 	sts	0x0086, r24
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	19 f1       	breq	.+70     	; 0xa30
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	10 f0       	brcs	.+4      	; 0x9f2
     9ee:	10 92 86 00 	sts	0x0086, r1
     9f2:	80 91 86 00 	lds	r24, 0x0086
     9f6:	e8 2f       	mov	r30, r24
     9f8:	ff 27       	eor	r31, r31
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e9 57       	subi	r30, 0x79	; 121
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	80 81       	ld	r24, Z
     a08:	a8 2f       	mov	r26, r24
     a0a:	bb 27       	eor	r27, r27
     a0c:	ed 01       	movw	r28, r26
     a0e:	88 a1       	ldd	r24, Y+32	; 0x20
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	89 2b       	or	r24, r25
     a14:	88 a3       	std	Y+32, r24	; 0x20
     a16:	80 91 86 00 	lds	r24, 0x0086
     a1a:	e8 2f       	mov	r30, r24
     a1c:	ff 27       	eor	r31, r31
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	e9 57       	subi	r30, 0x79	; 121
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	42 81       	ldd	r20, Z+2	; 0x02
     a2c:	53 81       	ldd	r21, Z+3	; 0x03
     a2e:	0a c0       	rjmp	.+20     	; 0xa44
     a30:	40 91 d3 01 	lds	r20, 0x01D3
     a34:	50 91 d4 01 	lds	r21, 0x01D4
     a38:	80 91 c0 00 	lds	r24, 0x00C0
     a3c:	90 91 c1 00 	lds	r25, 0x00C1
     a40:	48 1b       	sub	r20, r24
     a42:	59 0b       	sbc	r21, r25
     a44:	2a b5       	in	r18, 0x2a	; 42
     a46:	8b b5       	in	r24, 0x2b	; 43
     a48:	99 27       	eor	r25, r25
     a4a:	98 2f       	mov	r25, r24
     a4c:	88 27       	eor	r24, r24
     a4e:	82 0f       	add	r24, r18
     a50:	91 1d       	adc	r25, r1
     a52:	84 0f       	add	r24, r20
     a54:	95 1f       	adc	r25, r21
     a56:	29 2f       	mov	r18, r25
     a58:	33 27       	eor	r19, r19
     a5a:	2b bd       	out	0x2b, r18	; 43
     a5c:	8a bd       	out	0x2a, r24	; 42
     a5e:	80 91 c0 00 	lds	r24, 0x00C0
     a62:	90 91 c1 00 	lds	r25, 0x00C1
     a66:	84 0f       	add	r24, r20
     a68:	95 1f       	adc	r25, r21
     a6a:	90 93 c1 00 	sts	0x00C1, r25
     a6e:	80 93 c0 00 	sts	0x00C0, r24
     a72:	20 91 d3 01 	lds	r18, 0x01D3
     a76:	30 91 d4 01 	lds	r19, 0x01D4
     a7a:	82 17       	cp	r24, r18
     a7c:	93 07       	cpc	r25, r19
     a7e:	20 f0       	brcs	.+8      	; 0xa88
     a80:	10 92 c1 00 	sts	0x00C1, r1
     a84:	10 92 c0 00 	sts	0x00C0, r1
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <__vector_11>:
     a8e:	0e 94 da 0e 	call	0x1db4
     a92:	82 b7       	in	r24, 0x32	; 50
     a94:	8f 53       	subi	r24, 0x3F	; 63
     a96:	82 bf       	out	0x32, r24	; 50
     a98:	0e 94 74 10 	call	0x20e8
     a9c:	0e 94 26 0f 	call	0x1e4c

00000aa0 <myputs>:
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	8c 01       	movw	r16, r24
     aaa:	eb 01       	movw	r28, r22
     aac:	88 81       	ld	r24, Y
     aae:	88 23       	and	r24, r24
     ab0:	31 f0       	breq	.+12     	; 0xabe
     ab2:	89 91       	ld	r24, Y+
     ab4:	f8 01       	movw	r30, r16
     ab6:	09 95       	icall
     ab8:	88 81       	ld	r24, Y
     aba:	88 23       	and	r24, r24
     abc:	d1 f7       	brne	.-12     	; 0xab2
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <myputs_P>:
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	8c 01       	movw	r16, r24
     ad2:	eb 01       	movw	r28, r22
		(*putch)(__LPM(psz++));
     ad4:	fb 01       	movw	r30, r22
     ad6:	84 91       	lpm	r24, Z
     ad8:	88 23       	and	r24, r24
     ada:	49 f0       	breq	.+18     	; 0xaee
     adc:	fe 01       	movw	r30, r28
     ade:	21 96       	adiw	r28, 0x01	; 1
     ae0:	84 91       	lpm	r24, Z
     ae2:	f8 01       	movw	r30, r16
     ae4:	09 95       	icall
     ae6:	fe 01       	movw	r30, r28
     ae8:	84 91       	lpm	r24, Z
     aea:	88 23       	and	r24, r24
     aec:	b9 f7       	brne	.-18     	; 0xadc
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <getUAVStatus>:
}

//#if (USART_CHANNELS & CHANNEL_0)

//tell the ground station I am OK by sending a "1" 10 times a second
AVRX_GCC_TASKDEF(getUAVStatus, 76, 4)
{	
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	26 97       	sbiw	r28, 0x06	; 6
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		printf_P(PSTR("1"));
     b0c:	8f ea       	ldi	r24, 0xAF	; 175
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     b18:	60 91 35 06 	lds	r22, 0x0635
     b1c:	70 91 36 06 	lds	r23, 0x0636
     b20:	8d e0       	ldi	r24, 0x0D	; 13
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
		AvrXDelay(&timer, 100);
     b2c:	64 e6       	ldi	r22, 0x64	; 100
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 46 10 	call	0x208c
     b38:	e9 cf       	rjmp	.-46     	; 0xb0c

00000b3a <getCompassHeading>:
	}
}

AVRX_GCC_TASKDEF(getCompassHeading, 76, 4)
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	26 97       	sbiw	r28, 0x06	; 6
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		int c = 0;
     b4e:	00 e0       	ldi	r16, 0x00	; 0
     b50:	10 e0       	ldi	r17, 0x00	; 0
		
		while (c<360)
		{	printf_P(PSTR("c %d"), c/3);   	// c/3 evaluates to an int, even it c is not a multiple of
     b52:	c8 01       	movw	r24, r16
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 02 11 	call	0x2204
     b5c:	7f 93       	push	r23
     b5e:	6f 93       	push	r22
     b60:	81 eb       	ldi	r24, 0xB1	; 177
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	0e 94 9e 0a 	call	0x153c
			putchar('\r');					// 3.  This way, the heading is sent as ONE char instead of
     b6c:	60 91 35 06 	lds	r22, 0x0635
     b70:	70 91 36 06 	lds	r23, 0x0636
     b74:	8d e0       	ldi	r24, 0x0D	; 13
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 63 0a 	call	0x14c6
			if (DEBUG) putchar('\n');		// one, two, or three.
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
			c++;
     b84:	0f 5f       	subi	r16, 0xFF	; 255
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
			AvrXDelay(&timer, 1000);
     b88:	68 ee       	ldi	r22, 0xE8	; 232
     b8a:	73 e0       	ldi	r23, 0x03	; 3
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 46 10 	call	0x208c
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	08 36       	cpi	r16, 0x68	; 104
     b98:	18 07       	cpc	r17, r24
     b9a:	dc f2       	brlt	.-74     	; 0xb52
     b9c:	08 e6       	ldi	r16, 0x68	; 104
     b9e:	11 e0       	ldi	r17, 0x01	; 1
		}
		while (c>0)
		{	printf_P(PSTR("c %d"), c/3);
     ba0:	c8 01       	movw	r24, r16
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	0e 94 02 11 	call	0x2204
     baa:	7f 93       	push	r23
     bac:	6f 93       	push	r22
     bae:	86 eb       	ldi	r24, 0xB6	; 182
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9f 93       	push	r25
     bb4:	8f 93       	push	r24
     bb6:	0e 94 9e 0a 	call	0x153c
			putchar('\r');
     bba:	60 91 35 06 	lds	r22, 0x0635
     bbe:	70 91 36 06 	lds	r23, 0x0636
     bc2:	8d e0       	ldi	r24, 0x0D	; 13
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 63 0a 	call	0x14c6
			if (DEBUG) putchar('\n');		//We only want a newline if we are debugging on
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
			c--;							//a terminal.  Otherwise, we are communicating with
     bd2:	01 50       	subi	r16, 0x01	; 1
     bd4:	10 40       	sbci	r17, 0x00	; 0
			AvrXDelay(&timer, 1000);		//the ground station and it should not be sent.
     bd6:	68 ee       	ldi	r22, 0xE8	; 232
     bd8:	73 e0       	ldi	r23, 0x03	; 3
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	0e 94 46 10 	call	0x208c
     be2:	10 16       	cp	r1, r16
     be4:	11 06       	cpc	r1, r17
     be6:	e4 f2       	brlt	.-72     	; 0xba0
     be8:	b2 cf       	rjmp	.-156    	; 0xb4e

00000bea <getAirspeed>:
		}
	}
}

AVRX_GCC_TASKDEF(getAirspeed, 76, 4)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	26 97       	sbiw	r28, 0x06	; 6
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int s = 0;
     bfe:	00 e0       	ldi	r16, 0x00	; 0
     c00:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{	
		while (s<25)
		{	printf_P(PSTR("s %d"), s);   
			putchar('\r');
			if (DEBUG) putchar('\n');	
			s++;							
			AvrXDelay(&timer, 1000);
     c02:	09 31       	cpi	r16, 0x19	; 25
     c04:	11 05       	cpc	r17, r1
     c06:	ec f4       	brge	.+58     	; 0xc42
     c08:	1f 93       	push	r17
     c0a:	0f 93       	push	r16
     c0c:	8b eb       	ldi	r24, 0xBB	; 187
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	0e 94 9e 0a 	call	0x153c
     c18:	60 91 35 06 	lds	r22, 0x0635
     c1c:	70 91 36 06 	lds	r23, 0x0636
     c20:	8d e0       	ldi	r24, 0x0D	; 13
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 63 0a 	call	0x14c6
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 5f       	subi	r16, 0xFF	; 255
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	68 ee       	ldi	r22, 0xE8	; 232
     c36:	73 e0       	ldi	r23, 0x03	; 3
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	0e 94 46 10 	call	0x208c
     c40:	e0 cf       	rjmp	.-64     	; 0xc02
		}
		while (s>15)
		{	printf_P(PSTR("s %d"), s);
			putchar('\r');
			if (DEBUG) putchar('\n');
			s--;
			AvrXDelay(&timer, 1000);
     c42:	00 31       	cpi	r16, 0x10	; 16
     c44:	11 05       	cpc	r17, r1
     c46:	ec f2       	brlt	.-70     	; 0xc02
     c48:	1f 93       	push	r17
     c4a:	0f 93       	push	r16
     c4c:	80 ec       	ldi	r24, 0xC0	; 192
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9f 93       	push	r25
     c52:	8f 93       	push	r24
     c54:	0e 94 9e 0a 	call	0x153c
     c58:	60 91 35 06 	lds	r22, 0x0635
     c5c:	70 91 36 06 	lds	r23, 0x0636
     c60:	8d e0       	ldi	r24, 0x0D	; 13
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 63 0a 	call	0x14c6
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	01 50       	subi	r16, 0x01	; 1
     c72:	10 40       	sbci	r17, 0x00	; 0
     c74:	68 ee       	ldi	r22, 0xE8	; 232
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 46 10 	call	0x208c
     c80:	e0 cf       	rjmp	.-64     	; 0xc42

00000c82 <getGroundspeed>:
		}
	}
}

AVRX_GCC_TASKDEF(getGroundspeed, 76, 4)
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	26 97       	sbiw	r28, 0x06	; 6
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int g = 18;
     c96:	02 e1       	ldi	r16, 0x12	; 18
     c98:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{	
		while (g<22)
		{	printf_P(PSTR("g %d"), g);   
			putchar('\r');
			if (DEBUG) putchar('\n');	
			g++;							
			AvrXDelay(&timer, 30*1000);
     c9a:	06 31       	cpi	r16, 0x16	; 22
     c9c:	11 05       	cpc	r17, r1
     c9e:	ec f4       	brge	.+58     	; 0xcda
     ca0:	1f 93       	push	r17
     ca2:	0f 93       	push	r16
     ca4:	85 ec       	ldi	r24, 0xC5	; 197
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	0e 94 9e 0a 	call	0x153c
     cb0:	60 91 35 06 	lds	r22, 0x0635
     cb4:	70 91 36 06 	lds	r23, 0x0636
     cb8:	8d e0       	ldi	r24, 0x0D	; 13
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 63 0a 	call	0x14c6
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 5f       	subi	r16, 0xFF	; 255
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	60 e3       	ldi	r22, 0x30	; 48
     cce:	75 e7       	ldi	r23, 0x75	; 117
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 46 10 	call	0x208c
     cd8:	e0 cf       	rjmp	.-64     	; 0xc9a
		}
		while (g>18)
		{	printf_P(PSTR("g %d"), g);
			putchar('\r');
			if (DEBUG) putchar('\n');
			g--;
			AvrXDelay(&timer, 30*1000);
     cda:	03 31       	cpi	r16, 0x13	; 19
     cdc:	11 05       	cpc	r17, r1
     cde:	ec f2       	brlt	.-70     	; 0xc9a
     ce0:	1f 93       	push	r17
     ce2:	0f 93       	push	r16
     ce4:	8a ec       	ldi	r24, 0xCA	; 202
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	0e 94 9e 0a 	call	0x153c
     cf0:	60 91 35 06 	lds	r22, 0x0635
     cf4:	70 91 36 06 	lds	r23, 0x0636
     cf8:	8d e0       	ldi	r24, 0x0D	; 13
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 63 0a 	call	0x14c6
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	01 50       	subi	r16, 0x01	; 1
     d0a:	10 40       	sbci	r17, 0x00	; 0
     d0c:	60 e3       	ldi	r22, 0x30	; 48
     d0e:	75 e7       	ldi	r23, 0x75	; 117
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	0e 94 46 10 	call	0x208c
     d18:	e0 cf       	rjmp	.-64     	; 0xcda

00000d1a <getGPSData>:
		}
	}
}

AVRX_GCC_TASKDEF(getGPSData, 76, 4)
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	26 97       	sbiw	r28, 0x06	; 6
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int z = 0;
     d2e:	00 e0       	ldi	r16, 0x00	; 0
     d30:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{	
		// Since latitude and longitude cannot be expressed as simple integers,
		// we cannot fake the measurements by cycling through some numbers.
		printf_P(PSTR("a 067.5759E"));   
     d32:	8f ec       	ldi	r24, 0xCF	; 207
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     d3e:	60 91 35 06 	lds	r22, 0x0635
     d42:	70 91 36 06 	lds	r23, 0x0636
     d46:	8d e0       	ldi	r24, 0x0D	; 13
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
		
		printf_P(PSTR("o 89.12345N"));	
     d52:	8b ed       	ldi	r24, 0xDB	; 219
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     d5e:	60 91 35 06 	lds	r22, 0x0635
     d62:	70 91 36 06 	lds	r23, 0x0636
     d66:	8d e0       	ldi	r24, 0x0D	; 13
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
		
		printf_P(PSTR("z %d"), z);
     d72:	1f 93       	push	r17
     d74:	0f 93       	push	r16
     d76:	87 ee       	ldi	r24, 0xE7	; 231
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     d82:	60 91 35 06 	lds	r22, 0x0635
     d86:	70 91 36 06 	lds	r23, 0x0636
     d8a:	8d e0       	ldi	r24, 0x0D	; 13
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
		
		if (z<100) z++;
     d9a:	04 36       	cpi	r16, 0x64	; 100
     d9c:	11 05       	cpc	r17, r1
     d9e:	14 f4       	brge	.+4      	; 0xda4
     da0:	0f 5f       	subi	r16, 0xFF	; 255
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
		AvrXDelay(&timer, 1000);
     da4:	68 ee       	ldi	r22, 0xE8	; 232
     da6:	73 e0       	ldi	r23, 0x03	; 3
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 46 10 	call	0x208c
		
		
		
		printf_P(PSTR("a 101.4512W"));   
     db0:	8c ee       	ldi	r24, 0xEC	; 236
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     dbc:	60 91 35 06 	lds	r22, 0x0635
     dc0:	70 91 36 06 	lds	r23, 0x0636
     dc4:	8d e0       	ldi	r24, 0x0D	; 13
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
		
		printf_P(PSTR("o 05.98765S"));   
     dd0:	88 ef       	ldi	r24, 0xF8	; 248
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     ddc:	60 91 35 06 	lds	r22, 0x0635
     de0:	70 91 36 06 	lds	r23, 0x0636
     de4:	8d e0       	ldi	r24, 0x0D	; 13
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
		
		printf_P(PSTR("z %d"), z);
     df0:	1f 93       	push	r17
     df2:	0f 93       	push	r16
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     e00:	60 91 35 06 	lds	r22, 0x0635
     e04:	70 91 36 06 	lds	r23, 0x0636
     e08:	8d e0       	ldi	r24, 0x0D	; 13
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
		
		if (z<100) z++;	
     e18:	04 36       	cpi	r16, 0x64	; 100
     e1a:	11 05       	cpc	r17, r1
     e1c:	14 f4       	brge	.+4      	; 0xe22
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
		AvrXDelay(&timer, 1000);
     e22:	68 ee       	ldi	r22, 0xE8	; 232
     e24:	73 e0       	ldi	r23, 0x03	; 3
     e26:	ce 01       	movw	r24, r28
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	0e 94 46 10 	call	0x208c
     e2e:	81 cf       	rjmp	.-254    	; 0xd32

00000e30 <getFuelAndBattery>:
		
	}		
}

AVRX_GCC_TASKDEF(getFuelAndBattery, 76, 4)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	26 97       	sbiw	r28, 0x06	; 6
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int b = 100;
     e44:	04 e6       	ldi	r16, 0x64	; 100
     e46:	10 e0       	ldi	r17, 0x00	; 0
	int f = 100;
     e48:	78 01       	movw	r14, r16
	
	while(1)
	{	
		printf_P(PSTR("b %d"), b);   
     e4a:	ff 92       	push	r15
     e4c:	ef 92       	push	r14
     e4e:	89 e0       	ldi	r24, 0x09	; 9
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	9f 93       	push	r25
     e54:	8f 93       	push	r24
     e56:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     e5a:	60 91 35 06 	lds	r22, 0x0635
     e5e:	70 91 36 06 	lds	r23, 0x0636
     e62:	8d e0       	ldi	r24, 0x0D	; 13
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');	
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
		printf_P(PSTR("f %d"), f);
     e72:	1f 93       	push	r17
     e74:	0f 93       	push	r16
     e76:	8e e0       	ldi	r24, 0x0E	; 14
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	0e 94 9e 0a 	call	0x153c
		putchar('\r');
     e82:	60 91 35 06 	lds	r22, 0x0635
     e86:	70 91 36 06 	lds	r23, 0x0636
     e8a:	8d e0       	ldi	r24, 0x0D	; 13
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 63 0a 	call	0x14c6
		if (DEBUG) putchar('\n');							
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
		b--;
     e9a:	08 94       	sec
     e9c:	e1 08       	sbc	r14, r1
     e9e:	f1 08       	sbc	r15, r1
		f--;
     ea0:	01 50       	subi	r16, 0x01	; 1
     ea2:	10 40       	sbci	r17, 0x00	; 0
		AvrXDelay(&timer, 30*1000);
     ea4:	60 e3       	ldi	r22, 0x30	; 48
     ea6:	75 e7       	ldi	r23, 0x75	; 117
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	0e 94 46 10 	call	0x208c
     eb0:	cc cf       	rjmp	.-104    	; 0xe4a

00000eb2 <getPitchAndRoll>:
	}
}


AVRX_GCC_TASKDEF(getPitchAndRoll, 76, 4)
{
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	26 97       	sbiw	r28, 0x06	; 6
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	int q = 0;
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
	int w = 127;
     eca:	7f e7       	ldi	r23, 0x7F	; 127
     ecc:	e7 2e       	mov	r14, r23
     ece:	f1 2c       	mov	r15, r1
	
	while(1)
	{	
		while (q<127)
		{	printf_P(PSTR("q %d"), q);   
			putchar('\r');
			if (DEBUG) putchar('\n');	
			printf_P(PSTR("w %d"), w);
			putchar('\r');
			if (DEBUG) putchar('\n');
			q++;					
			w--;		
			AvrXDelay(&timer, 33);		//try 33Hz
     ed0:	0f 37       	cpi	r16, 0x7F	; 127
     ed2:	11 05       	cpc	r17, r1
     ed4:	a4 f5       	brge	.+104    	; 0xf3e
     ed6:	1f 93       	push	r17
     ed8:	0f 93       	push	r16
     eda:	83 e1       	ldi	r24, 0x13	; 19
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	9f 93       	push	r25
     ee0:	8f 93       	push	r24
     ee2:	0e 94 9e 0a 	call	0x153c
     ee6:	60 91 35 06 	lds	r22, 0x0635
     eea:	70 91 36 06 	lds	r23, 0x0636
     eee:	8d e0       	ldi	r24, 0x0D	; 13
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 63 0a 	call	0x14c6
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	ff 92       	push	r15
     f00:	ef 92       	push	r14
     f02:	88 e1       	ldi	r24, 0x18	; 24
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	9f 93       	push	r25
     f08:	8f 93       	push	r24
     f0a:	0e 94 9e 0a 	call	0x153c
     f0e:	60 91 35 06 	lds	r22, 0x0635
     f12:	70 91 36 06 	lds	r23, 0x0636
     f16:	8d e0       	ldi	r24, 0x0D	; 13
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 63 0a 	call	0x14c6
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 5f       	subi	r16, 0xFF	; 255
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	08 94       	sec
     f2c:	e1 08       	sbc	r14, r1
     f2e:	f1 08       	sbc	r15, r1
     f30:	61 e2       	ldi	r22, 0x21	; 33
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	0e 94 46 10 	call	0x208c
     f3c:	c9 cf       	rjmp	.-110    	; 0xed0
		}
		while (q>0)
		{	printf_P(PSTR("q %d"), q);
			putchar('\r');
			if (DEBUG) putchar('\n');
			printf_P(PSTR("w %d"), w);
			putchar('\r');
			if (DEBUG) putchar('\n');
			q--;
			w++;
			AvrXDelay(&timer, 33);
     f3e:	10 16       	cp	r1, r16
     f40:	11 06       	cpc	r1, r17
     f42:	34 f6       	brge	.-116    	; 0xed0
     f44:	1f 93       	push	r17
     f46:	0f 93       	push	r16
     f48:	8d e1       	ldi	r24, 0x1D	; 29
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	9f 93       	push	r25
     f4e:	8f 93       	push	r24
     f50:	0e 94 9e 0a 	call	0x153c
     f54:	60 91 35 06 	lds	r22, 0x0635
     f58:	70 91 36 06 	lds	r23, 0x0636
     f5c:	8d e0       	ldi	r24, 0x0D	; 13
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 63 0a 	call	0x14c6
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	ff 92       	push	r15
     f6e:	ef 92       	push	r14
     f70:	82 e2       	ldi	r24, 0x22	; 34
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	0e 94 9e 0a 	call	0x153c
     f7c:	60 91 35 06 	lds	r22, 0x0635
     f80:	70 91 36 06 	lds	r23, 0x0636
     f84:	8d e0       	ldi	r24, 0x0D	; 13
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 63 0a 	call	0x14c6
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	01 50       	subi	r16, 0x01	; 1
     f96:	10 40       	sbci	r17, 0x00	; 0
     f98:	08 94       	sec
     f9a:	e1 1c       	adc	r14, r1
     f9c:	f1 1c       	adc	r15, r1
     f9e:	61 e2       	ldi	r22, 0x21	; 33
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	0e 94 46 10 	call	0x208c
     faa:	c9 cf       	rjmp	.-110    	; 0xf3e

00000fac <getCommands>:
		}
	}
}

AVRX_GCC_TASKDEF(getCommands, 100, 5)
{	
	int c;		
	
	while (1)
	{
		while ((c = getchar()) != EOF)
     fac:	15 c0       	rjmp	.+42     	; 0xfd8
		{	
			if (c == '\r')
     fae:	cd 30       	cpi	r28, 0x0D	; 13
     fb0:	d1 05       	cpc	r29, r1
     fb2:	79 f4       	brne	.+30     	; 0xfd2
			{	putchar('\r');
     fb4:	60 91 35 06 	lds	r22, 0x0635
     fb8:	70 91 36 06 	lds	r23, 0x0636
     fbc:	ce 01       	movw	r24, r28
     fbe:	0e 94 63 0a 	call	0x14c6
				putchar('\n');
     fc2:	60 91 35 06 	lds	r22, 0x0635
     fc6:	70 91 36 06 	lds	r23, 0x0636
     fca:	8a e0       	ldi	r24, 0x0A	; 10
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 63 0a 	call	0x14c6
			}
			parserInputFunc(c);
     fd2:	8c 2f       	mov	r24, r28
     fd4:	0e 94 1f 01 	call	0x23e
     fd8:	80 91 33 06 	lds	r24, 0x0633
     fdc:	90 91 34 06 	lds	r25, 0x0634
     fe0:	0e 94 26 0a 	call	0x144c
     fe4:	ec 01       	movw	r28, r24
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	cf 3f       	cpi	r28, 0xFF	; 255
     fea:	d8 07       	cpc	r29, r24
     fec:	01 f7       	brne	.-64     	; 0xfae
     fee:	f4 cf       	rjmp	.-24     	; 0xfd8

00000ff0 <marktribe>:
		}
	}
}

AVRX_GCC_TASKDEF(marktribe, 70, 3)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	26 97       	sbiw	r28, 0x06	; 6
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer2;
    char c = 'a';
    1004:	11 e6       	ldi	r17, 0x61	; 97
    printf_P(PSTR("I founded Rhizome!\r\n"));
    1006:	87 e2       	ldi	r24, 0x27	; 39
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	0e 94 9e 0a 	call	0x153c
    while(1)
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    {    
        printf_P(PSTR("%d "),c);
    1016:	81 2f       	mov	r24, r17
    1018:	99 27       	eor	r25, r25
    101a:	87 fd       	sbrc	r24, 7
    101c:	90 95       	com	r25
    101e:	9f 93       	push	r25
    1020:	8f 93       	push	r24
    1022:	8c e3       	ldi	r24, 0x3C	; 60
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	9f 93       	push	r25
    1028:	8f 93       	push	r24
    102a:	0e 94 9e 0a 	call	0x153c
        c++;
    102e:	1f 5f       	subi	r17, 0xFF	; 255
        AvrXDelay(&timer2, 1000); //supposed to be a 1000 ms delay
    1030:	68 ee       	ldi	r22, 0xE8	; 232
    1032:	73 e0       	ldi	r23, 0x03	; 3
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	0e 94 46 10 	call	0x208c
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	e8 cf       	rjmp	.-48     	; 0x1016

00001046 <main>:
    }
    
}
	
/*
AVRX_GCC_TASKDEF(servos, 120, 1)
{
	TimerControlBlock timer3;
	
	u08 pos;
	u08 channel;

	// do some examples
	// initialize RC servo system
	servoInit();
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);


	// set port pins to output
	outb(DDRC, 0x01);

	pos = 0;
	
	#define SPEED_SERVO	1

	// spin servos sequentially back and forth between their limits
	while(1)
	{
		for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
		{
			for(pos=0; pos<SERVO_POSITION_MAX; pos++)
			{
				servoSetPosition(channel,pos);
				AvrXDelay(&timer3, 1000);;
			}
		}

		for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
		{
			for(pos=SERVO_POSITION_MAX; pos>=1; pos--)
			{
				servoSetPosition(channel,pos);
				AvrXDelay(&timer3, 1000);;
			}
		}
	}
}
*/
//#endif // USART_CHANNELS & CHANNEL_0

int main(void)
{
    1046:	cf e5       	ldi	r28, 0x5F	; 95
    1048:	d8 e0       	ldi	r29, 0x08	; 8
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 5f 0f 	call	0x1ebe

	MCUCR = _BV(SE);
    1056:	80 e8       	ldi	r24, 0x80	; 128
    1058:	85 bf       	out	0x35, r24	; 53
	TCNT0 = TCNT0_INIT;
    105a:	81 ec       	ldi	r24, 0xC1	; 193
    105c:	82 bf       	out	0x32, r24	; 50
#if defined (__AVR_ATmega103__) || defined (__ATmega103__)
	TCCR0 =  ((1<<CS02) | (1<<CS01));
#elif defined (__AVR_ATmega128__) || defined (__ATmega128__) || defined (__AVR_ATmega64__) || defined (__ATmega64__)
	TCCR0 =  ((1<<CS2) | (1<<CS1));
#else	// Most other chips...  Note: some are TCCR0 and some are TCCR0B...
	TCCR0 =  (1<<CS02);
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	83 bf       	out	0x33, r24	; 51
#endif
	TIMSK = _BV(TOIE0);
    1062:	11 e0       	ldi	r17, 0x01	; 1
    1064:	19 bf       	out	0x39, r17	; 57

    InitSerial0(BAUD(9600));
    1066:	8f ec       	ldi	r24, 0xCF	; 207
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 d3 08 	call	0x11a6
    fdevopen(put_char0, get_c0,0);		// Set up standard I/O
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	6c ef       	ldi	r22, 0xFC	; 252
    1074:	78 e0       	ldi	r23, 0x08	; 8
    1076:	83 ef       	ldi	r24, 0xF3	; 243
    1078:	98 e0       	ldi	r25, 0x08	; 8
    107a:	0e 94 dd 09 	call	0x13ba

	// initialize parser system
	parserInit();
    107e:	0e 94 bd 00 	call	0x17a
	// direct output to uart (serial port)
	parserSetOutputFunc(put_char0);
    1082:	83 ef       	ldi	r24, 0xF3	; 243
    1084:	98 e0       	ldi	r25, 0x08	; 8
    1086:	0e 94 e5 00 	call	0x1ca
	// add commands to the command database
	parserAddCommand("l",		setLeftServo);
    108a:	67 e9       	ldi	r22, 0x97	; 151
    108c:	78 e0       	ldi	r23, 0x08	; 8
    108e:	82 e6       	ldi	r24, 0x62	; 98
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 c6 00 	call	0x18c
	parserAddCommand("r",		setRightServo);
    1096:	63 ea       	ldi	r22, 0xA3	; 163
    1098:	78 e0       	ldi	r23, 0x08	; 8
    109a:	84 e6       	ldi	r24, 0x64	; 100
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 c6 00 	call	0x18c
    parserAddCommand("t", 		setThrottleServo);
    10a2:	6f ea       	ldi	r22, 0xAF	; 175
    10a4:	78 e0       	ldi	r23, 0x08	; 8
    10a6:	86 e6       	ldi	r24, 0x66	; 102
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 c6 00 	call	0x18c
	parserAddCommand("p", 		setCamPanServo);
    10ae:	6b eb       	ldi	r22, 0xBB	; 187
    10b0:	78 e0       	ldi	r23, 0x08	; 8
    10b2:	88 e6       	ldi	r24, 0x68	; 104
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 c6 00 	call	0x18c
	parserAddCommand("i", 		setCamTiltServo);
    10ba:	67 ec       	ldi	r22, 0xC7	; 199
    10bc:	78 e0       	ldi	r23, 0x08	; 8
    10be:	8a e6       	ldi	r24, 0x6A	; 106
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 c6 00 	call	0x18c
	
	// initialize the timer system -- FROM AVRLIB
	//timerInit();
	
	//////////////////////////////////////////////////Servos//////////////////////////
	servoInit();
    10c6:	0e 94 35 04 	call	0x86a
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	65 e1       	ldi	r22, 0x15	; 21
    10ce:	84 2f       	mov	r24, r20
    10d0:	0e 94 7d 04 	call	0x8fa
	servoSetChannelIO(1, _SFR_IO_ADDR(PORTC), PC1);
    10d4:	41 2f       	mov	r20, r17
    10d6:	65 e1       	ldi	r22, 0x15	; 21
    10d8:	81 2f       	mov	r24, r17
    10da:	0e 94 7d 04 	call	0x8fa

	// set port pins to output
	outb(DDRC, 0x03);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	84 bb       	out	0x14, r24	; 20

	
	#define SPEED_SERVO	1
	//////////////////////////////////////////////////////////////////////////////////
	
	AvrXRunTask(TCB(getCommands));
    10e2:	8b e5       	ldi	r24, 0x5B	; 91
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 6b 0f 	call	0x1ed6
//	AvrXRunTask(TCB(marktribe));
	AvrXRunTask(TCB(getUAVStatus));
    10ea:	8c e8       	ldi	r24, 0x8C	; 140
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 6b 0f 	call	0x1ed6
	AvrXRunTask(TCB(getAirspeed));
    10f2:	8e e7       	ldi	r24, 0x7E	; 126
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 6b 0f 	call	0x1ed6
	AvrXRunTask(TCB(getGroundspeed));
    10fa:	87 e7       	ldi	r24, 0x77	; 119
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 6b 0f 	call	0x1ed6
	AvrXRunTask(TCB(getCompassHeading));
    1102:	85 e8       	ldi	r24, 0x85	; 133
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 6b 0f 	call	0x1ed6
	AvrXRunTask(TCB(getGPSData));
    110a:	80 e7       	ldi	r24, 0x70	; 112
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 6b 0f 	call	0x1ed6
	AvrXRunTask(TCB(getPitchAndRoll));
    1112:	82 e6       	ldi	r24, 0x62	; 98
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 6b 0f 	call	0x1ed6
	AvrXRunTask(TCB(getFuelAndBattery));
    111a:	89 e6       	ldi	r24, 0x69	; 105
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 6b 0f 	call	0x1ed6
	//AvrXRunTask(TCB(servos));
    
	Epilog();
    1122:	0e 94 26 0f 	call	0x1e4c
	return(0);
}
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0c 94 52 11 	jmp	0x22a4

0000112e <setLeftServo>:

void setLeftServo(void)
{	
	leftServoPos = parserGetArgInt();
    112e:	0e 94 39 01 	call	0x272
    1132:	90 93 61 00 	sts	0x0061, r25
    1136:	80 93 60 00 	sts	0x0060, r24
	servoSetPosition(LEFT_SERVO_CHAN, (char)leftServoPos);
    113a:	60 91 60 00 	lds	r22, 0x0060
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 a8 04 	call	0x950
    1144:	08 95       	ret

00001146 <setRightServo>:
	if (DEBUG)
	{	printf("Left Servo Set: %d", leftServoPos);
		putchar('\r');
		putchar('\n');
	}
}

void setRightServo(void)
{	
	rightServoPos = parserGetArgInt();
    1146:	0e 94 39 01 	call	0x272
    114a:	90 93 bf 00 	sts	0x00BF, r25
    114e:	80 93 be 00 	sts	0x00BE, r24
	servoSetPosition(RIGHT_SERVO_CHAN, (char)rightServoPos);
    1152:	60 91 be 00 	lds	r22, 0x00BE
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0e 94 a8 04 	call	0x950
    115c:	08 95       	ret

0000115e <setThrottleServo>:
	if (DEBUG)
	{	printf("Right Servo Set: %d", rightServoPos);
		putchar('\r');
		putchar('\n');
	}
}

void setThrottleServo(void)
{
	throttleServoPos = parserGetArgInt();
    115e:	0e 94 39 01 	call	0x272
    1162:	90 93 eb 01 	sts	0x01EB, r25
    1166:	80 93 ea 01 	sts	0x01EA, r24
	servoSetPosition(THROTTLE_SERVO_CHAN, (char)throttleServoPos);
    116a:	60 91 ea 01 	lds	r22, 0x01EA
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	0e 94 a8 04 	call	0x950
    1174:	08 95       	ret

00001176 <setCamPanServo>:
	if (DEBUG)
	{	printf("Throttle Servo Set: %d", throttleServoPos);
		putchar('\r');
		putchar('\n');
	}
}

void setCamPanServo(void)
{
	camPanServoPos = parserGetArgInt();
    1176:	0e 94 39 01 	call	0x272
    117a:	90 93 90 00 	sts	0x0090, r25
    117e:	80 93 8f 00 	sts	0x008F, r24
	servoSetPosition(CAM_PAN_SERVO_CHAN, (char)camPanServoPos);
    1182:	60 91 8f 00 	lds	r22, 0x008F
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	0e 94 a8 04 	call	0x950
    118c:	08 95       	ret

0000118e <setCamTiltServo>:
	if (DEBUG)
	{	printf("Camera Pan Servo Set: %d", camPanServoPos);
		putchar('\r');
		putchar('\n');
	}
}

void setCamTiltServo(void)
{
	camTiltServoPos = parserGetArgInt();
    118e:	0e 94 39 01 	call	0x272
    1192:	90 93 bd 00 	sts	0x00BD, r25
    1196:	80 93 bc 00 	sts	0x00BC, r24
	servoSetPosition(CAM_TILT_SERVO_CHAN, (char)camTiltServoPos);
    119a:	60 91 bc 00 	lds	r22, 0x00BC
    119e:	84 e0       	ldi	r24, 0x04	; 4
    11a0:	0e 94 a8 04 	call	0x950
    11a4:	08 95       	ret

000011a6 <InitSerial0>:
    11a6:	89 b9       	out	0x09, r24	; 9
    11a8:	89 2f       	mov	r24, r25
    11aa:	99 27       	eor	r25, r25
    11ac:	80 bd       	out	0x20, r24	; 32
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	8b b9       	out	0x0b, r24	; 11
    11b2:	88 e9       	ldi	r24, 0x98	; 152
    11b4:	8a b9       	out	0x0a, r24	; 10
    11b6:	86 e8       	ldi	r24, 0x86	; 134
    11b8:	80 bd       	out	0x20, r24	; 32
    11ba:	8c eb       	ldi	r24, 0xBC	; 188
    11bc:	95 e0       	ldi	r25, 0x05	; 5
    11be:	0e 94 83 09 	call	0x1306
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	80 93 c2 05 	sts	0x05C2, r24
    11c8:	85 e9       	ldi	r24, 0x95	; 149
    11ca:	95 e0       	ldi	r25, 0x05	; 5
    11cc:	0e 94 83 09 	call	0x1306
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	80 93 9b 05 	sts	0x059B, r24
    11d6:	08 95       	ret

000011d8 <put_c0>:
    11d8:	68 2f       	mov	r22, r24
    11da:	85 e9       	ldi	r24, 0x95	; 149
    11dc:	95 e0       	ldi	r25, 0x05	; 5
    11de:	0e 94 20 09 	call	0x1240
    11e2:	55 9a       	sbi	0x0a, 5	; 10
    11e4:	08 95       	ret

000011e6 <put_char0>:
    11e6:	68 2f       	mov	r22, r24
    11e8:	85 e9       	ldi	r24, 0x95	; 149
    11ea:	95 e0       	ldi	r25, 0x05	; 5
    11ec:	0e 94 5d 09 	call	0x12ba
    11f0:	55 9a       	sbi	0x0a, 5	; 10
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	08 95       	ret

000011f8 <get_c0>:
    11f8:	8c eb       	ldi	r24, 0xBC	; 188
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	0e 94 3c 09 	call	0x1278
    1200:	08 95       	ret

00001202 <get_char0>:
    1202:	8c eb       	ldi	r24, 0xBC	; 188
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	0e 94 72 09 	call	0x12e4
    120a:	08 95       	ret

0000120c <__vector_13>:
    120c:	0e 94 da 0e 	call	0x1db4
    1210:	57 98       	cbi	0x0a, 7	; 10
    1212:	78 94       	sei
    1214:	6c b1       	in	r22, 0x0c	; 12
    1216:	8c eb       	ldi	r24, 0xBC	; 188
    1218:	95 e0       	ldi	r25, 0x05	; 5
    121a:	0e 94 20 09 	call	0x1240
    121e:	57 9a       	sbi	0x0a, 7	; 10
    1220:	0e 94 26 0f 	call	0x1e4c

00001224 <__vector_14>:
    1224:	0e 94 da 0e 	call	0x1db4
    1228:	55 98       	cbi	0x0a, 5	; 10
    122a:	78 94       	sei
    122c:	85 e9       	ldi	r24, 0x95	; 149
    122e:	95 e0       	ldi	r25, 0x05	; 5
    1230:	0e 94 3c 09 	call	0x1278
    1234:	97 fd       	sbrc	r25, 7
    1236:	02 c0       	rjmp	.+4      	; 0x123c
    1238:	8c b9       	out	0x0c, r24	; 12
    123a:	55 9a       	sbi	0x0a, 5	; 10
    123c:	0e 94 26 0f 	call	0x1e4c

00001240 <AvrXPutFifo>:
    1240:	dc 01       	movw	r26, r24
    1242:	fc 01       	movw	r30, r24
    1244:	24 81       	ldd	r18, Z+4	; 0x04
    1246:	92 2f       	mov	r25, r18
    1248:	9f 5f       	subi	r25, 0xFF	; 255
    124a:	86 81       	ldd	r24, Z+6	; 0x06
    124c:	98 17       	cp	r25, r24
    124e:	08 f0       	brcs	.+2      	; 0x1252
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fd 01       	movw	r30, r26
    1254:	85 81       	ldd	r24, Z+5	; 0x05
    1256:	98 17       	cp	r25, r24
    1258:	19 f4       	brne	.+6      	; 0x1260
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	9f ef       	ldi	r25, 0xFF	; 255
    125e:	08 95       	ret
    1260:	fd 01       	movw	r30, r26
    1262:	e2 0f       	add	r30, r18
    1264:	f1 1d       	adc	r31, r1
    1266:	67 83       	std	Z+7, r22	; 0x07
    1268:	fd 01       	movw	r30, r26
    126a:	94 83       	std	Z+4, r25	; 0x04
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 dd 0f 	call	0x1fba
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	08 95       	ret

00001278 <AvrXPullFifo>:
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	dc 01       	movw	r26, r24
    127e:	fc 01       	movw	r30, r24
    1280:	84 81       	ldd	r24, Z+4	; 0x04
    1282:	95 81       	ldd	r25, Z+5	; 0x05
    1284:	89 17       	cp	r24, r25
    1286:	19 f4       	brne	.+6      	; 0x128e
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	9f ef       	ldi	r25, 0xFF	; 255
    128c:	13 c0       	rjmp	.+38     	; 0x12b4
    128e:	fd 01       	movw	r30, r26
    1290:	e9 0f       	add	r30, r25
    1292:	f1 1d       	adc	r31, r1
    1294:	87 81       	ldd	r24, Z+7	; 0x07
    1296:	c8 2f       	mov	r28, r24
    1298:	dd 27       	eor	r29, r29
    129a:	9f 5f       	subi	r25, 0xFF	; 255
    129c:	fd 01       	movw	r30, r26
    129e:	86 81       	ldd	r24, Z+6	; 0x06
    12a0:	98 17       	cp	r25, r24
    12a2:	08 f0       	brcs	.+2      	; 0x12a6
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	fd 01       	movw	r30, r26
    12a8:	95 83       	std	Z+5, r25	; 0x05
    12aa:	cd 01       	movw	r24, r26
    12ac:	02 96       	adiw	r24, 0x02	; 2
    12ae:	0e 94 dd 0f 	call	0x1fba
    12b2:	ce 01       	movw	r24, r28
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <AvrXWaitPutFifo>:
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ec 01       	movw	r28, r24
    12c2:	16 2f       	mov	r17, r22
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce
    12c6:	ce 01       	movw	r24, r28
    12c8:	02 96       	adiw	r24, 0x02	; 2
    12ca:	0e 94 c6 0f 	call	0x1f8c
    12ce:	61 2f       	mov	r22, r17
    12d0:	ce 01       	movw	r24, r28
    12d2:	0e 94 20 09 	call	0x1240
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	a9 f3       	breq	.-22     	; 0x12c6
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	08 95       	ret

000012e4 <AvrXWaitPullFifo>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2
    12ec:	ce 01       	movw	r24, r28
    12ee:	0e 94 c6 0f 	call	0x1f8c
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 3c 09 	call	0x1278
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	92 07       	cpc	r25, r18
    12fe:	b1 f3       	breq	.-20     	; 0x12ec
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <AvrXFlushFifo>:
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	8c 01       	movw	r16, r24
    130c:	fc 01       	movw	r30, r24
    130e:	14 82       	std	Z+4, r1	; 0x04
    1310:	15 82       	std	Z+5, r1	; 0x05
    1312:	02 96       	adiw	r24, 0x02	; 2
    1314:	0e 94 39 10 	call	0x2072
    1318:	c8 01       	movw	r24, r16
    131a:	0e 94 39 10 	call	0x2072
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <AvrXPeekFifo>:
    1324:	fc 01       	movw	r30, r24
    1326:	84 81       	ldd	r24, Z+4	; 0x04
    1328:	95 81       	ldd	r25, Z+5	; 0x05
    132a:	89 17       	cp	r24, r25
    132c:	19 f4       	brne	.+6      	; 0x1334
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	08 95       	ret
    1334:	e9 0f       	add	r30, r25
    1336:	f1 1d       	adc	r31, r1
    1338:	87 81       	ldd	r24, Z+7	; 0x07
    133a:	99 27       	eor	r25, r25
    133c:	08 95       	ret

0000133e <AvrXStatFifo>:
    133e:	fc 01       	movw	r30, r24
    1340:	8f b7       	in	r24, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	94 81       	ldd	r25, Z+4	; 0x04
    1346:	29 2f       	mov	r18, r25
    1348:	33 27       	eor	r19, r19
    134a:	95 81       	ldd	r25, Z+5	; 0x05
    134c:	29 1b       	sub	r18, r25
    134e:	31 09       	sbc	r19, r1
    1350:	8f bf       	out	0x3f, r24	; 63
    1352:	37 ff       	sbrs	r19, 7
    1354:	03 c0       	rjmp	.+6      	; 0x135c
    1356:	86 81       	ldd	r24, Z+6	; 0x06
    1358:	28 0f       	add	r18, r24
    135a:	31 1d       	adc	r19, r1
    135c:	c9 01       	movw	r24, r18
    135e:	08 95       	ret

00001360 <atoi>:
    1360:	fc 01       	movw	r30, r24
    1362:	88 27       	eor	r24, r24
    1364:	99 27       	eor	r25, r25
    1366:	e8 94       	clt

00001368 <.atoi_loop>:
    1368:	21 91       	ld	r18, Z+
    136a:	22 23       	and	r18, r18
    136c:	f1 f0       	breq	.+60     	; 0x13aa
    136e:	20 32       	cpi	r18, 0x20	; 32
    1370:	d9 f3       	breq	.-10     	; 0x1368
    1372:	29 30       	cpi	r18, 0x09	; 9
    1374:	c9 f3       	breq	.-14     	; 0x1368
    1376:	2a 30       	cpi	r18, 0x0A	; 10
    1378:	b9 f3       	breq	.-18     	; 0x1368
    137a:	2c 30       	cpi	r18, 0x0C	; 12
    137c:	a9 f3       	breq	.-22     	; 0x1368
    137e:	2d 30       	cpi	r18, 0x0D	; 13
    1380:	99 f3       	breq	.-26     	; 0x1368
    1382:	26 37       	cpi	r18, 0x76	; 118
    1384:	89 f3       	breq	.-30     	; 0x1368
    1386:	2b 32       	cpi	r18, 0x2B	; 43
    1388:	19 f0       	breq	.+6      	; 0x1390
    138a:	2d 32       	cpi	r18, 0x2D	; 45
    138c:	21 f4       	brne	.+8      	; 0x1396

0000138e <.atoi_neg>:
    138e:	68 94       	set

00001390 <.atoi_loop2>:
    1390:	21 91       	ld	r18, Z+
    1392:	22 23       	and	r18, r18
    1394:	51 f0       	breq	.+20     	; 0x13aa

00001396 <.atoi_digit>:
    1396:	20 33       	cpi	r18, 0x30	; 48
    1398:	44 f0       	brlt	.+16     	; 0x13aa
    139a:	2a 33       	cpi	r18, 0x3A	; 58
    139c:	34 f4       	brge	.+12     	; 0x13aa
    139e:	20 53       	subi	r18, 0x30	; 48
    13a0:	0e 94 96 0a 	call	0x152c
    13a4:	82 0f       	add	r24, r18
    13a6:	91 1d       	adc	r25, r1
    13a8:	f3 cf       	rjmp	.-26     	; 0x1390

000013aa <.atoi_sig>:
    13aa:	81 15       	cp	r24, r1
    13ac:	91 05       	cpc	r25, r1
    13ae:	21 f0       	breq	.+8      	; 0x13b8
    13b0:	1e f4       	brtc	.+6      	; 0x13b8
    13b2:	80 95       	com	r24
    13b4:	90 95       	com	r25
    13b6:	01 96       	adiw	r24, 0x01	; 1

000013b8 <.atoi_done>:
    13b8:	08 95       	ret

000013ba <fdevopen>:
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	8c 01       	movw	r16, r24
    13c4:	eb 01       	movw	r28, r22
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	a1 f1       	breq	.+104    	; 0x1432
    13ca:	6c e0       	ldi	r22, 0x0C	; 12
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 87 0d 	call	0x1b0e
    13d6:	fc 01       	movw	r30, r24
    13d8:	89 2b       	or	r24, r25
    13da:	21 f1       	breq	.+72     	; 0x1424
    13dc:	20 97       	sbiw	r28, 0x00	; 0
    13de:	51 f0       	breq	.+20     	; 0x13f4
    13e0:	d3 87       	std	Z+11, r29	; 0x0b
    13e2:	c2 87       	std	Z+10, r28	; 0x0a
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	23 83       	std	Z+3, r18	; 0x03
    13e8:	80 91 33 06 	lds	r24, 0x0633
    13ec:	90 91 34 06 	lds	r25, 0x0634
    13f0:	89 2b       	or	r24, r25
    13f2:	d1 f0       	breq	.+52     	; 0x1428
    13f4:	01 15       	cp	r16, r1
    13f6:	11 05       	cpc	r17, r1
    13f8:	a9 f0       	breq	.+42     	; 0x1424
    13fa:	11 87       	std	Z+9, r17	; 0x09
    13fc:	00 87       	std	Z+8, r16	; 0x08
    13fe:	03 81       	ldd	r16, Z+3	; 0x03
    1400:	02 60       	ori	r16, 0x02	; 2
    1402:	03 83       	std	Z+3, r16	; 0x03
    1404:	a0 91 35 06 	lds	r26, 0x0635
    1408:	b0 91 36 06 	lds	r27, 0x0636
    140c:	ab 2b       	or	r26, r27
    140e:	51 f4       	brne	.+20     	; 0x1424
    1410:	f0 93 36 06 	sts	0x0636, r31
    1414:	e0 93 35 06 	sts	0x0635, r30
    1418:	c0 91 37 06 	lds	r28, 0x0637
    141c:	d0 91 38 06 	lds	r29, 0x0638
    1420:	cd 2b       	or	r28, r29
    1422:	51 f0       	breq	.+20     	; 0x1438
    1424:	cf 01       	movw	r24, r30
    1426:	0d c0       	rjmp	.+26     	; 0x1442
    1428:	f0 93 34 06 	sts	0x0634, r31
    142c:	e0 93 33 06 	sts	0x0633, r30
    1430:	e1 cf       	rjmp	.-62     	; 0x13f4
    1432:	67 2b       	or	r22, r23
    1434:	51 f6       	brne	.-108    	; 0x13ca
    1436:	05 c0       	rjmp	.+10     	; 0x1442
    1438:	f0 93 38 06 	sts	0x0638, r31
    143c:	e0 93 37 06 	sts	0x0637, r30
    1440:	f1 cf       	rjmp	.-30     	; 0x1424
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	08 95       	ret

0000144c <fgetc>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	82 2f       	mov	r24, r18
    1456:	99 27       	eor	r25, r25
    1458:	80 ff       	sbrs	r24, 0
    145a:	30 c0       	rjmp	.+96     	; 0x14bc
    145c:	86 fd       	sbrc	r24, 6
    145e:	16 c0       	rjmp	.+44     	; 0x148c
    1460:	82 ff       	sbrs	r24, 2
    1462:	1d c0       	rjmp	.+58     	; 0x149e
    1464:	e8 81       	ld	r30, Y
    1466:	f9 81       	ldd	r31, Y+1	; 0x01
    1468:	31 91       	ld	r19, Z+
    146a:	43 2f       	mov	r20, r19
    146c:	55 27       	eor	r21, r21
    146e:	47 fd       	sbrc	r20, 7
    1470:	50 95       	com	r21
    1472:	f9 83       	std	Y+1, r31	; 0x01
    1474:	e8 83       	st	Y, r30
    1476:	41 15       	cp	r20, r1
    1478:	51 05       	cpc	r21, r1
    147a:	f1 f0       	breq	.+60     	; 0x14b8
    147c:	ae 81       	ldd	r26, Y+6	; 0x06
    147e:	bf 81       	ldd	r27, Y+7	; 0x07
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	bf 83       	std	Y+7, r27	; 0x07
    1484:	ae 83       	std	Y+6, r26	; 0x06
    1486:	84 2f       	mov	r24, r20
    1488:	99 27       	eor	r25, r25
    148a:	1a c0       	rjmp	.+52     	; 0x14c0
    148c:	2f 7b       	andi	r18, 0xBF	; 191
    148e:	2b 83       	std	Y+3, r18	; 0x03
    1490:	8e 81       	ldd	r24, Y+6	; 0x06
    1492:	9f 81       	ldd	r25, Y+7	; 0x07
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	9f 83       	std	Y+7, r25	; 0x07
    1498:	8e 83       	std	Y+6, r24	; 0x06
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	f5 cf       	rjmp	.-22     	; 0x1488
    149e:	ea 85       	ldd	r30, Y+10	; 0x0a
    14a0:	fb 85       	ldd	r31, Y+11	; 0x0b
    14a2:	09 95       	icall
    14a4:	ac 01       	movw	r20, r24
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	4f 3f       	cpi	r20, 0xFF	; 255
    14aa:	58 07       	cpc	r21, r24
    14ac:	39 f7       	brne	.-50     	; 0x147c
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	20 61       	ori	r18, 0x10	; 16
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	ca 01       	movw	r24, r20
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0
    14b8:	20 62       	ori	r18, 0x20	; 32
    14ba:	2b 83       	std	Y+3, r18	; 0x03
    14bc:	8f ef       	ldi	r24, 0xFF	; 255
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <fputc>:
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	8c 01       	movw	r16, r24
    14d0:	eb 01       	movw	r28, r22
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	99 27       	eor	r25, r25
    14d6:	81 ff       	sbrs	r24, 1
    14d8:	22 c0       	rjmp	.+68     	; 0x151e
    14da:	82 ff       	sbrs	r24, 2
    14dc:	14 c0       	rjmp	.+40     	; 0x1506
    14de:	2e 81       	ldd	r18, Y+6	; 0x06
    14e0:	3f 81       	ldd	r19, Y+7	; 0x07
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	3c f4       	brge	.+14     	; 0x14fa
    14ec:	e8 81       	ld	r30, Y
    14ee:	f9 81       	ldd	r31, Y+1	; 0x01
    14f0:	01 93       	st	Z+, r16
    14f2:	f9 83       	std	Y+1, r31	; 0x01
    14f4:	e8 83       	st	Y, r30
    14f6:	2e 81       	ldd	r18, Y+6	; 0x06
    14f8:	3f 81       	ldd	r19, Y+7	; 0x07
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	3f 83       	std	Y+7, r19	; 0x07
    1500:	2e 83       	std	Y+6, r18	; 0x06
    1502:	c8 01       	movw	r24, r16
    1504:	0e c0       	rjmp	.+28     	; 0x1522
    1506:	e8 85       	ldd	r30, Y+8	; 0x08
    1508:	f9 85       	ldd	r31, Y+9	; 0x09
    150a:	80 2f       	mov	r24, r16
    150c:	09 95       	icall
    150e:	89 2b       	or	r24, r25
    1510:	31 f4       	brne	.+12     	; 0x151e
    1512:	ae 81       	ldd	r26, Y+6	; 0x06
    1514:	bf 81       	ldd	r27, Y+7	; 0x07
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	bf 83       	std	Y+7, r27	; 0x07
    151a:	ae 83       	std	Y+6, r26	; 0x06
    151c:	f2 cf       	rjmp	.-28     	; 0x1502
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <__mulhi_const_10>:
    152c:	7a e0       	ldi	r23, 0x0A	; 10
    152e:	97 9f       	mul	r25, r23
    1530:	90 2d       	mov	r25, r0
    1532:	87 9f       	mul	r24, r23
    1534:	80 2d       	mov	r24, r0
    1536:	91 0d       	add	r25, r1
    1538:	11 24       	eor	r1, r1
    153a:	08 95       	ret

0000153c <printf_P>:
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	45 e0       	ldi	r20, 0x05	; 5
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	4c 0f       	add	r20, r28
    154a:	5d 1f       	adc	r21, r29
    154c:	fa 01       	movw	r30, r20
    154e:	21 91       	ld	r18, Z+
    1550:	31 91       	ld	r19, Z+
    1552:	af 01       	movw	r20, r30
    1554:	a0 91 35 06 	lds	r26, 0x0635
    1558:	b0 91 36 06 	lds	r27, 0x0636
    155c:	fd 01       	movw	r30, r26
    155e:	83 81       	ldd	r24, Z+3	; 0x03
    1560:	88 60       	ori	r24, 0x08	; 8
    1562:	83 83       	std	Z+3, r24	; 0x03
    1564:	b9 01       	movw	r22, r18
    1566:	80 91 35 06 	lds	r24, 0x0635
    156a:	90 91 36 06 	lds	r25, 0x0636
    156e:	0e 94 ca 0a 	call	0x1594
    1572:	e0 91 35 06 	lds	r30, 0x0635
    1576:	f0 91 36 06 	lds	r31, 0x0636
    157a:	23 81       	ldd	r18, Z+3	; 0x03
    157c:	27 7f       	andi	r18, 0xF7	; 247
    157e:	23 83       	std	Z+3, r18	; 0x03
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <strcpy>:
    1586:	fb 01       	movw	r30, r22
    1588:	dc 01       	movw	r26, r24

0000158a <.strcpy_loop>:
    158a:	01 90       	ld	r0, Z+
    158c:	0d 92       	st	X+, r0
    158e:	00 20       	and	r0, r0
    1590:	e1 f7       	brne	.-8      	; 0x158a
    1592:	08 95       	ret

00001594 <vfprintf>:
    1594:	2f 92       	push	r2
    1596:	3f 92       	push	r3
    1598:	4f 92       	push	r4
    159a:	5f 92       	push	r5
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	62 97       	sbiw	r28, 0x12	; 18
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	ee 24       	eor	r14, r14
    15ca:	ff 24       	eor	r15, r15
    15cc:	87 01       	movw	r16, r14
    15ce:	1c 01       	movw	r2, r24
    15d0:	7e 87       	std	Y+14, r23	; 0x0e
    15d2:	6d 87       	std	Y+13, r22	; 0x0d
    15d4:	2a 01       	movw	r4, r20
    15d6:	cc 24       	eor	r12, r12
    15d8:	dd 24       	eor	r13, r13
    15da:	fc 01       	movw	r30, r24
    15dc:	d7 82       	std	Z+7, r13	; 0x07
    15de:	c6 82       	std	Z+6, r12	; 0x06
    15e0:	83 81       	ldd	r24, Z+3	; 0x03
    15e2:	81 fd       	sbrc	r24, 1
    15e4:	68 c2       	rjmp	.+1232   	; 0x1ab6
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	78 c2       	rjmp	.+1264   	; 0x1adc
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	9e 87       	std	Y+14, r25	; 0x0e
    15f4:	8d 87       	std	Y+13, r24	; 0x0d
    15f6:	c0 fe       	sbrs	r12, 0
    15f8:	4b c2       	rjmp	.+1174   	; 0x1a90
    15fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fc:	80 53       	subi	r24, 0x30	; 48
    15fe:	8a 30       	cpi	r24, 0x0A	; 10
    1600:	d0 f4       	brcc	.+52     	; 0x1636
    1602:	9f 85       	ldd	r25, Y+15	; 0x0f
    1604:	90 33       	cpi	r25, 0x30	; 48
    1606:	39 f4       	brne	.+14     	; 0x1616
    1608:	66 20       	and	r6, r6
    160a:	29 f4       	brne	.+10     	; 0x1616
    160c:	c3 fc       	sbrc	r12, 3
    160e:	03 c0       	rjmp	.+6      	; 0x1616
    1610:	e0 e0       	ldi	r30, 0x00	; 0
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	8d c0       	rjmp	.+282    	; 0x1730
    1616:	8a e0       	ldi	r24, 0x0A	; 10
    1618:	68 9e       	mul	r6, r24
    161a:	60 2c       	mov	r6, r0
    161c:	11 24       	eor	r1, r1
    161e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1620:	6f 0e       	add	r6, r31
    1622:	20 ed       	ldi	r18, 0xD0	; 208
    1624:	62 0e       	add	r6, r18
    1626:	67 fe       	sbrs	r6, 7
    1628:	02 c0       	rjmp	.+4      	; 0x162e
    162a:	5f e7       	ldi	r21, 0x7F	; 127
    162c:	65 2e       	mov	r6, r21
    162e:	c3 fc       	sbrc	r12, 3
    1630:	42 c2       	rjmp	.+1156   	; 0x1ab6
    1632:	76 2c       	mov	r7, r6
    1634:	40 c2       	rjmp	.+1152   	; 0x1ab6
    1636:	c3 fe       	sbrs	r12, 3
    1638:	04 c0       	rjmp	.+8      	; 0x1642
    163a:	66 20       	and	r6, r6
    163c:	11 f4       	brne	.+4      	; 0x1642
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	64 2e       	mov	r6, r20
    1642:	ef 85       	ldd	r30, Y+15	; 0x0f
    1644:	8e 2f       	mov	r24, r30
    1646:	99 27       	eor	r25, r25
    1648:	87 fd       	sbrc	r24, 7
    164a:	90 95       	com	r25
    164c:	88 36       	cpi	r24, 0x68	; 104
    164e:	91 05       	cpc	r25, r1
    1650:	8c f5       	brge	.+98     	; 0x16b4
    1652:	85 36       	cpi	r24, 0x65	; 101
    1654:	91 05       	cpc	r25, r1
    1656:	0c f0       	brlt	.+2      	; 0x165a
    1658:	6e c0       	rjmp	.+220    	; 0x1736
    165a:	83 35       	cpi	r24, 0x53	; 83
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662
    1660:	93 c0       	rjmp	.+294    	; 0x1788
    1662:	84 35       	cpi	r24, 0x54	; 84
    1664:	91 05       	cpc	r25, r1
    1666:	cc f4       	brge	.+50     	; 0x169a
    1668:	8b 32       	cpi	r24, 0x2B	; 43
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670
    166e:	49 c0       	rjmp	.+146    	; 0x1702
    1670:	8c 32       	cpi	r24, 0x2C	; 44
    1672:	91 05       	cpc	r25, r1
    1674:	4c f4       	brge	.+18     	; 0x1688
    1676:	80 32       	cpi	r24, 0x20	; 32
    1678:	91 05       	cpc	r25, r1
    167a:	09 f4       	brne	.+2      	; 0x167e
    167c:	46 c0       	rjmp	.+140    	; 0x170a
    167e:	83 32       	cpi	r24, 0x23	; 35
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686
    1684:	4a c0       	rjmp	.+148    	; 0x171a
    1686:	fe c1       	rjmp	.+1020   	; 0x1a84
    1688:	8d 32       	cpi	r24, 0x2D	; 45
    168a:	91 05       	cpc	r25, r1
    168c:	09 f4       	brne	.+2      	; 0x1690
    168e:	40 c0       	rjmp	.+128    	; 0x1710
    1690:	8e 32       	cpi	r24, 0x2E	; 46
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698
    1696:	44 c0       	rjmp	.+136    	; 0x1720
    1698:	f5 c1       	rjmp	.+1002   	; 0x1a84
    169a:	83 36       	cpi	r24, 0x63	; 99
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2
    16a0:	50 c0       	rjmp	.+160    	; 0x1742
    16a2:	84 36       	cpi	r24, 0x64	; 100
    16a4:	91 05       	cpc	r25, r1
    16a6:	0c f0       	brlt	.+2      	; 0x16aa
    16a8:	8a c0       	rjmp	.+276    	; 0x17be
    16aa:	88 35       	cpi	r24, 0x58	; 88
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2
    16b0:	bc c0       	rjmp	.+376    	; 0x182a
    16b2:	e8 c1       	rjmp	.+976    	; 0x1a84
    16b4:	80 37       	cpi	r24, 0x70	; 112
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc
    16ba:	b1 c0       	rjmp	.+354    	; 0x181e
    16bc:	81 37       	cpi	r24, 0x71	; 113
    16be:	91 05       	cpc	r25, r1
    16c0:	84 f4       	brge	.+32     	; 0x16e2
    16c2:	8c 36       	cpi	r24, 0x6C	; 108
    16c4:	91 05       	cpc	r25, r1
    16c6:	91 f1       	breq	.+100    	; 0x172c
    16c8:	8d 36       	cpi	r24, 0x6D	; 109
    16ca:	91 05       	cpc	r25, r1
    16cc:	2c f4       	brge	.+10     	; 0x16d8
    16ce:	89 36       	cpi	r24, 0x69	; 105
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6
    16d4:	74 c0       	rjmp	.+232    	; 0x17be
    16d6:	d6 c1       	rjmp	.+940    	; 0x1a84
    16d8:	8f 36       	cpi	r24, 0x6F	; 111
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0
    16de:	9c c0       	rjmp	.+312    	; 0x1818
    16e0:	d1 c1       	rjmp	.+930    	; 0x1a84
    16e2:	85 37       	cpi	r24, 0x75	; 117
    16e4:	91 05       	cpc	r25, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea
    16e8:	a2 c0       	rjmp	.+324    	; 0x182e
    16ea:	86 37       	cpi	r24, 0x76	; 118
    16ec:	91 05       	cpc	r25, r1
    16ee:	24 f4       	brge	.+8      	; 0x16f8
    16f0:	83 37       	cpi	r24, 0x73	; 115
    16f2:	91 05       	cpc	r25, r1
    16f4:	71 f1       	breq	.+92     	; 0x1752
    16f6:	c6 c1       	rjmp	.+908    	; 0x1a84
    16f8:	88 37       	cpi	r24, 0x78	; 120
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700
    16fe:	95 c0       	rjmp	.+298    	; 0x182a
    1700:	c1 c1       	rjmp	.+898    	; 0x1a84
    1702:	80 e1       	ldi	r24, 0x10	; 16
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	c8 2a       	or	r12, r24
    1708:	d9 2a       	or	r13, r25
    170a:	e0 e2       	ldi	r30, 0x20	; 32
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	10 c0       	rjmp	.+32     	; 0x1730
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	c8 2a       	or	r12, r24
    1716:	d9 2a       	or	r13, r25
    1718:	ce c1       	rjmp	.+924    	; 0x1ab6
    171a:	e0 e4       	ldi	r30, 0x40	; 64
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	08 c0       	rjmp	.+16     	; 0x1730
    1720:	88 e0       	ldi	r24, 0x08	; 8
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	c8 2a       	or	r12, r24
    1726:	d9 2a       	or	r13, r25
    1728:	66 24       	eor	r6, r6
    172a:	c5 c1       	rjmp	.+906    	; 0x1ab6
    172c:	e4 e0       	ldi	r30, 0x04	; 4
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	ce 2a       	or	r12, r30
    1732:	df 2a       	or	r13, r31
    1734:	c0 c1       	rjmp	.+896    	; 0x1ab6
    1736:	3f e3       	ldi	r19, 0x3F	; 63
    1738:	e3 2e       	mov	r14, r19
    173a:	7a 94       	dec	r7
    173c:	f3 e6       	ldi	r31, 0x63	; 99
    173e:	ff 87       	std	Y+15, r31	; 0x0f
    1740:	3c c1       	rjmp	.+632    	; 0x19ba
    1742:	f2 01       	movw	r30, r4
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	48 0e       	add	r4, r24
    174a:	59 1e       	adc	r5, r25
    174c:	e0 80       	ld	r14, Z
    174e:	7a 94       	dec	r7
    1750:	34 c1       	rjmp	.+616    	; 0x19ba
    1752:	f2 01       	movw	r30, r4
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	48 0e       	add	r4, r24
    175a:	59 1e       	adc	r5, r25
    175c:	a0 81       	ld	r26, Z
    175e:	b1 81       	ldd	r27, Z+1	; 0x01
    1760:	7d 01       	movw	r14, r26
    1762:	c3 fe       	sbrs	r12, 3
    1764:	09 c0       	rjmp	.+18     	; 0x1778
    1766:	86 2d       	mov	r24, r6
    1768:	99 27       	eor	r25, r25
    176a:	87 fd       	sbrc	r24, 7
    176c:	90 95       	com	r25
    176e:	bc 01       	movw	r22, r24
    1770:	cd 01       	movw	r24, r26
    1772:	0e 94 c4 0e 	call	0x1d88
    1776:	1f c0       	rjmp	.+62     	; 0x17b6
    1778:	fd 01       	movw	r30, r26
    177a:	01 90       	ld	r0, Z+
    177c:	00 20       	and	r0, r0
    177e:	e9 f7       	brne	.-6      	; 0x177a
    1780:	31 97       	sbiw	r30, 0x01	; 1
    1782:	ea 1b       	sub	r30, r26
    1784:	e8 8b       	std	Y+16, r30	; 0x10
    1786:	18 c0       	rjmp	.+48     	; 0x17b8
    1788:	f2 01       	movw	r30, r4
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	48 0e       	add	r4, r24
    1790:	59 1e       	adc	r5, r25
    1792:	01 90       	ld	r0, Z+
    1794:	f0 81       	ld	r31, Z
    1796:	e0 2d       	mov	r30, r0
    1798:	7f 01       	movw	r14, r30
    179a:	c3 fe       	sbrs	r12, 3
    179c:	09 c0       	rjmp	.+18     	; 0x17b0
    179e:	86 2d       	mov	r24, r6
    17a0:	99 27       	eor	r25, r25
    17a2:	87 fd       	sbrc	r24, 7
    17a4:	90 95       	com	r25
    17a6:	bc 01       	movw	r22, r24
    17a8:	cf 01       	movw	r24, r30
    17aa:	0e 94 cf 0e 	call	0x1d9e
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6
    17b0:	cf 01       	movw	r24, r30
    17b2:	0e 94 bb 0e 	call	0x1d76
    17b6:	88 8b       	std	Y+16, r24	; 0x10
    17b8:	98 89       	ldd	r25, Y+16	; 0x10
    17ba:	79 1a       	sub	r7, r25
    17bc:	fe c0       	rjmp	.+508    	; 0x19ba
    17be:	c2 fe       	sbrs	r12, 2
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6
    17c2:	f2 01       	movw	r30, r4
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	48 0e       	add	r4, r24
    17ca:	59 1e       	adc	r5, r25
    17cc:	20 81       	ld	r18, Z
    17ce:	31 81       	ldd	r19, Z+1	; 0x01
    17d0:	42 81       	ldd	r20, Z+2	; 0x02
    17d2:	53 81       	ldd	r21, Z+3	; 0x03
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee
    17d6:	f2 01       	movw	r30, r4
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	48 0e       	add	r4, r24
    17de:	59 1e       	adc	r5, r25
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	9c 01       	movw	r18, r24
    17e6:	44 27       	eor	r20, r20
    17e8:	37 fd       	sbrc	r19, 7
    17ea:	40 95       	com	r20
    17ec:	54 2f       	mov	r21, r20
    17ee:	79 01       	movw	r14, r18
    17f0:	8a 01       	movw	r16, r20
    17f2:	57 ff       	sbrs	r21, 7
    17f4:	0c c0       	rjmp	.+24     	; 0x180e
    17f6:	e2 e0       	ldi	r30, 0x02	; 2
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	ce 2a       	or	r12, r30
    17fc:	df 2a       	or	r13, r31
    17fe:	10 95       	com	r17
    1800:	00 95       	com	r16
    1802:	f0 94       	com	r15
    1804:	e0 94       	com	r14
    1806:	e1 1c       	adc	r14, r1
    1808:	f1 1c       	adc	r15, r1
    180a:	01 1d       	adc	r16, r1
    180c:	11 1d       	adc	r17, r1
    180e:	8f eb       	ldi	r24, 0xBF	; 191
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	c8 22       	and	r12, r24
    1814:	d9 22       	and	r13, r25
    1816:	27 c0       	rjmp	.+78     	; 0x1866
    1818:	98 e0       	ldi	r25, 0x08	; 8
    181a:	98 8b       	std	Y+16, r25	; 0x10
    181c:	08 c0       	rjmp	.+16     	; 0x182e
    181e:	e0 e4       	ldi	r30, 0x40	; 64
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	ce 2a       	or	r12, r30
    1824:	df 2a       	or	r13, r31
    1826:	f8 e7       	ldi	r31, 0x78	; 120
    1828:	ff 87       	std	Y+15, r31	; 0x0f
    182a:	20 e1       	ldi	r18, 0x10	; 16
    182c:	28 8b       	std	Y+16, r18	; 0x10
    182e:	c2 fe       	sbrs	r12, 2
    1830:	0a c0       	rjmp	.+20     	; 0x1846
    1832:	f2 01       	movw	r30, r4
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	48 0e       	add	r4, r24
    183a:	59 1e       	adc	r5, r25
    183c:	20 81       	ld	r18, Z
    183e:	31 81       	ldd	r19, Z+1	; 0x01
    1840:	42 81       	ldd	r20, Z+2	; 0x02
    1842:	53 81       	ldd	r21, Z+3	; 0x03
    1844:	0a c0       	rjmp	.+20     	; 0x185a
    1846:	f2 01       	movw	r30, r4
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	48 0e       	add	r4, r24
    184e:	59 1e       	adc	r5, r25
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	9c 01       	movw	r18, r24
    1856:	44 27       	eor	r20, r20
    1858:	55 27       	eor	r21, r21
    185a:	79 01       	movw	r14, r18
    185c:	8a 01       	movw	r16, r20
    185e:	ef ec       	ldi	r30, 0xCF	; 207
    1860:	ff ef       	ldi	r31, 0xFF	; 255
    1862:	ce 22       	and	r12, r30
    1864:	df 22       	and	r13, r31
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	9a 8b       	std	Y+18, r25	; 0x12
    186c:	89 8b       	std	Y+17, r24	; 0x11
    186e:	98 89       	ldd	r25, Y+16	; 0x10
    1870:	89 2e       	mov	r8, r25
    1872:	99 24       	eor	r9, r9
    1874:	aa 24       	eor	r10, r10
    1876:	bb 24       	eor	r11, r11
    1878:	c8 01       	movw	r24, r16
    187a:	b7 01       	movw	r22, r14
    187c:	a5 01       	movw	r20, r10
    187e:	94 01       	movw	r18, r8
    1880:	0e 94 15 11 	call	0x222a
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	e9 89       	ldd	r30, Y+17	; 0x11
    188a:	fa 89       	ldd	r31, Y+18	; 0x12
    188c:	80 83       	st	Z, r24
    188e:	8a 30       	cpi	r24, 0x0A	; 10
    1890:	24 f0       	brlt	.+8      	; 0x189a
    1892:	ff 85       	ldd	r31, Y+15	; 0x0f
    1894:	8f 0f       	add	r24, r31
    1896:	81 52       	subi	r24, 0x21	; 33
    1898:	01 c0       	rjmp	.+2      	; 0x189c
    189a:	80 5d       	subi	r24, 0xD0	; 208
    189c:	e9 89       	ldd	r30, Y+17	; 0x11
    189e:	fa 89       	ldd	r31, Y+18	; 0x12
    18a0:	81 93       	st	Z+, r24
    18a2:	fa 8b       	std	Y+18, r31	; 0x12
    18a4:	e9 8b       	std	Y+17, r30	; 0x11
    18a6:	c8 01       	movw	r24, r16
    18a8:	b7 01       	movw	r22, r14
    18aa:	a5 01       	movw	r20, r10
    18ac:	94 01       	movw	r18, r8
    18ae:	0e 94 15 11 	call	0x222a
    18b2:	79 01       	movw	r14, r18
    18b4:	8a 01       	movw	r16, r20
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	41 05       	cpc	r20, r1
    18bc:	51 05       	cpc	r21, r1
    18be:	e1 f6       	brne	.-72     	; 0x1878
    18c0:	e9 88       	ldd	r14, Y+17	; 0x11
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	8c 0f       	add	r24, r28
    18c8:	9d 1f       	adc	r25, r29
    18ca:	e8 1a       	sub	r14, r24
    18cc:	c6 01       	movw	r24, r12
    18ce:	82 73       	andi	r24, 0x32	; 50
    18d0:	90 70       	andi	r25, 0x00	; 0
    18d2:	89 2b       	or	r24, r25
    18d4:	09 f0       	breq	.+2      	; 0x18d8
    18d6:	7a 94       	dec	r7
    18d8:	c6 fe       	sbrs	r12, 6
    18da:	0d c0       	rjmp	.+26     	; 0x18f6
    18dc:	87 2d       	mov	r24, r7
    18de:	99 27       	eor	r25, r25
    18e0:	87 fd       	sbrc	r24, 7
    18e2:	90 95       	com	r25
    18e4:	e8 89       	ldd	r30, Y+16	; 0x10
    18e6:	e0 31       	cpi	r30, 0x10	; 16
    18e8:	21 f4       	brne	.+8      	; 0x18f2
    18ea:	2e ef       	ldi	r18, 0xFE	; 254
    18ec:	72 2e       	mov	r7, r18
    18ee:	78 0e       	add	r7, r24
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6
    18f2:	78 2e       	mov	r7, r24
    18f4:	7a 94       	dec	r7
    18f6:	c3 fe       	sbrs	r12, 3
    18f8:	0f c0       	rjmp	.+30     	; 0x1918
    18fa:	26 2d       	mov	r18, r6
    18fc:	33 27       	eor	r19, r19
    18fe:	27 fd       	sbrc	r18, 7
    1900:	30 95       	com	r19
    1902:	8e 2d       	mov	r24, r14
    1904:	99 27       	eor	r25, r25
    1906:	82 17       	cp	r24, r18
    1908:	93 07       	cpc	r25, r19
    190a:	2c f0       	brlt	.+10     	; 0x1916
    190c:	87 ef       	ldi	r24, 0xF7	; 247
    190e:	9f ef       	ldi	r25, 0xFF	; 255
    1910:	c8 22       	and	r12, r24
    1912:	d9 22       	and	r13, r25
    1914:	01 c0       	rjmp	.+2      	; 0x1918
    1916:	6e 18       	sub	r6, r14
    1918:	c3 fe       	sbrs	r12, 3
    191a:	02 c0       	rjmp	.+4      	; 0x1920
    191c:	76 18       	sub	r7, r6
    191e:	01 c0       	rjmp	.+2      	; 0x1922
    1920:	7e 18       	sub	r7, r14
    1922:	c6 01       	movw	r24, r12
    1924:	80 78       	andi	r24, 0x80	; 128
    1926:	91 70       	andi	r25, 0x01	; 1
    1928:	89 2b       	or	r24, r25
    192a:	51 f4       	brne	.+20     	; 0x1940
    192c:	87 2d       	mov	r24, r7
    192e:	7a 94       	dec	r7
    1930:	18 16       	cp	r1, r24
    1932:	34 f4       	brge	.+12     	; 0x1940
    1934:	b1 01       	movw	r22, r2
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 63 0a 	call	0x14c6
    193e:	f6 cf       	rjmp	.-20     	; 0x192c
    1940:	c1 fe       	sbrs	r12, 1
    1942:	04 c0       	rjmp	.+8      	; 0x194c
    1944:	b1 01       	movw	r22, r2
    1946:	8d e2       	ldi	r24, 0x2D	; 45
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0b c0       	rjmp	.+22     	; 0x1962
    194c:	c4 fe       	sbrs	r12, 4
    194e:	04 c0       	rjmp	.+8      	; 0x1958
    1950:	b1 01       	movw	r22, r2
    1952:	8b e2       	ldi	r24, 0x2B	; 43
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	05 c0       	rjmp	.+10     	; 0x1962
    1958:	c5 fe       	sbrs	r12, 5
    195a:	05 c0       	rjmp	.+10     	; 0x1966
    195c:	b1 01       	movw	r22, r2
    195e:	80 e2       	ldi	r24, 0x20	; 32
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 63 0a 	call	0x14c6
    1966:	c6 fe       	sbrs	r12, 6
    1968:	10 c0       	rjmp	.+32     	; 0x198a
    196a:	b1 01       	movw	r22, r2
    196c:	80 e3       	ldi	r24, 0x30	; 48
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 63 0a 	call	0x14c6
    1974:	98 89       	ldd	r25, Y+16	; 0x10
    1976:	90 31       	cpi	r25, 0x10	; 16
    1978:	41 f4       	brne	.+16     	; 0x198a
    197a:	b1 01       	movw	r22, r2
    197c:	ef 85       	ldd	r30, Y+15	; 0x0f
    197e:	8e 2f       	mov	r24, r30
    1980:	99 27       	eor	r25, r25
    1982:	87 fd       	sbrc	r24, 7
    1984:	90 95       	com	r25
    1986:	0e 94 63 0a 	call	0x14c6
    198a:	d0 fe       	sbrs	r13, 0
    198c:	0a c0       	rjmp	.+20     	; 0x19a2
    198e:	87 2d       	mov	r24, r7
    1990:	7a 94       	dec	r7
    1992:	18 16       	cp	r1, r24
    1994:	34 f4       	brge	.+12     	; 0x19a2
    1996:	b1 01       	movw	r22, r2
    1998:	80 e3       	ldi	r24, 0x30	; 48
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 63 0a 	call	0x14c6
    19a0:	f6 cf       	rjmp	.-20     	; 0x198e
    19a2:	c3 fe       	sbrs	r12, 3
    19a4:	0a c0       	rjmp	.+20     	; 0x19ba
    19a6:	86 2d       	mov	r24, r6
    19a8:	6a 94       	dec	r6
    19aa:	18 16       	cp	r1, r24
    19ac:	34 f4       	brge	.+12     	; 0x19ba
    19ae:	b1 01       	movw	r22, r2
    19b0:	80 e3       	ldi	r24, 0x30	; 48
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 63 0a 	call	0x14c6
    19b8:	f6 cf       	rjmp	.-20     	; 0x19a6
    19ba:	90 e8       	ldi	r25, 0x80	; 128
    19bc:	b9 2e       	mov	r11, r25
    19be:	bc 20       	and	r11, r12
    19c0:	51 f4       	brne	.+20     	; 0x19d6
    19c2:	87 2d       	mov	r24, r7
    19c4:	7a 94       	dec	r7
    19c6:	18 16       	cp	r1, r24
    19c8:	34 f4       	brge	.+12     	; 0x19d6
    19ca:	b1 01       	movw	r22, r2
    19cc:	80 e2       	ldi	r24, 0x20	; 32
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 63 0a 	call	0x14c6
    19d4:	f6 cf       	rjmp	.-20     	; 0x19c2
    19d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    19d8:	f3 36       	cpi	r31, 0x63	; 99
    19da:	41 f4       	brne	.+16     	; 0x19ec
    19dc:	8e 2d       	mov	r24, r14
    19de:	b1 01       	movw	r22, r2
    19e0:	99 27       	eor	r25, r25
    19e2:	87 fd       	sbrc	r24, 7
    19e4:	90 95       	com	r25
    19e6:	0e 94 63 0a 	call	0x14c6
    19ea:	40 c0       	rjmp	.+128    	; 0x1a6c
    19ec:	2f 85       	ldd	r18, Y+15	; 0x0f
    19ee:	23 37       	cpi	r18, 0x73	; 115
    19f0:	b1 f4       	brne	.+44     	; 0x1a1e
    19f2:	88 89       	ldd	r24, Y+16	; 0x10
    19f4:	81 50       	subi	r24, 0x01	; 1
    19f6:	88 8b       	std	Y+16, r24	; 0x10
    19f8:	8f 3f       	cpi	r24, 0xFF	; 255
    19fa:	c1 f1       	breq	.+112    	; 0x1a6c
    19fc:	f7 01       	movw	r30, r14
    19fe:	80 81       	ld	r24, Z
    1a00:	08 94       	sec
    1a02:	e1 1c       	adc	r14, r1
    1a04:	f1 1c       	adc	r15, r1
    1a06:	b1 01       	movw	r22, r2
    1a08:	99 27       	eor	r25, r25
    1a0a:	87 fd       	sbrc	r24, 7
    1a0c:	90 95       	com	r25
    1a0e:	0e 94 63 0a 	call	0x14c6
    1a12:	98 89       	ldd	r25, Y+16	; 0x10
    1a14:	91 50       	subi	r25, 0x01	; 1
    1a16:	98 8b       	std	Y+16, r25	; 0x10
    1a18:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1a:	81 f7       	brne	.-32     	; 0x19fc
    1a1c:	27 c0       	rjmp	.+78     	; 0x1a6c
    1a1e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a20:	e3 35       	cpi	r30, 0x53	; 83
    1a22:	79 f4       	brne	.+30     	; 0x1a42
    1a24:	f8 89       	ldd	r31, Y+16	; 0x10
    1a26:	f1 50       	subi	r31, 0x01	; 1
    1a28:	f8 8b       	std	Y+16, r31	; 0x10
    1a2a:	ff 3f       	cpi	r31, 0xFF	; 255
    1a2c:	f9 f0       	breq	.+62     	; 0x1a6c
    1a2e:	f7 01       	movw	r30, r14
    1a30:	84 91       	lpm	r24, Z
    1a32:	b1 01       	movw	r22, r2
    1a34:	99 27       	eor	r25, r25
    1a36:	0e 94 63 0a 	call	0x14c6
    1a3a:	08 94       	sec
    1a3c:	e1 1c       	adc	r14, r1
    1a3e:	f1 1c       	adc	r15, r1
    1a40:	f1 cf       	rjmp	.-30     	; 0x1a24
    1a42:	6e 01       	movw	r12, r28
    1a44:	08 94       	sec
    1a46:	c1 1c       	adc	r12, r1
    1a48:	d1 1c       	adc	r13, r1
    1a4a:	89 89       	ldd	r24, Y+17	; 0x11
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	8c 15       	cp	r24, r12
    1a50:	9d 05       	cpc	r25, r13
    1a52:	61 f0       	breq	.+24     	; 0x1a6c
    1a54:	e9 89       	ldd	r30, Y+17	; 0x11
    1a56:	fa 89       	ldd	r31, Y+18	; 0x12
    1a58:	82 91       	ld	r24, -Z
    1a5a:	fa 8b       	std	Y+18, r31	; 0x12
    1a5c:	e9 8b       	std	Y+17, r30	; 0x11
    1a5e:	b1 01       	movw	r22, r2
    1a60:	99 27       	eor	r25, r25
    1a62:	87 fd       	sbrc	r24, 7
    1a64:	90 95       	com	r25
    1a66:	0e 94 63 0a 	call	0x14c6
    1a6a:	ef cf       	rjmp	.-34     	; 0x1a4a
    1a6c:	bb 20       	and	r11, r11
    1a6e:	69 f0       	breq	.+26     	; 0x1a8a
    1a70:	87 2d       	mov	r24, r7
    1a72:	7a 94       	dec	r7
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f4       	brge	.+18     	; 0x1a8a
    1a78:	b1 01       	movw	r22, r2
    1a7a:	80 e2       	ldi	r24, 0x20	; 32
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 63 0a 	call	0x14c6
    1a82:	f6 cf       	rjmp	.-20     	; 0x1a70
    1a84:	b1 01       	movw	r22, r2
    1a86:	0e 94 63 0a 	call	0x14c6
    1a8a:	cc 24       	eor	r12, r12
    1a8c:	dd 24       	eor	r13, r13
    1a8e:	13 c0       	rjmp	.+38     	; 0x1ab6
    1a90:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a92:	95 32       	cpi	r25, 0x25	; 37
    1a94:	41 f4       	brne	.+16     	; 0x1aa6
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	c8 2e       	mov	r12, r24
    1a9a:	d1 2c       	mov	r13, r1
    1a9c:	66 24       	eor	r6, r6
    1a9e:	76 2c       	mov	r7, r6
    1aa0:	ea e0       	ldi	r30, 0x0A	; 10
    1aa2:	e8 8b       	std	Y+16, r30	; 0x10
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6
    1aa6:	b1 01       	movw	r22, r2
    1aa8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1aaa:	8f 2f       	mov	r24, r31
    1aac:	99 27       	eor	r25, r25
    1aae:	87 fd       	sbrc	r24, 7
    1ab0:	90 95       	com	r25
    1ab2:	0e 94 63 0a 	call	0x14c6
    1ab6:	f1 01       	movw	r30, r2
    1ab8:	83 81       	ldd	r24, Z+3	; 0x03
    1aba:	83 ff       	sbrs	r24, 3
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6
    1abe:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ac0:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ac2:	f4 91       	lpm	r31, Z
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc
    1ac6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ac8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1aca:	f0 81       	ld	r31, Z
    1acc:	ff 87       	std	Y+15, r31	; 0x0f
    1ace:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ad0:	22 23       	and	r18, r18
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6
    1ad4:	8b cd       	rjmp	.-1258   	; 0x15ec
    1ad6:	f1 01       	movw	r30, r2
    1ad8:	86 81       	ldd	r24, Z+6	; 0x06
    1ada:	97 81       	ldd	r25, Z+7	; 0x07
    1adc:	62 96       	adiw	r28, 0x12	; 18
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	af 90       	pop	r10
    1afc:	9f 90       	pop	r9
    1afe:	8f 90       	pop	r8
    1b00:	7f 90       	pop	r7
    1b02:	6f 90       	pop	r6
    1b04:	5f 90       	pop	r5
    1b06:	4f 90       	pop	r4
    1b08:	3f 90       	pop	r3
    1b0a:	2f 90       	pop	r2
    1b0c:	08 95       	ret

00001b0e <calloc>:
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	86 9f       	mul	r24, r22
    1b18:	80 01       	movw	r16, r0
    1b1a:	87 9f       	mul	r24, r23
    1b1c:	10 0d       	add	r17, r0
    1b1e:	96 9f       	mul	r25, r22
    1b20:	10 0d       	add	r17, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	c8 01       	movw	r24, r16
    1b26:	0e 94 a3 0d 	call	0x1b46
    1b2a:	ec 01       	movw	r28, r24
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	29 f0       	breq	.+10     	; 0x1b3a
    1b30:	a8 01       	movw	r20, r16
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	0e 94 b4 0e 	call	0x1d68
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <malloc>:
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	02 97       	sbiw	r24, 0x02	; 2
    1b4e:	10 f4       	brcc	.+4      	; 0x1b54
    1b50:	22 e0       	ldi	r18, 0x02	; 2
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	60 91 3b 06 	lds	r22, 0x063B
    1b5c:	70 91 3c 06 	lds	r23, 0x063C
    1b60:	fb 01       	movw	r30, r22
    1b62:	da 01       	movw	r26, r20
    1b64:	61 15       	cp	r22, r1
    1b66:	71 05       	cpc	r23, r1
    1b68:	69 f1       	breq	.+90     	; 0x1bc4
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	82 17       	cp	r24, r18
    1b70:	93 07       	cpc	r25, r19
    1b72:	09 f4       	brne	.+2      	; 0x1b76
    1b74:	52 c0       	rjmp	.+164    	; 0x1c1a
    1b76:	28 17       	cp	r18, r24
    1b78:	39 07       	cpc	r19, r25
    1b7a:	38 f4       	brcc	.+14     	; 0x1b8a
    1b7c:	41 15       	cp	r20, r1
    1b7e:	51 05       	cpc	r21, r1
    1b80:	19 f0       	breq	.+6      	; 0x1b88
    1b82:	84 17       	cp	r24, r20
    1b84:	95 07       	cpc	r25, r21
    1b86:	08 f4       	brcc	.+2      	; 0x1b8a
    1b88:	ac 01       	movw	r20, r24
    1b8a:	df 01       	movw	r26, r30
    1b8c:	02 80       	ldd	r0, Z+2	; 0x02
    1b8e:	f3 81       	ldd	r31, Z+3	; 0x03
    1b90:	e0 2d       	mov	r30, r0
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	51 f7       	brne	.-44     	; 0x1b6a
    1b96:	41 15       	cp	r20, r1
    1b98:	51 05       	cpc	r21, r1
    1b9a:	a1 f0       	breq	.+40     	; 0x1bc4
    1b9c:	da 01       	movw	r26, r20
    1b9e:	a2 1b       	sub	r26, r18
    1ba0:	b3 0b       	sbc	r27, r19
    1ba2:	14 97       	sbiw	r26, 0x04	; 4
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8
    1ba6:	43 c0       	rjmp	.+134    	; 0x1c2e
    1ba8:	db 01       	movw	r26, r22
    1baa:	0a c0       	rjmp	.+20     	; 0x1bc0
    1bac:	6d 91       	ld	r22, X+
    1bae:	7c 91       	ld	r23, X
    1bb0:	11 97       	sbiw	r26, 0x01	; 1
    1bb2:	64 17       	cp	r22, r20
    1bb4:	75 07       	cpc	r23, r21
    1bb6:	09 f4       	brne	.+2      	; 0x1bba
    1bb8:	50 c0       	rjmp	.+160    	; 0x1c5a
    1bba:	fd 01       	movw	r30, r26
    1bbc:	a2 81       	ldd	r26, Z+2	; 0x02
    1bbe:	b3 81       	ldd	r27, Z+3	; 0x03
    1bc0:	10 97       	sbiw	r26, 0x00	; 0
    1bc2:	a1 f7       	brne	.-24     	; 0x1bac
    1bc4:	e0 91 39 06 	lds	r30, 0x0639
    1bc8:	f0 91 3a 06 	lds	r31, 0x063A
    1bcc:	30 97       	sbiw	r30, 0x00	; 0
    1bce:	41 f4       	brne	.+16     	; 0x1be0
    1bd0:	e0 91 72 00 	lds	r30, 0x0072
    1bd4:	f0 91 73 00 	lds	r31, 0x0073
    1bd8:	f0 93 3a 06 	sts	0x063A, r31
    1bdc:	e0 93 39 06 	sts	0x0639, r30
    1be0:	40 91 70 00 	lds	r20, 0x0070
    1be4:	50 91 71 00 	lds	r21, 0x0071
    1be8:	41 15       	cp	r20, r1
    1bea:	51 05       	cpc	r21, r1
    1bec:	29 f1       	breq	.+74     	; 0x1c38
    1bee:	4e 1b       	sub	r20, r30
    1bf0:	5f 0b       	sbc	r21, r31
    1bf2:	42 17       	cp	r20, r18
    1bf4:	53 07       	cpc	r21, r19
    1bf6:	e8 f0       	brcs	.+58     	; 0x1c32
    1bf8:	c9 01       	movw	r24, r18
    1bfa:	02 96       	adiw	r24, 0x02	; 2
    1bfc:	48 17       	cp	r20, r24
    1bfe:	59 07       	cpc	r21, r25
    1c00:	c0 f0       	brcs	.+48     	; 0x1c32
    1c02:	ef 01       	movw	r28, r30
    1c04:	c2 0f       	add	r28, r18
    1c06:	d3 1f       	adc	r29, r19
    1c08:	22 96       	adiw	r28, 0x02	; 2
    1c0a:	d0 93 3a 06 	sts	0x063A, r29
    1c0e:	c0 93 39 06 	sts	0x0639, r28
    1c12:	21 93       	st	Z+, r18
    1c14:	31 93       	st	Z+, r19
    1c16:	cf 01       	movw	r24, r30
    1c18:	42 c0       	rjmp	.+132    	; 0x1c9e
    1c1a:	10 97       	sbiw	r26, 0x00	; 0
    1c1c:	b1 f0       	breq	.+44     	; 0x1c4a
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	ed 01       	movw	r28, r26
    1c24:	9b 83       	std	Y+3, r25	; 0x03
    1c26:	8a 83       	std	Y+2, r24	; 0x02
    1c28:	cf 01       	movw	r24, r30
    1c2a:	02 96       	adiw	r24, 0x02	; 2
    1c2c:	38 c0       	rjmp	.+112    	; 0x1c9e
    1c2e:	9a 01       	movw	r18, r20
    1c30:	bb cf       	rjmp	.-138    	; 0x1ba8
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	33 c0       	rjmp	.+102    	; 0x1c9e
    1c38:	4d b7       	in	r20, 0x3d	; 61
    1c3a:	5e b7       	in	r21, 0x3e	; 62
    1c3c:	a0 91 74 00 	lds	r26, 0x0074
    1c40:	b0 91 75 00 	lds	r27, 0x0075
    1c44:	4a 1b       	sub	r20, r26
    1c46:	5b 0b       	sbc	r21, r27
    1c48:	d2 cf       	rjmp	.-92     	; 0x1bee
    1c4a:	22 81       	ldd	r18, Z+2	; 0x02
    1c4c:	33 81       	ldd	r19, Z+3	; 0x03
    1c4e:	30 93 3c 06 	sts	0x063C, r19
    1c52:	20 93 3b 06 	sts	0x063B, r18
    1c56:	cf 01       	movw	r24, r30
    1c58:	e8 cf       	rjmp	.-48     	; 0x1c2a
    1c5a:	24 17       	cp	r18, r20
    1c5c:	35 07       	cpc	r19, r21
    1c5e:	61 f0       	breq	.+24     	; 0x1c78
    1c60:	ea 01       	movw	r28, r20
    1c62:	c2 1b       	sub	r28, r18
    1c64:	d3 0b       	sbc	r29, r19
    1c66:	fd 01       	movw	r30, r26
    1c68:	ec 0f       	add	r30, r28
    1c6a:	fd 1f       	adc	r31, r29
    1c6c:	21 93       	st	Z+, r18
    1c6e:	31 93       	st	Z+, r19
    1c70:	22 97       	sbiw	r28, 0x02	; 2
    1c72:	cd 93       	st	X+, r28
    1c74:	dc 93       	st	X, r29
    1c76:	cf cf       	rjmp	.-98     	; 0x1c16
    1c78:	30 97       	sbiw	r30, 0x00	; 0
    1c7a:	41 f0       	breq	.+16     	; 0x1c8c
    1c7c:	ed 01       	movw	r28, r26
    1c7e:	4a 81       	ldd	r20, Y+2	; 0x02
    1c80:	5b 81       	ldd	r21, Y+3	; 0x03
    1c82:	53 83       	std	Z+3, r21	; 0x03
    1c84:	42 83       	std	Z+2, r20	; 0x02
    1c86:	cd 01       	movw	r24, r26
    1c88:	02 96       	adiw	r24, 0x02	; 2
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e
    1c8c:	fd 01       	movw	r30, r26
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	90 93 3c 06 	sts	0x063C, r25
    1c96:	80 93 3b 06 	sts	0x063B, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	f5 cf       	rjmp	.-22     	; 0x1c88
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <free>:
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	09 f4       	brne	.+2      	; 0x1cae
    1cac:	5a c0       	rjmp	.+180    	; 0x1d62
    1cae:	dc 01       	movw	r26, r24
    1cb0:	12 97       	sbiw	r26, 0x02	; 2
    1cb2:	ed 01       	movw	r28, r26
    1cb4:	1b 82       	std	Y+3, r1	; 0x03
    1cb6:	1a 82       	std	Y+2, r1	; 0x02
    1cb8:	80 91 3b 06 	lds	r24, 0x063B
    1cbc:	90 91 3c 06 	lds	r25, 0x063C
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	d9 f1       	breq	.+118    	; 0x1d3a
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	ea 17       	cp	r30, r26
    1ccc:	fb 07       	cpc	r31, r27
    1cce:	48 f4       	brcc	.+18     	; 0x1ce2
    1cd0:	af 01       	movw	r20, r30
    1cd2:	02 80       	ldd	r0, Z+2	; 0x02
    1cd4:	f3 81       	ldd	r31, Z+3	; 0x03
    1cd6:	e0 2d       	mov	r30, r0
    1cd8:	30 97       	sbiw	r30, 0x00	; 0
    1cda:	a1 f0       	breq	.+40     	; 0x1d04
    1cdc:	ea 17       	cp	r30, r26
    1cde:	fb 07       	cpc	r31, r27
    1ce0:	b8 f3       	brcs	.-18     	; 0x1cd0
    1ce2:	ed 01       	movw	r28, r26
    1ce4:	fb 83       	std	Y+3, r31	; 0x03
    1ce6:	ea 83       	std	Y+2, r30	; 0x02
    1ce8:	2d 91       	ld	r18, X+
    1cea:	3c 91       	ld	r19, X
    1cec:	11 97       	sbiw	r26, 0x01	; 1
    1cee:	e9 01       	movw	r28, r18
    1cf0:	ca 0f       	add	r28, r26
    1cf2:	db 1f       	adc	r29, r27
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	02 96       	adiw	r24, 0x02	; 2
    1cf8:	8e 17       	cp	r24, r30
    1cfa:	9f 07       	cpc	r25, r31
    1cfc:	19 f1       	breq	.+70     	; 0x1d44
    1cfe:	41 15       	cp	r20, r1
    1d00:	51 05       	cpc	r21, r1
    1d02:	d9 f0       	breq	.+54     	; 0x1d3a
    1d04:	ea 01       	movw	r28, r20
    1d06:	bb 83       	std	Y+3, r27	; 0x03
    1d08:	aa 83       	std	Y+2, r26	; 0x02
    1d0a:	ca 01       	movw	r24, r20
    1d0c:	02 96       	adiw	r24, 0x02	; 2
    1d0e:	28 81       	ld	r18, Y
    1d10:	39 81       	ldd	r19, Y+1	; 0x01
    1d12:	82 0f       	add	r24, r18
    1d14:	93 1f       	adc	r25, r19
    1d16:	8a 17       	cp	r24, r26
    1d18:	9b 07       	cpc	r25, r27
    1d1a:	19 f5       	brne	.+70     	; 0x1d62
    1d1c:	6d 91       	ld	r22, X+
    1d1e:	7c 91       	ld	r23, X
    1d20:	11 97       	sbiw	r26, 0x01	; 1
    1d22:	26 0f       	add	r18, r22
    1d24:	37 1f       	adc	r19, r23
    1d26:	2e 5f       	subi	r18, 0xFE	; 254
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	39 83       	std	Y+1, r19	; 0x01
    1d2c:	28 83       	st	Y, r18
    1d2e:	fd 01       	movw	r30, r26
    1d30:	42 81       	ldd	r20, Z+2	; 0x02
    1d32:	53 81       	ldd	r21, Z+3	; 0x03
    1d34:	5b 83       	std	Y+3, r21	; 0x03
    1d36:	4a 83       	std	Y+2, r20	; 0x02
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62
    1d3a:	b0 93 3c 06 	sts	0x063C, r27
    1d3e:	a0 93 3b 06 	sts	0x063B, r26
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62
    1d44:	6a 81       	ldd	r22, Y+2	; 0x02
    1d46:	7b 81       	ldd	r23, Y+3	; 0x03
    1d48:	26 0f       	add	r18, r22
    1d4a:	37 1f       	adc	r19, r23
    1d4c:	2e 5f       	subi	r18, 0xFE	; 254
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	3c 93       	st	X, r19
    1d54:	2e 93       	st	-X, r18
    1d56:	22 81       	ldd	r18, Z+2	; 0x02
    1d58:	33 81       	ldd	r19, Z+3	; 0x03
    1d5a:	fd 01       	movw	r30, r26
    1d5c:	33 83       	std	Z+3, r19	; 0x03
    1d5e:	22 83       	std	Z+2, r18	; 0x02
    1d60:	ce cf       	rjmp	.-100    	; 0x1cfe
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <memset>:
    1d68:	dc 01       	movw	r26, r24
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e

00001d6c <.memset_loop>:
    1d6c:	6d 93       	st	X+, r22

00001d6e <.memset_start>:
    1d6e:	41 50       	subi	r20, 0x01	; 1
    1d70:	50 40       	sbci	r21, 0x00	; 0
    1d72:	e0 f7       	brcc	.-8      	; 0x1d6c
    1d74:	08 95       	ret

00001d76 <strlen_P>:
    1d76:	fc 01       	movw	r30, r24

00001d78 <.strlen_P_loop>:
    1d78:	05 90       	lpm	r0, Z+
    1d7a:	00 20       	and	r0, r0
    1d7c:	e9 f7       	brne	.-6      	; 0x1d78
    1d7e:	80 95       	com	r24
    1d80:	90 95       	com	r25
    1d82:	8e 0f       	add	r24, r30
    1d84:	9f 1f       	adc	r25, r31
    1d86:	08 95       	ret

00001d88 <strnlen>:
    1d88:	fc 01       	movw	r30, r24

00001d8a <.strnlen_loop>:
    1d8a:	61 50       	subi	r22, 0x01	; 1
    1d8c:	70 40       	sbci	r23, 0x00	; 0
    1d8e:	01 90       	ld	r0, Z+
    1d90:	01 10       	cpse	r0, r1
    1d92:	d8 f7       	brcc	.-10     	; 0x1d8a
    1d94:	80 95       	com	r24
    1d96:	90 95       	com	r25
    1d98:	8e 0f       	add	r24, r30
    1d9a:	9f 1f       	adc	r25, r31
    1d9c:	08 95       	ret

00001d9e <strnlen_P>:
    1d9e:	fc 01       	movw	r30, r24
    1da0:	61 50       	subi	r22, 0x01	; 1
    1da2:	70 40       	sbci	r23, 0x00	; 0
    1da4:	05 90       	lpm	r0, Z+
    1da6:	01 10       	cpse	r0, r1
    1da8:	d8 f7       	brcc	.-10     	; 0x1da0
    1daa:	80 95       	com	r24
    1dac:	90 95       	com	r25
    1dae:	8e 0f       	add	r24, r30
    1db0:	9f 1f       	adc	r25, r31
    1db2:	08 95       	ret

00001db4 <IntProlog>:
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	bf 93       	push	r27
    1dba:	af 93       	push	r26
    1dbc:	9f 93       	push	r25
    1dbe:	d6 e0       	ldi	r29, 0x06	; 6
    1dc0:	c8 e2       	ldi	r28, 0x28	; 40
    1dc2:	9f b7       	in	r25, 0x3f	; 63
    1dc4:	ae 81       	ldd	r26, Y+6	; 0x06
    1dc6:	af 5f       	subi	r26, 0xFF	; 255
    1dc8:	ae 83       	std	Y+6, r26	; 0x06
    1dca:	60 f0       	brcs	.+24     	; 0x1de4
    1dcc:	aa 81       	ldd	r26, Y+2	; 0x02
    1dce:	bb 81       	ldd	r27, Y+3	; 0x03
    1dd0:	ba 2b       	or	r27, r26
    1dd2:	41 f4       	brne	.+16     	; 0x1de4
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	fe 81       	ldd	r31, Y+6	; 0x06
    1dda:	ef 81       	ldd	r30, Y+7	; 0x07
    1ddc:	29 96       	adiw	r28, 0x09	; 9
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	09 94       	ijmp

00001de4 <SaveContext>:
    1de4:	8f 93       	push	r24
    1de6:	7f 93       	push	r23
    1de8:	6f 93       	push	r22
    1dea:	5f 93       	push	r21
    1dec:	4f 93       	push	r20
    1dee:	3f 93       	push	r19
    1df0:	2f 93       	push	r18
    1df2:	1f 93       	push	r17
    1df4:	0f 93       	push	r16
    1df6:	ff 92       	push	r15
    1df8:	ef 92       	push	r14
    1dfa:	df 92       	push	r13
    1dfc:	cf 92       	push	r12
    1dfe:	bf 92       	push	r11
    1e00:	af 92       	push	r10
    1e02:	9f 92       	push	r9
    1e04:	8f 92       	push	r8
    1e06:	7f 92       	push	r7
    1e08:	6f 92       	push	r6
    1e0a:	5f 92       	push	r5
    1e0c:	4f 92       	push	r4
    1e0e:	3f 92       	push	r3
    1e10:	2f 92       	push	r2
    1e12:	1f 92       	push	r1
    1e14:	0f 92       	push	r0
    1e16:	9f 93       	push	r25
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e1e:	39 a1       	ldd	r19, Y+33	; 0x21
    1e20:	48 a1       	ldd	r20, Y+32	; 0x20
    1e22:	e8 a3       	std	Y+32, r30	; 0x20
    1e24:	f9 a3       	std	Y+33, r31	; 0x21
    1e26:	70 f0       	brcs	.+28     	; 0x1e44
    1e28:	f6 e0       	ldi	r31, 0x06	; 6
    1e2a:	e8 e2       	ldi	r30, 0x28	; 40
    1e2c:	d3 81       	ldd	r29, Z+3	; 0x03
    1e2e:	c2 81       	ldd	r28, Z+2	; 0x02
    1e30:	be b7       	in	r27, 0x3e	; 62
    1e32:	ad b7       	in	r26, 0x3d	; 61
    1e34:	bd 83       	std	Y+5, r27	; 0x05
    1e36:	ac 83       	std	Y+4, r26	; 0x04
    1e38:	24 81       	ldd	r18, Z+4	; 0x04
    1e3a:	2d bf       	out	0x3d, r18	; 61
    1e3c:	25 81       	ldd	r18, Z+5	; 0x05
    1e3e:	2e bf       	out	0x3e, r18	; 62
    1e40:	ca 2f       	mov	r28, r26
    1e42:	db 2f       	mov	r29, r27

00001e44 <AlreadyInKernel>:
    1e44:	11 24       	eor	r1, r1
    1e46:	e3 2f       	mov	r30, r19
    1e48:	f4 2f       	mov	r31, r20
    1e4a:	09 94       	ijmp

00001e4c <Epilog>:
    1e4c:	ef 91       	pop	r30
    1e4e:	ef 91       	pop	r30

00001e50 <_Epilog>:
    1e50:	e8 e2       	ldi	r30, 0x28	; 40
    1e52:	f6 e0       	ldi	r31, 0x06	; 6
    1e54:	f8 94       	cli
    1e56:	06 81       	ldd	r16, Z+6	; 0x06
    1e58:	0a 95       	dec	r16
    1e5a:	06 83       	std	Z+6, r16	; 0x06
    1e5c:	54 f4       	brge	.+20     	; 0x1e72
    1e5e:	d1 81       	ldd	r29, Z+1	; 0x01
    1e60:	c0 81       	ld	r28, Z
    1e62:	d3 83       	std	Z+3, r29	; 0x03
    1e64:	c2 83       	std	Z+2, r28	; 0x02
    1e66:	20 96       	adiw	r28, 0x00	; 0
    1e68:	39 f1       	breq	.+78     	; 0x1eb8
    1e6a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e6c:	ac 81       	ldd	r26, Y+4	; 0x04
    1e6e:	ad bf       	out	0x3d, r26	; 61
    1e70:	be bf       	out	0x3e, r27	; 62

00001e72 <SkipTaskSwap>:
    1e72:	0f 90       	pop	r0
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	0f 90       	pop	r0
    1e78:	1f 90       	pop	r1
    1e7a:	2f 90       	pop	r2
    1e7c:	3f 90       	pop	r3
    1e7e:	4f 90       	pop	r4
    1e80:	5f 90       	pop	r5
    1e82:	6f 90       	pop	r6
    1e84:	7f 90       	pop	r7
    1e86:	8f 90       	pop	r8
    1e88:	9f 90       	pop	r9
    1e8a:	af 90       	pop	r10
    1e8c:	bf 90       	pop	r11
    1e8e:	cf 90       	pop	r12
    1e90:	df 90       	pop	r13
    1e92:	ef 90       	pop	r14
    1e94:	ff 90       	pop	r15
    1e96:	0f 91       	pop	r16
    1e98:	1f 91       	pop	r17
    1e9a:	2f 91       	pop	r18
    1e9c:	3f 91       	pop	r19
    1e9e:	4f 91       	pop	r20
    1ea0:	5f 91       	pop	r21
    1ea2:	6f 91       	pop	r22
    1ea4:	7f 91       	pop	r23
    1ea6:	8f 91       	pop	r24
    1ea8:	9f 91       	pop	r25
    1eaa:	af 91       	pop	r26
    1eac:	bf 91       	pop	r27
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	ef 91       	pop	r30
    1eb4:	ff 91       	pop	r31
    1eb6:	18 95       	reti

00001eb8 <_IdleTask>:
    1eb8:	78 94       	sei
    1eba:	88 95       	sleep

00001ebc <snooze>:
    1ebc:	fd cf       	rjmp	.-6      	; 0x1eb8

00001ebe <AvrXSetKernelStack>:
    1ebe:	ff 91       	pop	r31
    1ec0:	ef 91       	pop	r30
    1ec2:	80 50       	subi	r24, 0x00	; 0
    1ec4:	90 40       	sbci	r25, 0x00	; 0
    1ec6:	11 f4       	brne	.+4      	; 0x1ecc
    1ec8:	8d b7       	in	r24, 0x3d	; 61
    1eca:	9e b7       	in	r25, 0x3e	; 62

00001ecc <sks1>:
    1ecc:	80 93 2c 06 	sts	0x062C, r24
    1ed0:	90 93 2d 06 	sts	0x062D, r25
    1ed4:	09 94       	ijmp

00001ed6 <AvrXRunTask>:
    1ed6:	01 d0       	rcall	.+2      	; 0x1eda
    1ed8:	23 c0       	rjmp	.+70     	; 0x1f20

00001eda <AvrXInitTask>:
    1eda:	e8 2f       	mov	r30, r24
    1edc:	f9 2f       	mov	r31, r25
    1ede:	1d d0       	rcall	.+58     	; 0x1f1a
    1ee0:	a0 2d       	mov	r26, r0
    1ee2:	1b d0       	rcall	.+54     	; 0x1f1a
    1ee4:	b0 2d       	mov	r27, r0
    1ee6:	19 d0       	rcall	.+50     	; 0x1f1a
    1ee8:	0c 92       	st	X, r0
    1eea:	17 d0       	rcall	.+46     	; 0x1f1a
    1eec:	0e 92       	st	-X, r0
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	51 e2       	ldi	r21, 0x21	; 33

00001ef4 <PushRegisters>:
    1ef4:	4e 93       	st	-X, r20
    1ef6:	5a 95       	dec	r21
    1ef8:	e9 f7       	brne	.-6      	; 0x1ef4
    1efa:	11 97       	sbiw	r26, 0x01	; 1
    1efc:	0e d0       	rcall	.+28     	; 0x1f1a
    1efe:	80 2d       	mov	r24, r0
    1f00:	0c d0       	rcall	.+24     	; 0x1f1a
    1f02:	90 2d       	mov	r25, r0
    1f04:	0a d0       	rcall	.+20     	; 0x1f1a
    1f06:	e8 2f       	mov	r30, r24
    1f08:	f9 2f       	mov	r31, r25
    1f0a:	a4 83       	std	Z+4, r26	; 0x04
    1f0c:	b5 83       	std	Z+5, r27	; 0x05
    1f0e:	03 82       	std	Z+3, r0	; 0x03
    1f10:	a0 e6       	ldi	r26, 0x60	; 96
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	41 83       	std	Z+1, r20	; 0x01
    1f16:	40 83       	st	Z, r20
    1f18:	08 95       	ret

00001f1a <lpm_inc>:
    1f1a:	c8 95       	lpm
    1f1c:	31 96       	adiw	r30, 0x01	; 1
    1f1e:	08 95       	ret

00001f20 <AvrXResume>:
    1f20:	f8 94       	cli
    1f22:	48 df       	rcall	.-368    	; 0x1db4
    1f24:	78 94       	sei
    1f26:	e8 2f       	mov	r30, r24
    1f28:	f9 2f       	mov	r31, r25
    1f2a:	22 81       	ldd	r18, Z+2	; 0x02
    1f2c:	2f 7d       	andi	r18, 0xDF	; 223
    1f2e:	22 83       	std	Z+2, r18	; 0x02
    1f30:	26 ff       	sbrs	r18, 6
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a
    1f34:	2f 7b       	andi	r18, 0xBF	; 191
    1f36:	22 83       	std	Z+2, r18	; 0x02
    1f38:	01 d0       	rcall	.+2      	; 0x1f3c

00001f3a <ar00>:
    1f3a:	8a cf       	rjmp	.-236    	; 0x1e50

00001f3c <_QueuePid>:
    1f3c:	e8 2f       	mov	r30, r24
    1f3e:	f9 2f       	mov	r31, r25
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	22 81       	ldd	r18, Z+2	; 0x02
    1f44:	20 73       	andi	r18, 0x30	; 48
    1f46:	e1 f4       	brne	.+56     	; 0x1f80
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	43 81       	ldd	r20, Z+3	; 0x03
    1f4e:	c8 e2       	ldi	r28, 0x28	; 40
    1f50:	d6 e0       	ldi	r29, 0x06	; 6
    1f52:	2f b7       	in	r18, 0x3f	; 63
    1f54:	f8 94       	cli

00001f56 <_qp00>:
    1f56:	33 95       	inc	r19
    1f58:	ec 2f       	mov	r30, r28
    1f5a:	fd 2f       	mov	r31, r29
    1f5c:	c0 81       	ld	r28, Z
    1f5e:	d1 81       	ldd	r29, Z+1	; 0x01
    1f60:	20 96       	adiw	r28, 0x00	; 0
    1f62:	19 f0       	breq	.+6      	; 0x1f6a
    1f64:	5b 81       	ldd	r21, Y+3	; 0x03
    1f66:	45 17       	cp	r20, r21
    1f68:	b0 f7       	brcc	.-20     	; 0x1f56

00001f6a <_qp01>:
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
    1f6e:	f9 2f       	mov	r31, r25
    1f70:	e8 2f       	mov	r30, r24
    1f72:	d1 83       	std	Z+1, r29	; 0x01
    1f74:	c0 83       	st	Z, r28
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	83 2f       	mov	r24, r19
    1f7c:	2f bf       	out	0x3f, r18	; 63
    1f7e:	08 95       	ret

00001f80 <_qpSUSPEND>:
    1f80:	83 2f       	mov	r24, r19
    1f82:	20 64       	ori	r18, 0x40	; 64
    1f84:	22 83       	std	Z+2, r18	; 0x02
    1f86:	08 95       	ret

00001f88 <AvrXWaitMessageAck>:
    1f88:	8e 5f       	subi	r24, 0xFE	; 254
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255

00001f8c <AvrXWaitSemaphore>:
    1f8c:	e8 2f       	mov	r30, r24
    1f8e:	f9 2f       	mov	r31, r25
    1f90:	f8 94       	cli
    1f92:	20 81       	ld	r18, Z
    1f94:	31 81       	ldd	r19, Z+1	; 0x01
    1f96:	21 50       	subi	r18, 0x01	; 1
    1f98:	30 40       	sbci	r19, 0x00	; 0
    1f9a:	19 f4       	brne	.+6      	; 0x1fa2
    1f9c:	20 83       	st	Z, r18
    1f9e:	31 83       	std	Z+1, r19	; 0x01
    1fa0:	18 95       	reti

00001fa2 <aws01>:
    1fa2:	08 df       	rcall	.-496    	; 0x1db4
    1fa4:	e8 e2       	ldi	r30, 0x28	; 40
    1fa6:	f6 e0       	ldi	r31, 0x06	; 6
    1fa8:	73 81       	ldd	r23, Z+3	; 0x03
    1faa:	62 81       	ldd	r22, Z+2	; 0x02
    1fac:	3c d0       	rcall	.+120    	; 0x2026
    1fae:	e8 2f       	mov	r30, r24
    1fb0:	f9 2f       	mov	r31, r25
    1fb2:	2b d0       	rcall	.+86     	; 0x200a
    1fb4:	4d cf       	rjmp	.-358    	; 0x1e50

00001fb6 <AvrXAckMessage>:
    1fb6:	8e 5f       	subi	r24, 0xFE	; 254
    1fb8:	9f 4f       	sbci	r25, 0xFF	; 255

00001fba <AvrXSetSemaphore>:
    1fba:	0c d0       	rcall	.+24     	; 0x1fd4
    1fbc:	90 91 2e 06 	lds	r25, 0x062E
    1fc0:	93 95       	inc	r25
    1fc2:	89 2b       	or	r24, r25
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8
    1fc6:	08 95       	ret

00001fc8 <axss0>:
    1fc8:	f8 94       	cli
    1fca:	f4 de       	rcall	.-536    	; 0x1db4
    1fcc:	78 94       	sei
    1fce:	40 cf       	rjmp	.-384    	; 0x1e50

00001fd0 <AvrXIntSetObjectSemaphore>:
    1fd0:	8e 5f       	subi	r24, 0xFE	; 254
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255

00001fd4 <AvrXIntSetSemaphore>:
    1fd4:	e8 2f       	mov	r30, r24
    1fd6:	f9 2f       	mov	r31, r25
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	2f b7       	in	r18, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	60 81       	ld	r22, Z
    1fe4:	86 17       	cp	r24, r22
    1fe6:	97 07       	cpc	r25, r23
    1fe8:	28 f0       	brcs	.+10     	; 0x1ff4
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01

00001fee <BogusSemaphore>:
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	2f bf       	out	0x3f, r18	; 63
    1ff2:	08 95       	ret

00001ff4 <aiss00>:
    1ff4:	8f e5       	ldi	r24, 0x5F	; 95
    1ff6:	86 17       	cp	r24, r22
    1ff8:	97 07       	cpc	r25, r23
    1ffa:	c8 f7       	brcc	.-14     	; 0x1fee
    1ffc:	23 d0       	rcall	.+70     	; 0x2044
    1ffe:	2f bf       	out	0x3f, r18	; 63
    2000:	86 2f       	mov	r24, r22
    2002:	97 2f       	mov	r25, r23
    2004:	9b cf       	rjmp	.-202    	; 0x1f3c

00002006 <_ao00>:
    2006:	e2 2f       	mov	r30, r18
    2008:	f3 2f       	mov	r31, r19

0000200a <_AppendObject>:
    200a:	20 81       	ld	r18, Z
    200c:	31 81       	ldd	r19, Z+1	; 0x01
    200e:	20 50       	subi	r18, 0x00	; 0
    2010:	30 40       	sbci	r19, 0x00	; 0
    2012:	c9 f7       	brne	.-14     	; 0x2006
    2014:	71 83       	std	Z+1, r23	; 0x01
    2016:	60 83       	st	Z, r22
    2018:	f7 2f       	mov	r31, r23
    201a:	e6 2f       	mov	r30, r22
    201c:	31 83       	std	Z+1, r19	; 0x01
    201e:	20 83       	st	Z, r18
    2020:	08 95       	ret

00002022 <_ro00>:
    2022:	f3 2f       	mov	r31, r19
    2024:	e2 2f       	mov	r30, r18

00002026 <_RemoveObject>:
    2026:	20 81       	ld	r18, Z
    2028:	31 81       	ldd	r19, Z+1	; 0x01
    202a:	62 17       	cp	r22, r18
    202c:	73 07       	cpc	r23, r19
    202e:	51 f0       	breq	.+20     	; 0x2044
    2030:	20 50       	subi	r18, 0x00	; 0
    2032:	30 40       	sbci	r19, 0x00	; 0
    2034:	b1 f7       	brne	.-20     	; 0x2022
    2036:	08 95       	ret

00002038 <_RemoveFirstObject>:
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	60 50       	subi	r22, 0x00	; 0
    203e:	70 40       	sbci	r23, 0x00	; 0
    2040:	09 f4       	brne	.+2      	; 0x2044
    2042:	08 95       	ret

00002044 <_RemoveObjectAt>:
    2044:	4c 2f       	mov	r20, r28
    2046:	5d 2f       	mov	r21, r29
    2048:	c6 2f       	mov	r28, r22
    204a:	d7 2f       	mov	r29, r23
    204c:	79 81       	ldd	r23, Y+1	; 0x01
    204e:	68 81       	ld	r22, Y
    2050:	71 83       	std	Z+1, r23	; 0x01
    2052:	60 83       	st	Z, r22
    2054:	e6 2f       	mov	r30, r22
    2056:	f7 2f       	mov	r31, r23
    2058:	66 27       	eor	r22, r22
    205a:	68 83       	st	Y, r22
    205c:	69 83       	std	Y+1, r22	; 0x01
    205e:	7d 2f       	mov	r23, r29
    2060:	6c 2f       	mov	r22, r28
    2062:	c4 2f       	mov	r28, r20
    2064:	d5 2f       	mov	r29, r21
    2066:	98 94       	clz
    2068:	08 95       	ret

0000206a <AvrXIntResetObjectSemaphore>:
    206a:	e8 2f       	mov	r30, r24
    206c:	f9 2f       	mov	r31, r25
    206e:	32 96       	adiw	r30, 0x02	; 2
    2070:	02 c0       	rjmp	.+4      	; 0x2076

00002072 <AvrXIntResetSemaphore>:
    2072:	f9 2f       	mov	r31, r25
    2074:	e8 2f       	mov	r30, r24

00002076 <ars00>:
    2076:	f8 94       	cli
    2078:	40 81       	ld	r20, Z
    207a:	51 81       	ldd	r21, Z+1	; 0x01
    207c:	41 50       	subi	r20, 0x01	; 1
    207e:	50 40       	sbci	r21, 0x00	; 0
    2080:	11 f0       	breq	.+4      	; 0x2086
    2082:	4f 5f       	subi	r20, 0xFF	; 255
    2084:	5f 4f       	sbci	r21, 0xFF	; 255

00002086 <ars01>:
    2086:	51 83       	std	Z+1, r21	; 0x01
    2088:	40 83       	st	Z, r20
    208a:	18 95       	reti

0000208c <AvrXDelay>:
    208c:	01 d0       	rcall	.+2      	; 0x2090
    208e:	7c cf       	rjmp	.-264    	; 0x1f88

00002090 <AvrXStartTimer>:
    2090:	60 50       	subi	r22, 0x00	; 0
    2092:	70 40       	sbci	r23, 0x00	; 0
    2094:	09 f4       	brne	.+2      	; 0x2098
    2096:	8f cf       	rjmp	.-226    	; 0x1fb6

00002098 <CountNotZero>:
    2098:	f8 94       	cli
    209a:	8c de       	rcall	.-744    	; 0x1db4
    209c:	78 94       	sei
    209e:	e5 df       	rcall	.-54     	; 0x206a
    20a0:	e0 e3       	ldi	r30, 0x30	; 48
    20a2:	f6 e0       	ldi	r31, 0x06	; 6
    20a4:	f8 94       	cli
    20a6:	20 91 32 06 	lds	r18, 0x0632
    20aa:	2a 95       	dec	r18
    20ac:	20 93 32 06 	sts	0x0632, r18
    20b0:	78 94       	sei

000020b2 <ast00>:
    20b2:	ce 2f       	mov	r28, r30
    20b4:	df 2f       	mov	r29, r31
    20b6:	e8 81       	ld	r30, Y
    20b8:	f9 81       	ldd	r31, Y+1	; 0x01
    20ba:	30 96       	adiw	r30, 0x00	; 0
    20bc:	59 f0       	breq	.+22     	; 0x20d4
    20be:	24 81       	ldd	r18, Z+4	; 0x04
    20c0:	35 81       	ldd	r19, Z+5	; 0x05
    20c2:	62 1b       	sub	r22, r18
    20c4:	73 0b       	sbc	r23, r19
    20c6:	a8 f7       	brcc	.-22     	; 0x20b2
    20c8:	62 0f       	add	r22, r18
    20ca:	73 1f       	adc	r23, r19
    20cc:	26 1b       	sub	r18, r22
    20ce:	37 0b       	sbc	r19, r23
    20d0:	24 83       	std	Z+4, r18	; 0x04
    20d2:	35 83       	std	Z+5, r19	; 0x05

000020d4 <ast01>:
    20d4:	99 83       	std	Y+1, r25	; 0x01
    20d6:	88 83       	st	Y, r24
    20d8:	d9 2f       	mov	r29, r25
    20da:	c8 2f       	mov	r28, r24
    20dc:	f9 83       	std	Y+1, r31	; 0x01
    20de:	e8 83       	st	Y, r30
    20e0:	6c 83       	std	Y+4, r22	; 0x04
    20e2:	7d 83       	std	Y+5, r23	; 0x05
    20e4:	3c d0       	rcall	.+120    	; 0x215e
    20e6:	b4 ce       	rjmp	.-664    	; 0x1e50

000020e8 <AvrXTimerHandler>:
    20e8:	f8 94       	cli
    20ea:	20 91 32 06 	lds	r18, 0x0632
    20ee:	21 50       	subi	r18, 0x01	; 1
    20f0:	20 93 32 06 	sts	0x0632, r18
    20f4:	78 94       	sei
    20f6:	08 f0       	brcs	.+2      	; 0x20fa
    20f8:	08 95       	ret

000020fa <ati00>:
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	af 93       	push	r26
    2100:	bf 93       	push	r27
    2102:	d0 91 31 06 	lds	r29, 0x0631
    2106:	c0 91 30 06 	lds	r28, 0x0630
    210a:	20 96       	adiw	r28, 0x00	; 0
    210c:	21 f1       	breq	.+72     	; 0x2156
    210e:	fd 81       	ldd	r31, Y+5	; 0x05
    2110:	ec 81       	ldd	r30, Y+4	; 0x04
    2112:	31 97       	sbiw	r30, 0x01	; 1
    2114:	fd 83       	std	Y+5, r31	; 0x05
    2116:	ec 83       	std	Y+4, r30	; 0x04

00002118 <ati01>:
    2118:	ef 2b       	or	r30, r31
    211a:	e9 f4       	brne	.+58     	; 0x2156
    211c:	a8 81       	ld	r26, Y
    211e:	b9 81       	ldd	r27, Y+1	; 0x01
    2120:	b0 93 31 06 	sts	0x0631, r27
    2124:	a0 93 30 06 	sts	0x0630, r26
    2128:	f9 83       	std	Y+1, r31	; 0x01
    212a:	e8 83       	st	Y, r30
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	82 50       	subi	r24, 0x02	; 2
    2132:	90 40       	sbci	r25, 0x00	; 0
    2134:	31 f4       	brne	.+12     	; 0x2142
    2136:	8e 81       	ldd	r24, Y+6	; 0x06
    2138:	9f 81       	ldd	r25, Y+7	; 0x07
    213a:	7d 2f       	mov	r23, r29
    213c:	6c 2f       	mov	r22, r28
    213e:	1d d0       	rcall	.+58     	; 0x217a
    2140:	03 c0       	rjmp	.+6      	; 0x2148

00002142 <ati04>:
    2142:	8c 2f       	mov	r24, r28
    2144:	9d 2f       	mov	r25, r29
    2146:	44 df       	rcall	.-376    	; 0x1fd0

00002148 <ati03>:
    2148:	10 96       	adiw	r26, 0x00	; 0
    214a:	29 f0       	breq	.+10     	; 0x2156
    214c:	ca 2f       	mov	r28, r26
    214e:	db 2f       	mov	r29, r27
    2150:	fd 81       	ldd	r31, Y+5	; 0x05
    2152:	ec 81       	ldd	r30, Y+4	; 0x04
    2154:	e1 cf       	rjmp	.-62     	; 0x2118

00002156 <ati02>:
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28

0000215e <TimerHandler>:
    215e:	f8 94       	cli
    2160:	20 91 32 06 	lds	r18, 0x0632
    2164:	23 95       	inc	r18
    2166:	20 93 32 06 	sts	0x0632, r18
    216a:	78 94       	sei
    216c:	31 f6       	brne	.-116    	; 0x20fa
    216e:	08 95       	ret

00002170 <AvrXSendMessage>:
    2170:	f8 94       	cli
    2172:	20 de       	rcall	.-960    	; 0x1db4
    2174:	78 94       	sei
    2176:	01 d0       	rcall	.+2      	; 0x217a
    2178:	6b ce       	rjmp	.-810    	; 0x1e50

0000217a <AvrXIntSendMessage>:
    217a:	f9 2f       	mov	r31, r25
    217c:	e8 2f       	mov	r30, r24
    217e:	45 df       	rcall	.-374    	; 0x200a
    2180:	27 cf       	rjmp	.-434    	; 0x1fd0

00002182 <AvrXWaitMessage>:
    2182:	e8 2f       	mov	r30, r24
    2184:	f9 2f       	mov	r31, r25
    2186:	f8 94       	cli
    2188:	57 df       	rcall	.-338    	; 0x2038
    218a:	78 94       	sei
    218c:	21 f4       	brne	.+8      	; 0x2196
    218e:	fc de       	rcall	.-520    	; 0x1f88
    2190:	82 50       	subi	r24, 0x02	; 2
    2192:	90 40       	sbci	r25, 0x00	; 0
    2194:	f6 cf       	rjmp	.-20     	; 0x2182

00002196 <_rm01>:
    2196:	69 df       	rcall	.-302    	; 0x206a
    2198:	86 2f       	mov	r24, r22
    219a:	97 2f       	mov	r25, r23
    219c:	08 95       	ret

0000219e <__mulsi3>:
    219e:	62 9f       	mul	r22, r18
    21a0:	d0 01       	movw	r26, r0
    21a2:	73 9f       	mul	r23, r19
    21a4:	f0 01       	movw	r30, r0
    21a6:	82 9f       	mul	r24, r18
    21a8:	e0 0d       	add	r30, r0
    21aa:	f1 1d       	adc	r31, r1
    21ac:	64 9f       	mul	r22, r20
    21ae:	e0 0d       	add	r30, r0
    21b0:	f1 1d       	adc	r31, r1
    21b2:	92 9f       	mul	r25, r18
    21b4:	f0 0d       	add	r31, r0
    21b6:	83 9f       	mul	r24, r19
    21b8:	f0 0d       	add	r31, r0
    21ba:	74 9f       	mul	r23, r20
    21bc:	f0 0d       	add	r31, r0
    21be:	65 9f       	mul	r22, r21
    21c0:	f0 0d       	add	r31, r0
    21c2:	99 27       	eor	r25, r25
    21c4:	72 9f       	mul	r23, r18
    21c6:	b0 0d       	add	r27, r0
    21c8:	e1 1d       	adc	r30, r1
    21ca:	f9 1f       	adc	r31, r25
    21cc:	63 9f       	mul	r22, r19
    21ce:	b0 0d       	add	r27, r0
    21d0:	e1 1d       	adc	r30, r1
    21d2:	f9 1f       	adc	r31, r25
    21d4:	bd 01       	movw	r22, r26
    21d6:	cf 01       	movw	r24, r30
    21d8:	11 24       	eor	r1, r1
    21da:	08 95       	ret

000021dc <__udivmodhi4>:
    21dc:	aa 1b       	sub	r26, r26
    21de:	bb 1b       	sub	r27, r27
    21e0:	51 e1       	ldi	r21, 0x11	; 17
    21e2:	07 c0       	rjmp	.+14     	; 0x21f2

000021e4 <__udivmodhi4_loop>:
    21e4:	aa 1f       	adc	r26, r26
    21e6:	bb 1f       	adc	r27, r27
    21e8:	a6 17       	cp	r26, r22
    21ea:	b7 07       	cpc	r27, r23
    21ec:	10 f0       	brcs	.+4      	; 0x21f2
    21ee:	a6 1b       	sub	r26, r22
    21f0:	b7 0b       	sbc	r27, r23

000021f2 <__udivmodhi4_ep>:
    21f2:	88 1f       	adc	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	5a 95       	dec	r21
    21f8:	a9 f7       	brne	.-22     	; 0x21e4
    21fa:	80 95       	com	r24
    21fc:	90 95       	com	r25
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	08 95       	ret

00002204 <__divmodhi4>:
    2204:	97 fb       	bst	r25, 7
    2206:	09 2e       	mov	r0, r25
    2208:	07 26       	eor	r0, r23
    220a:	0a d0       	rcall	.+20     	; 0x2220
    220c:	77 fd       	sbrc	r23, 7
    220e:	04 d0       	rcall	.+8      	; 0x2218
    2210:	e5 df       	rcall	.-54     	; 0x21dc
    2212:	06 d0       	rcall	.+12     	; 0x2220
    2214:	00 20       	and	r0, r0
    2216:	1a f4       	brpl	.+6      	; 0x221e

00002218 <__divmodhi4_neg2>:
    2218:	70 95       	com	r23
    221a:	61 95       	neg	r22
    221c:	7f 4f       	sbci	r23, 0xFF	; 255

0000221e <__divmodhi4_exit>:
    221e:	08 95       	ret

00002220 <__divmodhi4_neg1>:
    2220:	f6 f7       	brtc	.-4      	; 0x221e
    2222:	90 95       	com	r25
    2224:	81 95       	neg	r24
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	08 95       	ret

0000222a <__udivmodsi4>:
    222a:	a1 e2       	ldi	r26, 0x21	; 33
    222c:	1a 2e       	mov	r1, r26
    222e:	aa 1b       	sub	r26, r26
    2230:	bb 1b       	sub	r27, r27
    2232:	fd 01       	movw	r30, r26
    2234:	0d c0       	rjmp	.+26     	; 0x2250

00002236 <__udivmodsi4_loop>:
    2236:	aa 1f       	adc	r26, r26
    2238:	bb 1f       	adc	r27, r27
    223a:	ee 1f       	adc	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	a2 17       	cp	r26, r18
    2240:	b3 07       	cpc	r27, r19
    2242:	e4 07       	cpc	r30, r20
    2244:	f5 07       	cpc	r31, r21
    2246:	20 f0       	brcs	.+8      	; 0x2250
    2248:	a2 1b       	sub	r26, r18
    224a:	b3 0b       	sbc	r27, r19
    224c:	e4 0b       	sbc	r30, r20
    224e:	f5 0b       	sbc	r31, r21

00002250 <__udivmodsi4_ep>:
    2250:	66 1f       	adc	r22, r22
    2252:	77 1f       	adc	r23, r23
    2254:	88 1f       	adc	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	1a 94       	dec	r1
    225a:	69 f7       	brne	.-38     	; 0x2236
    225c:	60 95       	com	r22
    225e:	70 95       	com	r23
    2260:	80 95       	com	r24
    2262:	90 95       	com	r25
    2264:	9b 01       	movw	r18, r22
    2266:	ac 01       	movw	r20, r24
    2268:	bd 01       	movw	r22, r26
    226a:	cf 01       	movw	r24, r30
    226c:	08 95       	ret

0000226e <__divmodsi4>:
    226e:	97 fb       	bst	r25, 7
    2270:	09 2e       	mov	r0, r25
    2272:	05 26       	eor	r0, r21
    2274:	0e d0       	rcall	.+28     	; 0x2292
    2276:	57 fd       	sbrc	r21, 7
    2278:	04 d0       	rcall	.+8      	; 0x2282
    227a:	d7 df       	rcall	.-82     	; 0x222a
    227c:	0a d0       	rcall	.+20     	; 0x2292
    227e:	00 1c       	adc	r0, r0
    2280:	38 f4       	brcc	.+14     	; 0x2290

00002282 <__divmodsi4_neg2>:
    2282:	50 95       	com	r21
    2284:	40 95       	com	r20
    2286:	30 95       	com	r19
    2288:	21 95       	neg	r18
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	4f 4f       	sbci	r20, 0xFF	; 255
    228e:	5f 4f       	sbci	r21, 0xFF	; 255

00002290 <__divmodsi4_exit>:
    2290:	08 95       	ret

00002292 <__divmodsi4_neg1>:
    2292:	f6 f7       	brtc	.-4      	; 0x2290
    2294:	90 95       	com	r25
    2296:	80 95       	com	r24
    2298:	70 95       	com	r23
    229a:	61 95       	neg	r22
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	8f 4f       	sbci	r24, 0xFF	; 255
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	08 95       	ret

000022a4 <_exit>:
    22a4:	ff cf       	rjmp	.-2      	; 0x22a4
