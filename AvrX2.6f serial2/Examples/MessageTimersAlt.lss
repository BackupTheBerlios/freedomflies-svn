
MessageTimersAlt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000da  00800060  00800060  00000d50  2**2
                  ALLOC
  3 .noinit       00000000  0080013a  0080013a  00000d50  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000d50  2**0
                  CONTENTS
  5 .stab         00004368  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000070d  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a
   4:	0c 94 50 00 	jmp	0xa0
   8:	0c 94 50 00 	jmp	0xa0
   c:	0c 94 50 00 	jmp	0xa0
  10:	0c 94 50 00 	jmp	0xa0
  14:	0c 94 50 00 	jmp	0xa0
  18:	0c 94 50 00 	jmp	0xa0
  1c:	0c 94 50 00 	jmp	0xa0
  20:	0c 94 50 00 	jmp	0xa0
  24:	0c 94 50 00 	jmp	0xa0
  28:	0c 94 50 00 	jmp	0xa0
  2c:	0c 94 52 00 	jmp	0xa4
  30:	0c 94 50 00 	jmp	0xa0
  34:	0c 94 19 01 	jmp	0x232
  38:	0c 94 13 01 	jmp	0x226
  3c:	0c 94 50 00 	jmp	0xa0
  40:	0c 94 50 00 	jmp	0xa0
  44:	0c 94 50 00 	jmp	0xa0
  48:	0c 94 50 00 	jmp	0xa0
  4c:	0c 94 50 00 	jmp	0xa0
  50:	0c 94 50 00 	jmp	0xa0

00000054 <__ctors_end>:
  54:	ec 00       	.word	0x00ec	; ????
  56:	8f 00       	.word	0x008f	; ????
  58:	60 00       	.word	0x0060	; ????
  5a:	03 23       	and	r16, r19

0000005b <flasherTcb>:
  5b:	23 01 5a 00 9d 00 02                                #.Z....

00000062 <MonitorTcb>:
  62:	9c 00 0f 02 b5 00 00 00                             ........

0000006a <__init>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ec eb       	ldi	r30, 0xBC	; 188
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 33       	cpi	r26, 0x3A	; 58
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94
  9c:	0c 94 b5 00 	jmp	0x16a

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0x0

000000a4 <__vector_11>:
  a4:	0e 94 87 03 	call	0x70e
  a8:	80 ee       	ldi	r24, 0xE0	; 224
  aa:	82 bf       	out	0x32, r24	; 50
  ac:	0e 94 88 05 	call	0xb10
  b0:	0e 94 d3 03 	call	0x7a6

000000b4 <flasher>:
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	c8 2f       	mov	r28, r24
  bc:	4b ea       	ldi	r20, 0xAB	; 171
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	66 e9       	ldi	r22, 0x96	; 150
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	83 ea       	ldi	r24, 0xA3	; 163
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 cc 05 	call	0xb98
  cc:	c8 bb       	out	0x18, r28	; 24
  ce:	8b ea       	ldi	r24, 0xAB	; 171
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 4c 05 	call	0xa98
  d6:	9c 01       	movw	r18, r24
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	2b 3b       	cpi	r18, 0xBB	; 187
  dc:	38 07       	cpc	r19, r24
  de:	51 f0       	breq	.+20     	; 0xf4
  e0:	23 5a       	subi	r18, 0xA3	; 163
  e2:	30 40       	sbci	r19, 0x00	; 0
  e4:	19 f0       	breq	.+6      	; 0xec
  e6:	0e 94 20 05 	call	0xa40
  ea:	e8 cf       	rjmp	.-48     	; 0xbc
  ec:	11 1f       	adc	r17, r17
  ee:	08 f4       	brcc	.+2      	; 0xf2
  f0:	13 95       	inc	r17
  f2:	e4 cf       	rjmp	.-56     	; 0xbc
  f4:	80 91 bf 00 	lds	r24, 0x00BF
  f8:	80 95       	com	r24
  fa:	18 27       	eor	r17, r24
  fc:	c9 01       	movw	r24, r18
  fe:	0e 94 88 04 	call	0x910
 102:	6b ea       	ldi	r22, 0xAB	; 171
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	83 ea       	ldi	r24, 0xA3	; 163
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 f8 05 	call	0xbf0
 10e:	83 5a       	subi	r24, 0xA3	; 163
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	11 f0       	breq	.+4      	; 0x118
 114:	0e 94 20 05 	call	0xa40
 118:	c1 2f       	mov	r28, r17
 11a:	c0 95       	com	r28
 11c:	cf cf       	rjmp	.-98     	; 0xbc

0000011e <switcher>:
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8b bb       	out	0x1b, r24	; 27
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8f ea       	ldi	r24, 0xAF	; 175
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5a 05 	call	0xab4
 12e:	90 91 bf 00 	lds	r25, 0x00BF
 132:	89 b3       	in	r24, 0x19	; 25
 134:	98 17       	cp	r25, r24
 136:	a9 f3       	breq	.-22     	; 0x122
 138:	89 b3       	in	r24, 0x19	; 25
 13a:	80 93 bf 00 	sts	0x00BF, r24
 13e:	6b eb       	ldi	r22, 0xBB	; 187
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	8b ea       	ldi	r24, 0xAB	; 171
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 43 05 	call	0xa86
 14a:	8b eb       	ldi	r24, 0xBB	; 187
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 71 04 	call	0x8e2
 152:	6a e0       	ldi	r22, 0x0A	; 10
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	8f ea       	ldi	r24, 0xAF	; 175
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 5a 05 	call	0xab4
 15e:	90 91 bf 00 	lds	r25, 0x00BF
 162:	89 b3       	in	r24, 0x19	; 25
 164:	98 17       	cp	r25, r24
 166:	41 f7       	brne	.-48     	; 0x138
 168:	dc cf       	rjmp	.-72     	; 0x122

0000016a <main>:
 16a:	cf e5       	ldi	r28, 0x5F	; 95
 16c:	d8 e0       	ldi	r29, 0x08	; 8
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 0c 04 	call	0x818
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	85 bf       	out	0x35, r24	; 53
 17e:	80 ee       	ldi	r24, 0xE0	; 224
 180:	82 bf       	out	0x32, r24	; 50
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	83 bf       	out	0x33, r24	; 51
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 bf       	out	0x39, r24	; 57
 18a:	8b e5       	ldi	r24, 0x5B	; 91
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 18 04 	call	0x830
 192:	84 e5       	ldi	r24, 0x54	; 84
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 18 04 	call	0x830
 19a:	82 e6       	ldi	r24, 0x62	; 98
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 18 04 	call	0x830
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 8a 04 	call	0x914
 1aa:	89 e1       	ldi	r24, 0x19	; 25
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 0c 01 	call	0x218
 1b2:	0e 94 d3 03 	call	0x7a6
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0c 94 5d 06 	jmp	0xcba

000001be <PushChar>:
; by the next routine
;-
        _FUNCTION(PushChar)
PushChar:
        push    Xl
 1be:	af 93       	push	r26
        lds     Xl, SioFlags
 1c0:	a0 91 26 01 	lds	r26, 0x0126
        sbr     Xl, 1<<CharPushed
 1c4:	a0 68       	ori	r26, 0x80	; 128
        sts     SioFlags, Xl
 1c6:	a0 93 26 01 	sts	0x0126, r26
        pop     Xl
 1ca:	af 91       	pop	r26
        ret
 1cc:	08 95       	ret

000001ce <GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; GetChar
;
; Need to make this draw from a buffer so that multiple
; chars can be pushed... and so different input streams
; can be attached to the buffer.
;-
        _FUNCTION(GetChar)
#ifdef  __IAR_SYSTEMS_ASM__
        PUBLIC  ?C_GETCHAR
?C_GETCHAR:     ; Need this label for simulator I/O
#endif
GetChar:
        lds     tmp0, SioFlags
 1ce:	20 91 26 01 	lds	r18, 0x0126
        sbrs    tmp0, CharPushed
 1d2:	27 ff       	sbrs	r18, 7
        rjmp    gc00
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0
        cbr     tmp0, 1<<CharPushed
 1d6:	2f 77       	andi	r18, 0x7F	; 127
        rjmp    gc01
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6
        sts     SioFlags, tmp0
 1da:	20 93 26 01 	sts	0x0126, r18
        rjmp    gc01
 1de:	03 c0       	rjmp	.+6      	; 0x1e6

000001e0 <gc00>:
gc00:
        ldi     p1h, hi8(RxC_Flag)
 1e0:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 1e2:	88 e2       	ldi	r24, 0x28	; 40
        rcall   AvrXWaitSemaphore       ; Wait for a charactor, or flag from System
 1e4:	80 d3       	rcall	.+1792   	; 0x8e6

000001e6 <gc01>:
gc01:
        lds     r1l, _RxByte
 1e6:	80 91 2a 01 	lds	r24, 0x012A
        ret
 1ea:	08 95       	ret

000001ec <_GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; _GetChar
;
; Special version that echos
;
; RETURNS:      RxByte (Register)
;-
        _FUNCTION(_GetChar)

_GetChar:
        rcall   GetChar
 1ec:	f0 df       	rcall	.-32     	; 0x1ce
        rjmp    PutChar
 1ee:	2b c0       	rjmp	.+86     	; 0x246

000001f0 <PutCR>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutCR
;
; Put a CR to the output stream
;-
        _FUNCTION(PutCR)
PutCR:
        ldi     p1l, 0x0D
 1f0:	8d e0       	ldi	r24, 0x0D	; 13
        rjmp    PutChar
 1f2:	29 c0       	rjmp	.+82     	; 0x246

000001f4 <PutSpace>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutSpace
;
; Put a space to the output stream
;-
        _FUNCTION(PutSpace)

PutSpace:
        ldi     p1l, ' '
 1f4:	80 e2       	ldi	r24, 0x20	; 32
        rjmp    PutChar
 1f6:	27 c0       	rjmp	.+78     	; 0x246

000001f8 <_PrintString>:
        _ENDFUNC
;+
;------------------------------------------
;
; const char * PutString(const char *)
;
; passed:
;       near pointer to string in FLASH memory
; Returns:
;       pointer to next char after NULL
;-
        _FUNCTION(_PrintString)

_PrintString:
        mov     Zl, p1l
 1f8:	e8 2f       	mov	r30, r24
        mov     Zh, p1h
 1fa:	f9 2f       	mov	r31, r25

000001fc <_foo>:
_foo:
        lpm
 1fc:	c8 95       	lpm
        tst     R0
 1fe:	00 20       	and	r0, r0
        breq    _ps00
 200:	41 f0       	breq	.+16     	; 0x212
        mov     p1l, R0
 202:	80 2d       	mov	r24, r0
        push    Zl
 204:	ef 93       	push	r30
        push    Zh
 206:	ff 93       	push	r31
        rcall   PutChar
 208:	1e d0       	rcall	.+60     	; 0x246
        pop     Zh
 20a:	ff 91       	pop	r31
        pop     Zl
 20c:	ef 91       	pop	r30
        adiw    Zl, 1
 20e:	31 96       	adiw	r30, 0x01	; 1
        rjmp    _foo
 210:	f5 cf       	rjmp	.-22     	; 0x1fc

00000212 <_ps00>:
_ps00:
        mov     r1l, Zl
 212:	8e 2f       	mov	r24, r30
        mov     r1h, Zh
 214:	9f 2f       	mov	r25, r31
        ret
 216:	08 95       	ret

00000218 <InitSerialIO>:
        _ENDFUNC
;+
;-------------------------------------------
; void InitSerialIO(unsigned)
;
; PASSED:       R25:24 = UBBR
;		p1h:p1l = UBBR
;
; History: parameter used to be passed in R25 l.b. 1/31/01
;	   Changed to unsigned for mega chips. l.b. 5/30/02
;

        _FUNCTION(InitSerialIO)
InitSerialIO:
        ;out     _SFR_IO_ADDR(UBRR), p1l
         out     UBRRL, p1l
 218:	89 bd       	out	0x29, r24	; 41
#if defined(UBRRH)
	sts	UBRRH, p1h	// THIS appears to be a no-op
 21a:	90 93 40 00 	sts	0x0040, r25
#endif
#if defined(UCSR0C)
	ldi	tmp0, UCRC_INIT	// SET word length.
	sts	UCSR0C, tmp0	// Extended register in mega128
#endif
        ldi     tmp0, UCR_INIT
 21e:	28 e9       	ldi	r18, 0x98	; 152
        ;out     _SFR_IO_ADDR(UCR), tmp0
        out     _SFR_IO_ADDR(UCR), tmp0
 220:	2a b9       	out	0x0a, r18	; 10
        out     (UCR), tmp0
 222:	2a bd       	out	0x2a, r18	; 42
        ret
 224:	08 95       	ret

00000226 <__vector_14>:
        _ENDFUNC
;
;-----------------------------------------------
; UDRE_Interrupt
;
; Disables the interrupt (UDR is empty) signal waiting
; process to stuff the UDR
;
        _FUNCTION(SIG_UART_DATA)
SIG_UART_DATA:
        cbi     _SFR_IO_ADDR(UCR), UDRIE      ; Disable the interrupt
 226:	55 98       	cbi	0x0a, 5	; 10

        rcall   IntProlog
 228:	72 d2       	rcall	.+1252   	; 0x70e

        ldi     p1l, lo8(TxIntFlag)
 22a:	84 e2       	ldi	r24, 0x24	; 36
        ldi     p1h, hi8(TxIntFlag)
 22c:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXIntSetSemaphore     ; Signal we are ready for more.
 22e:	7f d3       	rcall	.+1790   	; 0x92e

        rjmp    _Epilog
 230:	bc c2       	rjmp	.+1400   	; 0x7aa

00000232 <__vector_13>:
        _ENDFUNC

;
;-----------------------------------------------
; RxC_Interrupt
;
; Reads the USART and flags UserTask, Char In semaphore
;
        _FUNCTION(SIG_UART_RECV)
SIG_UART_RECV:
        cbi     _SFR_IO_ADDR(UCR), RXCIE      ; disable interrupt
 232:	57 98       	cbi	0x0a, 7	; 10

        rcall   IntProlog      ; Switch to kernel stack
 234:	6c d2       	rcall	.+1240   	; 0x70e

        in      Xl, _SFR_IO_ADDR(UDR)
 236:	ac b1       	in	r26, 0x0c	; 12
        sts     _RxByte, Xl
 238:	a0 93 2a 01 	sts	0x012A, r26

        ldi     p1h, hi8(RxC_Flag)
 23c:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 23e:	88 e2       	ldi	r24, 0x28	; 40
        rcall   AvrXIntSetSemaphore
 240:	76 d3       	rcall	.+1772   	; 0x92e

        sbi     _SFR_IO_ADDR(UCR), RXCIE      ; Re-enable interrupts
 242:	57 9a       	sbi	0x0a, 7	; 10
        rjmp    _Epilog
 244:	b2 c2       	rjmp	.+1380   	; 0x7aa

00000246 <PutChar>:
        _ENDFUNC
;+
;------------------------------------------
; PutChar
;
; Passed: p1l "TxByte"
;
; Stuffs "TxByte" into usart.  The usart is double buffered.
; when the data register is full we wait on the semaphore
; until the Usart interrupts indicating the register is ready.
;-
        _FUNCTION(PutChar)
#ifdef __IAR_SYSTEMS_ASM__
        _PUBLIC(?C_PUTCHAR)     ; Enable terminal I/O
?C_PUTCHAR:
#endif
PutChar:
        sbic    _SFR_IO_ADDR(USR), UDRE
 246:	5d 99       	sbic	0x0b, 5	; 11
        rjmp    pc00
 248:	06 c0       	rjmp	.+12     	; 0x256

        push    p1l
 24a:	8f 93       	push	r24
        sbi     _SFR_IO_ADDR(UCR), UDRIE      ; Enable interrupts and
 24c:	55 9a       	sbi	0x0a, 5	; 10
        ldi     p1l, lo8(TxIntFlag)
 24e:	84 e2       	ldi	r24, 0x24	; 36
        ldi     p1h, hi8(TxIntFlag)
 250:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXWaitSemaphore; Wait until data register is ready
 252:	49 d3       	rcall	.+1682   	; 0x8e6
        pop     p1l
 254:	8f 91       	pop	r24

00000256 <pc00>:
pc00:
        out     _SFR_IO_ADDR(UDR), p1l
 256:	8c b9       	out	0x0c, r24	; 12
        ret
 258:	08 95       	ret

0000025a <_GetHex>:
        _ENDFUNC

;-----------------------------------------
; _GetHex
;
; PASSED:       p1l = Maximum number of digits
; RETURNS:      r1 = val, Tbit, p2l = Number of digits entered
; USES:         R24, R25
; STACK:        4
;
        _FUNCTION(_GetHex)
_GetHex:
        push    R10
 25a:	af 92       	push	r10
        push    R11
 25c:	bf 92       	push	r11
        push    R12
 25e:	cf 92       	push	r12
        push    R13
 260:	df 92       	push	r13

        mov     R13, p1l
 262:	d8 2e       	mov	r13, r24
        clr     R10
 264:	aa 24       	eor	r10, r10
        clr     R11
 266:	bb 24       	eor	r11, r11
        clr     R12
 268:	cc 24       	eor	r12, r12

0000026a <gh_00>:
gh_00:
        rcall   _GetChar
 26a:	c0 df       	rcall	.-128    	; 0x1ec
        rcall   IsHex
 26c:	21 d0       	rcall	.+66     	; 0x2b0
        brtc    gh_xx
 26e:	96 f4       	brtc	.+36     	; 0x294
        cpi     r1l, '9'+1
 270:	8a 33       	cpi	r24, 0x3A	; 58
        brge    gh_01
 272:	14 f4       	brge	.+4      	; 0x278
        subi    r1l, '0'
 274:	80 53       	subi	r24, 0x30	; 48
        rjmp    gh_02
 276:	02 c0       	rjmp	.+4      	; 0x27c

00000278 <gh_01>:
gh_01:
        cbr     r1l, 0x20
 278:	8f 7d       	andi	r24, 0xDF	; 223
        subi    r1l, 'A'-10
 27a:	87 53       	subi	r24, 0x37	; 55

0000027c <gh_02>:
gh_02:
        lsl     R10
 27c:	aa 0c       	add	r10, r10
        rol     R11
 27e:	bb 1c       	adc	r11, r11
        lsl     R10
 280:	aa 0c       	add	r10, r10
        rol     R11
 282:	bb 1c       	adc	r11, r11
        lsl     R10
 284:	aa 0c       	add	r10, r10
        rol     R11
 286:	bb 1c       	adc	r11, r11
        lsl     R10
 288:	aa 0c       	add	r10, r10
        rol     R11
 28a:	bb 1c       	adc	r11, r11
        add     R10, r1l
 28c:	a8 0e       	add	r10, r24
        inc     R12
 28e:	c3 94       	inc	r12
        dec     R13
 290:	da 94       	dec	r13
        brne    gh_00
 292:	59 f7       	brne	.-42     	; 0x26a

00000294 <gh_xx>:
gh_xx:
        mov     p2l, R12
 294:	6c 2d       	mov	r22, r12
        mov     r1l, R10
 296:	8a 2d       	mov	r24, r10
        mov     r1h, R11
 298:	9b 2d       	mov	r25, r11

        pop     R13
 29a:	df 90       	pop	r13
        pop     R12
 29c:	cf 90       	pop	r12
        pop     R11
 29e:	bf 90       	pop	r11
        pop     R10
 2a0:	af 90       	pop	r10
        ret
 2a2:	08 95       	ret

000002a4 <GetHexWord>:
        _ENDFUNC


;-----------------------------------------
; GetHexWord
;
        _FUNCTION(GetHexWord)

GetHexWord:
        ldi     p1l, 4
 2a4:	84 e0       	ldi	r24, 0x04	; 4
        rjmp    _GetHex
 2a6:	d9 cf       	rjmp	.-78     	; 0x25a

000002a8 <GetHexByte>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexByte)

GetHexByte:
        ldi     p1l, 2
 2a8:	82 e0       	ldi	r24, 0x02	; 2
        rjmp    _GetHex
 2aa:	d7 cf       	rjmp	.-82     	; 0x25a

000002ac <GetHexChar>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexChar)

GetHexChar:
        ldi     p1l, 1
 2ac:	81 e0       	ldi	r24, 0x01	; 1
        rjmp    _GetHex
 2ae:	d5 cf       	rjmp	.-86     	; 0x25a

000002b0 <IsHex>:
        _ENDFUNC
;-----------------------------------------
; IsHex
;
; Tests RxByte for ascii hex char
; Returns: T bit
;
        _FUNCTION(IsHex)

IsHex:
        push    p1l
 2b0:	8f 93       	push	r24
        lds     p1l, _RxByte
 2b2:	80 91 2a 01 	lds	r24, 0x012A
        clt
 2b6:	e8 94       	clt
        cpi     p1l, '0'
 2b8:	80 33       	cpi	r24, 0x30	; 48
        brlt    ihno
 2ba:	5c f0       	brlt	.+22     	; 0x2d2
        cpi     p1l, '9'+1
 2bc:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ihyes
 2be:	44 f0       	brlt	.+16     	; 0x2d0
        cpi     p1l, 'A'
 2c0:	81 34       	cpi	r24, 0x41	; 65
        brlt    ihno
 2c2:	3c f0       	brlt	.+14     	; 0x2d2
        cpi     p1l, 'F'+1
 2c4:	87 34       	cpi	r24, 0x47	; 71
        brlt    ihyes
 2c6:	24 f0       	brlt	.+8      	; 0x2d0
        cpi     p1l, 'a'
 2c8:	81 36       	cpi	r24, 0x61	; 97
        brlt    ihno
 2ca:	1c f0       	brlt	.+6      	; 0x2d2
        cpi     p1l, 'f'+1
 2cc:	87 36       	cpi	r24, 0x67	; 103
        brge    ihno
 2ce:	0c f4       	brge	.+2      	; 0x2d2

000002d0 <ihyes>:
ihyes:
        set
 2d0:	68 94       	set

000002d2 <ihno>:
ihno:
        pop     p1l
 2d2:	8f 91       	pop	r24
        ret
 2d4:	08 95       	ret

000002d6 <IsWhite>:
        _ENDFUNC
;-----------------------------------------
; IsWhite
;
; Tests RxByte for space or CR
; Returns: T bit
;
        _FUNCTION(IsWhite)

IsWhite:
        push    p1l
 2d6:	8f 93       	push	r24
        lds     p1l, _RxByte
 2d8:	80 91 2a 01 	lds	r24, 0x012A
        clt
 2dc:	e8 94       	clt
        cpi     p1l, ' '
 2de:	80 32       	cpi	r24, 0x20	; 32
        breq    ihyes
 2e0:	b9 f3       	breq	.-18     	; 0x2d0
        cpi     p1l, 0x0D
 2e2:	8d 30       	cpi	r24, 0x0D	; 13
        breq    ihyes
 2e4:	a9 f3       	breq	.-22     	; 0x2d0
        rjmp    ihno
 2e6:	f5 cf       	rjmp	.-22     	; 0x2d2

000002e8 <_PutHex>:
        _ENDFUNC
;-----------------------------------------
; void _PutHex(unsigned val, char digits)
;
; Passed:       p2 = Value, p1l = # digits
; RETURN:       Nothing
; USES:         R25, TxByte
; STACK:        2
;
        _FUNCTION(_PutHex)

_PutHex:
        ldi     tmp2, 4          ; Maximum number of digits.
 2e8:	44 e0       	ldi	r20, 0x04	; 4
        mov     tmp3, p2l
 2ea:	56 2f       	mov	r21, r22
        mov     p2l, p1l
 2ec:	68 2f       	mov	r22, r24
        mov     p2h, p1h
 2ee:	79 2f       	mov	r23, r25

000002f0 <ph00>:
ph00:
        lsl     p2l
 2f0:	66 0f       	add	r22, r22
        rol     p2h
 2f2:	77 1f       	adc	r23, r23
        rol     p1l
 2f4:	88 1f       	adc	r24, r24
        lsl     p2l
 2f6:	66 0f       	add	r22, r22
        rol     p2h
 2f8:	77 1f       	adc	r23, r23
        rol     p1l
 2fa:	88 1f       	adc	r24, r24
        lsl     p2l
 2fc:	66 0f       	add	r22, r22
        rol     p2h
 2fe:	77 1f       	adc	r23, r23
        rol     p1l
 300:	88 1f       	adc	r24, r24
        lsl     p2l
 302:	66 0f       	add	r22, r22
        rol     p2h
 304:	77 1f       	adc	r23, r23
        rol     p1l
 306:	88 1f       	adc	r24, r24

        cp      tmp3, tmp2
 308:	54 17       	cp	r21, r20
        brlt    ph02
 30a:	34 f0       	brlt	.+12     	; 0x318

        cbr     p1l, 0xF0
 30c:	8f 70       	andi	r24, 0x0F	; 15
        subi    p1l, lo8(-'0')          ; Addi 0
 30e:	80 5d       	subi	r24, 0xD0	; 208
        cpi     p1l, lo8('9' + 1)       ; if > 9
 310:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ph01                    ; subi 9 and add A
 312:	0c f0       	brlt	.+2      	; 0x316
        subi    p1l, lo8('9' + 1 - 'A')
 314:	89 5f       	subi	r24, 0xF9	; 249

00000316 <ph01>:
ph01:
        rcall   PutChar
 316:	97 df       	rcall	.-210    	; 0x246

00000318 <ph02>:
ph02:
        dec     tmp2
 318:	4a 95       	dec	r20
        brne    ph00
 31a:	51 f7       	brne	.-44     	; 0x2f0

        ret
 31c:	08 95       	ret

0000031e <PutHexWord>:
        _ENDFUNC
;-----------------------------------------
; Put out a hex word
;
; Passed: Y = word
;
        _FUNCTION(PutHexWord)

PutHexWord:
        ldi     p2l, 4
 31e:	64 e0       	ldi	r22, 0x04	; 4
        rjmp    _PutHex
 320:	e3 cf       	rjmp	.-58     	; 0x2e8

00000322 <PutHexByte>:
        _ENDFUNC
;-----------------------------------------
; Put out a two ascii hex byte
; Yl = byte
;
        _FUNCTION(PutHexByte)

PutHexByte:
        ldi     p2l, 2
 322:	62 e0       	ldi	r22, 0x02	; 2
        rjmp    _PutHex
 324:	e1 cf       	rjmp	.-62     	; 0x2e8

00000326 <Hello>:
 326:	0d 00       	.word	0x000d	; ????
 328:	41 76       	andi	r20, 0x61	; 97
 32a:	72 58       	subi	r23, 0x82	; 130
 32c:	20 4d       	sbci	r18, 0xD0	; 208
 32e:	6f 6e       	ori	r22, 0xEF	; 239
 330:	69 74       	andi	r22, 0x49	; 73
 332:	6f 72       	andi	r22, 0x2F	; 47
 334:	20 56       	subi	r18, 0x60	; 96
 336:	32 00       	.word	0x0032	; ????
 338:	0d 00       	.word	0x000d	; ????
 33a:	0d 00       	.word	0x000d	; ????
 33c:	4d 6f       	ori	r20, 0xFD	; 253
 33e:	64 69       	ori	r22, 0x94	; 148
 340:	66 79       	andi	r22, 0x96	; 150
 342:	20 3d       	cpi	r18, 0xD0	; 208
 344:	20 6d       	ori	r18, 0xD0	; 208
 346:	7b 73       	andi	r23, 0x3B	; 59
 348:	2c 65       	ori	r18, 0x5C	; 92
 34a:	7d 5b       	subi	r23, 0xBD	; 189
 34c:	77 5d       	subi	r23, 0xD7	; 215
 34e:	5b 61       	ori	r21, 0x1B	; 27
 350:	61 61       	ori	r22, 0x11	; 17
 352:	61 5d       	subi	r22, 0xD1	; 209
 354:	00 0d       	add	r16, r0
 356:	00 44       	sbci	r16, 0x40	; 64
 358:	75 6d       	ori	r23, 0xD5	; 213
 35a:	70 20       	and	r7, r0
 35c:	20 20       	and	r2, r0
 35e:	3d 20       	and	r3, r13
 360:	64 7b       	andi	r22, 0xB4	; 180
 362:	73 2c       	mov	r7, r3
 364:	65 7d       	andi	r22, 0xD5	; 213
 366:	5b 77       	andi	r21, 0x7B	; 123
 368:	5d 5b       	subi	r21, 0xBD	; 189
 36a:	61 61       	ori	r22, 0x11	; 17
 36c:	61 61       	ori	r22, 0x11	; 17
 36e:	5d 20       	and	r5, r13
 370:	5b 78       	andi	r21, 0x8B	; 139
 372:	78 5d       	subi	r23, 0xD8	; 216
 374:	00 0d       	add	r16, r0
 376:	00 48       	sbci	r16, 0x80	; 128
 378:	61 6c       	ori	r22, 0xC1	; 193
 37a:	74 20       	and	r7, r4
 37c:	20 20       	and	r2, r0
 37e:	3d 20       	and	r3, r13
 380:	68 5b       	subi	r22, 0xB8	; 184
 382:	6f 6f       	ori	r22, 0xFF	; 255
 384:	6f 6f       	ori	r22, 0xFF	; 255
 386:	5d 00       	.word	0x005d	; ????
 388:	0d 00       	.word	0x000d	; ????
 38a:	53 74       	andi	r21, 0x43	; 67
 38c:	65 70       	andi	r22, 0x05	; 5
 38e:	20 20       	and	r2, r0
 390:	20 3d       	cpi	r18, 0xD0	; 208
 392:	20 73       	andi	r18, 0x30	; 48
 394:	5b 6f       	ori	r21, 0xFB	; 251
 396:	6f 6f       	ori	r22, 0xFF	; 255
 398:	6f 5d       	subi	r22, 0xDF	; 223
 39a:	00 0d       	add	r16, r0
 39c:	00 52       	subi	r16, 0x20	; 32
 39e:	65 73       	andi	r22, 0x35	; 53
 3a0:	75 6d       	ori	r23, 0xD5	; 213
 3a2:	65 20       	and	r6, r5
 3a4:	3d 20       	and	r3, r13
 3a6:	72 5b       	subi	r23, 0xB2	; 178
 3a8:	6f 6f       	ori	r22, 0xFF	; 255
 3aa:	6f 6f       	ori	r22, 0xFF	; 255
 3ac:	5d 00       	.word	0x005d	; ????
 3ae:	0d 00       	.word	0x000d	; ????
 3b0:	43 6f       	ori	r20, 0xF3	; 243
 3b2:	6e 74       	andi	r22, 0x4E	; 78
 3b4:	65 78       	andi	r22, 0x85	; 133
 3b6:	74 3d       	cpi	r23, 0xD4	; 212
 3b8:	20 78       	andi	r18, 0x80	; 128
 3ba:	5b 6f       	ori	r21, 0xFB	; 251
 3bc:	6f 6f       	ori	r22, 0xFF	; 255
 3be:	6f 5d       	subi	r22, 0xDF	; 223
 3c0:	00 0d       	add	r16, r0
 3c2:	00 53       	subi	r16, 0x30	; 48
 3c4:	69 67       	ori	r22, 0x79	; 121
 3c6:	6e 61       	ori	r22, 0x1E	; 30
 3c8:	6c 20       	and	r6, r12
 3ca:	3d 20       	and	r3, r13
 3cc:	69 5b       	subi	r22, 0xB9	; 185
 3ce:	6f 6f       	ori	r22, 0xFF	; 255
 3d0:	6f 6f       	ori	r22, 0xFF	; 255
 3d2:	5d 00       	.word	0x005d	; ????
 3d4:	0d 00       	.word	0x000d	; ????
 3d6:	43 61       	ori	r20, 0x13	; 19
 3d8:	6e 63       	ori	r22, 0x3E	; 62
 3da:	65 6c       	ori	r22, 0xC5	; 197
 3dc:	20 3d       	cpi	r18, 0xD0	; 208
 3de:	20 63       	ori	r18, 0x30	; 48
 3e0:	5b 6f       	ori	r21, 0xFB	; 251
 3e2:	6f 6f       	ori	r22, 0xFF	; 255
 3e4:	6f 5d       	subi	r22, 0xDF	; 223
 3e6:	00 0d       	add	r16, r0
 3e8:	00 4b       	sbci	r16, 0xB0	; 176
 3ea:	69 6c       	ori	r22, 0xC9	; 201
 3ec:	6c 54       	subi	r22, 0x4C	; 76
 3ee:	73 6b       	ori	r23, 0xB3	; 179
 3f0:	3d 20       	and	r3, r13
 3f2:	6b 5b       	subi	r22, 0xBB	; 187
 3f4:	6f 6f       	ori	r22, 0xFF	; 255
 3f6:	6f 6f       	ori	r22, 0xFF	; 255
 3f8:	5d 00       	.word	0x005d	; ????
 3fa:	0d 00       	.word	0x000d	; ????
 3fc:	49 6e       	ori	r20, 0xE9	; 233
 3fe:	69 74       	andi	r22, 0x49	; 73
 400:	61 73       	andi	r22, 0x31	; 49
 402:	6b 3d       	cpi	r22, 0xDB	; 219
 404:	20 70       	andi	r18, 0x00	; 0
 406:	5b 61       	ori	r21, 0x1B	; 27
 408:	61 61       	ori	r22, 0x11	; 17
 40a:	61 5d       	subi	r22, 0xD1	; 209
 40c:	00 0d       	add	r16, r0
 40e:	00 51       	subi	r16, 0x10	; 16
 410:	75 69       	ori	r23, 0x95	; 149
 412:	74 20       	and	r7, r4
 414:	20 20       	and	r2, r0
 416:	3d 20       	and	r3, r13
 418:	71 00       	.word	0x0071	; ????
 41a:	0d 00       	.word	0x000d	; ????
	...

0000041e <Monitor>:
 41e:	88 e3       	ldi	r24, 0x38	; 56
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	78 d2       	rcall	.+1264   	; 0x914
 424:	86 e2       	ldi	r24, 0x26	; 38
 426:	93 e0       	ldi	r25, 0x03	; 3

00000428 <Hello1>:
 428:	e7 de       	rcall	.-562    	; 0x1f8
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	e8 2f       	mov	r30, r24
 430:	f9 2f       	mov	r31, r25
 432:	c8 95       	lpm
 434:	00 20       	and	r0, r0
 436:	c1 f7       	brne	.-16     	; 0x428
 438:	20 e6       	ldi	r18, 0x60	; 96
 43a:	42 2e       	mov	r4, r18
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	52 2e       	mov	r5, r18
 440:	88 24       	eor	r8, r8
 442:	99 24       	eor	r9, r9
 444:	bb 24       	eor	r11, r11
 446:	aa 24       	eor	r10, r10
 448:	66 24       	eor	r6, r6
 44a:	77 24       	eor	r7, r7

0000044c <DebugMonitor>:
 44c:	d1 de       	rcall	.-606    	; 0x1f0
 44e:	8e e3       	ldi	r24, 0x3E	; 62
 450:	fa de       	rcall	.-524    	; 0x246
 452:	01 d0       	rcall	.+2      	; 0x456
 454:	fb cf       	rjmp	.-10     	; 0x44c

00000456 <m_Parse>:
 456:	ca de       	rcall	.-620    	; 0x1ec
 458:	8d 36       	cpi	r24, 0x6D	; 109
 45a:	c9 f0       	breq	.+50     	; 0x48e
 45c:	84 36       	cpi	r24, 0x64	; 100
 45e:	d1 f0       	breq	.+52     	; 0x494
 460:	88 36       	cpi	r24, 0x68	; 104
 462:	49 f1       	breq	.+82     	; 0x4b6
 464:	83 37       	cpi	r24, 0x73	; 115
 466:	c9 f1       	breq	.+114    	; 0x4da
 468:	8b 36       	cpi	r24, 0x6B	; 107
 46a:	a1 f1       	breq	.+104    	; 0x4d4
 46c:	82 37       	cpi	r24, 0x72	; 114
 46e:	31 f1       	breq	.+76     	; 0x4bc
 470:	89 36       	cpi	r24, 0x69	; 105
 472:	69 f1       	breq	.+90     	; 0x4ce
 474:	83 36       	cpi	r24, 0x63	; 99
 476:	29 f1       	breq	.+74     	; 0x4c2
 478:	88 37       	cpi	r24, 0x78	; 120
 47a:	31 f1       	breq	.+76     	; 0x4c8
 47c:	80 37       	cpi	r24, 0x70	; 112
 47e:	c1 f0       	breq	.+48     	; 0x4b0
 480:	81 37       	cpi	r24, 0x71	; 113
 482:	11 f0       	breq	.+4      	; 0x488

00000484 <m_err>:
 484:	8f e3       	ldi	r24, 0x3F	; 63
 486:	df ce       	rjmp	.-578    	; 0x246

00000488 <m_quit>:
 488:	af 91       	pop	r26
 48a:	af 91       	pop	r26
 48c:	08 95       	ret

0000048e <m_ModifyMemory>:
 48e:	50 d0       	rcall	.+160    	; 0x530
 490:	ce f7       	brtc	.-14     	; 0x484
 492:	9b c0       	rjmp	.+310    	; 0x5ca

00000494 <m_DumpMemory>:
 494:	4d d0       	rcall	.+154    	; 0x530
 496:	c8 2e       	mov	r12, r24
 498:	d9 2e       	mov	r13, r25
 49a:	a6 f7       	brtc	.-24     	; 0x484
 49c:	20 91 2a 01 	lds	r18, 0x012A
 4a0:	2d 30       	cpi	r18, 0x0D	; 13
 4a2:	11 f0       	breq	.+4      	; 0x4a8
 4a4:	3c d0       	rcall	.+120    	; 0x51e
 4a6:	76 f7       	brtc	.-36     	; 0x484

000004a8 <m1b>:
 4a8:	6c 2d       	mov	r22, r12
 4aa:	7d 2d       	mov	r23, r13
 4ac:	8a 2d       	mov	r24, r10
 4ae:	6d c0       	rjmp	.+218    	; 0x58a

000004b0 <m_InitTask>:
 4b0:	f9 de       	rcall	.-526    	; 0x2a4
 4b2:	46 f7       	brtc	.-48     	; 0x484
 4b4:	bf c1       	rjmp	.+894    	; 0x834

000004b6 <m_HaltProcess>:
 4b6:	28 d0       	rcall	.+80     	; 0x508
 4b8:	2e f7       	brtc	.-54     	; 0x484
 4ba:	cf c2       	rjmp	.+1438   	; 0xa5a

000004bc <m_ResumeProcess>:
 4bc:	25 d0       	rcall	.+74     	; 0x508
 4be:	16 f7       	brtc	.-60     	; 0x484
 4c0:	dc c1       	rjmp	.+952    	; 0x87a

000004c2 <m_CancelTimer>:
 4c2:	22 d0       	rcall	.+68     	; 0x508
 4c4:	fe f6       	brtc	.-66     	; 0x484
 4c6:	79 c3       	rjmp	.+1778   	; 0xbba

000004c8 <m_PrintProcessContext>:
 4c8:	1f d0       	rcall	.+62     	; 0x508
 4ca:	e6 f6       	brtc	.-72     	; 0x484
 4cc:	bc c0       	rjmp	.+376    	; 0x646

000004ce <m_SetSemaphore>:
 4ce:	1c d0       	rcall	.+56     	; 0x508
 4d0:	ce f6       	brtc	.-78     	; 0x484
 4d2:	20 c2       	rjmp	.+1088   	; 0x914

000004d4 <m_Terminate>:
 4d4:	19 d0       	rcall	.+50     	; 0x508
 4d6:	b6 f6       	brtc	.-84     	; 0x484
 4d8:	a5 c2       	rjmp	.+1354   	; 0xa24

000004da <m_StepProcess>:
 4da:	16 d0       	rcall	.+44     	; 0x508
 4dc:	9e f6       	brtc	.-90     	; 0x484
 4de:	87 d2       	rcall	.+1294   	; 0x9ee
 4e0:	88 23       	and	r24, r24
 4e2:	09 f4       	brne	.+2      	; 0x4e6
 4e4:	08 95       	ret

000004e6 <ms_NOTSUSPENDED>:
 4e6:	84 de       	rcall	.-760    	; 0x1f0
 4e8:	88 2d       	mov	r24, r8
 4ea:	99 2d       	mov	r25, r9
 4ec:	18 df       	rcall	.-464    	; 0x31e
 4ee:	84 ef       	ldi	r24, 0xF4	; 244
 4f0:	94 e0       	ldi	r25, 0x04	; 4
 4f2:	82 ce       	rjmp	.-764    	; 0x1f8

000004f4 <NotSuspended>:
 4f4:	20 2d       	mov	r18, r0
 4f6:	20 4e       	sbci	r18, 0xE0	; 224
 4f8:	6f 74       	andi	r22, 0x4F	; 79
 4fa:	20 53       	subi	r18, 0x30	; 48
 4fc:	75 73       	andi	r23, 0x35	; 53
 4fe:	70 65       	ori	r23, 0x50	; 80
 500:	6e 64       	ori	r22, 0x4E	; 78
 502:	65 64       	ori	r22, 0x45	; 69
 504:	21 0d       	add	r18, r1
	...

00000508 <GetObjectID>:
 508:	cd de       	rcall	.-614    	; 0x2a4
 50a:	16 f0       	brts	.+4      	; 0x510
 50c:	e4 de       	rcall	.-568    	; 0x2d6
 50e:	36 f4       	brtc	.+12     	; 0x51c

00000510 <goi00>:
 510:	66 23       	and	r22, r22
 512:	11 f4       	brne	.+4      	; 0x518
 514:	88 2d       	mov	r24, r8
 516:	99 2d       	mov	r25, r9

00000518 <goi01>:
 518:	88 2e       	mov	r8, r24
 51a:	99 2e       	mov	r9, r25

0000051c <goi02>:
 51c:	08 95       	ret

0000051e <GetDumpLength>:
 51e:	c4 de       	rcall	.-632    	; 0x2a8
 520:	16 f0       	brts	.+4      	; 0x526
 522:	d9 de       	rcall	.-590    	; 0x2d6
 524:	26 f4       	brtc	.+8      	; 0x52e

00000526 <gdl00>:
 526:	66 23       	and	r22, r22
 528:	09 f4       	brne	.+2      	; 0x52c
 52a:	8a 2d       	mov	r24, r10

0000052c <gdl01>:
 52c:	a8 2e       	mov	r10, r24

0000052e <gdl02>:
 52e:	08 95       	ret

00000530 <GetFlagsAndAddress>:
 530:	e8 94       	clt
 532:	5c de       	rcall	.-840    	; 0x1ec
 534:	2b 2d       	mov	r18, r11
 536:	83 37       	cpi	r24, 0x73	; 115
 538:	11 f4       	brne	.+4      	; 0x53e
 53a:	2d 7f       	andi	r18, 0xFD	; 253
 53c:	03 c0       	rjmp	.+6      	; 0x544

0000053e <gbTRYEERAM>:
 53e:	85 36       	cpi	r24, 0x65	; 101
 540:	e9 f4       	brne	.+58     	; 0x57c
 542:	22 60       	ori	r18, 0x02	; 2

00000544 <gbCONTINUE>:
 544:	b2 2e       	mov	r11, r18
 546:	ae de       	rcall	.-676    	; 0x2a4
 548:	2b 2d       	mov	r18, r11
 54a:	1e f4       	brtc	.+6      	; 0x552
 54c:	2e 7f       	andi	r18, 0xFE	; 254
 54e:	b2 2e       	mov	r11, r18
 550:	0c c0       	rjmp	.+24     	; 0x56a

00000552 <gbCHECKWORDFLAG>:
 552:	2e 7f       	andi	r18, 0xFE	; 254
 554:	b2 2e       	mov	r11, r18
 556:	30 91 2a 01 	lds	r19, 0x012A
 55a:	37 37       	cpi	r19, 0x77	; 119
 55c:	21 f4       	brne	.+8      	; 0x566
 55e:	21 60       	ori	r18, 0x01	; 1
 560:	b2 2e       	mov	r11, r18
 562:	a0 de       	rcall	.-704    	; 0x2a4
 564:	16 f0       	brts	.+4      	; 0x56a

00000566 <gbCHECKFORWHITESPACE>:
 566:	b7 de       	rcall	.-658    	; 0x2d6
 568:	4e f4       	brtc	.+18     	; 0x57c

0000056a <gbUPDATEADDRESS>:
 56a:	66 23       	and	r22, r22
 56c:	39 f0       	breq	.+14     	; 0x57c
 56e:	b1 fe       	sbrs	r11, 1
 570:	03 c0       	rjmp	.+6      	; 0x578
 572:	68 2e       	mov	r6, r24
 574:	79 2e       	mov	r7, r25
 576:	02 c0       	rjmp	.+4      	; 0x57c

00000578 <gbAddress>:
 578:	48 2e       	mov	r4, r24
 57a:	59 2e       	mov	r5, r25

0000057c <gbDONE>:
 57c:	84 2d       	mov	r24, r4
 57e:	95 2d       	mov	r25, r5
 580:	b1 fc       	sbrc	r11, 1
 582:	86 2d       	mov	r24, r6
 584:	b1 fc       	sbrc	r11, 1
 586:	97 2d       	mov	r25, r7
 588:	08 95       	ret

0000058a <_DumpMemory>:
 58a:	b0 fe       	sbrs	r11, 0
 58c:	03 c0       	rjmp	.+6      	; 0x594
 58e:	6e 7f       	andi	r22, 0xFE	; 254
 590:	80 fd       	sbrc	r24, 0
 592:	83 95       	inc	r24

00000594 <m10f>:
 594:	c6 2e       	mov	r12, r22
 596:	d7 2e       	mov	r13, r23
 598:	18 2e       	mov	r1, r24

0000059a <m10c>:
 59a:	2a de       	rcall	.-940    	; 0x1f0
 59c:	9d 2d       	mov	r25, r13
 59e:	8c 2d       	mov	r24, r12
 5a0:	be de       	rcall	.-644    	; 0x31e

000005a2 <m10d>:
 5a2:	28 de       	rcall	.-944    	; 0x1f4
 5a4:	8b d0       	rcall	.+278    	; 0x6bc
 5a6:	b0 fc       	sbrc	r11, 0
 5a8:	04 c0       	rjmp	.+8      	; 0x5b2
 5aa:	bb de       	rcall	.-650    	; 0x322
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8

000005b2 <m11>:
 5b2:	b5 de       	rcall	.-662    	; 0x31e
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	90 e0       	ldi	r25, 0x00	; 0

000005b8 <m12>:
 5b8:	c8 0e       	add	r12, r24
 5ba:	d9 1e       	adc	r13, r25
 5bc:	18 1a       	sub	r1, r24
 5be:	21 f0       	breq	.+8      	; 0x5c8

000005c0 <m10e>:
 5c0:	ec 2d       	mov	r30, r12
 5c2:	ef 70       	andi	r30, 0x0F	; 15
 5c4:	51 f3       	breq	.-44     	; 0x59a
 5c6:	ed cf       	rjmp	.-38     	; 0x5a2

000005c8 <m10exit>:
 5c8:	08 95       	ret

000005ca <_ModifyMemory>:
 5ca:	c8 2e       	mov	r12, r24
 5cc:	d9 2e       	mov	r13, r25

000005ce <_ModifyMemory_>:
 5ce:	10 de       	rcall	.-992    	; 0x1f0
 5d0:	8c 2d       	mov	r24, r12
 5d2:	9d 2d       	mov	r25, r13
 5d4:	a4 de       	rcall	.-696    	; 0x31e
 5d6:	0e de       	rcall	.-996    	; 0x1f4

000005d8 <_mmNEXT>:
 5d8:	71 d0       	rcall	.+226    	; 0x6bc
 5da:	b0 fc       	sbrc	r11, 0
 5dc:	a0 de       	rcall	.-704    	; 0x31e
 5de:	b0 fe       	sbrs	r11, 0
 5e0:	a0 de       	rcall	.-704    	; 0x322

000005e2 <_mmGETDATA>:
 5e2:	8d e2       	ldi	r24, 0x2D	; 45
 5e4:	30 de       	rcall	.-928    	; 0x246
 5e6:	b0 fe       	sbrs	r11, 0
 5e8:	5f de       	rcall	.-834    	; 0x2a8
 5ea:	b0 fc       	sbrc	r11, 0
 5ec:	5b de       	rcall	.-842    	; 0x2a4
 5ee:	66 f4       	brtc	.+24     	; 0x608

000005f0 <_mmWRITE>:
 5f0:	76 d0       	rcall	.+236    	; 0x6de
 5f2:	00 de       	rcall	.-1024   	; 0x1f4

000005f4 <_mmGOTONEXT>:
 5f4:	e1 e0       	ldi	r30, 0x01	; 1
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	b0 fc       	sbrc	r11, 0
 5fa:	31 96       	adiw	r30, 0x01	; 1
 5fc:	ce 0e       	add	r12, r30
 5fe:	df 1e       	adc	r13, r31
 600:	ec 2d       	mov	r30, r12
 602:	ef 70       	andi	r30, 0x0F	; 15
 604:	21 f3       	breq	.-56     	; 0x5ce
 606:	e8 cf       	rjmp	.-48     	; 0x5d8

00000608 <_mmNODATA>:
 608:	66 de       	rcall	.-820    	; 0x2d6
 60a:	36 f4       	brtc	.+12     	; 0x618
 60c:	66 23       	and	r22, r22
 60e:	81 f7       	brne	.-32     	; 0x5f0
 610:	20 91 2a 01 	lds	r18, 0x012A
 614:	2d 30       	cpi	r18, 0x0D	; 13
 616:	71 f7       	brne	.-36     	; 0x5f4

00000618 <_mmDONE>:
 618:	08 95       	ret

0000061a <ctdt0>:
 61a:	0d 50       	subi	r16, 0x0D	; 13
 61c:	49 44       	sbci	r20, 0x49	; 73
 61e:	20 46       	sbci	r18, 0x60	; 96
 620:	6c 67       	ori	r22, 0x7C	; 124
 622:	20 50       	subi	r18, 0x00	; 0
 624:	72 69       	ori	r23, 0x92	; 146
 626:	20 46       	sbci	r18, 0x60	; 96
 628:	72 61       	ori	r23, 0x12	; 18
 62a:	6d 65       	ori	r22, 0x5D	; 93
 62c:	20 53       	subi	r18, 0x30	; 48
 62e:	52 0d       	add	r21, r2
	...

00000631 <ctdt1>:
 631:	52 30       	cpi	r21, 0x02	; 2
 633:	20 20       	and	r2, r0
	...

00000636 <ctdt2>:
 636:	52 31       	cpi	r21, 0x12	; 18
 638:	36 20       	and	r3, r6
	...

0000063b <ctdt3>:
 63b:	0d 20       	and	r0, r13
 63d:	20 20       	and	r2, r0
 63f:	20 20       	and	r2, r0
 641:	50 43       	sbci	r21, 0x30	; 48
 643:	20 20       	and	r2, r0
	...

00000646 <_PrintContext>:
 646:	96 e0       	ldi	r25, 0x06	; 6
 648:	8a e1       	ldi	r24, 0x1A	; 26
 64a:	d6 dd       	rcall	.-1108   	; 0x1f8
 64c:	88 2d       	mov	r24, r8
 64e:	99 2d       	mov	r25, r9
 650:	66 de       	rcall	.-820    	; 0x31e
 652:	d0 dd       	rcall	.-1120   	; 0x1f4
 654:	e8 2d       	mov	r30, r8
 656:	f9 2d       	mov	r31, r9
 658:	82 81       	ldd	r24, Z+2	; 0x02
 65a:	63 de       	rcall	.-826    	; 0x322
 65c:	cb dd       	rcall	.-1130   	; 0x1f4
 65e:	e8 2d       	mov	r30, r8
 660:	f9 2d       	mov	r31, r9
 662:	83 81       	ldd	r24, Z+3	; 0x03
 664:	5e de       	rcall	.-836    	; 0x322
 666:	c6 dd       	rcall	.-1140   	; 0x1f4
 668:	c5 dd       	rcall	.-1142   	; 0x1f4
 66a:	e8 2d       	mov	r30, r8
 66c:	f9 2d       	mov	r31, r9
 66e:	c4 81       	ldd	r28, Z+4	; 0x04
 670:	d5 81       	ldd	r29, Z+5	; 0x05
 672:	8c 2f       	mov	r24, r28
 674:	9d 2f       	mov	r25, r29
 676:	53 de       	rcall	.-858    	; 0x31e
 678:	bd dd       	rcall	.-1158   	; 0x1f4
 67a:	bc dd       	rcall	.-1160   	; 0x1f4
 67c:	21 96       	adiw	r28, 0x01	; 1
 67e:	89 91       	ld	r24, Y+
 680:	50 de       	rcall	.-864    	; 0x322

00000682 <Loop>:
 682:	0e d0       	rcall	.+28     	; 0x6a0
 684:	96 e0       	ldi	r25, 0x06	; 6
 686:	81 e3       	ldi	r24, 0x31	; 49
 688:	10 d0       	rcall	.+32     	; 0x6aa
 68a:	0a d0       	rcall	.+20     	; 0x6a0
 68c:	96 e0       	ldi	r25, 0x06	; 6
 68e:	86 e3       	ldi	r24, 0x36	; 54
 690:	0c d0       	rcall	.+24     	; 0x6aa
 692:	96 e0       	ldi	r25, 0x06	; 6
 694:	8b e3       	ldi	r24, 0x3B	; 59
 696:	b0 dd       	rcall	.-1184   	; 0x1f8
 698:	99 91       	ld	r25, Y+
 69a:	88 81       	ld	r24, Y
 69c:	40 de       	rcall	.-896    	; 0x31e
 69e:	08 95       	ret

000006a0 <Print16RegPre>:
 6a0:	a7 dd       	rcall	.-1202   	; 0x1f0
 6a2:	8c 2f       	mov	r24, r28
 6a4:	9d 2f       	mov	r25, r29
 6a6:	3b de       	rcall	.-906    	; 0x31e
 6a8:	a5 cd       	rjmp	.-1206   	; 0x1f4

000006aa <Print16Reg>:
 6aa:	a6 dd       	rcall	.-1204   	; 0x1f8
 6ac:	e0 e1       	ldi	r30, 0x10	; 16
 6ae:	1e 2e       	mov	r1, r30

000006b0 <p16r0>:
 6b0:	89 91       	ld	r24, Y+
 6b2:	37 de       	rcall	.-914    	; 0x322
 6b4:	9f dd       	rcall	.-1218   	; 0x1f4
 6b6:	1a 94       	dec	r1
 6b8:	d9 f7       	brne	.-10     	; 0x6b0
 6ba:	08 95       	ret

000006bc <GetByteWord>:
 6bc:	b1 fc       	sbrc	r11, 1
 6be:	08 c0       	rjmp	.+16     	; 0x6d0
 6c0:	ec 2d       	mov	r30, r12
 6c2:	fd 2d       	mov	r31, r13
 6c4:	80 81       	ld	r24, Z
 6c6:	b0 fe       	sbrs	r11, 0
 6c8:	08 95       	ret
 6ca:	91 81       	ldd	r25, Z+1	; 0x01
 6cc:	80 81       	ld	r24, Z
 6ce:	08 95       	ret

000006d0 <gbwEEPROM>:
 6d0:	9d 2d       	mov	r25, r13
 6d2:	8c 2d       	mov	r24, r12
 6d4:	b0 fe       	sbrs	r11, 0
 6d6:	ac d2       	rcall	.+1368   	; 0xc30
 6d8:	b0 fc       	sbrc	r11, 0
 6da:	b9 d2       	rcall	.+1394   	; 0xc4e

000006dc <gwbEXIT>:
 6dc:	08 95       	ret

000006de <PutByteWord>:
 6de:	b1 fc       	sbrc	r11, 1
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2
 6e2:	ec 2d       	mov	r30, r12
 6e4:	fd 2d       	mov	r31, r13
 6e6:	80 83       	st	Z, r24
 6e8:	b0 fe       	sbrs	r11, 0
 6ea:	08 95       	ret
 6ec:	91 83       	std	Z+1, r25	; 0x01
 6ee:	80 83       	st	Z, r24
 6f0:	08 95       	ret

000006f2 <pbwEEPROM>:
 6f2:	e9 2e       	mov	r14, r25
 6f4:	68 2f       	mov	r22, r24
 6f6:	9d 2d       	mov	r25, r13
 6f8:	8c 2d       	mov	r24, r12
 6fa:	c0 d2       	rcall	.+1408   	; 0xc7c
 6fc:	b0 fe       	sbrs	r11, 0
 6fe:	06 c0       	rjmp	.+12     	; 0x70c
 700:	8c 2d       	mov	r24, r12
 702:	9d 2d       	mov	r25, r13
 704:	8f 5f       	subi	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	6e 2d       	mov	r22, r14
 70a:	b8 d2       	rcall	.+1392   	; 0xc7c

0000070c <pbwEXIT>:
 70c:	08 95       	ret

0000070e <IntProlog>:
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	bf 93       	push	r27
 714:	af 93       	push	r26
 716:	9f 93       	push	r25
 718:	d1 e0       	ldi	r29, 0x01	; 1
 71a:	cc e2       	ldi	r28, 0x2C	; 44
 71c:	9f b7       	in	r25, 0x3f	; 63
 71e:	ae 81       	ldd	r26, Y+6	; 0x06
 720:	af 5f       	subi	r26, 0xFF	; 255
 722:	ae 83       	std	Y+6, r26	; 0x06
 724:	60 f0       	brcs	.+24     	; 0x73e
 726:	aa 81       	ldd	r26, Y+2	; 0x02
 728:	bb 81       	ldd	r27, Y+3	; 0x03
 72a:	ba 2b       	or	r27, r26
 72c:	41 f4       	brne	.+16     	; 0x73e
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	fe 81       	ldd	r31, Y+6	; 0x06
 734:	ef 81       	ldd	r30, Y+7	; 0x07
 736:	29 96       	adiw	r28, 0x09	; 9
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	09 94       	ijmp

0000073e <SaveContext>:
 73e:	8f 93       	push	r24
 740:	7f 93       	push	r23
 742:	6f 93       	push	r22
 744:	5f 93       	push	r21
 746:	4f 93       	push	r20
 748:	3f 93       	push	r19
 74a:	2f 93       	push	r18
 74c:	1f 93       	push	r17
 74e:	0f 93       	push	r16
 750:	ff 92       	push	r15
 752:	ef 92       	push	r14
 754:	df 92       	push	r13
 756:	cf 92       	push	r12
 758:	bf 92       	push	r11
 75a:	af 92       	push	r10
 75c:	9f 92       	push	r9
 75e:	8f 92       	push	r8
 760:	7f 92       	push	r7
 762:	6f 92       	push	r6
 764:	5f 92       	push	r5
 766:	4f 92       	push	r4
 768:	3f 92       	push	r3
 76a:	2f 92       	push	r2
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	9f 93       	push	r25
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	9b 8d       	ldd	r25, Y+27	; 0x1b
 778:	39 a1       	ldd	r19, Y+33	; 0x21
 77a:	48 a1       	ldd	r20, Y+32	; 0x20
 77c:	e8 a3       	std	Y+32, r30	; 0x20
 77e:	f9 a3       	std	Y+33, r31	; 0x21
 780:	70 f0       	brcs	.+28     	; 0x79e
 782:	f1 e0       	ldi	r31, 0x01	; 1
 784:	ec e2       	ldi	r30, 0x2C	; 44
 786:	d3 81       	ldd	r29, Z+3	; 0x03
 788:	c2 81       	ldd	r28, Z+2	; 0x02
 78a:	be b7       	in	r27, 0x3e	; 62
 78c:	ad b7       	in	r26, 0x3d	; 61
 78e:	bd 83       	std	Y+5, r27	; 0x05
 790:	ac 83       	std	Y+4, r26	; 0x04
 792:	24 81       	ldd	r18, Z+4	; 0x04
 794:	2d bf       	out	0x3d, r18	; 61
 796:	25 81       	ldd	r18, Z+5	; 0x05
 798:	2e bf       	out	0x3e, r18	; 62
 79a:	ca 2f       	mov	r28, r26
 79c:	db 2f       	mov	r29, r27

0000079e <AlreadyInKernel>:
 79e:	11 24       	eor	r1, r1
 7a0:	e3 2f       	mov	r30, r19
 7a2:	f4 2f       	mov	r31, r20
 7a4:	09 94       	ijmp

000007a6 <Epilog>:
 7a6:	ef 91       	pop	r30
 7a8:	ef 91       	pop	r30

000007aa <_Epilog>:
 7aa:	ec e2       	ldi	r30, 0x2C	; 44
 7ac:	f1 e0       	ldi	r31, 0x01	; 1
 7ae:	f8 94       	cli
 7b0:	06 81       	ldd	r16, Z+6	; 0x06
 7b2:	0a 95       	dec	r16
 7b4:	06 83       	std	Z+6, r16	; 0x06
 7b6:	54 f4       	brge	.+20     	; 0x7cc
 7b8:	d1 81       	ldd	r29, Z+1	; 0x01
 7ba:	c0 81       	ld	r28, Z
 7bc:	d3 83       	std	Z+3, r29	; 0x03
 7be:	c2 83       	std	Z+2, r28	; 0x02
 7c0:	20 96       	adiw	r28, 0x00	; 0
 7c2:	39 f1       	breq	.+78     	; 0x812
 7c4:	bd 81       	ldd	r27, Y+5	; 0x05
 7c6:	ac 81       	ldd	r26, Y+4	; 0x04
 7c8:	ad bf       	out	0x3d, r26	; 61
 7ca:	be bf       	out	0x3e, r27	; 62

000007cc <SkipTaskSwap>:
 7cc:	0f 90       	pop	r0
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	0f 90       	pop	r0
 7d2:	1f 90       	pop	r1
 7d4:	2f 90       	pop	r2
 7d6:	3f 90       	pop	r3
 7d8:	4f 90       	pop	r4
 7da:	5f 90       	pop	r5
 7dc:	6f 90       	pop	r6
 7de:	7f 90       	pop	r7
 7e0:	8f 90       	pop	r8
 7e2:	9f 90       	pop	r9
 7e4:	af 90       	pop	r10
 7e6:	bf 90       	pop	r11
 7e8:	cf 90       	pop	r12
 7ea:	df 90       	pop	r13
 7ec:	ef 90       	pop	r14
 7ee:	ff 90       	pop	r15
 7f0:	0f 91       	pop	r16
 7f2:	1f 91       	pop	r17
 7f4:	2f 91       	pop	r18
 7f6:	3f 91       	pop	r19
 7f8:	4f 91       	pop	r20
 7fa:	5f 91       	pop	r21
 7fc:	6f 91       	pop	r22
 7fe:	7f 91       	pop	r23
 800:	8f 91       	pop	r24
 802:	9f 91       	pop	r25
 804:	af 91       	pop	r26
 806:	bf 91       	pop	r27
 808:	cf 91       	pop	r28
 80a:	df 91       	pop	r29
 80c:	ef 91       	pop	r30
 80e:	ff 91       	pop	r31
 810:	18 95       	reti

00000812 <_IdleTask>:
 812:	78 94       	sei
 814:	88 95       	sleep

00000816 <snooze>:
 816:	fd cf       	rjmp	.-6      	; 0x812

00000818 <AvrXSetKernelStack>:
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	80 50       	subi	r24, 0x00	; 0
 81e:	90 40       	sbci	r25, 0x00	; 0
 820:	11 f4       	brne	.+4      	; 0x826
 822:	8d b7       	in	r24, 0x3d	; 61
 824:	9e b7       	in	r25, 0x3e	; 62

00000826 <sks1>:
 826:	80 93 30 01 	sts	0x0130, r24
 82a:	90 93 31 01 	sts	0x0131, r25
 82e:	09 94       	ijmp

00000830 <AvrXRunTask>:
 830:	01 d0       	rcall	.+2      	; 0x834
 832:	23 c0       	rjmp	.+70     	; 0x87a

00000834 <AvrXInitTask>:
 834:	e8 2f       	mov	r30, r24
 836:	f9 2f       	mov	r31, r25
 838:	1d d0       	rcall	.+58     	; 0x874
 83a:	a0 2d       	mov	r26, r0
 83c:	1b d0       	rcall	.+54     	; 0x874
 83e:	b0 2d       	mov	r27, r0
 840:	19 d0       	rcall	.+50     	; 0x874
 842:	0c 92       	st	X, r0
 844:	17 d0       	rcall	.+46     	; 0x874
 846:	0e 92       	st	-X, r0
 848:	40 e0       	ldi	r20, 0x00	; 0
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	51 e2       	ldi	r21, 0x21	; 33

0000084e <PushRegisters>:
 84e:	4e 93       	st	-X, r20
 850:	5a 95       	dec	r21
 852:	e9 f7       	brne	.-6      	; 0x84e
 854:	11 97       	sbiw	r26, 0x01	; 1
 856:	0e d0       	rcall	.+28     	; 0x874
 858:	80 2d       	mov	r24, r0
 85a:	0c d0       	rcall	.+24     	; 0x874
 85c:	90 2d       	mov	r25, r0
 85e:	0a d0       	rcall	.+20     	; 0x874
 860:	e8 2f       	mov	r30, r24
 862:	f9 2f       	mov	r31, r25
 864:	a4 83       	std	Z+4, r26	; 0x04
 866:	b5 83       	std	Z+5, r27	; 0x05
 868:	03 82       	std	Z+3, r0	; 0x03
 86a:	a0 e6       	ldi	r26, 0x60	; 96
 86c:	a2 83       	std	Z+2, r26	; 0x02
 86e:	41 83       	std	Z+1, r20	; 0x01
 870:	40 83       	st	Z, r20
 872:	08 95       	ret

00000874 <lpm_inc>:
 874:	c8 95       	lpm
 876:	31 96       	adiw	r30, 0x01	; 1
 878:	08 95       	ret

0000087a <AvrXResume>:
 87a:	f8 94       	cli
 87c:	48 df       	rcall	.-368    	; 0x70e
 87e:	78 94       	sei
 880:	e8 2f       	mov	r30, r24
 882:	f9 2f       	mov	r31, r25
 884:	22 81       	ldd	r18, Z+2	; 0x02
 886:	2f 7d       	andi	r18, 0xDF	; 223
 888:	22 83       	std	Z+2, r18	; 0x02
 88a:	26 ff       	sbrs	r18, 6
 88c:	03 c0       	rjmp	.+6      	; 0x894
 88e:	2f 7b       	andi	r18, 0xBF	; 191
 890:	22 83       	std	Z+2, r18	; 0x02
 892:	01 d0       	rcall	.+2      	; 0x896

00000894 <ar00>:
 894:	8a cf       	rjmp	.-236    	; 0x7aa

00000896 <_QueuePid>:
 896:	e8 2f       	mov	r30, r24
 898:	f9 2f       	mov	r31, r25
 89a:	3f ef       	ldi	r19, 0xFF	; 255
 89c:	22 81       	ldd	r18, Z+2	; 0x02
 89e:	20 73       	andi	r18, 0x30	; 48
 8a0:	e1 f4       	brne	.+56     	; 0x8da
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	43 81       	ldd	r20, Z+3	; 0x03
 8a8:	cc e2       	ldi	r28, 0x2C	; 44
 8aa:	d1 e0       	ldi	r29, 0x01	; 1
 8ac:	2f b7       	in	r18, 0x3f	; 63
 8ae:	f8 94       	cli

000008b0 <_qp00>:
 8b0:	33 95       	inc	r19
 8b2:	ec 2f       	mov	r30, r28
 8b4:	fd 2f       	mov	r31, r29
 8b6:	c0 81       	ld	r28, Z
 8b8:	d1 81       	ldd	r29, Z+1	; 0x01
 8ba:	20 96       	adiw	r28, 0x00	; 0
 8bc:	19 f0       	breq	.+6      	; 0x8c4
 8be:	5b 81       	ldd	r21, Y+3	; 0x03
 8c0:	45 17       	cp	r20, r21
 8c2:	b0 f7       	brcc	.-20     	; 0x8b0

000008c4 <_qp01>:
 8c4:	91 83       	std	Z+1, r25	; 0x01
 8c6:	80 83       	st	Z, r24
 8c8:	f9 2f       	mov	r31, r25
 8ca:	e8 2f       	mov	r30, r24
 8cc:	d1 83       	std	Z+1, r29	; 0x01
 8ce:	c0 83       	st	Z, r28
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	83 2f       	mov	r24, r19
 8d6:	2f bf       	out	0x3f, r18	; 63
 8d8:	08 95       	ret

000008da <_qpSUSPEND>:
 8da:	83 2f       	mov	r24, r19
 8dc:	20 64       	ori	r18, 0x40	; 64
 8de:	22 83       	std	Z+2, r18	; 0x02
 8e0:	08 95       	ret

000008e2 <AvrXWaitMessageAck>:
 8e2:	8e 5f       	subi	r24, 0xFE	; 254
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255

000008e6 <AvrXWaitSemaphore>:
 8e6:	e8 2f       	mov	r30, r24
 8e8:	f9 2f       	mov	r31, r25
 8ea:	f8 94       	cli
 8ec:	20 81       	ld	r18, Z
 8ee:	31 81       	ldd	r19, Z+1	; 0x01
 8f0:	21 50       	subi	r18, 0x01	; 1
 8f2:	30 40       	sbci	r19, 0x00	; 0
 8f4:	19 f4       	brne	.+6      	; 0x8fc
 8f6:	20 83       	st	Z, r18
 8f8:	31 83       	std	Z+1, r19	; 0x01
 8fa:	18 95       	reti

000008fc <aws01>:
 8fc:	08 df       	rcall	.-496    	; 0x70e
 8fe:	ec e2       	ldi	r30, 0x2C	; 44
 900:	f1 e0       	ldi	r31, 0x01	; 1
 902:	73 81       	ldd	r23, Z+3	; 0x03
 904:	62 81       	ldd	r22, Z+2	; 0x02
 906:	3c d0       	rcall	.+120    	; 0x980
 908:	e8 2f       	mov	r30, r24
 90a:	f9 2f       	mov	r31, r25
 90c:	2b d0       	rcall	.+86     	; 0x964
 90e:	4d cf       	rjmp	.-358    	; 0x7aa

00000910 <AvrXAckMessage>:
 910:	8e 5f       	subi	r24, 0xFE	; 254
 912:	9f 4f       	sbci	r25, 0xFF	; 255

00000914 <AvrXSetSemaphore>:
 914:	0c d0       	rcall	.+24     	; 0x92e
 916:	90 91 32 01 	lds	r25, 0x0132
 91a:	93 95       	inc	r25
 91c:	89 2b       	or	r24, r25
 91e:	09 f0       	breq	.+2      	; 0x922
 920:	08 95       	ret

00000922 <axss0>:
 922:	f8 94       	cli
 924:	f4 de       	rcall	.-536    	; 0x70e
 926:	78 94       	sei
 928:	40 cf       	rjmp	.-384    	; 0x7aa

0000092a <AvrXIntSetObjectSemaphore>:
 92a:	8e 5f       	subi	r24, 0xFE	; 254
 92c:	9f 4f       	sbci	r25, 0xFF	; 255

0000092e <AvrXIntSetSemaphore>:
 92e:	e8 2f       	mov	r30, r24
 930:	f9 2f       	mov	r31, r25
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	2f b7       	in	r18, 0x3f	; 63
 938:	f8 94       	cli
 93a:	71 81       	ldd	r23, Z+1	; 0x01
 93c:	60 81       	ld	r22, Z
 93e:	86 17       	cp	r24, r22
 940:	97 07       	cpc	r25, r23
 942:	28 f0       	brcs	.+10     	; 0x94e
 944:	80 83       	st	Z, r24
 946:	91 83       	std	Z+1, r25	; 0x01

00000948 <BogusSemaphore>:
 948:	8f ef       	ldi	r24, 0xFF	; 255
 94a:	2f bf       	out	0x3f, r18	; 63
 94c:	08 95       	ret

0000094e <aiss00>:
 94e:	8f e5       	ldi	r24, 0x5F	; 95
 950:	86 17       	cp	r24, r22
 952:	97 07       	cpc	r25, r23
 954:	c8 f7       	brcc	.-14     	; 0x948
 956:	23 d0       	rcall	.+70     	; 0x99e
 958:	2f bf       	out	0x3f, r18	; 63
 95a:	86 2f       	mov	r24, r22
 95c:	97 2f       	mov	r25, r23
 95e:	9b cf       	rjmp	.-202    	; 0x896

00000960 <_ao00>:
 960:	e2 2f       	mov	r30, r18
 962:	f3 2f       	mov	r31, r19

00000964 <_AppendObject>:
 964:	20 81       	ld	r18, Z
 966:	31 81       	ldd	r19, Z+1	; 0x01
 968:	20 50       	subi	r18, 0x00	; 0
 96a:	30 40       	sbci	r19, 0x00	; 0
 96c:	c9 f7       	brne	.-14     	; 0x960
 96e:	71 83       	std	Z+1, r23	; 0x01
 970:	60 83       	st	Z, r22
 972:	f7 2f       	mov	r31, r23
 974:	e6 2f       	mov	r30, r22
 976:	31 83       	std	Z+1, r19	; 0x01
 978:	20 83       	st	Z, r18
 97a:	08 95       	ret

0000097c <_ro00>:
 97c:	f3 2f       	mov	r31, r19
 97e:	e2 2f       	mov	r30, r18

00000980 <_RemoveObject>:
 980:	20 81       	ld	r18, Z
 982:	31 81       	ldd	r19, Z+1	; 0x01
 984:	62 17       	cp	r22, r18
 986:	73 07       	cpc	r23, r19
 988:	51 f0       	breq	.+20     	; 0x99e
 98a:	20 50       	subi	r18, 0x00	; 0
 98c:	30 40       	sbci	r19, 0x00	; 0
 98e:	b1 f7       	brne	.-20     	; 0x97c
 990:	08 95       	ret

00000992 <_RemoveFirstObject>:
 992:	60 81       	ld	r22, Z
 994:	71 81       	ldd	r23, Z+1	; 0x01
 996:	60 50       	subi	r22, 0x00	; 0
 998:	70 40       	sbci	r23, 0x00	; 0
 99a:	09 f4       	brne	.+2      	; 0x99e
 99c:	08 95       	ret

0000099e <_RemoveObjectAt>:
 99e:	4c 2f       	mov	r20, r28
 9a0:	5d 2f       	mov	r21, r29
 9a2:	c6 2f       	mov	r28, r22
 9a4:	d7 2f       	mov	r29, r23
 9a6:	79 81       	ldd	r23, Y+1	; 0x01
 9a8:	68 81       	ld	r22, Y
 9aa:	71 83       	std	Z+1, r23	; 0x01
 9ac:	60 83       	st	Z, r22
 9ae:	e6 2f       	mov	r30, r22
 9b0:	f7 2f       	mov	r31, r23
 9b2:	66 27       	eor	r22, r22
 9b4:	68 83       	st	Y, r22
 9b6:	69 83       	std	Y+1, r22	; 0x01
 9b8:	7d 2f       	mov	r23, r29
 9ba:	6c 2f       	mov	r22, r28
 9bc:	c4 2f       	mov	r28, r20
 9be:	d5 2f       	mov	r29, r21
 9c0:	98 94       	clz
 9c2:	08 95       	ret

000009c4 <AvrXSingleStepNext>:
 9c4:	f8 94       	cli
 9c6:	a3 de       	rcall	.-698    	; 0x70e
 9c8:	78 94       	sei
 9ca:	f9 2f       	mov	r31, r25
 9cc:	e8 2f       	mov	r30, r24
 9ce:	a2 81       	ldd	r26, Z+2	; 0x02
 9d0:	a6 ff       	sbrs	r26, 6
 9d2:	1d c0       	rjmp	.+58     	; 0xa0e
 9d4:	a0 68       	ori	r26, 0x80	; 128
 9d6:	a2 83       	std	Z+2, r26	; 0x02
 9d8:	ec e2       	ldi	r30, 0x2C	; 44
 9da:	f1 e0       	ldi	r31, 0x01	; 1
 9dc:	b1 81       	ldd	r27, Z+1	; 0x01
 9de:	a0 81       	ld	r26, Z
 9e0:	91 83       	std	Z+1, r25	; 0x01
 9e2:	80 83       	st	Z, r24
 9e4:	f9 2f       	mov	r31, r25
 9e6:	e8 2f       	mov	r30, r24
 9e8:	b1 83       	std	Z+1, r27	; 0x01
 9ea:	a0 83       	st	Z, r26
 9ec:	0e c0       	rjmp	.+28     	; 0xa0a

000009ee <AvrXStepNext>:
 9ee:	f8 94       	cli
 9f0:	8e de       	rcall	.-740    	; 0x70e
 9f2:	78 94       	sei
 9f4:	f9 2f       	mov	r31, r25
 9f6:	e8 2f       	mov	r30, r24
 9f8:	a2 81       	ldd	r26, Z+2	; 0x02
 9fa:	a6 ff       	sbrs	r26, 6
 9fc:	09 c0       	rjmp	.+18     	; 0xa10
 9fe:	af 79       	andi	r26, 0x9F	; 159
 a00:	a2 83       	std	Z+2, r26	; 0x02
 a02:	49 df       	rcall	.-366    	; 0x896
 a04:	a2 81       	ldd	r26, Z+2	; 0x02
 a06:	a0 62       	ori	r26, 0x20	; 32
 a08:	a2 83       	std	Z+2, r26	; 0x02

00000a0a <AssnXOk>:
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	01 c0       	rjmp	.+2      	; 0xa10

00000a0e <AssnXErr>:
 a0e:	81 e0       	ldi	r24, 0x01	; 1

00000a10 <AssnX>:
 a10:	8a 8f       	std	Y+26, r24	; 0x1a
 a12:	cb ce       	rjmp	.-618    	; 0x7aa

00000a14 <AvrXTaskExit>:
 a14:	f8 94       	cli
 a16:	7b de       	rcall	.-778    	; 0x70e
 a18:	78 94       	sei
 a1a:	90 91 2f 01 	lds	r25, 0x012F
 a1e:	80 91 2e 01 	lds	r24, 0x012E
 a22:	03 c0       	rjmp	.+6      	; 0xa2a

00000a24 <AvrXTerminate>:
 a24:	f8 94       	cli
 a26:	73 de       	rcall	.-794    	; 0x70e
 a28:	78 94       	sei

00000a2a <at00>:
 a2a:	f9 2f       	mov	r31, r25
 a2c:	e8 2f       	mov	r30, r24
 a2e:	a0 e1       	ldi	r26, 0x10	; 16
 a30:	a2 83       	std	Z+2, r26	; 0x02
 a32:	79 2f       	mov	r23, r25
 a34:	68 2f       	mov	r22, r24
 a36:	f1 e0       	ldi	r31, 0x01	; 1
 a38:	ec e2       	ldi	r30, 0x2C	; 44
 a3a:	f8 94       	cli
 a3c:	a1 df       	rcall	.-190    	; 0x980
 a3e:	b5 ce       	rjmp	.-662    	; 0x7aa

00000a40 <AvrXHalt>:
 a40:	f8 94       	cli
 a42:	fe cf       	rjmp	.-4      	; 0xa40

00000a44 <AvrXBreakpoint>:
 a44:	f8 94       	cli
 a46:	63 de       	rcall	.-826    	; 0x70e
 a48:	78 94       	sei
 a4a:	f0 91 2f 01 	lds	r31, 0x012F
 a4e:	e0 91 2e 01 	lds	r30, 0x012E
 a52:	22 81       	ldd	r18, Z+2	; 0x02
 a54:	25 fd       	sbrc	r18, 5
 a56:	09 c0       	rjmp	.+18     	; 0xa6a
 a58:	a8 ce       	rjmp	.-688    	; 0x7aa

00000a5a <AvrXSuspend>:
 a5a:	f8 94       	cli
 a5c:	58 de       	rcall	.-848    	; 0x70e
 a5e:	78 94       	sei
 a60:	f9 2f       	mov	r31, r25
 a62:	e8 2f       	mov	r30, r24
 a64:	22 81       	ldd	r18, Z+2	; 0x02
 a66:	20 62       	ori	r18, 0x20	; 32
 a68:	22 83       	std	Z+2, r18	; 0x02

00000a6a <as00>:
 a6a:	7f 2f       	mov	r23, r31
 a6c:	6e 2f       	mov	r22, r30
 a6e:	f1 e0       	ldi	r31, 0x01	; 1
 a70:	ec e2       	ldi	r30, 0x2C	; 44
 a72:	f8 94       	cli
 a74:	85 df       	rcall	.-246    	; 0x980
 a76:	c2 2f       	mov	r28, r18
 a78:	d3 2f       	mov	r29, r19
 a7a:	20 96       	adiw	r28, 0x00	; 0
 a7c:	19 f0       	breq	.+6      	; 0xa84
 a7e:	ea 81       	ldd	r30, Y+2	; 0x02
 a80:	e0 64       	ori	r30, 0x40	; 64
 a82:	ea 83       	std	Y+2, r30	; 0x02

00000a84 <as01>:
 a84:	92 ce       	rjmp	.-732    	; 0x7aa

00000a86 <AvrXSendMessage>:
 a86:	f8 94       	cli
 a88:	42 de       	rcall	.-892    	; 0x70e
 a8a:	78 94       	sei
 a8c:	01 d0       	rcall	.+2      	; 0xa90
 a8e:	8d ce       	rjmp	.-742    	; 0x7aa

00000a90 <AvrXIntSendMessage>:
 a90:	f9 2f       	mov	r31, r25
 a92:	e8 2f       	mov	r30, r24
 a94:	67 df       	rcall	.-306    	; 0x964
 a96:	49 cf       	rjmp	.-366    	; 0x92a

00000a98 <AvrXWaitMessage>:
 a98:	e8 2f       	mov	r30, r24
 a9a:	f9 2f       	mov	r31, r25
 a9c:	f8 94       	cli
 a9e:	79 df       	rcall	.-270    	; 0x992
 aa0:	78 94       	sei
 aa2:	21 f4       	brne	.+8      	; 0xaac
 aa4:	1e df       	rcall	.-452    	; 0x8e2
 aa6:	82 50       	subi	r24, 0x02	; 2
 aa8:	90 40       	sbci	r25, 0x00	; 0
 aaa:	f6 cf       	rjmp	.-20     	; 0xa98

00000aac <_rm01>:
 aac:	f5 d0       	rcall	.+490    	; 0xc98
 aae:	86 2f       	mov	r24, r22
 ab0:	97 2f       	mov	r25, r23
 ab2:	08 95       	ret

00000ab4 <AvrXDelay>:
 ab4:	01 d0       	rcall	.+2      	; 0xab8
 ab6:	15 cf       	rjmp	.-470    	; 0x8e2

00000ab8 <AvrXStartTimer>:
 ab8:	60 50       	subi	r22, 0x00	; 0
 aba:	70 40       	sbci	r23, 0x00	; 0
 abc:	09 f4       	brne	.+2      	; 0xac0
 abe:	28 cf       	rjmp	.-432    	; 0x910

00000ac0 <CountNotZero>:
 ac0:	f8 94       	cli
 ac2:	25 de       	rcall	.-950    	; 0x70e
 ac4:	78 94       	sei
 ac6:	e8 d0       	rcall	.+464    	; 0xc98
 ac8:	e4 e3       	ldi	r30, 0x34	; 52
 aca:	f1 e0       	ldi	r31, 0x01	; 1
 acc:	f8 94       	cli
 ace:	20 91 36 01 	lds	r18, 0x0136
 ad2:	2a 95       	dec	r18
 ad4:	20 93 36 01 	sts	0x0136, r18
 ad8:	78 94       	sei

00000ada <ast00>:
 ada:	ce 2f       	mov	r28, r30
 adc:	df 2f       	mov	r29, r31
 ade:	e8 81       	ld	r30, Y
 ae0:	f9 81       	ldd	r31, Y+1	; 0x01
 ae2:	30 96       	adiw	r30, 0x00	; 0
 ae4:	59 f0       	breq	.+22     	; 0xafc
 ae6:	24 81       	ldd	r18, Z+4	; 0x04
 ae8:	35 81       	ldd	r19, Z+5	; 0x05
 aea:	62 1b       	sub	r22, r18
 aec:	73 0b       	sbc	r23, r19
 aee:	a8 f7       	brcc	.-22     	; 0xada
 af0:	62 0f       	add	r22, r18
 af2:	73 1f       	adc	r23, r19
 af4:	26 1b       	sub	r18, r22
 af6:	37 0b       	sbc	r19, r23
 af8:	24 83       	std	Z+4, r18	; 0x04
 afa:	35 83       	std	Z+5, r19	; 0x05

00000afc <ast01>:
 afc:	99 83       	std	Y+1, r25	; 0x01
 afe:	88 83       	st	Y, r24
 b00:	d9 2f       	mov	r29, r25
 b02:	c8 2f       	mov	r28, r24
 b04:	f9 83       	std	Y+1, r31	; 0x01
 b06:	e8 83       	st	Y, r30
 b08:	6c 83       	std	Y+4, r22	; 0x04
 b0a:	7d 83       	std	Y+5, r23	; 0x05
 b0c:	3c d0       	rcall	.+120    	; 0xb86
 b0e:	4d ce       	rjmp	.-870    	; 0x7aa

00000b10 <AvrXTimerHandler>:
 b10:	f8 94       	cli
 b12:	20 91 36 01 	lds	r18, 0x0136
 b16:	21 50       	subi	r18, 0x01	; 1
 b18:	20 93 36 01 	sts	0x0136, r18
 b1c:	78 94       	sei
 b1e:	08 f0       	brcs	.+2      	; 0xb22
 b20:	08 95       	ret

00000b22 <ati00>:
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	d0 91 35 01 	lds	r29, 0x0135
 b2e:	c0 91 34 01 	lds	r28, 0x0134
 b32:	20 96       	adiw	r28, 0x00	; 0
 b34:	21 f1       	breq	.+72     	; 0xb7e
 b36:	fd 81       	ldd	r31, Y+5	; 0x05
 b38:	ec 81       	ldd	r30, Y+4	; 0x04
 b3a:	31 97       	sbiw	r30, 0x01	; 1
 b3c:	fd 83       	std	Y+5, r31	; 0x05
 b3e:	ec 83       	std	Y+4, r30	; 0x04

00000b40 <ati01>:
 b40:	ef 2b       	or	r30, r31
 b42:	e9 f4       	brne	.+58     	; 0xb7e
 b44:	a8 81       	ld	r26, Y
 b46:	b9 81       	ldd	r27, Y+1	; 0x01
 b48:	b0 93 35 01 	sts	0x0135, r27
 b4c:	a0 93 34 01 	sts	0x0134, r26
 b50:	f9 83       	std	Y+1, r31	; 0x01
 b52:	e8 83       	st	Y, r30
 b54:	8a 81       	ldd	r24, Y+2	; 0x02
 b56:	9b 81       	ldd	r25, Y+3	; 0x03
 b58:	82 50       	subi	r24, 0x02	; 2
 b5a:	90 40       	sbci	r25, 0x00	; 0
 b5c:	31 f4       	brne	.+12     	; 0xb6a
 b5e:	8e 81       	ldd	r24, Y+6	; 0x06
 b60:	9f 81       	ldd	r25, Y+7	; 0x07
 b62:	7d 2f       	mov	r23, r29
 b64:	6c 2f       	mov	r22, r28
 b66:	94 df       	rcall	.-216    	; 0xa90
 b68:	03 c0       	rjmp	.+6      	; 0xb70

00000b6a <ati04>:
 b6a:	8c 2f       	mov	r24, r28
 b6c:	9d 2f       	mov	r25, r29
 b6e:	dd de       	rcall	.-582    	; 0x92a

00000b70 <ati03>:
 b70:	10 96       	adiw	r26, 0x00	; 0
 b72:	29 f0       	breq	.+10     	; 0xb7e
 b74:	ca 2f       	mov	r28, r26
 b76:	db 2f       	mov	r29, r27
 b78:	fd 81       	ldd	r31, Y+5	; 0x05
 b7a:	ec 81       	ldd	r30, Y+4	; 0x04
 b7c:	e1 cf       	rjmp	.-62     	; 0xb40

00000b7e <ati02>:
 b7e:	bf 91       	pop	r27
 b80:	af 91       	pop	r26
 b82:	df 91       	pop	r29
 b84:	cf 91       	pop	r28

00000b86 <TimerHandler>:
 b86:	f8 94       	cli
 b88:	20 91 36 01 	lds	r18, 0x0136
 b8c:	23 95       	inc	r18
 b8e:	20 93 36 01 	sts	0x0136, r18
 b92:	78 94       	sei
 b94:	31 f6       	brne	.-116    	; 0xb22
 b96:	08 95       	ret

00000b98 <AvrXStartTimerMessage>:
 b98:	60 50       	subi	r22, 0x00	; 0
 b9a:	70 40       	sbci	r23, 0x00	; 0
 b9c:	29 f4       	brne	.+10     	; 0xba8
 b9e:	68 2f       	mov	r22, r24
 ba0:	79 2f       	mov	r23, r25
 ba2:	84 2f       	mov	r24, r20
 ba4:	95 2f       	mov	r25, r21
 ba6:	6f cf       	rjmp	.-290    	; 0xa86

00000ba8 <axstm0>:
 ba8:	e8 2f       	mov	r30, r24
 baa:	f9 2f       	mov	r31, r25
 bac:	57 83       	std	Z+7, r21	; 0x07
 bae:	46 83       	std	Z+6, r20	; 0x06
 bb0:	42 e0       	ldi	r20, 0x02	; 2
 bb2:	50 e0       	ldi	r21, 0x00	; 0
 bb4:	53 83       	std	Z+3, r21	; 0x03
 bb6:	42 83       	std	Z+2, r20	; 0x02
 bb8:	83 cf       	rjmp	.-250    	; 0xac0

00000bba <AvrXCancelTimer>:
 bba:	f8 94       	cli
 bbc:	a8 dd       	rcall	.-1200   	; 0x70e
 bbe:	78 94       	sei
 bc0:	b4 de       	rcall	.-664    	; 0x92a
 bc2:	6a 8d       	ldd	r22, Y+26	; 0x1a
 bc4:	7b 8d       	ldd	r23, Y+27	; 0x1b
 bc6:	e4 e3       	ldi	r30, 0x34	; 52
 bc8:	f1 e0       	ldi	r31, 0x01	; 1
 bca:	f8 94       	cli
 bcc:	d9 de       	rcall	.-590    	; 0x980
 bce:	20 50       	subi	r18, 0x00	; 0
 bd0:	30 40       	sbci	r19, 0x00	; 0
 bd2:	59 f0       	breq	.+22     	; 0xbea
 bd4:	c6 2f       	mov	r28, r22
 bd6:	d7 2f       	mov	r29, r23
 bd8:	6c 81       	ldd	r22, Y+4	; 0x04
 bda:	7d 81       	ldd	r23, Y+5	; 0x05
 bdc:	95 81       	ldd	r25, Z+5	; 0x05
 bde:	84 81       	ldd	r24, Z+4	; 0x04
 be0:	86 0f       	add	r24, r22
 be2:	97 1f       	adc	r25, r23
 be4:	84 83       	std	Z+4, r24	; 0x04
 be6:	95 83       	std	Z+5, r25	; 0x05
 be8:	e0 cd       	rjmp	.-1088   	; 0x7aa

00000bea <act00>:
 bea:	2a 8f       	std	Y+26, r18	; 0x1a
 bec:	3b 8f       	std	Y+27, r19	; 0x1b
 bee:	dd cd       	rjmp	.-1094   	; 0x7aa

00000bf0 <AvrXCancelTimerMessage>:
 bf0:	f8 94       	cli
 bf2:	8d dd       	rcall	.-1254   	; 0x70e
 bf4:	78 94       	sei
 bf6:	68 2f       	mov	r22, r24
 bf8:	79 2f       	mov	r23, r25
 bfa:	e4 e3       	ldi	r30, 0x34	; 52
 bfc:	f1 e0       	ldi	r31, 0x01	; 1
 bfe:	f8 94       	cli
 c00:	bf de       	rcall	.-642    	; 0x980
 c02:	20 50       	subi	r18, 0x00	; 0
 c04:	30 40       	sbci	r19, 0x00	; 0
 c06:	59 f0       	breq	.+22     	; 0xc1e
 c08:	c6 2f       	mov	r28, r22
 c0a:	d7 2f       	mov	r29, r23
 c0c:	6c 81       	ldd	r22, Y+4	; 0x04
 c0e:	7d 81       	ldd	r23, Y+5	; 0x05
 c10:	95 81       	ldd	r25, Z+5	; 0x05
 c12:	84 81       	ldd	r24, Z+4	; 0x04
 c14:	86 0f       	add	r24, r22
 c16:	97 1f       	adc	r25, r23
 c18:	84 83       	std	Z+4, r24	; 0x04
 c1a:	95 83       	std	Z+5, r25	; 0x05
 c1c:	c6 cd       	rjmp	.-1140   	; 0x7aa

00000c1e <actm00>:
 c1e:	e8 8d       	ldd	r30, Y+24	; 0x18
 c20:	f9 8d       	ldd	r31, Y+25	; 0x19
 c22:	ae de       	rcall	.-676    	; 0x980
 c24:	20 50       	subi	r18, 0x00	; 0
 c26:	30 40       	sbci	r19, 0x00	; 0
 c28:	11 f4       	brne	.+4      	; 0xc2e
 c2a:	aa 8f       	std	Y+26, r26	; 0x1a
 c2c:	bb 8f       	std	Y+27, r27	; 0x1b

00000c2e <actm01>:
 c2e:	bd cd       	rjmp	.-1158   	; 0x7aa

00000c30 <AvrXReadEEProm>:
 c30:	68 2f       	mov	r22, r24
 c32:	79 2f       	mov	r23, r25
 c34:	91 e0       	ldi	r25, 0x01	; 1
 c36:	88 e3       	ldi	r24, 0x38	; 56
 c38:	56 de       	rcall	.-852    	; 0x8e6

00000c3a <are01>:
 c3a:	e1 99       	sbic	0x1c, 1	; 28
 c3c:	fe cf       	rjmp	.-4      	; 0xc3a
 c3e:	6e bb       	out	0x1e, r22	; 30
 c40:	7f bb       	out	0x1f, r23	; 31
 c42:	e0 9a       	sbi	0x1c, 0	; 28
 c44:	0d b2       	in	r0, 0x1d	; 29
 c46:	0f 92       	push	r0
 c48:	65 de       	rcall	.-822    	; 0x914
 c4a:	8f 91       	pop	r24
 c4c:	08 95       	ret

00000c4e <AvrXReadEEPromWord>:
 c4e:	68 2f       	mov	r22, r24
 c50:	79 2f       	mov	r23, r25
 c52:	91 e0       	ldi	r25, 0x01	; 1
 c54:	88 e3       	ldi	r24, 0x38	; 56
 c56:	47 de       	rcall	.-882    	; 0x8e6

00000c58 <arew01>:
 c58:	e1 99       	sbic	0x1c, 1	; 28
 c5a:	fe cf       	rjmp	.-4      	; 0xc58
 c5c:	6e bb       	out	0x1e, r22	; 30
 c5e:	7f bb       	out	0x1f, r23	; 31
 c60:	e0 9a       	sbi	0x1c, 0	; 28
 c62:	0d b2       	in	r0, 0x1d	; 29
 c64:	0f 92       	push	r0
 c66:	6f 5f       	subi	r22, 0xFF	; 255
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	6e bb       	out	0x1e, r22	; 30
 c6c:	7f bb       	out	0x1f, r23	; 31
 c6e:	e0 9a       	sbi	0x1c, 0	; 28
 c70:	0d b2       	in	r0, 0x1d	; 29
 c72:	0f 92       	push	r0
 c74:	4f de       	rcall	.-866    	; 0x914
 c76:	9f 91       	pop	r25
 c78:	8f 91       	pop	r24
 c7a:	08 95       	ret

00000c7c <AvrXWriteEEProm>:
 c7c:	46 2f       	mov	r20, r22
 c7e:	68 2f       	mov	r22, r24
 c80:	79 2f       	mov	r23, r25
 c82:	91 e0       	ldi	r25, 0x01	; 1
 c84:	88 e3       	ldi	r24, 0x38	; 56
 c86:	2f de       	rcall	.-930    	; 0x8e6

00000c88 <awe00>:
 c88:	e1 99       	sbic	0x1c, 1	; 28
 c8a:	fe cf       	rjmp	.-4      	; 0xc88
 c8c:	6e bb       	out	0x1e, r22	; 30
 c8e:	7f bb       	out	0x1f, r23	; 31
 c90:	4d bb       	out	0x1d, r20	; 29
 c92:	e2 9a       	sbi	0x1c, 2	; 28
 c94:	e1 9a       	sbi	0x1c, 1	; 28
 c96:	3e ce       	rjmp	.-900    	; 0x914

00000c98 <AvrXIntResetObjectSemaphore>:
 c98:	e8 2f       	mov	r30, r24
 c9a:	f9 2f       	mov	r31, r25
 c9c:	32 96       	adiw	r30, 0x02	; 2
 c9e:	02 c0       	rjmp	.+4      	; 0xca4

00000ca0 <AvrXIntResetSemaphore>:
 ca0:	f9 2f       	mov	r31, r25
 ca2:	e8 2f       	mov	r30, r24

00000ca4 <ars00>:
 ca4:	f8 94       	cli
 ca6:	40 81       	ld	r20, Z
 ca8:	51 81       	ldd	r21, Z+1	; 0x01
 caa:	41 50       	subi	r20, 0x01	; 1
 cac:	50 40       	sbci	r21, 0x00	; 0
 cae:	11 f0       	breq	.+4      	; 0xcb4
 cb0:	4f 5f       	subi	r20, 0xFF	; 255
 cb2:	5f 4f       	sbci	r21, 0xFF	; 255

00000cb4 <ars01>:
 cb4:	51 83       	std	Z+1, r21	; 0x01
 cb6:	40 83       	st	Z, r20
 cb8:	18 95       	reti

00000cba <_exit>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba
