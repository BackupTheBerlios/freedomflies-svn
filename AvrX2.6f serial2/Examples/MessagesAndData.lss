
MessagesAndData.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000bfe  00000c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  00800060  00800060  00000c92  2**2
                  ALLOC
  3 .noinit       00000000  0080012a  0080012a  00000c92  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000c92  2**0
                  CONTENTS
  5 .stab         00004068  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000650  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a
   4:	0c 94 50 00 	jmp	0xa0
   8:	0c 94 50 00 	jmp	0xa0
   c:	0c 94 50 00 	jmp	0xa0
  10:	0c 94 50 00 	jmp	0xa0
  14:	0c 94 50 00 	jmp	0xa0
  18:	0c 94 50 00 	jmp	0xa0
  1c:	0c 94 50 00 	jmp	0xa0
  20:	0c 94 50 00 	jmp	0xa0
  24:	0c 94 50 00 	jmp	0xa0
  28:	0c 94 50 00 	jmp	0xa0
  2c:	0c 94 52 00 	jmp	0xa4
  30:	0c 94 50 00 	jmp	0xa0
  34:	0c 94 ee 00 	jmp	0x1dc
  38:	0c 94 e8 00 	jmp	0x1d0
  3c:	0c 94 50 00 	jmp	0xa0
  40:	0c 94 50 00 	jmp	0xa0
  44:	0c 94 50 00 	jmp	0xa0
  48:	0c 94 50 00 	jmp	0xa0
  4c:	0c 94 50 00 	jmp	0xa0
  50:	0c 94 50 00 	jmp	0xa0

00000054 <__ctors_end>:
  54:	de 00       	.word	0x00de	; ????
  56:	65 00       	.word	0x0065	; ????
  58:	9c 00       	.word	0x009c	; ????
  5a:	03 11       	cpse	r16, r3

0000005b <task1Tcb>:
  5b:	11 01 5a 00 df 00 03                                ..Z....

00000062 <MonitorTcb>:
  62:	9b 00 e4 01 ac 00 00 00                             ........

0000006a <__init>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ee ef       	ldi	r30, 0xFE	; 254
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 32       	cpi	r26, 0x2A	; 42
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94
  9c:	0c 94 8a 00 	jmp	0x114

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0x0

000000a4 <__vector_11>:
  a4:	0e 94 5c 03 	call	0x6b8
  a8:	80 ee       	ldi	r24, 0xE0	; 224
  aa:	82 bf       	out	0x32, r24	; 50
  ac:	0e 94 5b 05 	call	0xab6
  b0:	0e 94 a8 03 	call	0x750

000000b4 <task1>:
  b4:	82 ea       	ldi	r24, 0xA2	; 162
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 1f 05 	call	0xa3e
  bc:	fc 01       	movw	r30, r24
  be:	84 81       	ldd	r24, Z+4	; 0x04
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	cf 01       	movw	r24, r30
  c4:	0e 94 5d 04 	call	0x8ba
  c8:	f5 cf       	rjmp	.-22     	; 0xb4

000000ca <task2>:
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	6a e0       	ldi	r22, 0x0A	; 10
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	86 ea       	ldi	r24, 0xA6	; 166
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 2d 05 	call	0xa5a
  da:	99 b3       	in	r25, 0x19	; 25
  dc:	80 91 64 00 	lds	r24, 0x0064
  e0:	89 17       	cp	r24, r25
  e2:	a9 f3       	breq	.-22     	; 0xce
  e4:	90 93 64 00 	sts	0x0064, r25
  e8:	60 e6       	ldi	r22, 0x60	; 96
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	82 ea       	ldi	r24, 0xA2	; 162
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 16 05 	call	0xa2c
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 46 04 	call	0x88c
  fc:	6a e0       	ldi	r22, 0x0A	; 10
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	86 ea       	ldi	r24, 0xA6	; 166
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 2d 05 	call	0xa5a
 108:	99 b3       	in	r25, 0x19	; 25
 10a:	80 91 64 00 	lds	r24, 0x0064
 10e:	89 17       	cp	r24, r25
 110:	49 f7       	brne	.-46     	; 0xe4
 112:	dd cf       	rjmp	.-70     	; 0xce

00000114 <main>:
 114:	cf e5       	ldi	r28, 0x5F	; 95
 116:	d8 e0       	ldi	r29, 0x08	; 8
 118:	de bf       	out	0x3e, r29	; 62
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 e1 03 	call	0x7c2
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	85 bf       	out	0x35, r24	; 53
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	82 bf       	out	0x32, r24	; 50
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	83 bf       	out	0x33, r24	; 51
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	89 bf       	out	0x39, r24	; 57
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	87 bb       	out	0x17, r24	; 23
 138:	88 bb       	out	0x18, r24	; 24
 13a:	8b e5       	ldi	r24, 0x5B	; 91
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 ed 03 	call	0x7da
 142:	84 e5       	ldi	r24, 0x54	; 84
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 ed 03 	call	0x7da
 14a:	82 e6       	ldi	r24, 0x62	; 98
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 ed 03 	call	0x7da
 152:	89 e1       	ldi	r24, 0x19	; 25
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 e1 00 	call	0x1c2
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 5f 04 	call	0x8be
 162:	0e 94 a8 03 	call	0x750
 166:	ff cf       	rjmp	.-2      	; 0x166

00000168 <PushChar>:
; by the next routine
;-
        _FUNCTION(PushChar)
PushChar:
        push    Xl
 168:	af 93       	push	r26
        lds     Xl, SioFlags
 16a:	a0 91 14 01 	lds	r26, 0x0114
        sbr     Xl, 1<<CharPushed
 16e:	a0 68       	ori	r26, 0x80	; 128
        sts     SioFlags, Xl
 170:	a0 93 14 01 	sts	0x0114, r26
        pop     Xl
 174:	af 91       	pop	r26
        ret
 176:	08 95       	ret

00000178 <GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; GetChar
;
; Need to make this draw from a buffer so that multiple
; chars can be pushed... and so different input streams
; can be attached to the buffer.
;-
        _FUNCTION(GetChar)
#ifdef  __IAR_SYSTEMS_ASM__
        PUBLIC  ?C_GETCHAR
?C_GETCHAR:     ; Need this label for simulator I/O
#endif
GetChar:
        lds     tmp0, SioFlags
 178:	20 91 14 01 	lds	r18, 0x0114
        sbrs    tmp0, CharPushed
 17c:	27 ff       	sbrs	r18, 7
        rjmp    gc00
 17e:	05 c0       	rjmp	.+10     	; 0x18a
        cbr     tmp0, 1<<CharPushed
 180:	2f 77       	andi	r18, 0x7F	; 127
        rjmp    gc01
 182:	06 c0       	rjmp	.+12     	; 0x190
        sts     SioFlags, tmp0
 184:	20 93 14 01 	sts	0x0114, r18
        rjmp    gc01
 188:	03 c0       	rjmp	.+6      	; 0x190

0000018a <gc00>:
gc00:
        ldi     p1h, hi8(RxC_Flag)
 18a:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 18c:	86 e1       	ldi	r24, 0x16	; 22
        rcall   AvrXWaitSemaphore       ; Wait for a charactor, or flag from System
 18e:	80 d3       	rcall	.+1792   	; 0x890

00000190 <gc01>:
gc01:
        lds     r1l, _RxByte
 190:	80 91 18 01 	lds	r24, 0x0118
        ret
 194:	08 95       	ret

00000196 <_GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; _GetChar
;
; Special version that echos
;
; RETURNS:      RxByte (Register)
;-
        _FUNCTION(_GetChar)

_GetChar:
        rcall   GetChar
 196:	f0 df       	rcall	.-32     	; 0x178
        rjmp    PutChar
 198:	2b c0       	rjmp	.+86     	; 0x1f0

0000019a <PutCR>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutCR
;
; Put a CR to the output stream
;-
        _FUNCTION(PutCR)
PutCR:
        ldi     p1l, 0x0D
 19a:	8d e0       	ldi	r24, 0x0D	; 13
        rjmp    PutChar
 19c:	29 c0       	rjmp	.+82     	; 0x1f0

0000019e <PutSpace>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutSpace
;
; Put a space to the output stream
;-
        _FUNCTION(PutSpace)

PutSpace:
        ldi     p1l, ' '
 19e:	80 e2       	ldi	r24, 0x20	; 32
        rjmp    PutChar
 1a0:	27 c0       	rjmp	.+78     	; 0x1f0

000001a2 <_PrintString>:
        _ENDFUNC
;+
;------------------------------------------
;
; const char * PutString(const char *)
;
; passed:
;       near pointer to string in FLASH memory
; Returns:
;       pointer to next char after NULL
;-
        _FUNCTION(_PrintString)

_PrintString:
        mov     Zl, p1l
 1a2:	e8 2f       	mov	r30, r24
        mov     Zh, p1h
 1a4:	f9 2f       	mov	r31, r25

000001a6 <_foo>:
_foo:
        lpm
 1a6:	c8 95       	lpm
        tst     R0
 1a8:	00 20       	and	r0, r0
        breq    _ps00
 1aa:	41 f0       	breq	.+16     	; 0x1bc
        mov     p1l, R0
 1ac:	80 2d       	mov	r24, r0
        push    Zl
 1ae:	ef 93       	push	r30
        push    Zh
 1b0:	ff 93       	push	r31
        rcall   PutChar
 1b2:	1e d0       	rcall	.+60     	; 0x1f0
        pop     Zh
 1b4:	ff 91       	pop	r31
        pop     Zl
 1b6:	ef 91       	pop	r30
        adiw    Zl, 1
 1b8:	31 96       	adiw	r30, 0x01	; 1
        rjmp    _foo
 1ba:	f5 cf       	rjmp	.-22     	; 0x1a6

000001bc <_ps00>:
_ps00:
        mov     r1l, Zl
 1bc:	8e 2f       	mov	r24, r30
        mov     r1h, Zh
 1be:	9f 2f       	mov	r25, r31
        ret
 1c0:	08 95       	ret

000001c2 <InitSerialIO>:
        _ENDFUNC
;+
;-------------------------------------------
; void InitSerialIO(unsigned)
;
; PASSED:       R25:24 = UBBR
;		p1h:p1l = UBBR
;
; History: parameter used to be passed in R25 l.b. 1/31/01
;	   Changed to unsigned for mega chips. l.b. 5/30/02
;

        _FUNCTION(InitSerialIO)
InitSerialIO:
        ;out     _SFR_IO_ADDR(UBRR), p1l
         out     UBRRL, p1l
 1c2:	89 bd       	out	0x29, r24	; 41
#if defined(UBRRH)
	sts	UBRRH, p1h	// THIS appears to be a no-op
 1c4:	90 93 40 00 	sts	0x0040, r25
#endif
#if defined(UCSR0C)
	ldi	tmp0, UCRC_INIT	// SET word length.
	sts	UCSR0C, tmp0	// Extended register in mega128
#endif
        ldi     tmp0, UCR_INIT
 1c8:	28 e9       	ldi	r18, 0x98	; 152
        ;out     _SFR_IO_ADDR(UCR), tmp0
        out     _SFR_IO_ADDR(UCR), tmp0
 1ca:	2a b9       	out	0x0a, r18	; 10
        out     (UCR), tmp0
 1cc:	2a bd       	out	0x2a, r18	; 42
        ret
 1ce:	08 95       	ret

000001d0 <__vector_14>:
        _ENDFUNC
;
;-----------------------------------------------
; UDRE_Interrupt
;
; Disables the interrupt (UDR is empty) signal waiting
; process to stuff the UDR
;
        _FUNCTION(SIG_UART_DATA)
SIG_UART_DATA:
        cbi     _SFR_IO_ADDR(UCR), UDRIE      ; Disable the interrupt
 1d0:	55 98       	cbi	0x0a, 5	; 10

        rcall   IntProlog
 1d2:	72 d2       	rcall	.+1252   	; 0x6b8

        ldi     p1l, lo8(TxIntFlag)
 1d4:	82 e1       	ldi	r24, 0x12	; 18
        ldi     p1h, hi8(TxIntFlag)
 1d6:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXIntSetSemaphore     ; Signal we are ready for more.
 1d8:	7f d3       	rcall	.+1790   	; 0x8d8

        rjmp    _Epilog
 1da:	bc c2       	rjmp	.+1400   	; 0x754

000001dc <__vector_13>:
        _ENDFUNC

;
;-----------------------------------------------
; RxC_Interrupt
;
; Reads the USART and flags UserTask, Char In semaphore
;
        _FUNCTION(SIG_UART_RECV)
SIG_UART_RECV:
        cbi     _SFR_IO_ADDR(UCR), RXCIE      ; disable interrupt
 1dc:	57 98       	cbi	0x0a, 7	; 10

        rcall   IntProlog      ; Switch to kernel stack
 1de:	6c d2       	rcall	.+1240   	; 0x6b8

        in      Xl, _SFR_IO_ADDR(UDR)
 1e0:	ac b1       	in	r26, 0x0c	; 12
        sts     _RxByte, Xl
 1e2:	a0 93 18 01 	sts	0x0118, r26

        ldi     p1h, hi8(RxC_Flag)
 1e6:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 1e8:	86 e1       	ldi	r24, 0x16	; 22
        rcall   AvrXIntSetSemaphore
 1ea:	76 d3       	rcall	.+1772   	; 0x8d8

        sbi     _SFR_IO_ADDR(UCR), RXCIE      ; Re-enable interrupts
 1ec:	57 9a       	sbi	0x0a, 7	; 10
        rjmp    _Epilog
 1ee:	b2 c2       	rjmp	.+1380   	; 0x754

000001f0 <PutChar>:
        _ENDFUNC
;+
;------------------------------------------
; PutChar
;
; Passed: p1l "TxByte"
;
; Stuffs "TxByte" into usart.  The usart is double buffered.
; when the data register is full we wait on the semaphore
; until the Usart interrupts indicating the register is ready.
;-
        _FUNCTION(PutChar)
#ifdef __IAR_SYSTEMS_ASM__
        _PUBLIC(?C_PUTCHAR)     ; Enable terminal I/O
?C_PUTCHAR:
#endif
PutChar:
        sbic    _SFR_IO_ADDR(USR), UDRE
 1f0:	5d 99       	sbic	0x0b, 5	; 11
        rjmp    pc00
 1f2:	06 c0       	rjmp	.+12     	; 0x200

        push    p1l
 1f4:	8f 93       	push	r24
        sbi     _SFR_IO_ADDR(UCR), UDRIE      ; Enable interrupts and
 1f6:	55 9a       	sbi	0x0a, 5	; 10
        ldi     p1l, lo8(TxIntFlag)
 1f8:	82 e1       	ldi	r24, 0x12	; 18
        ldi     p1h, hi8(TxIntFlag)
 1fa:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXWaitSemaphore; Wait until data register is ready
 1fc:	49 d3       	rcall	.+1682   	; 0x890
        pop     p1l
 1fe:	8f 91       	pop	r24

00000200 <pc00>:
pc00:
        out     _SFR_IO_ADDR(UDR), p1l
 200:	8c b9       	out	0x0c, r24	; 12
        ret
 202:	08 95       	ret

00000204 <_GetHex>:
        _ENDFUNC

;-----------------------------------------
; _GetHex
;
; PASSED:       p1l = Maximum number of digits
; RETURNS:      r1 = val, Tbit, p2l = Number of digits entered
; USES:         R24, R25
; STACK:        4
;
        _FUNCTION(_GetHex)
_GetHex:
        push    R10
 204:	af 92       	push	r10
        push    R11
 206:	bf 92       	push	r11
        push    R12
 208:	cf 92       	push	r12
        push    R13
 20a:	df 92       	push	r13

        mov     R13, p1l
 20c:	d8 2e       	mov	r13, r24
        clr     R10
 20e:	aa 24       	eor	r10, r10
        clr     R11
 210:	bb 24       	eor	r11, r11
        clr     R12
 212:	cc 24       	eor	r12, r12

00000214 <gh_00>:
gh_00:
        rcall   _GetChar
 214:	c0 df       	rcall	.-128    	; 0x196
        rcall   IsHex
 216:	21 d0       	rcall	.+66     	; 0x25a
        brtc    gh_xx
 218:	96 f4       	brtc	.+36     	; 0x23e
        cpi     r1l, '9'+1
 21a:	8a 33       	cpi	r24, 0x3A	; 58
        brge    gh_01
 21c:	14 f4       	brge	.+4      	; 0x222
        subi    r1l, '0'
 21e:	80 53       	subi	r24, 0x30	; 48
        rjmp    gh_02
 220:	02 c0       	rjmp	.+4      	; 0x226

00000222 <gh_01>:
gh_01:
        cbr     r1l, 0x20
 222:	8f 7d       	andi	r24, 0xDF	; 223
        subi    r1l, 'A'-10
 224:	87 53       	subi	r24, 0x37	; 55

00000226 <gh_02>:
gh_02:
        lsl     R10
 226:	aa 0c       	add	r10, r10
        rol     R11
 228:	bb 1c       	adc	r11, r11
        lsl     R10
 22a:	aa 0c       	add	r10, r10
        rol     R11
 22c:	bb 1c       	adc	r11, r11
        lsl     R10
 22e:	aa 0c       	add	r10, r10
        rol     R11
 230:	bb 1c       	adc	r11, r11
        lsl     R10
 232:	aa 0c       	add	r10, r10
        rol     R11
 234:	bb 1c       	adc	r11, r11
        add     R10, r1l
 236:	a8 0e       	add	r10, r24
        inc     R12
 238:	c3 94       	inc	r12
        dec     R13
 23a:	da 94       	dec	r13
        brne    gh_00
 23c:	59 f7       	brne	.-42     	; 0x214

0000023e <gh_xx>:
gh_xx:
        mov     p2l, R12
 23e:	6c 2d       	mov	r22, r12
        mov     r1l, R10
 240:	8a 2d       	mov	r24, r10
        mov     r1h, R11
 242:	9b 2d       	mov	r25, r11

        pop     R13
 244:	df 90       	pop	r13
        pop     R12
 246:	cf 90       	pop	r12
        pop     R11
 248:	bf 90       	pop	r11
        pop     R10
 24a:	af 90       	pop	r10
        ret
 24c:	08 95       	ret

0000024e <GetHexWord>:
        _ENDFUNC


;-----------------------------------------
; GetHexWord
;
        _FUNCTION(GetHexWord)

GetHexWord:
        ldi     p1l, 4
 24e:	84 e0       	ldi	r24, 0x04	; 4
        rjmp    _GetHex
 250:	d9 cf       	rjmp	.-78     	; 0x204

00000252 <GetHexByte>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexByte)

GetHexByte:
        ldi     p1l, 2
 252:	82 e0       	ldi	r24, 0x02	; 2
        rjmp    _GetHex
 254:	d7 cf       	rjmp	.-82     	; 0x204

00000256 <GetHexChar>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexChar)

GetHexChar:
        ldi     p1l, 1
 256:	81 e0       	ldi	r24, 0x01	; 1
        rjmp    _GetHex
 258:	d5 cf       	rjmp	.-86     	; 0x204

0000025a <IsHex>:
        _ENDFUNC
;-----------------------------------------
; IsHex
;
; Tests RxByte for ascii hex char
; Returns: T bit
;
        _FUNCTION(IsHex)

IsHex:
        push    p1l
 25a:	8f 93       	push	r24
        lds     p1l, _RxByte
 25c:	80 91 18 01 	lds	r24, 0x0118
        clt
 260:	e8 94       	clt
        cpi     p1l, '0'
 262:	80 33       	cpi	r24, 0x30	; 48
        brlt    ihno
 264:	5c f0       	brlt	.+22     	; 0x27c
        cpi     p1l, '9'+1
 266:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ihyes
 268:	44 f0       	brlt	.+16     	; 0x27a
        cpi     p1l, 'A'
 26a:	81 34       	cpi	r24, 0x41	; 65
        brlt    ihno
 26c:	3c f0       	brlt	.+14     	; 0x27c
        cpi     p1l, 'F'+1
 26e:	87 34       	cpi	r24, 0x47	; 71
        brlt    ihyes
 270:	24 f0       	brlt	.+8      	; 0x27a
        cpi     p1l, 'a'
 272:	81 36       	cpi	r24, 0x61	; 97
        brlt    ihno
 274:	1c f0       	brlt	.+6      	; 0x27c
        cpi     p1l, 'f'+1
 276:	87 36       	cpi	r24, 0x67	; 103
        brge    ihno
 278:	0c f4       	brge	.+2      	; 0x27c

0000027a <ihyes>:
ihyes:
        set
 27a:	68 94       	set

0000027c <ihno>:
ihno:
        pop     p1l
 27c:	8f 91       	pop	r24
        ret
 27e:	08 95       	ret

00000280 <IsWhite>:
        _ENDFUNC
;-----------------------------------------
; IsWhite
;
; Tests RxByte for space or CR
; Returns: T bit
;
        _FUNCTION(IsWhite)

IsWhite:
        push    p1l
 280:	8f 93       	push	r24
        lds     p1l, _RxByte
 282:	80 91 18 01 	lds	r24, 0x0118
        clt
 286:	e8 94       	clt
        cpi     p1l, ' '
 288:	80 32       	cpi	r24, 0x20	; 32
        breq    ihyes
 28a:	b9 f3       	breq	.-18     	; 0x27a
        cpi     p1l, 0x0D
 28c:	8d 30       	cpi	r24, 0x0D	; 13
        breq    ihyes
 28e:	a9 f3       	breq	.-22     	; 0x27a
        rjmp    ihno
 290:	f5 cf       	rjmp	.-22     	; 0x27c

00000292 <_PutHex>:
        _ENDFUNC
;-----------------------------------------
; void _PutHex(unsigned val, char digits)
;
; Passed:       p2 = Value, p1l = # digits
; RETURN:       Nothing
; USES:         R25, TxByte
; STACK:        2
;
        _FUNCTION(_PutHex)

_PutHex:
        ldi     tmp2, 4          ; Maximum number of digits.
 292:	44 e0       	ldi	r20, 0x04	; 4
        mov     tmp3, p2l
 294:	56 2f       	mov	r21, r22
        mov     p2l, p1l
 296:	68 2f       	mov	r22, r24
        mov     p2h, p1h
 298:	79 2f       	mov	r23, r25

0000029a <ph00>:
ph00:
        lsl     p2l
 29a:	66 0f       	add	r22, r22
        rol     p2h
 29c:	77 1f       	adc	r23, r23
        rol     p1l
 29e:	88 1f       	adc	r24, r24
        lsl     p2l
 2a0:	66 0f       	add	r22, r22
        rol     p2h
 2a2:	77 1f       	adc	r23, r23
        rol     p1l
 2a4:	88 1f       	adc	r24, r24
        lsl     p2l
 2a6:	66 0f       	add	r22, r22
        rol     p2h
 2a8:	77 1f       	adc	r23, r23
        rol     p1l
 2aa:	88 1f       	adc	r24, r24
        lsl     p2l
 2ac:	66 0f       	add	r22, r22
        rol     p2h
 2ae:	77 1f       	adc	r23, r23
        rol     p1l
 2b0:	88 1f       	adc	r24, r24

        cp      tmp3, tmp2
 2b2:	54 17       	cp	r21, r20
        brlt    ph02
 2b4:	34 f0       	brlt	.+12     	; 0x2c2

        cbr     p1l, 0xF0
 2b6:	8f 70       	andi	r24, 0x0F	; 15
        subi    p1l, lo8(-'0')          ; Addi 0
 2b8:	80 5d       	subi	r24, 0xD0	; 208
        cpi     p1l, lo8('9' + 1)       ; if > 9
 2ba:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ph01                    ; subi 9 and add A
 2bc:	0c f0       	brlt	.+2      	; 0x2c0
        subi    p1l, lo8('9' + 1 - 'A')
 2be:	89 5f       	subi	r24, 0xF9	; 249

000002c0 <ph01>:
ph01:
        rcall   PutChar
 2c0:	97 df       	rcall	.-210    	; 0x1f0

000002c2 <ph02>:
ph02:
        dec     tmp2
 2c2:	4a 95       	dec	r20
        brne    ph00
 2c4:	51 f7       	brne	.-44     	; 0x29a

        ret
 2c6:	08 95       	ret

000002c8 <PutHexWord>:
        _ENDFUNC
;-----------------------------------------
; Put out a hex word
;
; Passed: Y = word
;
        _FUNCTION(PutHexWord)

PutHexWord:
        ldi     p2l, 4
 2c8:	64 e0       	ldi	r22, 0x04	; 4
        rjmp    _PutHex
 2ca:	e3 cf       	rjmp	.-58     	; 0x292

000002cc <PutHexByte>:
        _ENDFUNC
;-----------------------------------------
; Put out a two ascii hex byte
; Yl = byte
;
        _FUNCTION(PutHexByte)

PutHexByte:
        ldi     p2l, 2
 2cc:	62 e0       	ldi	r22, 0x02	; 2
        rjmp    _PutHex
 2ce:	e1 cf       	rjmp	.-62     	; 0x292

000002d0 <Hello>:
 2d0:	0d 00       	.word	0x000d	; ????
 2d2:	41 76       	andi	r20, 0x61	; 97
 2d4:	72 58       	subi	r23, 0x82	; 130
 2d6:	20 4d       	sbci	r18, 0xD0	; 208
 2d8:	6f 6e       	ori	r22, 0xEF	; 239
 2da:	69 74       	andi	r22, 0x49	; 73
 2dc:	6f 72       	andi	r22, 0x2F	; 47
 2de:	20 56       	subi	r18, 0x60	; 96
 2e0:	32 00       	.word	0x0032	; ????
 2e2:	0d 00       	.word	0x000d	; ????
 2e4:	0d 00       	.word	0x000d	; ????
 2e6:	4d 6f       	ori	r20, 0xFD	; 253
 2e8:	64 69       	ori	r22, 0x94	; 148
 2ea:	66 79       	andi	r22, 0x96	; 150
 2ec:	20 3d       	cpi	r18, 0xD0	; 208
 2ee:	20 6d       	ori	r18, 0xD0	; 208
 2f0:	7b 73       	andi	r23, 0x3B	; 59
 2f2:	2c 65       	ori	r18, 0x5C	; 92
 2f4:	7d 5b       	subi	r23, 0xBD	; 189
 2f6:	77 5d       	subi	r23, 0xD7	; 215
 2f8:	5b 61       	ori	r21, 0x1B	; 27
 2fa:	61 61       	ori	r22, 0x11	; 17
 2fc:	61 5d       	subi	r22, 0xD1	; 209
 2fe:	00 0d       	add	r16, r0
 300:	00 44       	sbci	r16, 0x40	; 64
 302:	75 6d       	ori	r23, 0xD5	; 213
 304:	70 20       	and	r7, r0
 306:	20 20       	and	r2, r0
 308:	3d 20       	and	r3, r13
 30a:	64 7b       	andi	r22, 0xB4	; 180
 30c:	73 2c       	mov	r7, r3
 30e:	65 7d       	andi	r22, 0xD5	; 213
 310:	5b 77       	andi	r21, 0x7B	; 123
 312:	5d 5b       	subi	r21, 0xBD	; 189
 314:	61 61       	ori	r22, 0x11	; 17
 316:	61 61       	ori	r22, 0x11	; 17
 318:	5d 20       	and	r5, r13
 31a:	5b 78       	andi	r21, 0x8B	; 139
 31c:	78 5d       	subi	r23, 0xD8	; 216
 31e:	00 0d       	add	r16, r0
 320:	00 48       	sbci	r16, 0x80	; 128
 322:	61 6c       	ori	r22, 0xC1	; 193
 324:	74 20       	and	r7, r4
 326:	20 20       	and	r2, r0
 328:	3d 20       	and	r3, r13
 32a:	68 5b       	subi	r22, 0xB8	; 184
 32c:	6f 6f       	ori	r22, 0xFF	; 255
 32e:	6f 6f       	ori	r22, 0xFF	; 255
 330:	5d 00       	.word	0x005d	; ????
 332:	0d 00       	.word	0x000d	; ????
 334:	53 74       	andi	r21, 0x43	; 67
 336:	65 70       	andi	r22, 0x05	; 5
 338:	20 20       	and	r2, r0
 33a:	20 3d       	cpi	r18, 0xD0	; 208
 33c:	20 73       	andi	r18, 0x30	; 48
 33e:	5b 6f       	ori	r21, 0xFB	; 251
 340:	6f 6f       	ori	r22, 0xFF	; 255
 342:	6f 5d       	subi	r22, 0xDF	; 223
 344:	00 0d       	add	r16, r0
 346:	00 52       	subi	r16, 0x20	; 32
 348:	65 73       	andi	r22, 0x35	; 53
 34a:	75 6d       	ori	r23, 0xD5	; 213
 34c:	65 20       	and	r6, r5
 34e:	3d 20       	and	r3, r13
 350:	72 5b       	subi	r23, 0xB2	; 178
 352:	6f 6f       	ori	r22, 0xFF	; 255
 354:	6f 6f       	ori	r22, 0xFF	; 255
 356:	5d 00       	.word	0x005d	; ????
 358:	0d 00       	.word	0x000d	; ????
 35a:	43 6f       	ori	r20, 0xF3	; 243
 35c:	6e 74       	andi	r22, 0x4E	; 78
 35e:	65 78       	andi	r22, 0x85	; 133
 360:	74 3d       	cpi	r23, 0xD4	; 212
 362:	20 78       	andi	r18, 0x80	; 128
 364:	5b 6f       	ori	r21, 0xFB	; 251
 366:	6f 6f       	ori	r22, 0xFF	; 255
 368:	6f 5d       	subi	r22, 0xDF	; 223
 36a:	00 0d       	add	r16, r0
 36c:	00 53       	subi	r16, 0x30	; 48
 36e:	69 67       	ori	r22, 0x79	; 121
 370:	6e 61       	ori	r22, 0x1E	; 30
 372:	6c 20       	and	r6, r12
 374:	3d 20       	and	r3, r13
 376:	69 5b       	subi	r22, 0xB9	; 185
 378:	6f 6f       	ori	r22, 0xFF	; 255
 37a:	6f 6f       	ori	r22, 0xFF	; 255
 37c:	5d 00       	.word	0x005d	; ????
 37e:	0d 00       	.word	0x000d	; ????
 380:	43 61       	ori	r20, 0x13	; 19
 382:	6e 63       	ori	r22, 0x3E	; 62
 384:	65 6c       	ori	r22, 0xC5	; 197
 386:	20 3d       	cpi	r18, 0xD0	; 208
 388:	20 63       	ori	r18, 0x30	; 48
 38a:	5b 6f       	ori	r21, 0xFB	; 251
 38c:	6f 6f       	ori	r22, 0xFF	; 255
 38e:	6f 5d       	subi	r22, 0xDF	; 223
 390:	00 0d       	add	r16, r0
 392:	00 4b       	sbci	r16, 0xB0	; 176
 394:	69 6c       	ori	r22, 0xC9	; 201
 396:	6c 54       	subi	r22, 0x4C	; 76
 398:	73 6b       	ori	r23, 0xB3	; 179
 39a:	3d 20       	and	r3, r13
 39c:	6b 5b       	subi	r22, 0xBB	; 187
 39e:	6f 6f       	ori	r22, 0xFF	; 255
 3a0:	6f 6f       	ori	r22, 0xFF	; 255
 3a2:	5d 00       	.word	0x005d	; ????
 3a4:	0d 00       	.word	0x000d	; ????
 3a6:	49 6e       	ori	r20, 0xE9	; 233
 3a8:	69 74       	andi	r22, 0x49	; 73
 3aa:	61 73       	andi	r22, 0x31	; 49
 3ac:	6b 3d       	cpi	r22, 0xDB	; 219
 3ae:	20 70       	andi	r18, 0x00	; 0
 3b0:	5b 61       	ori	r21, 0x1B	; 27
 3b2:	61 61       	ori	r22, 0x11	; 17
 3b4:	61 5d       	subi	r22, 0xD1	; 209
 3b6:	00 0d       	add	r16, r0
 3b8:	00 51       	subi	r16, 0x10	; 16
 3ba:	75 69       	ori	r23, 0x95	; 149
 3bc:	74 20       	and	r7, r4
 3be:	20 20       	and	r2, r0
 3c0:	3d 20       	and	r3, r13
 3c2:	71 00       	.word	0x0071	; ????
 3c4:	0d 00       	.word	0x000d	; ????
	...

000003c8 <Monitor>:
 3c8:	88 e2       	ldi	r24, 0x28	; 40
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	78 d2       	rcall	.+1264   	; 0x8be
 3ce:	80 ed       	ldi	r24, 0xD0	; 208
 3d0:	92 e0       	ldi	r25, 0x02	; 2

000003d2 <Hello1>:
 3d2:	e7 de       	rcall	.-562    	; 0x1a2
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	e8 2f       	mov	r30, r24
 3da:	f9 2f       	mov	r31, r25
 3dc:	c8 95       	lpm
 3de:	00 20       	and	r0, r0
 3e0:	c1 f7       	brne	.-16     	; 0x3d2
 3e2:	20 e6       	ldi	r18, 0x60	; 96
 3e4:	42 2e       	mov	r4, r18
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	52 2e       	mov	r5, r18
 3ea:	88 24       	eor	r8, r8
 3ec:	99 24       	eor	r9, r9
 3ee:	bb 24       	eor	r11, r11
 3f0:	aa 24       	eor	r10, r10
 3f2:	66 24       	eor	r6, r6
 3f4:	77 24       	eor	r7, r7

000003f6 <DebugMonitor>:
 3f6:	d1 de       	rcall	.-606    	; 0x19a
 3f8:	8e e3       	ldi	r24, 0x3E	; 62
 3fa:	fa de       	rcall	.-524    	; 0x1f0
 3fc:	01 d0       	rcall	.+2      	; 0x400
 3fe:	fb cf       	rjmp	.-10     	; 0x3f6

00000400 <m_Parse>:
 400:	ca de       	rcall	.-620    	; 0x196
 402:	8d 36       	cpi	r24, 0x6D	; 109
 404:	c9 f0       	breq	.+50     	; 0x438
 406:	84 36       	cpi	r24, 0x64	; 100
 408:	d1 f0       	breq	.+52     	; 0x43e
 40a:	88 36       	cpi	r24, 0x68	; 104
 40c:	49 f1       	breq	.+82     	; 0x460
 40e:	83 37       	cpi	r24, 0x73	; 115
 410:	c9 f1       	breq	.+114    	; 0x484
 412:	8b 36       	cpi	r24, 0x6B	; 107
 414:	a1 f1       	breq	.+104    	; 0x47e
 416:	82 37       	cpi	r24, 0x72	; 114
 418:	31 f1       	breq	.+76     	; 0x466
 41a:	89 36       	cpi	r24, 0x69	; 105
 41c:	69 f1       	breq	.+90     	; 0x478
 41e:	83 36       	cpi	r24, 0x63	; 99
 420:	29 f1       	breq	.+74     	; 0x46c
 422:	88 37       	cpi	r24, 0x78	; 120
 424:	31 f1       	breq	.+76     	; 0x472
 426:	80 37       	cpi	r24, 0x70	; 112
 428:	c1 f0       	breq	.+48     	; 0x45a
 42a:	81 37       	cpi	r24, 0x71	; 113
 42c:	11 f0       	breq	.+4      	; 0x432

0000042e <m_err>:
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	df ce       	rjmp	.-578    	; 0x1f0

00000432 <m_quit>:
 432:	af 91       	pop	r26
 434:	af 91       	pop	r26
 436:	08 95       	ret

00000438 <m_ModifyMemory>:
 438:	50 d0       	rcall	.+160    	; 0x4da
 43a:	ce f7       	brtc	.-14     	; 0x42e
 43c:	9b c0       	rjmp	.+310    	; 0x574

0000043e <m_DumpMemory>:
 43e:	4d d0       	rcall	.+154    	; 0x4da
 440:	c8 2e       	mov	r12, r24
 442:	d9 2e       	mov	r13, r25
 444:	a6 f7       	brtc	.-24     	; 0x42e
 446:	20 91 18 01 	lds	r18, 0x0118
 44a:	2d 30       	cpi	r18, 0x0D	; 13
 44c:	11 f0       	breq	.+4      	; 0x452
 44e:	3c d0       	rcall	.+120    	; 0x4c8
 450:	76 f7       	brtc	.-36     	; 0x42e

00000452 <m1b>:
 452:	6c 2d       	mov	r22, r12
 454:	7d 2d       	mov	r23, r13
 456:	8a 2d       	mov	r24, r10
 458:	6d c0       	rjmp	.+218    	; 0x534

0000045a <m_InitTask>:
 45a:	f9 de       	rcall	.-526    	; 0x24e
 45c:	46 f7       	brtc	.-48     	; 0x42e
 45e:	bf c1       	rjmp	.+894    	; 0x7de

00000460 <m_HaltProcess>:
 460:	28 d0       	rcall	.+80     	; 0x4b2
 462:	2e f7       	brtc	.-54     	; 0x42e
 464:	cd c2       	rjmp	.+1434   	; 0xa00

00000466 <m_ResumeProcess>:
 466:	25 d0       	rcall	.+74     	; 0x4b2
 468:	16 f7       	brtc	.-60     	; 0x42e
 46a:	dc c1       	rjmp	.+952    	; 0x824

0000046c <m_CancelTimer>:
 46c:	22 d0       	rcall	.+68     	; 0x4b2
 46e:	fe f6       	brtc	.-66     	; 0x42e
 470:	66 c3       	rjmp	.+1740   	; 0xb3e

00000472 <m_PrintProcessContext>:
 472:	1f d0       	rcall	.+62     	; 0x4b2
 474:	e6 f6       	brtc	.-72     	; 0x42e
 476:	bc c0       	rjmp	.+376    	; 0x5f0

00000478 <m_SetSemaphore>:
 478:	1c d0       	rcall	.+56     	; 0x4b2
 47a:	ce f6       	brtc	.-78     	; 0x42e
 47c:	20 c2       	rjmp	.+1088   	; 0x8be

0000047e <m_Terminate>:
 47e:	19 d0       	rcall	.+50     	; 0x4b2
 480:	b6 f6       	brtc	.-84     	; 0x42e
 482:	a5 c2       	rjmp	.+1354   	; 0x9ce

00000484 <m_StepProcess>:
 484:	16 d0       	rcall	.+44     	; 0x4b2
 486:	9e f6       	brtc	.-90     	; 0x42e
 488:	87 d2       	rcall	.+1294   	; 0x998
 48a:	88 23       	and	r24, r24
 48c:	09 f4       	brne	.+2      	; 0x490
 48e:	08 95       	ret

00000490 <ms_NOTSUSPENDED>:
 490:	84 de       	rcall	.-760    	; 0x19a
 492:	88 2d       	mov	r24, r8
 494:	99 2d       	mov	r25, r9
 496:	18 df       	rcall	.-464    	; 0x2c8
 498:	8e e9       	ldi	r24, 0x9E	; 158
 49a:	94 e0       	ldi	r25, 0x04	; 4
 49c:	82 ce       	rjmp	.-764    	; 0x1a2

0000049e <NotSuspended>:
 49e:	20 2d       	mov	r18, r0
 4a0:	20 4e       	sbci	r18, 0xE0	; 224
 4a2:	6f 74       	andi	r22, 0x4F	; 79
 4a4:	20 53       	subi	r18, 0x30	; 48
 4a6:	75 73       	andi	r23, 0x35	; 53
 4a8:	70 65       	ori	r23, 0x50	; 80
 4aa:	6e 64       	ori	r22, 0x4E	; 78
 4ac:	65 64       	ori	r22, 0x45	; 69
 4ae:	21 0d       	add	r18, r1
	...

000004b2 <GetObjectID>:
 4b2:	cd de       	rcall	.-614    	; 0x24e
 4b4:	16 f0       	brts	.+4      	; 0x4ba
 4b6:	e4 de       	rcall	.-568    	; 0x280
 4b8:	36 f4       	brtc	.+12     	; 0x4c6

000004ba <goi00>:
 4ba:	66 23       	and	r22, r22
 4bc:	11 f4       	brne	.+4      	; 0x4c2
 4be:	88 2d       	mov	r24, r8
 4c0:	99 2d       	mov	r25, r9

000004c2 <goi01>:
 4c2:	88 2e       	mov	r8, r24
 4c4:	99 2e       	mov	r9, r25

000004c6 <goi02>:
 4c6:	08 95       	ret

000004c8 <GetDumpLength>:
 4c8:	c4 de       	rcall	.-632    	; 0x252
 4ca:	16 f0       	brts	.+4      	; 0x4d0
 4cc:	d9 de       	rcall	.-590    	; 0x280
 4ce:	26 f4       	brtc	.+8      	; 0x4d8

000004d0 <gdl00>:
 4d0:	66 23       	and	r22, r22
 4d2:	09 f4       	brne	.+2      	; 0x4d6
 4d4:	8a 2d       	mov	r24, r10

000004d6 <gdl01>:
 4d6:	a8 2e       	mov	r10, r24

000004d8 <gdl02>:
 4d8:	08 95       	ret

000004da <GetFlagsAndAddress>:
 4da:	e8 94       	clt
 4dc:	5c de       	rcall	.-840    	; 0x196
 4de:	2b 2d       	mov	r18, r11
 4e0:	83 37       	cpi	r24, 0x73	; 115
 4e2:	11 f4       	brne	.+4      	; 0x4e8
 4e4:	2d 7f       	andi	r18, 0xFD	; 253
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee

000004e8 <gbTRYEERAM>:
 4e8:	85 36       	cpi	r24, 0x65	; 101
 4ea:	e9 f4       	brne	.+58     	; 0x526
 4ec:	22 60       	ori	r18, 0x02	; 2

000004ee <gbCONTINUE>:
 4ee:	b2 2e       	mov	r11, r18
 4f0:	ae de       	rcall	.-676    	; 0x24e
 4f2:	2b 2d       	mov	r18, r11
 4f4:	1e f4       	brtc	.+6      	; 0x4fc
 4f6:	2e 7f       	andi	r18, 0xFE	; 254
 4f8:	b2 2e       	mov	r11, r18
 4fa:	0c c0       	rjmp	.+24     	; 0x514

000004fc <gbCHECKWORDFLAG>:
 4fc:	2e 7f       	andi	r18, 0xFE	; 254
 4fe:	b2 2e       	mov	r11, r18
 500:	30 91 18 01 	lds	r19, 0x0118
 504:	37 37       	cpi	r19, 0x77	; 119
 506:	21 f4       	brne	.+8      	; 0x510
 508:	21 60       	ori	r18, 0x01	; 1
 50a:	b2 2e       	mov	r11, r18
 50c:	a0 de       	rcall	.-704    	; 0x24e
 50e:	16 f0       	brts	.+4      	; 0x514

00000510 <gbCHECKFORWHITESPACE>:
 510:	b7 de       	rcall	.-658    	; 0x280
 512:	4e f4       	brtc	.+18     	; 0x526

00000514 <gbUPDATEADDRESS>:
 514:	66 23       	and	r22, r22
 516:	39 f0       	breq	.+14     	; 0x526
 518:	b1 fe       	sbrs	r11, 1
 51a:	03 c0       	rjmp	.+6      	; 0x522
 51c:	68 2e       	mov	r6, r24
 51e:	79 2e       	mov	r7, r25
 520:	02 c0       	rjmp	.+4      	; 0x526

00000522 <gbAddress>:
 522:	48 2e       	mov	r4, r24
 524:	59 2e       	mov	r5, r25

00000526 <gbDONE>:
 526:	84 2d       	mov	r24, r4
 528:	95 2d       	mov	r25, r5
 52a:	b1 fc       	sbrc	r11, 1
 52c:	86 2d       	mov	r24, r6
 52e:	b1 fc       	sbrc	r11, 1
 530:	97 2d       	mov	r25, r7
 532:	08 95       	ret

00000534 <_DumpMemory>:
 534:	b0 fe       	sbrs	r11, 0
 536:	03 c0       	rjmp	.+6      	; 0x53e
 538:	6e 7f       	andi	r22, 0xFE	; 254
 53a:	80 fd       	sbrc	r24, 0
 53c:	83 95       	inc	r24

0000053e <m10f>:
 53e:	c6 2e       	mov	r12, r22
 540:	d7 2e       	mov	r13, r23
 542:	18 2e       	mov	r1, r24

00000544 <m10c>:
 544:	2a de       	rcall	.-940    	; 0x19a
 546:	9d 2d       	mov	r25, r13
 548:	8c 2d       	mov	r24, r12
 54a:	be de       	rcall	.-644    	; 0x2c8

0000054c <m10d>:
 54c:	28 de       	rcall	.-944    	; 0x19e
 54e:	8b d0       	rcall	.+278    	; 0x666
 550:	b0 fc       	sbrc	r11, 0
 552:	04 c0       	rjmp	.+8      	; 0x55c
 554:	bb de       	rcall	.-650    	; 0x2cc
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	03 c0       	rjmp	.+6      	; 0x562

0000055c <m11>:
 55c:	b5 de       	rcall	.-662    	; 0x2c8
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	90 e0       	ldi	r25, 0x00	; 0

00000562 <m12>:
 562:	c8 0e       	add	r12, r24
 564:	d9 1e       	adc	r13, r25
 566:	18 1a       	sub	r1, r24
 568:	21 f0       	breq	.+8      	; 0x572

0000056a <m10e>:
 56a:	ec 2d       	mov	r30, r12
 56c:	ef 70       	andi	r30, 0x0F	; 15
 56e:	51 f3       	breq	.-44     	; 0x544
 570:	ed cf       	rjmp	.-38     	; 0x54c

00000572 <m10exit>:
 572:	08 95       	ret

00000574 <_ModifyMemory>:
 574:	c8 2e       	mov	r12, r24
 576:	d9 2e       	mov	r13, r25

00000578 <_ModifyMemory_>:
 578:	10 de       	rcall	.-992    	; 0x19a
 57a:	8c 2d       	mov	r24, r12
 57c:	9d 2d       	mov	r25, r13
 57e:	a4 de       	rcall	.-696    	; 0x2c8
 580:	0e de       	rcall	.-996    	; 0x19e

00000582 <_mmNEXT>:
 582:	71 d0       	rcall	.+226    	; 0x666
 584:	b0 fc       	sbrc	r11, 0
 586:	a0 de       	rcall	.-704    	; 0x2c8
 588:	b0 fe       	sbrs	r11, 0
 58a:	a0 de       	rcall	.-704    	; 0x2cc

0000058c <_mmGETDATA>:
 58c:	8d e2       	ldi	r24, 0x2D	; 45
 58e:	30 de       	rcall	.-928    	; 0x1f0
 590:	b0 fe       	sbrs	r11, 0
 592:	5f de       	rcall	.-834    	; 0x252
 594:	b0 fc       	sbrc	r11, 0
 596:	5b de       	rcall	.-842    	; 0x24e
 598:	66 f4       	brtc	.+24     	; 0x5b2

0000059a <_mmWRITE>:
 59a:	76 d0       	rcall	.+236    	; 0x688
 59c:	00 de       	rcall	.-1024   	; 0x19e

0000059e <_mmGOTONEXT>:
 59e:	e1 e0       	ldi	r30, 0x01	; 1
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	b0 fc       	sbrc	r11, 0
 5a4:	31 96       	adiw	r30, 0x01	; 1
 5a6:	ce 0e       	add	r12, r30
 5a8:	df 1e       	adc	r13, r31
 5aa:	ec 2d       	mov	r30, r12
 5ac:	ef 70       	andi	r30, 0x0F	; 15
 5ae:	21 f3       	breq	.-56     	; 0x578
 5b0:	e8 cf       	rjmp	.-48     	; 0x582

000005b2 <_mmNODATA>:
 5b2:	66 de       	rcall	.-820    	; 0x280
 5b4:	36 f4       	brtc	.+12     	; 0x5c2
 5b6:	66 23       	and	r22, r22
 5b8:	81 f7       	brne	.-32     	; 0x59a
 5ba:	20 91 18 01 	lds	r18, 0x0118
 5be:	2d 30       	cpi	r18, 0x0D	; 13
 5c0:	71 f7       	brne	.-36     	; 0x59e

000005c2 <_mmDONE>:
 5c2:	08 95       	ret

000005c4 <ctdt0>:
 5c4:	0d 50       	subi	r16, 0x0D	; 13
 5c6:	49 44       	sbci	r20, 0x49	; 73
 5c8:	20 46       	sbci	r18, 0x60	; 96
 5ca:	6c 67       	ori	r22, 0x7C	; 124
 5cc:	20 50       	subi	r18, 0x00	; 0
 5ce:	72 69       	ori	r23, 0x92	; 146
 5d0:	20 46       	sbci	r18, 0x60	; 96
 5d2:	72 61       	ori	r23, 0x12	; 18
 5d4:	6d 65       	ori	r22, 0x5D	; 93
 5d6:	20 53       	subi	r18, 0x30	; 48
 5d8:	52 0d       	add	r21, r2
	...

000005db <ctdt1>:
 5db:	52 30       	cpi	r21, 0x02	; 2
 5dd:	20 20       	and	r2, r0
	...

000005e0 <ctdt2>:
 5e0:	52 31       	cpi	r21, 0x12	; 18
 5e2:	36 20       	and	r3, r6
	...

000005e5 <ctdt3>:
 5e5:	0d 20       	and	r0, r13
 5e7:	20 20       	and	r2, r0
 5e9:	20 20       	and	r2, r0
 5eb:	50 43       	sbci	r21, 0x30	; 48
 5ed:	20 20       	and	r2, r0
	...

000005f0 <_PrintContext>:
 5f0:	95 e0       	ldi	r25, 0x05	; 5
 5f2:	84 ec       	ldi	r24, 0xC4	; 196
 5f4:	d6 dd       	rcall	.-1108   	; 0x1a2
 5f6:	88 2d       	mov	r24, r8
 5f8:	99 2d       	mov	r25, r9
 5fa:	66 de       	rcall	.-820    	; 0x2c8
 5fc:	d0 dd       	rcall	.-1120   	; 0x19e
 5fe:	e8 2d       	mov	r30, r8
 600:	f9 2d       	mov	r31, r9
 602:	82 81       	ldd	r24, Z+2	; 0x02
 604:	63 de       	rcall	.-826    	; 0x2cc
 606:	cb dd       	rcall	.-1130   	; 0x19e
 608:	e8 2d       	mov	r30, r8
 60a:	f9 2d       	mov	r31, r9
 60c:	83 81       	ldd	r24, Z+3	; 0x03
 60e:	5e de       	rcall	.-836    	; 0x2cc
 610:	c6 dd       	rcall	.-1140   	; 0x19e
 612:	c5 dd       	rcall	.-1142   	; 0x19e
 614:	e8 2d       	mov	r30, r8
 616:	f9 2d       	mov	r31, r9
 618:	c4 81       	ldd	r28, Z+4	; 0x04
 61a:	d5 81       	ldd	r29, Z+5	; 0x05
 61c:	8c 2f       	mov	r24, r28
 61e:	9d 2f       	mov	r25, r29
 620:	53 de       	rcall	.-858    	; 0x2c8
 622:	bd dd       	rcall	.-1158   	; 0x19e
 624:	bc dd       	rcall	.-1160   	; 0x19e
 626:	21 96       	adiw	r28, 0x01	; 1
 628:	89 91       	ld	r24, Y+
 62a:	50 de       	rcall	.-864    	; 0x2cc

0000062c <Loop>:
 62c:	0e d0       	rcall	.+28     	; 0x64a
 62e:	95 e0       	ldi	r25, 0x05	; 5
 630:	8b ed       	ldi	r24, 0xDB	; 219
 632:	10 d0       	rcall	.+32     	; 0x654
 634:	0a d0       	rcall	.+20     	; 0x64a
 636:	95 e0       	ldi	r25, 0x05	; 5
 638:	80 ee       	ldi	r24, 0xE0	; 224
 63a:	0c d0       	rcall	.+24     	; 0x654
 63c:	95 e0       	ldi	r25, 0x05	; 5
 63e:	85 ee       	ldi	r24, 0xE5	; 229
 640:	b0 dd       	rcall	.-1184   	; 0x1a2
 642:	99 91       	ld	r25, Y+
 644:	88 81       	ld	r24, Y
 646:	40 de       	rcall	.-896    	; 0x2c8
 648:	08 95       	ret

0000064a <Print16RegPre>:
 64a:	a7 dd       	rcall	.-1202   	; 0x19a
 64c:	8c 2f       	mov	r24, r28
 64e:	9d 2f       	mov	r25, r29
 650:	3b de       	rcall	.-906    	; 0x2c8
 652:	a5 cd       	rjmp	.-1206   	; 0x19e

00000654 <Print16Reg>:
 654:	a6 dd       	rcall	.-1204   	; 0x1a2
 656:	e0 e1       	ldi	r30, 0x10	; 16
 658:	1e 2e       	mov	r1, r30

0000065a <p16r0>:
 65a:	89 91       	ld	r24, Y+
 65c:	37 de       	rcall	.-914    	; 0x2cc
 65e:	9f dd       	rcall	.-1218   	; 0x19e
 660:	1a 94       	dec	r1
 662:	d9 f7       	brne	.-10     	; 0x65a
 664:	08 95       	ret

00000666 <GetByteWord>:
 666:	b1 fc       	sbrc	r11, 1
 668:	08 c0       	rjmp	.+16     	; 0x67a
 66a:	ec 2d       	mov	r30, r12
 66c:	fd 2d       	mov	r31, r13
 66e:	80 81       	ld	r24, Z
 670:	b0 fe       	sbrs	r11, 0
 672:	08 95       	ret
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	80 81       	ld	r24, Z
 678:	08 95       	ret

0000067a <gbwEEPROM>:
 67a:	9d 2d       	mov	r25, r13
 67c:	8c 2d       	mov	r24, r12
 67e:	b0 fe       	sbrs	r11, 0
 680:	79 d2       	rcall	.+1266   	; 0xb74
 682:	b0 fc       	sbrc	r11, 0
 684:	86 d2       	rcall	.+1292   	; 0xb92

00000686 <gwbEXIT>:
 686:	08 95       	ret

00000688 <PutByteWord>:
 688:	b1 fc       	sbrc	r11, 1
 68a:	08 c0       	rjmp	.+16     	; 0x69c
 68c:	ec 2d       	mov	r30, r12
 68e:	fd 2d       	mov	r31, r13
 690:	80 83       	st	Z, r24
 692:	b0 fe       	sbrs	r11, 0
 694:	08 95       	ret
 696:	91 83       	std	Z+1, r25	; 0x01
 698:	80 83       	st	Z, r24
 69a:	08 95       	ret

0000069c <pbwEEPROM>:
 69c:	e9 2e       	mov	r14, r25
 69e:	68 2f       	mov	r22, r24
 6a0:	9d 2d       	mov	r25, r13
 6a2:	8c 2d       	mov	r24, r12
 6a4:	8d d2       	rcall	.+1306   	; 0xbc0
 6a6:	b0 fe       	sbrs	r11, 0
 6a8:	06 c0       	rjmp	.+12     	; 0x6b6
 6aa:	8c 2d       	mov	r24, r12
 6ac:	9d 2d       	mov	r25, r13
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	6e 2d       	mov	r22, r14
 6b4:	85 d2       	rcall	.+1290   	; 0xbc0

000006b6 <pbwEXIT>:
 6b6:	08 95       	ret

000006b8 <IntProlog>:
 6b8:	df 93       	push	r29
 6ba:	cf 93       	push	r28
 6bc:	bf 93       	push	r27
 6be:	af 93       	push	r26
 6c0:	9f 93       	push	r25
 6c2:	d1 e0       	ldi	r29, 0x01	; 1
 6c4:	cc e1       	ldi	r28, 0x1C	; 28
 6c6:	9f b7       	in	r25, 0x3f	; 63
 6c8:	ae 81       	ldd	r26, Y+6	; 0x06
 6ca:	af 5f       	subi	r26, 0xFF	; 255
 6cc:	ae 83       	std	Y+6, r26	; 0x06
 6ce:	60 f0       	brcs	.+24     	; 0x6e8
 6d0:	aa 81       	ldd	r26, Y+2	; 0x02
 6d2:	bb 81       	ldd	r27, Y+3	; 0x03
 6d4:	ba 2b       	or	r27, r26
 6d6:	41 f4       	brne	.+16     	; 0x6e8
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	fe 81       	ldd	r31, Y+6	; 0x06
 6de:	ef 81       	ldd	r30, Y+7	; 0x07
 6e0:	29 96       	adiw	r28, 0x09	; 9
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	09 94       	ijmp

000006e8 <SaveContext>:
 6e8:	8f 93       	push	r24
 6ea:	7f 93       	push	r23
 6ec:	6f 93       	push	r22
 6ee:	5f 93       	push	r21
 6f0:	4f 93       	push	r20
 6f2:	3f 93       	push	r19
 6f4:	2f 93       	push	r18
 6f6:	1f 93       	push	r17
 6f8:	0f 93       	push	r16
 6fa:	ff 92       	push	r15
 6fc:	ef 92       	push	r14
 6fe:	df 92       	push	r13
 700:	cf 92       	push	r12
 702:	bf 92       	push	r11
 704:	af 92       	push	r10
 706:	9f 92       	push	r9
 708:	8f 92       	push	r8
 70a:	7f 92       	push	r7
 70c:	6f 92       	push	r6
 70e:	5f 92       	push	r5
 710:	4f 92       	push	r4
 712:	3f 92       	push	r3
 714:	2f 92       	push	r2
 716:	1f 92       	push	r1
 718:	0f 92       	push	r0
 71a:	9f 93       	push	r25
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	9b 8d       	ldd	r25, Y+27	; 0x1b
 722:	39 a1       	ldd	r19, Y+33	; 0x21
 724:	48 a1       	ldd	r20, Y+32	; 0x20
 726:	e8 a3       	std	Y+32, r30	; 0x20
 728:	f9 a3       	std	Y+33, r31	; 0x21
 72a:	70 f0       	brcs	.+28     	; 0x748
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	ec e1       	ldi	r30, 0x1C	; 28
 730:	d3 81       	ldd	r29, Z+3	; 0x03
 732:	c2 81       	ldd	r28, Z+2	; 0x02
 734:	be b7       	in	r27, 0x3e	; 62
 736:	ad b7       	in	r26, 0x3d	; 61
 738:	bd 83       	std	Y+5, r27	; 0x05
 73a:	ac 83       	std	Y+4, r26	; 0x04
 73c:	24 81       	ldd	r18, Z+4	; 0x04
 73e:	2d bf       	out	0x3d, r18	; 61
 740:	25 81       	ldd	r18, Z+5	; 0x05
 742:	2e bf       	out	0x3e, r18	; 62
 744:	ca 2f       	mov	r28, r26
 746:	db 2f       	mov	r29, r27

00000748 <AlreadyInKernel>:
 748:	11 24       	eor	r1, r1
 74a:	e3 2f       	mov	r30, r19
 74c:	f4 2f       	mov	r31, r20
 74e:	09 94       	ijmp

00000750 <Epilog>:
 750:	ef 91       	pop	r30
 752:	ef 91       	pop	r30

00000754 <_Epilog>:
 754:	ec e1       	ldi	r30, 0x1C	; 28
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	f8 94       	cli
 75a:	06 81       	ldd	r16, Z+6	; 0x06
 75c:	0a 95       	dec	r16
 75e:	06 83       	std	Z+6, r16	; 0x06
 760:	54 f4       	brge	.+20     	; 0x776
 762:	d1 81       	ldd	r29, Z+1	; 0x01
 764:	c0 81       	ld	r28, Z
 766:	d3 83       	std	Z+3, r29	; 0x03
 768:	c2 83       	std	Z+2, r28	; 0x02
 76a:	20 96       	adiw	r28, 0x00	; 0
 76c:	39 f1       	breq	.+78     	; 0x7bc
 76e:	bd 81       	ldd	r27, Y+5	; 0x05
 770:	ac 81       	ldd	r26, Y+4	; 0x04
 772:	ad bf       	out	0x3d, r26	; 61
 774:	be bf       	out	0x3e, r27	; 62

00000776 <SkipTaskSwap>:
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	2f 90       	pop	r2
 780:	3f 90       	pop	r3
 782:	4f 90       	pop	r4
 784:	5f 90       	pop	r5
 786:	6f 90       	pop	r6
 788:	7f 90       	pop	r7
 78a:	8f 90       	pop	r8
 78c:	9f 90       	pop	r9
 78e:	af 90       	pop	r10
 790:	bf 90       	pop	r11
 792:	cf 90       	pop	r12
 794:	df 90       	pop	r13
 796:	ef 90       	pop	r14
 798:	ff 90       	pop	r15
 79a:	0f 91       	pop	r16
 79c:	1f 91       	pop	r17
 79e:	2f 91       	pop	r18
 7a0:	3f 91       	pop	r19
 7a2:	4f 91       	pop	r20
 7a4:	5f 91       	pop	r21
 7a6:	6f 91       	pop	r22
 7a8:	7f 91       	pop	r23
 7aa:	8f 91       	pop	r24
 7ac:	9f 91       	pop	r25
 7ae:	af 91       	pop	r26
 7b0:	bf 91       	pop	r27
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	ef 91       	pop	r30
 7b8:	ff 91       	pop	r31
 7ba:	18 95       	reti

000007bc <_IdleTask>:
 7bc:	78 94       	sei
 7be:	88 95       	sleep

000007c0 <snooze>:
 7c0:	fd cf       	rjmp	.-6      	; 0x7bc

000007c2 <AvrXSetKernelStack>:
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	80 50       	subi	r24, 0x00	; 0
 7c8:	90 40       	sbci	r25, 0x00	; 0
 7ca:	11 f4       	brne	.+4      	; 0x7d0
 7cc:	8d b7       	in	r24, 0x3d	; 61
 7ce:	9e b7       	in	r25, 0x3e	; 62

000007d0 <sks1>:
 7d0:	80 93 20 01 	sts	0x0120, r24
 7d4:	90 93 21 01 	sts	0x0121, r25
 7d8:	09 94       	ijmp

000007da <AvrXRunTask>:
 7da:	01 d0       	rcall	.+2      	; 0x7de
 7dc:	23 c0       	rjmp	.+70     	; 0x824

000007de <AvrXInitTask>:
 7de:	e8 2f       	mov	r30, r24
 7e0:	f9 2f       	mov	r31, r25
 7e2:	1d d0       	rcall	.+58     	; 0x81e
 7e4:	a0 2d       	mov	r26, r0
 7e6:	1b d0       	rcall	.+54     	; 0x81e
 7e8:	b0 2d       	mov	r27, r0
 7ea:	19 d0       	rcall	.+50     	; 0x81e
 7ec:	0c 92       	st	X, r0
 7ee:	17 d0       	rcall	.+46     	; 0x81e
 7f0:	0e 92       	st	-X, r0
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	51 e2       	ldi	r21, 0x21	; 33

000007f8 <PushRegisters>:
 7f8:	4e 93       	st	-X, r20
 7fa:	5a 95       	dec	r21
 7fc:	e9 f7       	brne	.-6      	; 0x7f8
 7fe:	11 97       	sbiw	r26, 0x01	; 1
 800:	0e d0       	rcall	.+28     	; 0x81e
 802:	80 2d       	mov	r24, r0
 804:	0c d0       	rcall	.+24     	; 0x81e
 806:	90 2d       	mov	r25, r0
 808:	0a d0       	rcall	.+20     	; 0x81e
 80a:	e8 2f       	mov	r30, r24
 80c:	f9 2f       	mov	r31, r25
 80e:	a4 83       	std	Z+4, r26	; 0x04
 810:	b5 83       	std	Z+5, r27	; 0x05
 812:	03 82       	std	Z+3, r0	; 0x03
 814:	a0 e6       	ldi	r26, 0x60	; 96
 816:	a2 83       	std	Z+2, r26	; 0x02
 818:	41 83       	std	Z+1, r20	; 0x01
 81a:	40 83       	st	Z, r20
 81c:	08 95       	ret

0000081e <lpm_inc>:
 81e:	c8 95       	lpm
 820:	31 96       	adiw	r30, 0x01	; 1
 822:	08 95       	ret

00000824 <AvrXResume>:
 824:	f8 94       	cli
 826:	48 df       	rcall	.-368    	; 0x6b8
 828:	78 94       	sei
 82a:	e8 2f       	mov	r30, r24
 82c:	f9 2f       	mov	r31, r25
 82e:	22 81       	ldd	r18, Z+2	; 0x02
 830:	2f 7d       	andi	r18, 0xDF	; 223
 832:	22 83       	std	Z+2, r18	; 0x02
 834:	26 ff       	sbrs	r18, 6
 836:	03 c0       	rjmp	.+6      	; 0x83e
 838:	2f 7b       	andi	r18, 0xBF	; 191
 83a:	22 83       	std	Z+2, r18	; 0x02
 83c:	01 d0       	rcall	.+2      	; 0x840

0000083e <ar00>:
 83e:	8a cf       	rjmp	.-236    	; 0x754

00000840 <_QueuePid>:
 840:	e8 2f       	mov	r30, r24
 842:	f9 2f       	mov	r31, r25
 844:	3f ef       	ldi	r19, 0xFF	; 255
 846:	22 81       	ldd	r18, Z+2	; 0x02
 848:	20 73       	andi	r18, 0x30	; 48
 84a:	e1 f4       	brne	.+56     	; 0x884
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	43 81       	ldd	r20, Z+3	; 0x03
 852:	cc e1       	ldi	r28, 0x1C	; 28
 854:	d1 e0       	ldi	r29, 0x01	; 1
 856:	2f b7       	in	r18, 0x3f	; 63
 858:	f8 94       	cli

0000085a <_qp00>:
 85a:	33 95       	inc	r19
 85c:	ec 2f       	mov	r30, r28
 85e:	fd 2f       	mov	r31, r29
 860:	c0 81       	ld	r28, Z
 862:	d1 81       	ldd	r29, Z+1	; 0x01
 864:	20 96       	adiw	r28, 0x00	; 0
 866:	19 f0       	breq	.+6      	; 0x86e
 868:	5b 81       	ldd	r21, Y+3	; 0x03
 86a:	45 17       	cp	r20, r21
 86c:	b0 f7       	brcc	.-20     	; 0x85a

0000086e <_qp01>:
 86e:	91 83       	std	Z+1, r25	; 0x01
 870:	80 83       	st	Z, r24
 872:	f9 2f       	mov	r31, r25
 874:	e8 2f       	mov	r30, r24
 876:	d1 83       	std	Z+1, r29	; 0x01
 878:	c0 83       	st	Z, r28
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	83 2f       	mov	r24, r19
 880:	2f bf       	out	0x3f, r18	; 63
 882:	08 95       	ret

00000884 <_qpSUSPEND>:
 884:	83 2f       	mov	r24, r19
 886:	20 64       	ori	r18, 0x40	; 64
 888:	22 83       	std	Z+2, r18	; 0x02
 88a:	08 95       	ret

0000088c <AvrXWaitMessageAck>:
 88c:	8e 5f       	subi	r24, 0xFE	; 254
 88e:	9f 4f       	sbci	r25, 0xFF	; 255

00000890 <AvrXWaitSemaphore>:
 890:	e8 2f       	mov	r30, r24
 892:	f9 2f       	mov	r31, r25
 894:	f8 94       	cli
 896:	20 81       	ld	r18, Z
 898:	31 81       	ldd	r19, Z+1	; 0x01
 89a:	21 50       	subi	r18, 0x01	; 1
 89c:	30 40       	sbci	r19, 0x00	; 0
 89e:	19 f4       	brne	.+6      	; 0x8a6
 8a0:	20 83       	st	Z, r18
 8a2:	31 83       	std	Z+1, r19	; 0x01
 8a4:	18 95       	reti

000008a6 <aws01>:
 8a6:	08 df       	rcall	.-496    	; 0x6b8
 8a8:	ec e1       	ldi	r30, 0x1C	; 28
 8aa:	f1 e0       	ldi	r31, 0x01	; 1
 8ac:	73 81       	ldd	r23, Z+3	; 0x03
 8ae:	62 81       	ldd	r22, Z+2	; 0x02
 8b0:	3c d0       	rcall	.+120    	; 0x92a
 8b2:	e8 2f       	mov	r30, r24
 8b4:	f9 2f       	mov	r31, r25
 8b6:	2b d0       	rcall	.+86     	; 0x90e
 8b8:	4d cf       	rjmp	.-358    	; 0x754

000008ba <AvrXAckMessage>:
 8ba:	8e 5f       	subi	r24, 0xFE	; 254
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255

000008be <AvrXSetSemaphore>:
 8be:	0c d0       	rcall	.+24     	; 0x8d8
 8c0:	90 91 22 01 	lds	r25, 0x0122
 8c4:	93 95       	inc	r25
 8c6:	89 2b       	or	r24, r25
 8c8:	09 f0       	breq	.+2      	; 0x8cc
 8ca:	08 95       	ret

000008cc <axss0>:
 8cc:	f8 94       	cli
 8ce:	f4 de       	rcall	.-536    	; 0x6b8
 8d0:	78 94       	sei
 8d2:	40 cf       	rjmp	.-384    	; 0x754

000008d4 <AvrXIntSetObjectSemaphore>:
 8d4:	8e 5f       	subi	r24, 0xFE	; 254
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255

000008d8 <AvrXIntSetSemaphore>:
 8d8:	e8 2f       	mov	r30, r24
 8da:	f9 2f       	mov	r31, r25
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	2f b7       	in	r18, 0x3f	; 63
 8e2:	f8 94       	cli
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	60 81       	ld	r22, Z
 8e8:	86 17       	cp	r24, r22
 8ea:	97 07       	cpc	r25, r23
 8ec:	28 f0       	brcs	.+10     	; 0x8f8
 8ee:	80 83       	st	Z, r24
 8f0:	91 83       	std	Z+1, r25	; 0x01

000008f2 <BogusSemaphore>:
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	2f bf       	out	0x3f, r18	; 63
 8f6:	08 95       	ret

000008f8 <aiss00>:
 8f8:	8f e5       	ldi	r24, 0x5F	; 95
 8fa:	86 17       	cp	r24, r22
 8fc:	97 07       	cpc	r25, r23
 8fe:	c8 f7       	brcc	.-14     	; 0x8f2
 900:	23 d0       	rcall	.+70     	; 0x948
 902:	2f bf       	out	0x3f, r18	; 63
 904:	86 2f       	mov	r24, r22
 906:	97 2f       	mov	r25, r23
 908:	9b cf       	rjmp	.-202    	; 0x840

0000090a <_ao00>:
 90a:	e2 2f       	mov	r30, r18
 90c:	f3 2f       	mov	r31, r19

0000090e <_AppendObject>:
 90e:	20 81       	ld	r18, Z
 910:	31 81       	ldd	r19, Z+1	; 0x01
 912:	20 50       	subi	r18, 0x00	; 0
 914:	30 40       	sbci	r19, 0x00	; 0
 916:	c9 f7       	brne	.-14     	; 0x90a
 918:	71 83       	std	Z+1, r23	; 0x01
 91a:	60 83       	st	Z, r22
 91c:	f7 2f       	mov	r31, r23
 91e:	e6 2f       	mov	r30, r22
 920:	31 83       	std	Z+1, r19	; 0x01
 922:	20 83       	st	Z, r18
 924:	08 95       	ret

00000926 <_ro00>:
 926:	f3 2f       	mov	r31, r19
 928:	e2 2f       	mov	r30, r18

0000092a <_RemoveObject>:
 92a:	20 81       	ld	r18, Z
 92c:	31 81       	ldd	r19, Z+1	; 0x01
 92e:	62 17       	cp	r22, r18
 930:	73 07       	cpc	r23, r19
 932:	51 f0       	breq	.+20     	; 0x948
 934:	20 50       	subi	r18, 0x00	; 0
 936:	30 40       	sbci	r19, 0x00	; 0
 938:	b1 f7       	brne	.-20     	; 0x926
 93a:	08 95       	ret

0000093c <_RemoveFirstObject>:
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	60 50       	subi	r22, 0x00	; 0
 942:	70 40       	sbci	r23, 0x00	; 0
 944:	09 f4       	brne	.+2      	; 0x948
 946:	08 95       	ret

00000948 <_RemoveObjectAt>:
 948:	4c 2f       	mov	r20, r28
 94a:	5d 2f       	mov	r21, r29
 94c:	c6 2f       	mov	r28, r22
 94e:	d7 2f       	mov	r29, r23
 950:	79 81       	ldd	r23, Y+1	; 0x01
 952:	68 81       	ld	r22, Y
 954:	71 83       	std	Z+1, r23	; 0x01
 956:	60 83       	st	Z, r22
 958:	e6 2f       	mov	r30, r22
 95a:	f7 2f       	mov	r31, r23
 95c:	66 27       	eor	r22, r22
 95e:	68 83       	st	Y, r22
 960:	69 83       	std	Y+1, r22	; 0x01
 962:	7d 2f       	mov	r23, r29
 964:	6c 2f       	mov	r22, r28
 966:	c4 2f       	mov	r28, r20
 968:	d5 2f       	mov	r29, r21
 96a:	98 94       	clz
 96c:	08 95       	ret

0000096e <AvrXSingleStepNext>:
 96e:	f8 94       	cli
 970:	a3 de       	rcall	.-698    	; 0x6b8
 972:	78 94       	sei
 974:	f9 2f       	mov	r31, r25
 976:	e8 2f       	mov	r30, r24
 978:	a2 81       	ldd	r26, Z+2	; 0x02
 97a:	a6 ff       	sbrs	r26, 6
 97c:	1d c0       	rjmp	.+58     	; 0x9b8
 97e:	a0 68       	ori	r26, 0x80	; 128
 980:	a2 83       	std	Z+2, r26	; 0x02
 982:	ec e1       	ldi	r30, 0x1C	; 28
 984:	f1 e0       	ldi	r31, 0x01	; 1
 986:	b1 81       	ldd	r27, Z+1	; 0x01
 988:	a0 81       	ld	r26, Z
 98a:	91 83       	std	Z+1, r25	; 0x01
 98c:	80 83       	st	Z, r24
 98e:	f9 2f       	mov	r31, r25
 990:	e8 2f       	mov	r30, r24
 992:	b1 83       	std	Z+1, r27	; 0x01
 994:	a0 83       	st	Z, r26
 996:	0e c0       	rjmp	.+28     	; 0x9b4

00000998 <AvrXStepNext>:
 998:	f8 94       	cli
 99a:	8e de       	rcall	.-740    	; 0x6b8
 99c:	78 94       	sei
 99e:	f9 2f       	mov	r31, r25
 9a0:	e8 2f       	mov	r30, r24
 9a2:	a2 81       	ldd	r26, Z+2	; 0x02
 9a4:	a6 ff       	sbrs	r26, 6
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba
 9a8:	af 79       	andi	r26, 0x9F	; 159
 9aa:	a2 83       	std	Z+2, r26	; 0x02
 9ac:	49 df       	rcall	.-366    	; 0x840
 9ae:	a2 81       	ldd	r26, Z+2	; 0x02
 9b0:	a0 62       	ori	r26, 0x20	; 32
 9b2:	a2 83       	std	Z+2, r26	; 0x02

000009b4 <AssnXOk>:
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba

000009b8 <AssnXErr>:
 9b8:	81 e0       	ldi	r24, 0x01	; 1

000009ba <AssnX>:
 9ba:	8a 8f       	std	Y+26, r24	; 0x1a
 9bc:	cb ce       	rjmp	.-618    	; 0x754

000009be <AvrXTaskExit>:
 9be:	f8 94       	cli
 9c0:	7b de       	rcall	.-778    	; 0x6b8
 9c2:	78 94       	sei
 9c4:	90 91 1f 01 	lds	r25, 0x011F
 9c8:	80 91 1e 01 	lds	r24, 0x011E
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4

000009ce <AvrXTerminate>:
 9ce:	f8 94       	cli
 9d0:	73 de       	rcall	.-794    	; 0x6b8
 9d2:	78 94       	sei

000009d4 <at00>:
 9d4:	f9 2f       	mov	r31, r25
 9d6:	e8 2f       	mov	r30, r24
 9d8:	a0 e1       	ldi	r26, 0x10	; 16
 9da:	a2 83       	std	Z+2, r26	; 0x02
 9dc:	79 2f       	mov	r23, r25
 9de:	68 2f       	mov	r22, r24
 9e0:	f1 e0       	ldi	r31, 0x01	; 1
 9e2:	ec e1       	ldi	r30, 0x1C	; 28
 9e4:	f8 94       	cli
 9e6:	a1 df       	rcall	.-190    	; 0x92a
 9e8:	b5 ce       	rjmp	.-662    	; 0x754

000009ea <AvrXBreakpoint>:
 9ea:	f8 94       	cli
 9ec:	65 de       	rcall	.-822    	; 0x6b8
 9ee:	78 94       	sei
 9f0:	f0 91 1f 01 	lds	r31, 0x011F
 9f4:	e0 91 1e 01 	lds	r30, 0x011E
 9f8:	22 81       	ldd	r18, Z+2	; 0x02
 9fa:	25 fd       	sbrc	r18, 5
 9fc:	09 c0       	rjmp	.+18     	; 0xa10
 9fe:	aa ce       	rjmp	.-684    	; 0x754

00000a00 <AvrXSuspend>:
 a00:	f8 94       	cli
 a02:	5a de       	rcall	.-844    	; 0x6b8
 a04:	78 94       	sei
 a06:	f9 2f       	mov	r31, r25
 a08:	e8 2f       	mov	r30, r24
 a0a:	22 81       	ldd	r18, Z+2	; 0x02
 a0c:	20 62       	ori	r18, 0x20	; 32
 a0e:	22 83       	std	Z+2, r18	; 0x02

00000a10 <as00>:
 a10:	7f 2f       	mov	r23, r31
 a12:	6e 2f       	mov	r22, r30
 a14:	f1 e0       	ldi	r31, 0x01	; 1
 a16:	ec e1       	ldi	r30, 0x1C	; 28
 a18:	f8 94       	cli
 a1a:	87 df       	rcall	.-242    	; 0x92a
 a1c:	c2 2f       	mov	r28, r18
 a1e:	d3 2f       	mov	r29, r19
 a20:	20 96       	adiw	r28, 0x00	; 0
 a22:	19 f0       	breq	.+6      	; 0xa2a
 a24:	ea 81       	ldd	r30, Y+2	; 0x02
 a26:	e0 64       	ori	r30, 0x40	; 64
 a28:	ea 83       	std	Y+2, r30	; 0x02

00000a2a <as01>:
 a2a:	94 ce       	rjmp	.-728    	; 0x754

00000a2c <AvrXSendMessage>:
 a2c:	f8 94       	cli
 a2e:	44 de       	rcall	.-888    	; 0x6b8
 a30:	78 94       	sei
 a32:	01 d0       	rcall	.+2      	; 0xa36
 a34:	8f ce       	rjmp	.-738    	; 0x754

00000a36 <AvrXIntSendMessage>:
 a36:	f9 2f       	mov	r31, r25
 a38:	e8 2f       	mov	r30, r24
 a3a:	69 df       	rcall	.-302    	; 0x90e
 a3c:	4b cf       	rjmp	.-362    	; 0x8d4

00000a3e <AvrXWaitMessage>:
 a3e:	e8 2f       	mov	r30, r24
 a40:	f9 2f       	mov	r31, r25
 a42:	f8 94       	cli
 a44:	7b df       	rcall	.-266    	; 0x93c
 a46:	78 94       	sei
 a48:	21 f4       	brne	.+8      	; 0xa52
 a4a:	20 df       	rcall	.-448    	; 0x88c
 a4c:	82 50       	subi	r24, 0x02	; 2
 a4e:	90 40       	sbci	r25, 0x00	; 0
 a50:	f6 cf       	rjmp	.-20     	; 0xa3e

00000a52 <_rm01>:
 a52:	c4 d0       	rcall	.+392    	; 0xbdc
 a54:	86 2f       	mov	r24, r22
 a56:	97 2f       	mov	r25, r23
 a58:	08 95       	ret

00000a5a <AvrXDelay>:
 a5a:	01 d0       	rcall	.+2      	; 0xa5e
 a5c:	17 cf       	rjmp	.-466    	; 0x88c

00000a5e <AvrXStartTimer>:
 a5e:	60 50       	subi	r22, 0x00	; 0
 a60:	70 40       	sbci	r23, 0x00	; 0
 a62:	09 f4       	brne	.+2      	; 0xa66
 a64:	2a cf       	rjmp	.-428    	; 0x8ba

00000a66 <CountNotZero>:
 a66:	f8 94       	cli
 a68:	27 de       	rcall	.-946    	; 0x6b8
 a6a:	78 94       	sei
 a6c:	b7 d0       	rcall	.+366    	; 0xbdc
 a6e:	e4 e2       	ldi	r30, 0x24	; 36
 a70:	f1 e0       	ldi	r31, 0x01	; 1
 a72:	f8 94       	cli
 a74:	20 91 26 01 	lds	r18, 0x0126
 a78:	2a 95       	dec	r18
 a7a:	20 93 26 01 	sts	0x0126, r18
 a7e:	78 94       	sei

00000a80 <ast00>:
 a80:	ce 2f       	mov	r28, r30
 a82:	df 2f       	mov	r29, r31
 a84:	e8 81       	ld	r30, Y
 a86:	f9 81       	ldd	r31, Y+1	; 0x01
 a88:	30 96       	adiw	r30, 0x00	; 0
 a8a:	59 f0       	breq	.+22     	; 0xaa2
 a8c:	24 81       	ldd	r18, Z+4	; 0x04
 a8e:	35 81       	ldd	r19, Z+5	; 0x05
 a90:	62 1b       	sub	r22, r18
 a92:	73 0b       	sbc	r23, r19
 a94:	a8 f7       	brcc	.-22     	; 0xa80
 a96:	62 0f       	add	r22, r18
 a98:	73 1f       	adc	r23, r19
 a9a:	26 1b       	sub	r18, r22
 a9c:	37 0b       	sbc	r19, r23
 a9e:	24 83       	std	Z+4, r18	; 0x04
 aa0:	35 83       	std	Z+5, r19	; 0x05

00000aa2 <ast01>:
 aa2:	99 83       	std	Y+1, r25	; 0x01
 aa4:	88 83       	st	Y, r24
 aa6:	d9 2f       	mov	r29, r25
 aa8:	c8 2f       	mov	r28, r24
 aaa:	f9 83       	std	Y+1, r31	; 0x01
 aac:	e8 83       	st	Y, r30
 aae:	6c 83       	std	Y+4, r22	; 0x04
 ab0:	7d 83       	std	Y+5, r23	; 0x05
 ab2:	3c d0       	rcall	.+120    	; 0xb2c
 ab4:	4f ce       	rjmp	.-866    	; 0x754

00000ab6 <AvrXTimerHandler>:
 ab6:	f8 94       	cli
 ab8:	20 91 26 01 	lds	r18, 0x0126
 abc:	21 50       	subi	r18, 0x01	; 1
 abe:	20 93 26 01 	sts	0x0126, r18
 ac2:	78 94       	sei
 ac4:	08 f0       	brcs	.+2      	; 0xac8
 ac6:	08 95       	ret

00000ac8 <ati00>:
 ac8:	cf 93       	push	r28
 aca:	df 93       	push	r29
 acc:	af 93       	push	r26
 ace:	bf 93       	push	r27
 ad0:	d0 91 25 01 	lds	r29, 0x0125
 ad4:	c0 91 24 01 	lds	r28, 0x0124
 ad8:	20 96       	adiw	r28, 0x00	; 0
 ada:	21 f1       	breq	.+72     	; 0xb24
 adc:	fd 81       	ldd	r31, Y+5	; 0x05
 ade:	ec 81       	ldd	r30, Y+4	; 0x04
 ae0:	31 97       	sbiw	r30, 0x01	; 1
 ae2:	fd 83       	std	Y+5, r31	; 0x05
 ae4:	ec 83       	std	Y+4, r30	; 0x04

00000ae6 <ati01>:
 ae6:	ef 2b       	or	r30, r31
 ae8:	e9 f4       	brne	.+58     	; 0xb24
 aea:	a8 81       	ld	r26, Y
 aec:	b9 81       	ldd	r27, Y+1	; 0x01
 aee:	b0 93 25 01 	sts	0x0125, r27
 af2:	a0 93 24 01 	sts	0x0124, r26
 af6:	f9 83       	std	Y+1, r31	; 0x01
 af8:	e8 83       	st	Y, r30
 afa:	8a 81       	ldd	r24, Y+2	; 0x02
 afc:	9b 81       	ldd	r25, Y+3	; 0x03
 afe:	82 50       	subi	r24, 0x02	; 2
 b00:	90 40       	sbci	r25, 0x00	; 0
 b02:	31 f4       	brne	.+12     	; 0xb10
 b04:	8e 81       	ldd	r24, Y+6	; 0x06
 b06:	9f 81       	ldd	r25, Y+7	; 0x07
 b08:	7d 2f       	mov	r23, r29
 b0a:	6c 2f       	mov	r22, r28
 b0c:	94 df       	rcall	.-216    	; 0xa36
 b0e:	03 c0       	rjmp	.+6      	; 0xb16

00000b10 <ati04>:
 b10:	8c 2f       	mov	r24, r28
 b12:	9d 2f       	mov	r25, r29
 b14:	df de       	rcall	.-578    	; 0x8d4

00000b16 <ati03>:
 b16:	10 96       	adiw	r26, 0x00	; 0
 b18:	29 f0       	breq	.+10     	; 0xb24
 b1a:	ca 2f       	mov	r28, r26
 b1c:	db 2f       	mov	r29, r27
 b1e:	fd 81       	ldd	r31, Y+5	; 0x05
 b20:	ec 81       	ldd	r30, Y+4	; 0x04
 b22:	e1 cf       	rjmp	.-62     	; 0xae6

00000b24 <ati02>:
 b24:	bf 91       	pop	r27
 b26:	af 91       	pop	r26
 b28:	df 91       	pop	r29
 b2a:	cf 91       	pop	r28

00000b2c <TimerHandler>:
 b2c:	f8 94       	cli
 b2e:	20 91 26 01 	lds	r18, 0x0126
 b32:	23 95       	inc	r18
 b34:	20 93 26 01 	sts	0x0126, r18
 b38:	78 94       	sei
 b3a:	31 f6       	brne	.-116    	; 0xac8
 b3c:	08 95       	ret

00000b3e <AvrXCancelTimer>:
 b3e:	f8 94       	cli
 b40:	bb dd       	rcall	.-1162   	; 0x6b8
 b42:	78 94       	sei
 b44:	c7 de       	rcall	.-626    	; 0x8d4
 b46:	6a 8d       	ldd	r22, Y+26	; 0x1a
 b48:	7b 8d       	ldd	r23, Y+27	; 0x1b
 b4a:	e4 e2       	ldi	r30, 0x24	; 36
 b4c:	f1 e0       	ldi	r31, 0x01	; 1
 b4e:	f8 94       	cli
 b50:	ec de       	rcall	.-552    	; 0x92a
 b52:	20 50       	subi	r18, 0x00	; 0
 b54:	30 40       	sbci	r19, 0x00	; 0
 b56:	59 f0       	breq	.+22     	; 0xb6e
 b58:	c6 2f       	mov	r28, r22
 b5a:	d7 2f       	mov	r29, r23
 b5c:	6c 81       	ldd	r22, Y+4	; 0x04
 b5e:	7d 81       	ldd	r23, Y+5	; 0x05
 b60:	95 81       	ldd	r25, Z+5	; 0x05
 b62:	84 81       	ldd	r24, Z+4	; 0x04
 b64:	86 0f       	add	r24, r22
 b66:	97 1f       	adc	r25, r23
 b68:	84 83       	std	Z+4, r24	; 0x04
 b6a:	95 83       	std	Z+5, r25	; 0x05
 b6c:	f3 cd       	rjmp	.-1050   	; 0x754

00000b6e <act00>:
 b6e:	2a 8f       	std	Y+26, r18	; 0x1a
 b70:	3b 8f       	std	Y+27, r19	; 0x1b
 b72:	f0 cd       	rjmp	.-1056   	; 0x754

00000b74 <AvrXReadEEProm>:
 b74:	68 2f       	mov	r22, r24
 b76:	79 2f       	mov	r23, r25
 b78:	91 e0       	ldi	r25, 0x01	; 1
 b7a:	88 e2       	ldi	r24, 0x28	; 40
 b7c:	89 de       	rcall	.-750    	; 0x890

00000b7e <are01>:
 b7e:	e1 99       	sbic	0x1c, 1	; 28
 b80:	fe cf       	rjmp	.-4      	; 0xb7e
 b82:	6e bb       	out	0x1e, r22	; 30
 b84:	7f bb       	out	0x1f, r23	; 31
 b86:	e0 9a       	sbi	0x1c, 0	; 28
 b88:	0d b2       	in	r0, 0x1d	; 29
 b8a:	0f 92       	push	r0
 b8c:	98 de       	rcall	.-720    	; 0x8be
 b8e:	8f 91       	pop	r24
 b90:	08 95       	ret

00000b92 <AvrXReadEEPromWord>:
 b92:	68 2f       	mov	r22, r24
 b94:	79 2f       	mov	r23, r25
 b96:	91 e0       	ldi	r25, 0x01	; 1
 b98:	88 e2       	ldi	r24, 0x28	; 40
 b9a:	7a de       	rcall	.-780    	; 0x890

00000b9c <arew01>:
 b9c:	e1 99       	sbic	0x1c, 1	; 28
 b9e:	fe cf       	rjmp	.-4      	; 0xb9c
 ba0:	6e bb       	out	0x1e, r22	; 30
 ba2:	7f bb       	out	0x1f, r23	; 31
 ba4:	e0 9a       	sbi	0x1c, 0	; 28
 ba6:	0d b2       	in	r0, 0x1d	; 29
 ba8:	0f 92       	push	r0
 baa:	6f 5f       	subi	r22, 0xFF	; 255
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	6e bb       	out	0x1e, r22	; 30
 bb0:	7f bb       	out	0x1f, r23	; 31
 bb2:	e0 9a       	sbi	0x1c, 0	; 28
 bb4:	0d b2       	in	r0, 0x1d	; 29
 bb6:	0f 92       	push	r0
 bb8:	82 de       	rcall	.-764    	; 0x8be
 bba:	9f 91       	pop	r25
 bbc:	8f 91       	pop	r24
 bbe:	08 95       	ret

00000bc0 <AvrXWriteEEProm>:
 bc0:	46 2f       	mov	r20, r22
 bc2:	68 2f       	mov	r22, r24
 bc4:	79 2f       	mov	r23, r25
 bc6:	91 e0       	ldi	r25, 0x01	; 1
 bc8:	88 e2       	ldi	r24, 0x28	; 40
 bca:	62 de       	rcall	.-828    	; 0x890

00000bcc <awe00>:
 bcc:	e1 99       	sbic	0x1c, 1	; 28
 bce:	fe cf       	rjmp	.-4      	; 0xbcc
 bd0:	6e bb       	out	0x1e, r22	; 30
 bd2:	7f bb       	out	0x1f, r23	; 31
 bd4:	4d bb       	out	0x1d, r20	; 29
 bd6:	e2 9a       	sbi	0x1c, 2	; 28
 bd8:	e1 9a       	sbi	0x1c, 1	; 28
 bda:	71 ce       	rjmp	.-798    	; 0x8be

00000bdc <AvrXIntResetObjectSemaphore>:
 bdc:	e8 2f       	mov	r30, r24
 bde:	f9 2f       	mov	r31, r25
 be0:	32 96       	adiw	r30, 0x02	; 2
 be2:	02 c0       	rjmp	.+4      	; 0xbe8

00000be4 <AvrXIntResetSemaphore>:
 be4:	f9 2f       	mov	r31, r25
 be6:	e8 2f       	mov	r30, r24

00000be8 <ars00>:
 be8:	f8 94       	cli
 bea:	40 81       	ld	r20, Z
 bec:	51 81       	ldd	r21, Z+1	; 0x01
 bee:	41 50       	subi	r20, 0x01	; 1
 bf0:	50 40       	sbci	r21, 0x00	; 0
 bf2:	11 f0       	breq	.+4      	; 0xbf8
 bf4:	4f 5f       	subi	r20, 0xFF	; 255
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255

00000bf8 <ars01>:
 bf8:	51 83       	std	Z+1, r21	; 0x01
 bfa:	40 83       	st	Z, r20
 bfc:	18 95       	reti
