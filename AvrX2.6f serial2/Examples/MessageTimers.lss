
MessageTimers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c5c  00000cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000da  00800060  00800060  00000cf0  2**2
                  ALLOC
  3 .noinit       00000000  0080013a  0080013a  00000cf0  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000cf0  2**0
                  CONTENTS
  5 .stab         000041c4  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000006c4  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a
   4:	0c 94 50 00 	jmp	0xa0
   8:	0c 94 50 00 	jmp	0xa0
   c:	0c 94 50 00 	jmp	0xa0
  10:	0c 94 50 00 	jmp	0xa0
  14:	0c 94 50 00 	jmp	0xa0
  18:	0c 94 50 00 	jmp	0xa0
  1c:	0c 94 50 00 	jmp	0xa0
  20:	0c 94 50 00 	jmp	0xa0
  24:	0c 94 50 00 	jmp	0xa0
  28:	0c 94 50 00 	jmp	0xa0
  2c:	0c 94 52 00 	jmp	0xa4
  30:	0c 94 50 00 	jmp	0xa0
  34:	0c 94 0a 01 	jmp	0x214
  38:	0c 94 04 01 	jmp	0x208
  3c:	0c 94 50 00 	jmp	0xa0
  40:	0c 94 50 00 	jmp	0xa0
  44:	0c 94 50 00 	jmp	0xa0
  48:	0c 94 50 00 	jmp	0xa0
  4c:	0c 94 50 00 	jmp	0xa0
  50:	0c 94 50 00 	jmp	0xa0

00000054 <__ctors_end>:
  54:	ec 00       	.word	0x00ec	; ????
  56:	83 00       	.word	0x0083	; ????
  58:	60 00       	.word	0x0060	; ????
  5a:	03 23       	and	r16, r19

0000005b <flasherTcb>:
  5b:	23 01 5a 00 9d 00 02                                #.Z....

00000062 <MonitorTcb>:
  62:	9c 00 00 02 b5 00 00 00                             ........

0000006a <__init>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ec e5       	ldi	r30, 0x5C	; 92
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 33       	cpi	r26, 0x3A	; 58
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94
  9c:	0c 94 a9 00 	jmp	0x152

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0x0

000000a4 <__vector_11>:
  a4:	0e 94 78 03 	call	0x6f0
  a8:	80 ee       	ldi	r24, 0xE0	; 224
  aa:	82 bf       	out	0x32, r24	; 50
  ac:	0e 94 79 05 	call	0xaf2
  b0:	0e 94 c4 03 	call	0x788

000000b4 <flasher>:
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	1f ef       	ldi	r17, 0xFF	; 255
  b8:	17 bb       	out	0x17, r17	; 23
  ba:	4b ea       	ldi	r20, 0xAB	; 171
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	66 e9       	ldi	r22, 0x96	; 150
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	83 ea       	ldi	r24, 0xA3	; 163
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 bd 05 	call	0xb7a
  ca:	05 c0       	rjmp	.+10     	; 0xd6
  cc:	23 5a       	subi	r18, 0xA3	; 163
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	b1 f0       	breq	.+44     	; 0xfe
  d2:	0e 94 11 05 	call	0xa22
  d6:	18 bb       	out	0x18, r17	; 24
  d8:	8b ea       	ldi	r24, 0xAB	; 171
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 3d 05 	call	0xa7a
  e0:	9c 01       	movw	r18, r24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	2b 3b       	cpi	r18, 0xBB	; 187
  e6:	38 07       	cpc	r19, r24
  e8:	89 f7       	brne	.-30     	; 0xcc
  ea:	80 91 bf 00 	lds	r24, 0x00BF
  ee:	80 95       	com	r24
  f0:	c8 27       	eor	r28, r24
  f2:	c9 01       	movw	r24, r18
  f4:	0e 94 79 04 	call	0x8f2
  f8:	1c 2f       	mov	r17, r28
  fa:	10 95       	com	r17
  fc:	ec cf       	rjmp	.-40     	; 0xd6
  fe:	cc 1f       	adc	r28, r28
 100:	08 f4       	brcc	.+2      	; 0x104
 102:	c3 95       	inc	r28
 104:	da cf       	rjmp	.-76     	; 0xba

00000106 <switcher>:
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	6a e0       	ldi	r22, 0x0A	; 10
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	8f ea       	ldi	r24, 0xAF	; 175
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4b 05 	call	0xa96
 116:	90 91 bf 00 	lds	r25, 0x00BF
 11a:	89 b3       	in	r24, 0x19	; 25
 11c:	98 17       	cp	r25, r24
 11e:	a9 f3       	breq	.-22     	; 0x10a
 120:	89 b3       	in	r24, 0x19	; 25
 122:	80 93 bf 00 	sts	0x00BF, r24
 126:	6b eb       	ldi	r22, 0xBB	; 187
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	8b ea       	ldi	r24, 0xAB	; 171
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 34 05 	call	0xa68
 132:	8b eb       	ldi	r24, 0xBB	; 187
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 62 04 	call	0x8c4
 13a:	6a e0       	ldi	r22, 0x0A	; 10
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	8f ea       	ldi	r24, 0xAF	; 175
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4b 05 	call	0xa96
 146:	90 91 bf 00 	lds	r25, 0x00BF
 14a:	89 b3       	in	r24, 0x19	; 25
 14c:	98 17       	cp	r25, r24
 14e:	41 f7       	brne	.-48     	; 0x120
 150:	dc cf       	rjmp	.-72     	; 0x10a

00000152 <main>:
 152:	cf e5       	ldi	r28, 0x5F	; 95
 154:	d8 e0       	ldi	r29, 0x08	; 8
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 fd 03 	call	0x7fa
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	85 bf       	out	0x35, r24	; 53
 166:	80 ee       	ldi	r24, 0xE0	; 224
 168:	82 bf       	out	0x32, r24	; 50
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	83 bf       	out	0x33, r24	; 51
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 bf       	out	0x39, r24	; 57
 172:	89 e1       	ldi	r24, 0x19	; 25
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 fd 00 	call	0x1fa
 17a:	8b e5       	ldi	r24, 0x5B	; 91
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 09 04 	call	0x812
 182:	84 e5       	ldi	r24, 0x54	; 84
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 09 04 	call	0x812
 18a:	82 e6       	ldi	r24, 0x62	; 98
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 09 04 	call	0x812
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 7b 04 	call	0x8f6
 19a:	0e 94 c4 03 	call	0x788
 19e:	ff cf       	rjmp	.-2      	; 0x19e

000001a0 <PushChar>:
; by the next routine
;-
        _FUNCTION(PushChar)
PushChar:
        push    Xl
 1a0:	af 93       	push	r26
        lds     Xl, SioFlags
 1a2:	a0 91 26 01 	lds	r26, 0x0126
        sbr     Xl, 1<<CharPushed
 1a6:	a0 68       	ori	r26, 0x80	; 128
        sts     SioFlags, Xl
 1a8:	a0 93 26 01 	sts	0x0126, r26
        pop     Xl
 1ac:	af 91       	pop	r26
        ret
 1ae:	08 95       	ret

000001b0 <GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; GetChar
;
; Need to make this draw from a buffer so that multiple
; chars can be pushed... and so different input streams
; can be attached to the buffer.
;-
        _FUNCTION(GetChar)
#ifdef  __IAR_SYSTEMS_ASM__
        PUBLIC  ?C_GETCHAR
?C_GETCHAR:     ; Need this label for simulator I/O
#endif
GetChar:
        lds     tmp0, SioFlags
 1b0:	20 91 26 01 	lds	r18, 0x0126
        sbrs    tmp0, CharPushed
 1b4:	27 ff       	sbrs	r18, 7
        rjmp    gc00
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2
        cbr     tmp0, 1<<CharPushed
 1b8:	2f 77       	andi	r18, 0x7F	; 127
        rjmp    gc01
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8
        sts     SioFlags, tmp0
 1bc:	20 93 26 01 	sts	0x0126, r18
        rjmp    gc01
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8

000001c2 <gc00>:
gc00:
        ldi     p1h, hi8(RxC_Flag)
 1c2:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 1c4:	88 e2       	ldi	r24, 0x28	; 40
        rcall   AvrXWaitSemaphore       ; Wait for a charactor, or flag from System
 1c6:	80 d3       	rcall	.+1792   	; 0x8c8

000001c8 <gc01>:
gc01:
        lds     r1l, _RxByte
 1c8:	80 91 2a 01 	lds	r24, 0x012A
        ret
 1cc:	08 95       	ret

000001ce <_GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; _GetChar
;
; Special version that echos
;
; RETURNS:      RxByte (Register)
;-
        _FUNCTION(_GetChar)

_GetChar:
        rcall   GetChar
 1ce:	f0 df       	rcall	.-32     	; 0x1b0
        rjmp    PutChar
 1d0:	2b c0       	rjmp	.+86     	; 0x228

000001d2 <PutCR>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutCR
;
; Put a CR to the output stream
;-
        _FUNCTION(PutCR)
PutCR:
        ldi     p1l, 0x0D
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
        rjmp    PutChar
 1d4:	29 c0       	rjmp	.+82     	; 0x228

000001d6 <PutSpace>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutSpace
;
; Put a space to the output stream
;-
        _FUNCTION(PutSpace)

PutSpace:
        ldi     p1l, ' '
 1d6:	80 e2       	ldi	r24, 0x20	; 32
        rjmp    PutChar
 1d8:	27 c0       	rjmp	.+78     	; 0x228

000001da <_PrintString>:
        _ENDFUNC
;+
;------------------------------------------
;
; const char * PutString(const char *)
;
; passed:
;       near pointer to string in FLASH memory
; Returns:
;       pointer to next char after NULL
;-
        _FUNCTION(_PrintString)

_PrintString:
        mov     Zl, p1l
 1da:	e8 2f       	mov	r30, r24
        mov     Zh, p1h
 1dc:	f9 2f       	mov	r31, r25

000001de <_foo>:
_foo:
        lpm
 1de:	c8 95       	lpm
        tst     R0
 1e0:	00 20       	and	r0, r0
        breq    _ps00
 1e2:	41 f0       	breq	.+16     	; 0x1f4
        mov     p1l, R0
 1e4:	80 2d       	mov	r24, r0
        push    Zl
 1e6:	ef 93       	push	r30
        push    Zh
 1e8:	ff 93       	push	r31
        rcall   PutChar
 1ea:	1e d0       	rcall	.+60     	; 0x228
        pop     Zh
 1ec:	ff 91       	pop	r31
        pop     Zl
 1ee:	ef 91       	pop	r30
        adiw    Zl, 1
 1f0:	31 96       	adiw	r30, 0x01	; 1
        rjmp    _foo
 1f2:	f5 cf       	rjmp	.-22     	; 0x1de

000001f4 <_ps00>:
_ps00:
        mov     r1l, Zl
 1f4:	8e 2f       	mov	r24, r30
        mov     r1h, Zh
 1f6:	9f 2f       	mov	r25, r31
        ret
 1f8:	08 95       	ret

000001fa <InitSerialIO>:
        _ENDFUNC
;+
;-------------------------------------------
; void InitSerialIO(unsigned)
;
; PASSED:       R25:24 = UBBR
;		p1h:p1l = UBBR
;
; History: parameter used to be passed in R25 l.b. 1/31/01
;	   Changed to unsigned for mega chips. l.b. 5/30/02
;

        _FUNCTION(InitSerialIO)
InitSerialIO:
        ;out     _SFR_IO_ADDR(UBRR), p1l
         out     UBRRL, p1l
 1fa:	89 bd       	out	0x29, r24	; 41
#if defined(UBRRH)
	sts	UBRRH, p1h	// THIS appears to be a no-op
 1fc:	90 93 40 00 	sts	0x0040, r25
#endif
#if defined(UCSR0C)
	ldi	tmp0, UCRC_INIT	// SET word length.
	sts	UCSR0C, tmp0	// Extended register in mega128
#endif
        ldi     tmp0, UCR_INIT
 200:	28 e9       	ldi	r18, 0x98	; 152
        ;out     _SFR_IO_ADDR(UCR), tmp0
        out     _SFR_IO_ADDR(UCR), tmp0
 202:	2a b9       	out	0x0a, r18	; 10
        out     (UCR), tmp0
 204:	2a bd       	out	0x2a, r18	; 42
        ret
 206:	08 95       	ret

00000208 <__vector_14>:
        _ENDFUNC
;
;-----------------------------------------------
; UDRE_Interrupt
;
; Disables the interrupt (UDR is empty) signal waiting
; process to stuff the UDR
;
        _FUNCTION(SIG_UART_DATA)
SIG_UART_DATA:
        cbi     _SFR_IO_ADDR(UCR), UDRIE      ; Disable the interrupt
 208:	55 98       	cbi	0x0a, 5	; 10

        rcall   IntProlog
 20a:	72 d2       	rcall	.+1252   	; 0x6f0

        ldi     p1l, lo8(TxIntFlag)
 20c:	84 e2       	ldi	r24, 0x24	; 36
        ldi     p1h, hi8(TxIntFlag)
 20e:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXIntSetSemaphore     ; Signal we are ready for more.
 210:	7f d3       	rcall	.+1790   	; 0x910

        rjmp    _Epilog
 212:	bc c2       	rjmp	.+1400   	; 0x78c

00000214 <__vector_13>:
        _ENDFUNC

;
;-----------------------------------------------
; RxC_Interrupt
;
; Reads the USART and flags UserTask, Char In semaphore
;
        _FUNCTION(SIG_UART_RECV)
SIG_UART_RECV:
        cbi     _SFR_IO_ADDR(UCR), RXCIE      ; disable interrupt
 214:	57 98       	cbi	0x0a, 7	; 10

        rcall   IntProlog      ; Switch to kernel stack
 216:	6c d2       	rcall	.+1240   	; 0x6f0

        in      Xl, _SFR_IO_ADDR(UDR)
 218:	ac b1       	in	r26, 0x0c	; 12
        sts     _RxByte, Xl
 21a:	a0 93 2a 01 	sts	0x012A, r26

        ldi     p1h, hi8(RxC_Flag)
 21e:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 220:	88 e2       	ldi	r24, 0x28	; 40
        rcall   AvrXIntSetSemaphore
 222:	76 d3       	rcall	.+1772   	; 0x910

        sbi     _SFR_IO_ADDR(UCR), RXCIE      ; Re-enable interrupts
 224:	57 9a       	sbi	0x0a, 7	; 10
        rjmp    _Epilog
 226:	b2 c2       	rjmp	.+1380   	; 0x78c

00000228 <PutChar>:
        _ENDFUNC
;+
;------------------------------------------
; PutChar
;
; Passed: p1l "TxByte"
;
; Stuffs "TxByte" into usart.  The usart is double buffered.
; when the data register is full we wait on the semaphore
; until the Usart interrupts indicating the register is ready.
;-
        _FUNCTION(PutChar)
#ifdef __IAR_SYSTEMS_ASM__
        _PUBLIC(?C_PUTCHAR)     ; Enable terminal I/O
?C_PUTCHAR:
#endif
PutChar:
        sbic    _SFR_IO_ADDR(USR), UDRE
 228:	5d 99       	sbic	0x0b, 5	; 11
        rjmp    pc00
 22a:	06 c0       	rjmp	.+12     	; 0x238

        push    p1l
 22c:	8f 93       	push	r24
        sbi     _SFR_IO_ADDR(UCR), UDRIE      ; Enable interrupts and
 22e:	55 9a       	sbi	0x0a, 5	; 10
        ldi     p1l, lo8(TxIntFlag)
 230:	84 e2       	ldi	r24, 0x24	; 36
        ldi     p1h, hi8(TxIntFlag)
 232:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXWaitSemaphore; Wait until data register is ready
 234:	49 d3       	rcall	.+1682   	; 0x8c8
        pop     p1l
 236:	8f 91       	pop	r24

00000238 <pc00>:
pc00:
        out     _SFR_IO_ADDR(UDR), p1l
 238:	8c b9       	out	0x0c, r24	; 12
        ret
 23a:	08 95       	ret

0000023c <_GetHex>:
        _ENDFUNC

;-----------------------------------------
; _GetHex
;
; PASSED:       p1l = Maximum number of digits
; RETURNS:      r1 = val, Tbit, p2l = Number of digits entered
; USES:         R24, R25
; STACK:        4
;
        _FUNCTION(_GetHex)
_GetHex:
        push    R10
 23c:	af 92       	push	r10
        push    R11
 23e:	bf 92       	push	r11
        push    R12
 240:	cf 92       	push	r12
        push    R13
 242:	df 92       	push	r13

        mov     R13, p1l
 244:	d8 2e       	mov	r13, r24
        clr     R10
 246:	aa 24       	eor	r10, r10
        clr     R11
 248:	bb 24       	eor	r11, r11
        clr     R12
 24a:	cc 24       	eor	r12, r12

0000024c <gh_00>:
gh_00:
        rcall   _GetChar
 24c:	c0 df       	rcall	.-128    	; 0x1ce
        rcall   IsHex
 24e:	21 d0       	rcall	.+66     	; 0x292
        brtc    gh_xx
 250:	96 f4       	brtc	.+36     	; 0x276
        cpi     r1l, '9'+1
 252:	8a 33       	cpi	r24, 0x3A	; 58
        brge    gh_01
 254:	14 f4       	brge	.+4      	; 0x25a
        subi    r1l, '0'
 256:	80 53       	subi	r24, 0x30	; 48
        rjmp    gh_02
 258:	02 c0       	rjmp	.+4      	; 0x25e

0000025a <gh_01>:
gh_01:
        cbr     r1l, 0x20
 25a:	8f 7d       	andi	r24, 0xDF	; 223
        subi    r1l, 'A'-10
 25c:	87 53       	subi	r24, 0x37	; 55

0000025e <gh_02>:
gh_02:
        lsl     R10
 25e:	aa 0c       	add	r10, r10
        rol     R11
 260:	bb 1c       	adc	r11, r11
        lsl     R10
 262:	aa 0c       	add	r10, r10
        rol     R11
 264:	bb 1c       	adc	r11, r11
        lsl     R10
 266:	aa 0c       	add	r10, r10
        rol     R11
 268:	bb 1c       	adc	r11, r11
        lsl     R10
 26a:	aa 0c       	add	r10, r10
        rol     R11
 26c:	bb 1c       	adc	r11, r11
        add     R10, r1l
 26e:	a8 0e       	add	r10, r24
        inc     R12
 270:	c3 94       	inc	r12
        dec     R13
 272:	da 94       	dec	r13
        brne    gh_00
 274:	59 f7       	brne	.-42     	; 0x24c

00000276 <gh_xx>:
gh_xx:
        mov     p2l, R12
 276:	6c 2d       	mov	r22, r12
        mov     r1l, R10
 278:	8a 2d       	mov	r24, r10
        mov     r1h, R11
 27a:	9b 2d       	mov	r25, r11

        pop     R13
 27c:	df 90       	pop	r13
        pop     R12
 27e:	cf 90       	pop	r12
        pop     R11
 280:	bf 90       	pop	r11
        pop     R10
 282:	af 90       	pop	r10
        ret
 284:	08 95       	ret

00000286 <GetHexWord>:
        _ENDFUNC


;-----------------------------------------
; GetHexWord
;
        _FUNCTION(GetHexWord)

GetHexWord:
        ldi     p1l, 4
 286:	84 e0       	ldi	r24, 0x04	; 4
        rjmp    _GetHex
 288:	d9 cf       	rjmp	.-78     	; 0x23c

0000028a <GetHexByte>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexByte)

GetHexByte:
        ldi     p1l, 2
 28a:	82 e0       	ldi	r24, 0x02	; 2
        rjmp    _GetHex
 28c:	d7 cf       	rjmp	.-82     	; 0x23c

0000028e <GetHexChar>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexChar)

GetHexChar:
        ldi     p1l, 1
 28e:	81 e0       	ldi	r24, 0x01	; 1
        rjmp    _GetHex
 290:	d5 cf       	rjmp	.-86     	; 0x23c

00000292 <IsHex>:
        _ENDFUNC
;-----------------------------------------
; IsHex
;
; Tests RxByte for ascii hex char
; Returns: T bit
;
        _FUNCTION(IsHex)

IsHex:
        push    p1l
 292:	8f 93       	push	r24
        lds     p1l, _RxByte
 294:	80 91 2a 01 	lds	r24, 0x012A
        clt
 298:	e8 94       	clt
        cpi     p1l, '0'
 29a:	80 33       	cpi	r24, 0x30	; 48
        brlt    ihno
 29c:	5c f0       	brlt	.+22     	; 0x2b4
        cpi     p1l, '9'+1
 29e:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ihyes
 2a0:	44 f0       	brlt	.+16     	; 0x2b2
        cpi     p1l, 'A'
 2a2:	81 34       	cpi	r24, 0x41	; 65
        brlt    ihno
 2a4:	3c f0       	brlt	.+14     	; 0x2b4
        cpi     p1l, 'F'+1
 2a6:	87 34       	cpi	r24, 0x47	; 71
        brlt    ihyes
 2a8:	24 f0       	brlt	.+8      	; 0x2b2
        cpi     p1l, 'a'
 2aa:	81 36       	cpi	r24, 0x61	; 97
        brlt    ihno
 2ac:	1c f0       	brlt	.+6      	; 0x2b4
        cpi     p1l, 'f'+1
 2ae:	87 36       	cpi	r24, 0x67	; 103
        brge    ihno
 2b0:	0c f4       	brge	.+2      	; 0x2b4

000002b2 <ihyes>:
ihyes:
        set
 2b2:	68 94       	set

000002b4 <ihno>:
ihno:
        pop     p1l
 2b4:	8f 91       	pop	r24
        ret
 2b6:	08 95       	ret

000002b8 <IsWhite>:
        _ENDFUNC
;-----------------------------------------
; IsWhite
;
; Tests RxByte for space or CR
; Returns: T bit
;
        _FUNCTION(IsWhite)

IsWhite:
        push    p1l
 2b8:	8f 93       	push	r24
        lds     p1l, _RxByte
 2ba:	80 91 2a 01 	lds	r24, 0x012A
        clt
 2be:	e8 94       	clt
        cpi     p1l, ' '
 2c0:	80 32       	cpi	r24, 0x20	; 32
        breq    ihyes
 2c2:	b9 f3       	breq	.-18     	; 0x2b2
        cpi     p1l, 0x0D
 2c4:	8d 30       	cpi	r24, 0x0D	; 13
        breq    ihyes
 2c6:	a9 f3       	breq	.-22     	; 0x2b2
        rjmp    ihno
 2c8:	f5 cf       	rjmp	.-22     	; 0x2b4

000002ca <_PutHex>:
        _ENDFUNC
;-----------------------------------------
; void _PutHex(unsigned val, char digits)
;
; Passed:       p2 = Value, p1l = # digits
; RETURN:       Nothing
; USES:         R25, TxByte
; STACK:        2
;
        _FUNCTION(_PutHex)

_PutHex:
        ldi     tmp2, 4          ; Maximum number of digits.
 2ca:	44 e0       	ldi	r20, 0x04	; 4
        mov     tmp3, p2l
 2cc:	56 2f       	mov	r21, r22
        mov     p2l, p1l
 2ce:	68 2f       	mov	r22, r24
        mov     p2h, p1h
 2d0:	79 2f       	mov	r23, r25

000002d2 <ph00>:
ph00:
        lsl     p2l
 2d2:	66 0f       	add	r22, r22
        rol     p2h
 2d4:	77 1f       	adc	r23, r23
        rol     p1l
 2d6:	88 1f       	adc	r24, r24
        lsl     p2l
 2d8:	66 0f       	add	r22, r22
        rol     p2h
 2da:	77 1f       	adc	r23, r23
        rol     p1l
 2dc:	88 1f       	adc	r24, r24
        lsl     p2l
 2de:	66 0f       	add	r22, r22
        rol     p2h
 2e0:	77 1f       	adc	r23, r23
        rol     p1l
 2e2:	88 1f       	adc	r24, r24
        lsl     p2l
 2e4:	66 0f       	add	r22, r22
        rol     p2h
 2e6:	77 1f       	adc	r23, r23
        rol     p1l
 2e8:	88 1f       	adc	r24, r24

        cp      tmp3, tmp2
 2ea:	54 17       	cp	r21, r20
        brlt    ph02
 2ec:	34 f0       	brlt	.+12     	; 0x2fa

        cbr     p1l, 0xF0
 2ee:	8f 70       	andi	r24, 0x0F	; 15
        subi    p1l, lo8(-'0')          ; Addi 0
 2f0:	80 5d       	subi	r24, 0xD0	; 208
        cpi     p1l, lo8('9' + 1)       ; if > 9
 2f2:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ph01                    ; subi 9 and add A
 2f4:	0c f0       	brlt	.+2      	; 0x2f8
        subi    p1l, lo8('9' + 1 - 'A')
 2f6:	89 5f       	subi	r24, 0xF9	; 249

000002f8 <ph01>:
ph01:
        rcall   PutChar
 2f8:	97 df       	rcall	.-210    	; 0x228

000002fa <ph02>:
ph02:
        dec     tmp2
 2fa:	4a 95       	dec	r20
        brne    ph00
 2fc:	51 f7       	brne	.-44     	; 0x2d2

        ret
 2fe:	08 95       	ret

00000300 <PutHexWord>:
        _ENDFUNC
;-----------------------------------------
; Put out a hex word
;
; Passed: Y = word
;
        _FUNCTION(PutHexWord)

PutHexWord:
        ldi     p2l, 4
 300:	64 e0       	ldi	r22, 0x04	; 4
        rjmp    _PutHex
 302:	e3 cf       	rjmp	.-58     	; 0x2ca

00000304 <PutHexByte>:
        _ENDFUNC
;-----------------------------------------
; Put out a two ascii hex byte
; Yl = byte
;
        _FUNCTION(PutHexByte)

PutHexByte:
        ldi     p2l, 2
 304:	62 e0       	ldi	r22, 0x02	; 2
        rjmp    _PutHex
 306:	e1 cf       	rjmp	.-62     	; 0x2ca

00000308 <Hello>:
 308:	0d 00       	.word	0x000d	; ????
 30a:	41 76       	andi	r20, 0x61	; 97
 30c:	72 58       	subi	r23, 0x82	; 130
 30e:	20 4d       	sbci	r18, 0xD0	; 208
 310:	6f 6e       	ori	r22, 0xEF	; 239
 312:	69 74       	andi	r22, 0x49	; 73
 314:	6f 72       	andi	r22, 0x2F	; 47
 316:	20 56       	subi	r18, 0x60	; 96
 318:	32 00       	.word	0x0032	; ????
 31a:	0d 00       	.word	0x000d	; ????
 31c:	0d 00       	.word	0x000d	; ????
 31e:	4d 6f       	ori	r20, 0xFD	; 253
 320:	64 69       	ori	r22, 0x94	; 148
 322:	66 79       	andi	r22, 0x96	; 150
 324:	20 3d       	cpi	r18, 0xD0	; 208
 326:	20 6d       	ori	r18, 0xD0	; 208
 328:	7b 73       	andi	r23, 0x3B	; 59
 32a:	2c 65       	ori	r18, 0x5C	; 92
 32c:	7d 5b       	subi	r23, 0xBD	; 189
 32e:	77 5d       	subi	r23, 0xD7	; 215
 330:	5b 61       	ori	r21, 0x1B	; 27
 332:	61 61       	ori	r22, 0x11	; 17
 334:	61 5d       	subi	r22, 0xD1	; 209
 336:	00 0d       	add	r16, r0
 338:	00 44       	sbci	r16, 0x40	; 64
 33a:	75 6d       	ori	r23, 0xD5	; 213
 33c:	70 20       	and	r7, r0
 33e:	20 20       	and	r2, r0
 340:	3d 20       	and	r3, r13
 342:	64 7b       	andi	r22, 0xB4	; 180
 344:	73 2c       	mov	r7, r3
 346:	65 7d       	andi	r22, 0xD5	; 213
 348:	5b 77       	andi	r21, 0x7B	; 123
 34a:	5d 5b       	subi	r21, 0xBD	; 189
 34c:	61 61       	ori	r22, 0x11	; 17
 34e:	61 61       	ori	r22, 0x11	; 17
 350:	5d 20       	and	r5, r13
 352:	5b 78       	andi	r21, 0x8B	; 139
 354:	78 5d       	subi	r23, 0xD8	; 216
 356:	00 0d       	add	r16, r0
 358:	00 48       	sbci	r16, 0x80	; 128
 35a:	61 6c       	ori	r22, 0xC1	; 193
 35c:	74 20       	and	r7, r4
 35e:	20 20       	and	r2, r0
 360:	3d 20       	and	r3, r13
 362:	68 5b       	subi	r22, 0xB8	; 184
 364:	6f 6f       	ori	r22, 0xFF	; 255
 366:	6f 6f       	ori	r22, 0xFF	; 255
 368:	5d 00       	.word	0x005d	; ????
 36a:	0d 00       	.word	0x000d	; ????
 36c:	53 74       	andi	r21, 0x43	; 67
 36e:	65 70       	andi	r22, 0x05	; 5
 370:	20 20       	and	r2, r0
 372:	20 3d       	cpi	r18, 0xD0	; 208
 374:	20 73       	andi	r18, 0x30	; 48
 376:	5b 6f       	ori	r21, 0xFB	; 251
 378:	6f 6f       	ori	r22, 0xFF	; 255
 37a:	6f 5d       	subi	r22, 0xDF	; 223
 37c:	00 0d       	add	r16, r0
 37e:	00 52       	subi	r16, 0x20	; 32
 380:	65 73       	andi	r22, 0x35	; 53
 382:	75 6d       	ori	r23, 0xD5	; 213
 384:	65 20       	and	r6, r5
 386:	3d 20       	and	r3, r13
 388:	72 5b       	subi	r23, 0xB2	; 178
 38a:	6f 6f       	ori	r22, 0xFF	; 255
 38c:	6f 6f       	ori	r22, 0xFF	; 255
 38e:	5d 00       	.word	0x005d	; ????
 390:	0d 00       	.word	0x000d	; ????
 392:	43 6f       	ori	r20, 0xF3	; 243
 394:	6e 74       	andi	r22, 0x4E	; 78
 396:	65 78       	andi	r22, 0x85	; 133
 398:	74 3d       	cpi	r23, 0xD4	; 212
 39a:	20 78       	andi	r18, 0x80	; 128
 39c:	5b 6f       	ori	r21, 0xFB	; 251
 39e:	6f 6f       	ori	r22, 0xFF	; 255
 3a0:	6f 5d       	subi	r22, 0xDF	; 223
 3a2:	00 0d       	add	r16, r0
 3a4:	00 53       	subi	r16, 0x30	; 48
 3a6:	69 67       	ori	r22, 0x79	; 121
 3a8:	6e 61       	ori	r22, 0x1E	; 30
 3aa:	6c 20       	and	r6, r12
 3ac:	3d 20       	and	r3, r13
 3ae:	69 5b       	subi	r22, 0xB9	; 185
 3b0:	6f 6f       	ori	r22, 0xFF	; 255
 3b2:	6f 6f       	ori	r22, 0xFF	; 255
 3b4:	5d 00       	.word	0x005d	; ????
 3b6:	0d 00       	.word	0x000d	; ????
 3b8:	43 61       	ori	r20, 0x13	; 19
 3ba:	6e 63       	ori	r22, 0x3E	; 62
 3bc:	65 6c       	ori	r22, 0xC5	; 197
 3be:	20 3d       	cpi	r18, 0xD0	; 208
 3c0:	20 63       	ori	r18, 0x30	; 48
 3c2:	5b 6f       	ori	r21, 0xFB	; 251
 3c4:	6f 6f       	ori	r22, 0xFF	; 255
 3c6:	6f 5d       	subi	r22, 0xDF	; 223
 3c8:	00 0d       	add	r16, r0
 3ca:	00 4b       	sbci	r16, 0xB0	; 176
 3cc:	69 6c       	ori	r22, 0xC9	; 201
 3ce:	6c 54       	subi	r22, 0x4C	; 76
 3d0:	73 6b       	ori	r23, 0xB3	; 179
 3d2:	3d 20       	and	r3, r13
 3d4:	6b 5b       	subi	r22, 0xBB	; 187
 3d6:	6f 6f       	ori	r22, 0xFF	; 255
 3d8:	6f 6f       	ori	r22, 0xFF	; 255
 3da:	5d 00       	.word	0x005d	; ????
 3dc:	0d 00       	.word	0x000d	; ????
 3de:	49 6e       	ori	r20, 0xE9	; 233
 3e0:	69 74       	andi	r22, 0x49	; 73
 3e2:	61 73       	andi	r22, 0x31	; 49
 3e4:	6b 3d       	cpi	r22, 0xDB	; 219
 3e6:	20 70       	andi	r18, 0x00	; 0
 3e8:	5b 61       	ori	r21, 0x1B	; 27
 3ea:	61 61       	ori	r22, 0x11	; 17
 3ec:	61 5d       	subi	r22, 0xD1	; 209
 3ee:	00 0d       	add	r16, r0
 3f0:	00 51       	subi	r16, 0x10	; 16
 3f2:	75 69       	ori	r23, 0x95	; 149
 3f4:	74 20       	and	r7, r4
 3f6:	20 20       	and	r2, r0
 3f8:	3d 20       	and	r3, r13
 3fa:	71 00       	.word	0x0071	; ????
 3fc:	0d 00       	.word	0x000d	; ????
	...

00000400 <Monitor>:
 400:	88 e3       	ldi	r24, 0x38	; 56
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	78 d2       	rcall	.+1264   	; 0x8f6
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	93 e0       	ldi	r25, 0x03	; 3

0000040a <Hello1>:
 40a:	e7 de       	rcall	.-562    	; 0x1da
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	e8 2f       	mov	r30, r24
 412:	f9 2f       	mov	r31, r25
 414:	c8 95       	lpm
 416:	00 20       	and	r0, r0
 418:	c1 f7       	brne	.-16     	; 0x40a
 41a:	20 e6       	ldi	r18, 0x60	; 96
 41c:	42 2e       	mov	r4, r18
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	52 2e       	mov	r5, r18
 422:	88 24       	eor	r8, r8
 424:	99 24       	eor	r9, r9
 426:	bb 24       	eor	r11, r11
 428:	aa 24       	eor	r10, r10
 42a:	66 24       	eor	r6, r6
 42c:	77 24       	eor	r7, r7

0000042e <DebugMonitor>:
 42e:	d1 de       	rcall	.-606    	; 0x1d2
 430:	8e e3       	ldi	r24, 0x3E	; 62
 432:	fa de       	rcall	.-524    	; 0x228
 434:	01 d0       	rcall	.+2      	; 0x438
 436:	fb cf       	rjmp	.-10     	; 0x42e

00000438 <m_Parse>:
 438:	ca de       	rcall	.-620    	; 0x1ce
 43a:	8d 36       	cpi	r24, 0x6D	; 109
 43c:	c9 f0       	breq	.+50     	; 0x470
 43e:	84 36       	cpi	r24, 0x64	; 100
 440:	d1 f0       	breq	.+52     	; 0x476
 442:	88 36       	cpi	r24, 0x68	; 104
 444:	49 f1       	breq	.+82     	; 0x498
 446:	83 37       	cpi	r24, 0x73	; 115
 448:	c9 f1       	breq	.+114    	; 0x4bc
 44a:	8b 36       	cpi	r24, 0x6B	; 107
 44c:	a1 f1       	breq	.+104    	; 0x4b6
 44e:	82 37       	cpi	r24, 0x72	; 114
 450:	31 f1       	breq	.+76     	; 0x49e
 452:	89 36       	cpi	r24, 0x69	; 105
 454:	69 f1       	breq	.+90     	; 0x4b0
 456:	83 36       	cpi	r24, 0x63	; 99
 458:	29 f1       	breq	.+74     	; 0x4a4
 45a:	88 37       	cpi	r24, 0x78	; 120
 45c:	31 f1       	breq	.+76     	; 0x4aa
 45e:	80 37       	cpi	r24, 0x70	; 112
 460:	c1 f0       	breq	.+48     	; 0x492
 462:	81 37       	cpi	r24, 0x71	; 113
 464:	11 f0       	breq	.+4      	; 0x46a

00000466 <m_err>:
 466:	8f e3       	ldi	r24, 0x3F	; 63
 468:	df ce       	rjmp	.-578    	; 0x228

0000046a <m_quit>:
 46a:	af 91       	pop	r26
 46c:	af 91       	pop	r26
 46e:	08 95       	ret

00000470 <m_ModifyMemory>:
 470:	50 d0       	rcall	.+160    	; 0x512
 472:	ce f7       	brtc	.-14     	; 0x466
 474:	9b c0       	rjmp	.+310    	; 0x5ac

00000476 <m_DumpMemory>:
 476:	4d d0       	rcall	.+154    	; 0x512
 478:	c8 2e       	mov	r12, r24
 47a:	d9 2e       	mov	r13, r25
 47c:	a6 f7       	brtc	.-24     	; 0x466
 47e:	20 91 2a 01 	lds	r18, 0x012A
 482:	2d 30       	cpi	r18, 0x0D	; 13
 484:	11 f0       	breq	.+4      	; 0x48a
 486:	3c d0       	rcall	.+120    	; 0x500
 488:	76 f7       	brtc	.-36     	; 0x466

0000048a <m1b>:
 48a:	6c 2d       	mov	r22, r12
 48c:	7d 2d       	mov	r23, r13
 48e:	8a 2d       	mov	r24, r10
 490:	6d c0       	rjmp	.+218    	; 0x56c

00000492 <m_InitTask>:
 492:	f9 de       	rcall	.-526    	; 0x286
 494:	46 f7       	brtc	.-48     	; 0x466
 496:	bf c1       	rjmp	.+894    	; 0x816

00000498 <m_HaltProcess>:
 498:	28 d0       	rcall	.+80     	; 0x4ea
 49a:	2e f7       	brtc	.-54     	; 0x466
 49c:	cf c2       	rjmp	.+1438   	; 0xa3c

0000049e <m_ResumeProcess>:
 49e:	25 d0       	rcall	.+74     	; 0x4ea
 4a0:	16 f7       	brtc	.-60     	; 0x466
 4a2:	dc c1       	rjmp	.+952    	; 0x85c

000004a4 <m_CancelTimer>:
 4a4:	22 d0       	rcall	.+68     	; 0x4ea
 4a6:	fe f6       	brtc	.-66     	; 0x466
 4a8:	79 c3       	rjmp	.+1778   	; 0xb9c

000004aa <m_PrintProcessContext>:
 4aa:	1f d0       	rcall	.+62     	; 0x4ea
 4ac:	e6 f6       	brtc	.-72     	; 0x466
 4ae:	bc c0       	rjmp	.+376    	; 0x628

000004b0 <m_SetSemaphore>:
 4b0:	1c d0       	rcall	.+56     	; 0x4ea
 4b2:	ce f6       	brtc	.-78     	; 0x466
 4b4:	20 c2       	rjmp	.+1088   	; 0x8f6

000004b6 <m_Terminate>:
 4b6:	19 d0       	rcall	.+50     	; 0x4ea
 4b8:	b6 f6       	brtc	.-84     	; 0x466
 4ba:	a5 c2       	rjmp	.+1354   	; 0xa06

000004bc <m_StepProcess>:
 4bc:	16 d0       	rcall	.+44     	; 0x4ea
 4be:	9e f6       	brtc	.-90     	; 0x466
 4c0:	87 d2       	rcall	.+1294   	; 0x9d0
 4c2:	88 23       	and	r24, r24
 4c4:	09 f4       	brne	.+2      	; 0x4c8
 4c6:	08 95       	ret

000004c8 <ms_NOTSUSPENDED>:
 4c8:	84 de       	rcall	.-760    	; 0x1d2
 4ca:	88 2d       	mov	r24, r8
 4cc:	99 2d       	mov	r25, r9
 4ce:	18 df       	rcall	.-464    	; 0x300
 4d0:	86 ed       	ldi	r24, 0xD6	; 214
 4d2:	94 e0       	ldi	r25, 0x04	; 4
 4d4:	82 ce       	rjmp	.-764    	; 0x1da

000004d6 <NotSuspended>:
 4d6:	20 2d       	mov	r18, r0
 4d8:	20 4e       	sbci	r18, 0xE0	; 224
 4da:	6f 74       	andi	r22, 0x4F	; 79
 4dc:	20 53       	subi	r18, 0x30	; 48
 4de:	75 73       	andi	r23, 0x35	; 53
 4e0:	70 65       	ori	r23, 0x50	; 80
 4e2:	6e 64       	ori	r22, 0x4E	; 78
 4e4:	65 64       	ori	r22, 0x45	; 69
 4e6:	21 0d       	add	r18, r1
	...

000004ea <GetObjectID>:
 4ea:	cd de       	rcall	.-614    	; 0x286
 4ec:	16 f0       	brts	.+4      	; 0x4f2
 4ee:	e4 de       	rcall	.-568    	; 0x2b8
 4f0:	36 f4       	brtc	.+12     	; 0x4fe

000004f2 <goi00>:
 4f2:	66 23       	and	r22, r22
 4f4:	11 f4       	brne	.+4      	; 0x4fa
 4f6:	88 2d       	mov	r24, r8
 4f8:	99 2d       	mov	r25, r9

000004fa <goi01>:
 4fa:	88 2e       	mov	r8, r24
 4fc:	99 2e       	mov	r9, r25

000004fe <goi02>:
 4fe:	08 95       	ret

00000500 <GetDumpLength>:
 500:	c4 de       	rcall	.-632    	; 0x28a
 502:	16 f0       	brts	.+4      	; 0x508
 504:	d9 de       	rcall	.-590    	; 0x2b8
 506:	26 f4       	brtc	.+8      	; 0x510

00000508 <gdl00>:
 508:	66 23       	and	r22, r22
 50a:	09 f4       	brne	.+2      	; 0x50e
 50c:	8a 2d       	mov	r24, r10

0000050e <gdl01>:
 50e:	a8 2e       	mov	r10, r24

00000510 <gdl02>:
 510:	08 95       	ret

00000512 <GetFlagsAndAddress>:
 512:	e8 94       	clt
 514:	5c de       	rcall	.-840    	; 0x1ce
 516:	2b 2d       	mov	r18, r11
 518:	83 37       	cpi	r24, 0x73	; 115
 51a:	11 f4       	brne	.+4      	; 0x520
 51c:	2d 7f       	andi	r18, 0xFD	; 253
 51e:	03 c0       	rjmp	.+6      	; 0x526

00000520 <gbTRYEERAM>:
 520:	85 36       	cpi	r24, 0x65	; 101
 522:	e9 f4       	brne	.+58     	; 0x55e
 524:	22 60       	ori	r18, 0x02	; 2

00000526 <gbCONTINUE>:
 526:	b2 2e       	mov	r11, r18
 528:	ae de       	rcall	.-676    	; 0x286
 52a:	2b 2d       	mov	r18, r11
 52c:	1e f4       	brtc	.+6      	; 0x534
 52e:	2e 7f       	andi	r18, 0xFE	; 254
 530:	b2 2e       	mov	r11, r18
 532:	0c c0       	rjmp	.+24     	; 0x54c

00000534 <gbCHECKWORDFLAG>:
 534:	2e 7f       	andi	r18, 0xFE	; 254
 536:	b2 2e       	mov	r11, r18
 538:	30 91 2a 01 	lds	r19, 0x012A
 53c:	37 37       	cpi	r19, 0x77	; 119
 53e:	21 f4       	brne	.+8      	; 0x548
 540:	21 60       	ori	r18, 0x01	; 1
 542:	b2 2e       	mov	r11, r18
 544:	a0 de       	rcall	.-704    	; 0x286
 546:	16 f0       	brts	.+4      	; 0x54c

00000548 <gbCHECKFORWHITESPACE>:
 548:	b7 de       	rcall	.-658    	; 0x2b8
 54a:	4e f4       	brtc	.+18     	; 0x55e

0000054c <gbUPDATEADDRESS>:
 54c:	66 23       	and	r22, r22
 54e:	39 f0       	breq	.+14     	; 0x55e
 550:	b1 fe       	sbrs	r11, 1
 552:	03 c0       	rjmp	.+6      	; 0x55a
 554:	68 2e       	mov	r6, r24
 556:	79 2e       	mov	r7, r25
 558:	02 c0       	rjmp	.+4      	; 0x55e

0000055a <gbAddress>:
 55a:	48 2e       	mov	r4, r24
 55c:	59 2e       	mov	r5, r25

0000055e <gbDONE>:
 55e:	84 2d       	mov	r24, r4
 560:	95 2d       	mov	r25, r5
 562:	b1 fc       	sbrc	r11, 1
 564:	86 2d       	mov	r24, r6
 566:	b1 fc       	sbrc	r11, 1
 568:	97 2d       	mov	r25, r7
 56a:	08 95       	ret

0000056c <_DumpMemory>:
 56c:	b0 fe       	sbrs	r11, 0
 56e:	03 c0       	rjmp	.+6      	; 0x576
 570:	6e 7f       	andi	r22, 0xFE	; 254
 572:	80 fd       	sbrc	r24, 0
 574:	83 95       	inc	r24

00000576 <m10f>:
 576:	c6 2e       	mov	r12, r22
 578:	d7 2e       	mov	r13, r23
 57a:	18 2e       	mov	r1, r24

0000057c <m10c>:
 57c:	2a de       	rcall	.-940    	; 0x1d2
 57e:	9d 2d       	mov	r25, r13
 580:	8c 2d       	mov	r24, r12
 582:	be de       	rcall	.-644    	; 0x300

00000584 <m10d>:
 584:	28 de       	rcall	.-944    	; 0x1d6
 586:	8b d0       	rcall	.+278    	; 0x69e
 588:	b0 fc       	sbrc	r11, 0
 58a:	04 c0       	rjmp	.+8      	; 0x594
 58c:	bb de       	rcall	.-650    	; 0x304
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	03 c0       	rjmp	.+6      	; 0x59a

00000594 <m11>:
 594:	b5 de       	rcall	.-662    	; 0x300
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	90 e0       	ldi	r25, 0x00	; 0

0000059a <m12>:
 59a:	c8 0e       	add	r12, r24
 59c:	d9 1e       	adc	r13, r25
 59e:	18 1a       	sub	r1, r24
 5a0:	21 f0       	breq	.+8      	; 0x5aa

000005a2 <m10e>:
 5a2:	ec 2d       	mov	r30, r12
 5a4:	ef 70       	andi	r30, 0x0F	; 15
 5a6:	51 f3       	breq	.-44     	; 0x57c
 5a8:	ed cf       	rjmp	.-38     	; 0x584

000005aa <m10exit>:
 5aa:	08 95       	ret

000005ac <_ModifyMemory>:
 5ac:	c8 2e       	mov	r12, r24
 5ae:	d9 2e       	mov	r13, r25

000005b0 <_ModifyMemory_>:
 5b0:	10 de       	rcall	.-992    	; 0x1d2
 5b2:	8c 2d       	mov	r24, r12
 5b4:	9d 2d       	mov	r25, r13
 5b6:	a4 de       	rcall	.-696    	; 0x300
 5b8:	0e de       	rcall	.-996    	; 0x1d6

000005ba <_mmNEXT>:
 5ba:	71 d0       	rcall	.+226    	; 0x69e
 5bc:	b0 fc       	sbrc	r11, 0
 5be:	a0 de       	rcall	.-704    	; 0x300
 5c0:	b0 fe       	sbrs	r11, 0
 5c2:	a0 de       	rcall	.-704    	; 0x304

000005c4 <_mmGETDATA>:
 5c4:	8d e2       	ldi	r24, 0x2D	; 45
 5c6:	30 de       	rcall	.-928    	; 0x228
 5c8:	b0 fe       	sbrs	r11, 0
 5ca:	5f de       	rcall	.-834    	; 0x28a
 5cc:	b0 fc       	sbrc	r11, 0
 5ce:	5b de       	rcall	.-842    	; 0x286
 5d0:	66 f4       	brtc	.+24     	; 0x5ea

000005d2 <_mmWRITE>:
 5d2:	76 d0       	rcall	.+236    	; 0x6c0
 5d4:	00 de       	rcall	.-1024   	; 0x1d6

000005d6 <_mmGOTONEXT>:
 5d6:	e1 e0       	ldi	r30, 0x01	; 1
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	b0 fc       	sbrc	r11, 0
 5dc:	31 96       	adiw	r30, 0x01	; 1
 5de:	ce 0e       	add	r12, r30
 5e0:	df 1e       	adc	r13, r31
 5e2:	ec 2d       	mov	r30, r12
 5e4:	ef 70       	andi	r30, 0x0F	; 15
 5e6:	21 f3       	breq	.-56     	; 0x5b0
 5e8:	e8 cf       	rjmp	.-48     	; 0x5ba

000005ea <_mmNODATA>:
 5ea:	66 de       	rcall	.-820    	; 0x2b8
 5ec:	36 f4       	brtc	.+12     	; 0x5fa
 5ee:	66 23       	and	r22, r22
 5f0:	81 f7       	brne	.-32     	; 0x5d2
 5f2:	20 91 2a 01 	lds	r18, 0x012A
 5f6:	2d 30       	cpi	r18, 0x0D	; 13
 5f8:	71 f7       	brne	.-36     	; 0x5d6

000005fa <_mmDONE>:
 5fa:	08 95       	ret

000005fc <ctdt0>:
 5fc:	0d 50       	subi	r16, 0x0D	; 13
 5fe:	49 44       	sbci	r20, 0x49	; 73
 600:	20 46       	sbci	r18, 0x60	; 96
 602:	6c 67       	ori	r22, 0x7C	; 124
 604:	20 50       	subi	r18, 0x00	; 0
 606:	72 69       	ori	r23, 0x92	; 146
 608:	20 46       	sbci	r18, 0x60	; 96
 60a:	72 61       	ori	r23, 0x12	; 18
 60c:	6d 65       	ori	r22, 0x5D	; 93
 60e:	20 53       	subi	r18, 0x30	; 48
 610:	52 0d       	add	r21, r2
	...

00000613 <ctdt1>:
 613:	52 30       	cpi	r21, 0x02	; 2
 615:	20 20       	and	r2, r0
	...

00000618 <ctdt2>:
 618:	52 31       	cpi	r21, 0x12	; 18
 61a:	36 20       	and	r3, r6
	...

0000061d <ctdt3>:
 61d:	0d 20       	and	r0, r13
 61f:	20 20       	and	r2, r0
 621:	20 20       	and	r2, r0
 623:	50 43       	sbci	r21, 0x30	; 48
 625:	20 20       	and	r2, r0
	...

00000628 <_PrintContext>:
 628:	95 e0       	ldi	r25, 0x05	; 5
 62a:	8c ef       	ldi	r24, 0xFC	; 252
 62c:	d6 dd       	rcall	.-1108   	; 0x1da
 62e:	88 2d       	mov	r24, r8
 630:	99 2d       	mov	r25, r9
 632:	66 de       	rcall	.-820    	; 0x300
 634:	d0 dd       	rcall	.-1120   	; 0x1d6
 636:	e8 2d       	mov	r30, r8
 638:	f9 2d       	mov	r31, r9
 63a:	82 81       	ldd	r24, Z+2	; 0x02
 63c:	63 de       	rcall	.-826    	; 0x304
 63e:	cb dd       	rcall	.-1130   	; 0x1d6
 640:	e8 2d       	mov	r30, r8
 642:	f9 2d       	mov	r31, r9
 644:	83 81       	ldd	r24, Z+3	; 0x03
 646:	5e de       	rcall	.-836    	; 0x304
 648:	c6 dd       	rcall	.-1140   	; 0x1d6
 64a:	c5 dd       	rcall	.-1142   	; 0x1d6
 64c:	e8 2d       	mov	r30, r8
 64e:	f9 2d       	mov	r31, r9
 650:	c4 81       	ldd	r28, Z+4	; 0x04
 652:	d5 81       	ldd	r29, Z+5	; 0x05
 654:	8c 2f       	mov	r24, r28
 656:	9d 2f       	mov	r25, r29
 658:	53 de       	rcall	.-858    	; 0x300
 65a:	bd dd       	rcall	.-1158   	; 0x1d6
 65c:	bc dd       	rcall	.-1160   	; 0x1d6
 65e:	21 96       	adiw	r28, 0x01	; 1
 660:	89 91       	ld	r24, Y+
 662:	50 de       	rcall	.-864    	; 0x304

00000664 <Loop>:
 664:	0e d0       	rcall	.+28     	; 0x682
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	83 e1       	ldi	r24, 0x13	; 19
 66a:	10 d0       	rcall	.+32     	; 0x68c
 66c:	0a d0       	rcall	.+20     	; 0x682
 66e:	96 e0       	ldi	r25, 0x06	; 6
 670:	88 e1       	ldi	r24, 0x18	; 24
 672:	0c d0       	rcall	.+24     	; 0x68c
 674:	96 e0       	ldi	r25, 0x06	; 6
 676:	8d e1       	ldi	r24, 0x1D	; 29
 678:	b0 dd       	rcall	.-1184   	; 0x1da
 67a:	99 91       	ld	r25, Y+
 67c:	88 81       	ld	r24, Y
 67e:	40 de       	rcall	.-896    	; 0x300
 680:	08 95       	ret

00000682 <Print16RegPre>:
 682:	a7 dd       	rcall	.-1202   	; 0x1d2
 684:	8c 2f       	mov	r24, r28
 686:	9d 2f       	mov	r25, r29
 688:	3b de       	rcall	.-906    	; 0x300
 68a:	a5 cd       	rjmp	.-1206   	; 0x1d6

0000068c <Print16Reg>:
 68c:	a6 dd       	rcall	.-1204   	; 0x1da
 68e:	e0 e1       	ldi	r30, 0x10	; 16
 690:	1e 2e       	mov	r1, r30

00000692 <p16r0>:
 692:	89 91       	ld	r24, Y+
 694:	37 de       	rcall	.-914    	; 0x304
 696:	9f dd       	rcall	.-1218   	; 0x1d6
 698:	1a 94       	dec	r1
 69a:	d9 f7       	brne	.-10     	; 0x692
 69c:	08 95       	ret

0000069e <GetByteWord>:
 69e:	b1 fc       	sbrc	r11, 1
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2
 6a2:	ec 2d       	mov	r30, r12
 6a4:	fd 2d       	mov	r31, r13
 6a6:	80 81       	ld	r24, Z
 6a8:	b0 fe       	sbrs	r11, 0
 6aa:	08 95       	ret
 6ac:	91 81       	ldd	r25, Z+1	; 0x01
 6ae:	80 81       	ld	r24, Z
 6b0:	08 95       	ret

000006b2 <gbwEEPROM>:
 6b2:	9d 2d       	mov	r25, r13
 6b4:	8c 2d       	mov	r24, r12
 6b6:	b0 fe       	sbrs	r11, 0
 6b8:	8c d2       	rcall	.+1304   	; 0xbd2
 6ba:	b0 fc       	sbrc	r11, 0
 6bc:	99 d2       	rcall	.+1330   	; 0xbf0

000006be <gwbEXIT>:
 6be:	08 95       	ret

000006c0 <PutByteWord>:
 6c0:	b1 fc       	sbrc	r11, 1
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4
 6c4:	ec 2d       	mov	r30, r12
 6c6:	fd 2d       	mov	r31, r13
 6c8:	80 83       	st	Z, r24
 6ca:	b0 fe       	sbrs	r11, 0
 6cc:	08 95       	ret
 6ce:	91 83       	std	Z+1, r25	; 0x01
 6d0:	80 83       	st	Z, r24
 6d2:	08 95       	ret

000006d4 <pbwEEPROM>:
 6d4:	e9 2e       	mov	r14, r25
 6d6:	68 2f       	mov	r22, r24
 6d8:	9d 2d       	mov	r25, r13
 6da:	8c 2d       	mov	r24, r12
 6dc:	a0 d2       	rcall	.+1344   	; 0xc1e
 6de:	b0 fe       	sbrs	r11, 0
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee
 6e2:	8c 2d       	mov	r24, r12
 6e4:	9d 2d       	mov	r25, r13
 6e6:	8f 5f       	subi	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	6e 2d       	mov	r22, r14
 6ec:	98 d2       	rcall	.+1328   	; 0xc1e

000006ee <pbwEXIT>:
 6ee:	08 95       	ret

000006f0 <IntProlog>:
 6f0:	df 93       	push	r29
 6f2:	cf 93       	push	r28
 6f4:	bf 93       	push	r27
 6f6:	af 93       	push	r26
 6f8:	9f 93       	push	r25
 6fa:	d1 e0       	ldi	r29, 0x01	; 1
 6fc:	cc e2       	ldi	r28, 0x2C	; 44
 6fe:	9f b7       	in	r25, 0x3f	; 63
 700:	ae 81       	ldd	r26, Y+6	; 0x06
 702:	af 5f       	subi	r26, 0xFF	; 255
 704:	ae 83       	std	Y+6, r26	; 0x06
 706:	60 f0       	brcs	.+24     	; 0x720
 708:	aa 81       	ldd	r26, Y+2	; 0x02
 70a:	bb 81       	ldd	r27, Y+3	; 0x03
 70c:	ba 2b       	or	r27, r26
 70e:	41 f4       	brne	.+16     	; 0x720
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	fe 81       	ldd	r31, Y+6	; 0x06
 716:	ef 81       	ldd	r30, Y+7	; 0x07
 718:	29 96       	adiw	r28, 0x09	; 9
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	09 94       	ijmp

00000720 <SaveContext>:
 720:	8f 93       	push	r24
 722:	7f 93       	push	r23
 724:	6f 93       	push	r22
 726:	5f 93       	push	r21
 728:	4f 93       	push	r20
 72a:	3f 93       	push	r19
 72c:	2f 93       	push	r18
 72e:	1f 93       	push	r17
 730:	0f 93       	push	r16
 732:	ff 92       	push	r15
 734:	ef 92       	push	r14
 736:	df 92       	push	r13
 738:	cf 92       	push	r12
 73a:	bf 92       	push	r11
 73c:	af 92       	push	r10
 73e:	9f 92       	push	r9
 740:	8f 92       	push	r8
 742:	7f 92       	push	r7
 744:	6f 92       	push	r6
 746:	5f 92       	push	r5
 748:	4f 92       	push	r4
 74a:	3f 92       	push	r3
 74c:	2f 92       	push	r2
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	9f 93       	push	r25
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	9b 8d       	ldd	r25, Y+27	; 0x1b
 75a:	39 a1       	ldd	r19, Y+33	; 0x21
 75c:	48 a1       	ldd	r20, Y+32	; 0x20
 75e:	e8 a3       	std	Y+32, r30	; 0x20
 760:	f9 a3       	std	Y+33, r31	; 0x21
 762:	70 f0       	brcs	.+28     	; 0x780
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	ec e2       	ldi	r30, 0x2C	; 44
 768:	d3 81       	ldd	r29, Z+3	; 0x03
 76a:	c2 81       	ldd	r28, Z+2	; 0x02
 76c:	be b7       	in	r27, 0x3e	; 62
 76e:	ad b7       	in	r26, 0x3d	; 61
 770:	bd 83       	std	Y+5, r27	; 0x05
 772:	ac 83       	std	Y+4, r26	; 0x04
 774:	24 81       	ldd	r18, Z+4	; 0x04
 776:	2d bf       	out	0x3d, r18	; 61
 778:	25 81       	ldd	r18, Z+5	; 0x05
 77a:	2e bf       	out	0x3e, r18	; 62
 77c:	ca 2f       	mov	r28, r26
 77e:	db 2f       	mov	r29, r27

00000780 <AlreadyInKernel>:
 780:	11 24       	eor	r1, r1
 782:	e3 2f       	mov	r30, r19
 784:	f4 2f       	mov	r31, r20
 786:	09 94       	ijmp

00000788 <Epilog>:
 788:	ef 91       	pop	r30
 78a:	ef 91       	pop	r30

0000078c <_Epilog>:
 78c:	ec e2       	ldi	r30, 0x2C	; 44
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	f8 94       	cli
 792:	06 81       	ldd	r16, Z+6	; 0x06
 794:	0a 95       	dec	r16
 796:	06 83       	std	Z+6, r16	; 0x06
 798:	54 f4       	brge	.+20     	; 0x7ae
 79a:	d1 81       	ldd	r29, Z+1	; 0x01
 79c:	c0 81       	ld	r28, Z
 79e:	d3 83       	std	Z+3, r29	; 0x03
 7a0:	c2 83       	std	Z+2, r28	; 0x02
 7a2:	20 96       	adiw	r28, 0x00	; 0
 7a4:	39 f1       	breq	.+78     	; 0x7f4
 7a6:	bd 81       	ldd	r27, Y+5	; 0x05
 7a8:	ac 81       	ldd	r26, Y+4	; 0x04
 7aa:	ad bf       	out	0x3d, r26	; 61
 7ac:	be bf       	out	0x3e, r27	; 62

000007ae <SkipTaskSwap>:
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	2f 90       	pop	r2
 7b8:	3f 90       	pop	r3
 7ba:	4f 90       	pop	r4
 7bc:	5f 90       	pop	r5
 7be:	6f 90       	pop	r6
 7c0:	7f 90       	pop	r7
 7c2:	8f 90       	pop	r8
 7c4:	9f 90       	pop	r9
 7c6:	af 90       	pop	r10
 7c8:	bf 90       	pop	r11
 7ca:	cf 90       	pop	r12
 7cc:	df 90       	pop	r13
 7ce:	ef 90       	pop	r14
 7d0:	ff 90       	pop	r15
 7d2:	0f 91       	pop	r16
 7d4:	1f 91       	pop	r17
 7d6:	2f 91       	pop	r18
 7d8:	3f 91       	pop	r19
 7da:	4f 91       	pop	r20
 7dc:	5f 91       	pop	r21
 7de:	6f 91       	pop	r22
 7e0:	7f 91       	pop	r23
 7e2:	8f 91       	pop	r24
 7e4:	9f 91       	pop	r25
 7e6:	af 91       	pop	r26
 7e8:	bf 91       	pop	r27
 7ea:	cf 91       	pop	r28
 7ec:	df 91       	pop	r29
 7ee:	ef 91       	pop	r30
 7f0:	ff 91       	pop	r31
 7f2:	18 95       	reti

000007f4 <_IdleTask>:
 7f4:	78 94       	sei
 7f6:	88 95       	sleep

000007f8 <snooze>:
 7f8:	fd cf       	rjmp	.-6      	; 0x7f4

000007fa <AvrXSetKernelStack>:
 7fa:	ff 91       	pop	r31
 7fc:	ef 91       	pop	r30
 7fe:	80 50       	subi	r24, 0x00	; 0
 800:	90 40       	sbci	r25, 0x00	; 0
 802:	11 f4       	brne	.+4      	; 0x808
 804:	8d b7       	in	r24, 0x3d	; 61
 806:	9e b7       	in	r25, 0x3e	; 62

00000808 <sks1>:
 808:	80 93 30 01 	sts	0x0130, r24
 80c:	90 93 31 01 	sts	0x0131, r25
 810:	09 94       	ijmp

00000812 <AvrXRunTask>:
 812:	01 d0       	rcall	.+2      	; 0x816
 814:	23 c0       	rjmp	.+70     	; 0x85c

00000816 <AvrXInitTask>:
 816:	e8 2f       	mov	r30, r24
 818:	f9 2f       	mov	r31, r25
 81a:	1d d0       	rcall	.+58     	; 0x856
 81c:	a0 2d       	mov	r26, r0
 81e:	1b d0       	rcall	.+54     	; 0x856
 820:	b0 2d       	mov	r27, r0
 822:	19 d0       	rcall	.+50     	; 0x856
 824:	0c 92       	st	X, r0
 826:	17 d0       	rcall	.+46     	; 0x856
 828:	0e 92       	st	-X, r0
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	51 e2       	ldi	r21, 0x21	; 33

00000830 <PushRegisters>:
 830:	4e 93       	st	-X, r20
 832:	5a 95       	dec	r21
 834:	e9 f7       	brne	.-6      	; 0x830
 836:	11 97       	sbiw	r26, 0x01	; 1
 838:	0e d0       	rcall	.+28     	; 0x856
 83a:	80 2d       	mov	r24, r0
 83c:	0c d0       	rcall	.+24     	; 0x856
 83e:	90 2d       	mov	r25, r0
 840:	0a d0       	rcall	.+20     	; 0x856
 842:	e8 2f       	mov	r30, r24
 844:	f9 2f       	mov	r31, r25
 846:	a4 83       	std	Z+4, r26	; 0x04
 848:	b5 83       	std	Z+5, r27	; 0x05
 84a:	03 82       	std	Z+3, r0	; 0x03
 84c:	a0 e6       	ldi	r26, 0x60	; 96
 84e:	a2 83       	std	Z+2, r26	; 0x02
 850:	41 83       	std	Z+1, r20	; 0x01
 852:	40 83       	st	Z, r20
 854:	08 95       	ret

00000856 <lpm_inc>:
 856:	c8 95       	lpm
 858:	31 96       	adiw	r30, 0x01	; 1
 85a:	08 95       	ret

0000085c <AvrXResume>:
 85c:	f8 94       	cli
 85e:	48 df       	rcall	.-368    	; 0x6f0
 860:	78 94       	sei
 862:	e8 2f       	mov	r30, r24
 864:	f9 2f       	mov	r31, r25
 866:	22 81       	ldd	r18, Z+2	; 0x02
 868:	2f 7d       	andi	r18, 0xDF	; 223
 86a:	22 83       	std	Z+2, r18	; 0x02
 86c:	26 ff       	sbrs	r18, 6
 86e:	03 c0       	rjmp	.+6      	; 0x876
 870:	2f 7b       	andi	r18, 0xBF	; 191
 872:	22 83       	std	Z+2, r18	; 0x02
 874:	01 d0       	rcall	.+2      	; 0x878

00000876 <ar00>:
 876:	8a cf       	rjmp	.-236    	; 0x78c

00000878 <_QueuePid>:
 878:	e8 2f       	mov	r30, r24
 87a:	f9 2f       	mov	r31, r25
 87c:	3f ef       	ldi	r19, 0xFF	; 255
 87e:	22 81       	ldd	r18, Z+2	; 0x02
 880:	20 73       	andi	r18, 0x30	; 48
 882:	e1 f4       	brne	.+56     	; 0x8bc
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	43 81       	ldd	r20, Z+3	; 0x03
 88a:	cc e2       	ldi	r28, 0x2C	; 44
 88c:	d1 e0       	ldi	r29, 0x01	; 1
 88e:	2f b7       	in	r18, 0x3f	; 63
 890:	f8 94       	cli

00000892 <_qp00>:
 892:	33 95       	inc	r19
 894:	ec 2f       	mov	r30, r28
 896:	fd 2f       	mov	r31, r29
 898:	c0 81       	ld	r28, Z
 89a:	d1 81       	ldd	r29, Z+1	; 0x01
 89c:	20 96       	adiw	r28, 0x00	; 0
 89e:	19 f0       	breq	.+6      	; 0x8a6
 8a0:	5b 81       	ldd	r21, Y+3	; 0x03
 8a2:	45 17       	cp	r20, r21
 8a4:	b0 f7       	brcc	.-20     	; 0x892

000008a6 <_qp01>:
 8a6:	91 83       	std	Z+1, r25	; 0x01
 8a8:	80 83       	st	Z, r24
 8aa:	f9 2f       	mov	r31, r25
 8ac:	e8 2f       	mov	r30, r24
 8ae:	d1 83       	std	Z+1, r29	; 0x01
 8b0:	c0 83       	st	Z, r28
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	83 2f       	mov	r24, r19
 8b8:	2f bf       	out	0x3f, r18	; 63
 8ba:	08 95       	ret

000008bc <_qpSUSPEND>:
 8bc:	83 2f       	mov	r24, r19
 8be:	20 64       	ori	r18, 0x40	; 64
 8c0:	22 83       	std	Z+2, r18	; 0x02
 8c2:	08 95       	ret

000008c4 <AvrXWaitMessageAck>:
 8c4:	8e 5f       	subi	r24, 0xFE	; 254
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255

000008c8 <AvrXWaitSemaphore>:
 8c8:	e8 2f       	mov	r30, r24
 8ca:	f9 2f       	mov	r31, r25
 8cc:	f8 94       	cli
 8ce:	20 81       	ld	r18, Z
 8d0:	31 81       	ldd	r19, Z+1	; 0x01
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	30 40       	sbci	r19, 0x00	; 0
 8d6:	19 f4       	brne	.+6      	; 0x8de
 8d8:	20 83       	st	Z, r18
 8da:	31 83       	std	Z+1, r19	; 0x01
 8dc:	18 95       	reti

000008de <aws01>:
 8de:	08 df       	rcall	.-496    	; 0x6f0
 8e0:	ec e2       	ldi	r30, 0x2C	; 44
 8e2:	f1 e0       	ldi	r31, 0x01	; 1
 8e4:	73 81       	ldd	r23, Z+3	; 0x03
 8e6:	62 81       	ldd	r22, Z+2	; 0x02
 8e8:	3c d0       	rcall	.+120    	; 0x962
 8ea:	e8 2f       	mov	r30, r24
 8ec:	f9 2f       	mov	r31, r25
 8ee:	2b d0       	rcall	.+86     	; 0x946
 8f0:	4d cf       	rjmp	.-358    	; 0x78c

000008f2 <AvrXAckMessage>:
 8f2:	8e 5f       	subi	r24, 0xFE	; 254
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255

000008f6 <AvrXSetSemaphore>:
 8f6:	0c d0       	rcall	.+24     	; 0x910
 8f8:	90 91 32 01 	lds	r25, 0x0132
 8fc:	93 95       	inc	r25
 8fe:	89 2b       	or	r24, r25
 900:	09 f0       	breq	.+2      	; 0x904
 902:	08 95       	ret

00000904 <axss0>:
 904:	f8 94       	cli
 906:	f4 de       	rcall	.-536    	; 0x6f0
 908:	78 94       	sei
 90a:	40 cf       	rjmp	.-384    	; 0x78c

0000090c <AvrXIntSetObjectSemaphore>:
 90c:	8e 5f       	subi	r24, 0xFE	; 254
 90e:	9f 4f       	sbci	r25, 0xFF	; 255

00000910 <AvrXIntSetSemaphore>:
 910:	e8 2f       	mov	r30, r24
 912:	f9 2f       	mov	r31, r25
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	2f b7       	in	r18, 0x3f	; 63
 91a:	f8 94       	cli
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	60 81       	ld	r22, Z
 920:	86 17       	cp	r24, r22
 922:	97 07       	cpc	r25, r23
 924:	28 f0       	brcs	.+10     	; 0x930
 926:	80 83       	st	Z, r24
 928:	91 83       	std	Z+1, r25	; 0x01

0000092a <BogusSemaphore>:
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	2f bf       	out	0x3f, r18	; 63
 92e:	08 95       	ret

00000930 <aiss00>:
 930:	8f e5       	ldi	r24, 0x5F	; 95
 932:	86 17       	cp	r24, r22
 934:	97 07       	cpc	r25, r23
 936:	c8 f7       	brcc	.-14     	; 0x92a
 938:	23 d0       	rcall	.+70     	; 0x980
 93a:	2f bf       	out	0x3f, r18	; 63
 93c:	86 2f       	mov	r24, r22
 93e:	97 2f       	mov	r25, r23
 940:	9b cf       	rjmp	.-202    	; 0x878

00000942 <_ao00>:
 942:	e2 2f       	mov	r30, r18
 944:	f3 2f       	mov	r31, r19

00000946 <_AppendObject>:
 946:	20 81       	ld	r18, Z
 948:	31 81       	ldd	r19, Z+1	; 0x01
 94a:	20 50       	subi	r18, 0x00	; 0
 94c:	30 40       	sbci	r19, 0x00	; 0
 94e:	c9 f7       	brne	.-14     	; 0x942
 950:	71 83       	std	Z+1, r23	; 0x01
 952:	60 83       	st	Z, r22
 954:	f7 2f       	mov	r31, r23
 956:	e6 2f       	mov	r30, r22
 958:	31 83       	std	Z+1, r19	; 0x01
 95a:	20 83       	st	Z, r18
 95c:	08 95       	ret

0000095e <_ro00>:
 95e:	f3 2f       	mov	r31, r19
 960:	e2 2f       	mov	r30, r18

00000962 <_RemoveObject>:
 962:	20 81       	ld	r18, Z
 964:	31 81       	ldd	r19, Z+1	; 0x01
 966:	62 17       	cp	r22, r18
 968:	73 07       	cpc	r23, r19
 96a:	51 f0       	breq	.+20     	; 0x980
 96c:	20 50       	subi	r18, 0x00	; 0
 96e:	30 40       	sbci	r19, 0x00	; 0
 970:	b1 f7       	brne	.-20     	; 0x95e
 972:	08 95       	ret

00000974 <_RemoveFirstObject>:
 974:	60 81       	ld	r22, Z
 976:	71 81       	ldd	r23, Z+1	; 0x01
 978:	60 50       	subi	r22, 0x00	; 0
 97a:	70 40       	sbci	r23, 0x00	; 0
 97c:	09 f4       	brne	.+2      	; 0x980
 97e:	08 95       	ret

00000980 <_RemoveObjectAt>:
 980:	4c 2f       	mov	r20, r28
 982:	5d 2f       	mov	r21, r29
 984:	c6 2f       	mov	r28, r22
 986:	d7 2f       	mov	r29, r23
 988:	79 81       	ldd	r23, Y+1	; 0x01
 98a:	68 81       	ld	r22, Y
 98c:	71 83       	std	Z+1, r23	; 0x01
 98e:	60 83       	st	Z, r22
 990:	e6 2f       	mov	r30, r22
 992:	f7 2f       	mov	r31, r23
 994:	66 27       	eor	r22, r22
 996:	68 83       	st	Y, r22
 998:	69 83       	std	Y+1, r22	; 0x01
 99a:	7d 2f       	mov	r23, r29
 99c:	6c 2f       	mov	r22, r28
 99e:	c4 2f       	mov	r28, r20
 9a0:	d5 2f       	mov	r29, r21
 9a2:	98 94       	clz
 9a4:	08 95       	ret

000009a6 <AvrXSingleStepNext>:
 9a6:	f8 94       	cli
 9a8:	a3 de       	rcall	.-698    	; 0x6f0
 9aa:	78 94       	sei
 9ac:	f9 2f       	mov	r31, r25
 9ae:	e8 2f       	mov	r30, r24
 9b0:	a2 81       	ldd	r26, Z+2	; 0x02
 9b2:	a6 ff       	sbrs	r26, 6
 9b4:	1d c0       	rjmp	.+58     	; 0x9f0
 9b6:	a0 68       	ori	r26, 0x80	; 128
 9b8:	a2 83       	std	Z+2, r26	; 0x02
 9ba:	ec e2       	ldi	r30, 0x2C	; 44
 9bc:	f1 e0       	ldi	r31, 0x01	; 1
 9be:	b1 81       	ldd	r27, Z+1	; 0x01
 9c0:	a0 81       	ld	r26, Z
 9c2:	91 83       	std	Z+1, r25	; 0x01
 9c4:	80 83       	st	Z, r24
 9c6:	f9 2f       	mov	r31, r25
 9c8:	e8 2f       	mov	r30, r24
 9ca:	b1 83       	std	Z+1, r27	; 0x01
 9cc:	a0 83       	st	Z, r26
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec

000009d0 <AvrXStepNext>:
 9d0:	f8 94       	cli
 9d2:	8e de       	rcall	.-740    	; 0x6f0
 9d4:	78 94       	sei
 9d6:	f9 2f       	mov	r31, r25
 9d8:	e8 2f       	mov	r30, r24
 9da:	a2 81       	ldd	r26, Z+2	; 0x02
 9dc:	a6 ff       	sbrs	r26, 6
 9de:	09 c0       	rjmp	.+18     	; 0x9f2
 9e0:	af 79       	andi	r26, 0x9F	; 159
 9e2:	a2 83       	std	Z+2, r26	; 0x02
 9e4:	49 df       	rcall	.-366    	; 0x878
 9e6:	a2 81       	ldd	r26, Z+2	; 0x02
 9e8:	a0 62       	ori	r26, 0x20	; 32
 9ea:	a2 83       	std	Z+2, r26	; 0x02

000009ec <AssnXOk>:
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2

000009f0 <AssnXErr>:
 9f0:	81 e0       	ldi	r24, 0x01	; 1

000009f2 <AssnX>:
 9f2:	8a 8f       	std	Y+26, r24	; 0x1a
 9f4:	cb ce       	rjmp	.-618    	; 0x78c

000009f6 <AvrXTaskExit>:
 9f6:	f8 94       	cli
 9f8:	7b de       	rcall	.-778    	; 0x6f0
 9fa:	78 94       	sei
 9fc:	90 91 2f 01 	lds	r25, 0x012F
 a00:	80 91 2e 01 	lds	r24, 0x012E
 a04:	03 c0       	rjmp	.+6      	; 0xa0c

00000a06 <AvrXTerminate>:
 a06:	f8 94       	cli
 a08:	73 de       	rcall	.-794    	; 0x6f0
 a0a:	78 94       	sei

00000a0c <at00>:
 a0c:	f9 2f       	mov	r31, r25
 a0e:	e8 2f       	mov	r30, r24
 a10:	a0 e1       	ldi	r26, 0x10	; 16
 a12:	a2 83       	std	Z+2, r26	; 0x02
 a14:	79 2f       	mov	r23, r25
 a16:	68 2f       	mov	r22, r24
 a18:	f1 e0       	ldi	r31, 0x01	; 1
 a1a:	ec e2       	ldi	r30, 0x2C	; 44
 a1c:	f8 94       	cli
 a1e:	a1 df       	rcall	.-190    	; 0x962
 a20:	b5 ce       	rjmp	.-662    	; 0x78c

00000a22 <AvrXHalt>:
 a22:	f8 94       	cli
 a24:	fe cf       	rjmp	.-4      	; 0xa22

00000a26 <AvrXBreakpoint>:
 a26:	f8 94       	cli
 a28:	63 de       	rcall	.-826    	; 0x6f0
 a2a:	78 94       	sei
 a2c:	f0 91 2f 01 	lds	r31, 0x012F
 a30:	e0 91 2e 01 	lds	r30, 0x012E
 a34:	22 81       	ldd	r18, Z+2	; 0x02
 a36:	25 fd       	sbrc	r18, 5
 a38:	09 c0       	rjmp	.+18     	; 0xa4c
 a3a:	a8 ce       	rjmp	.-688    	; 0x78c

00000a3c <AvrXSuspend>:
 a3c:	f8 94       	cli
 a3e:	58 de       	rcall	.-848    	; 0x6f0
 a40:	78 94       	sei
 a42:	f9 2f       	mov	r31, r25
 a44:	e8 2f       	mov	r30, r24
 a46:	22 81       	ldd	r18, Z+2	; 0x02
 a48:	20 62       	ori	r18, 0x20	; 32
 a4a:	22 83       	std	Z+2, r18	; 0x02

00000a4c <as00>:
 a4c:	7f 2f       	mov	r23, r31
 a4e:	6e 2f       	mov	r22, r30
 a50:	f1 e0       	ldi	r31, 0x01	; 1
 a52:	ec e2       	ldi	r30, 0x2C	; 44
 a54:	f8 94       	cli
 a56:	85 df       	rcall	.-246    	; 0x962
 a58:	c2 2f       	mov	r28, r18
 a5a:	d3 2f       	mov	r29, r19
 a5c:	20 96       	adiw	r28, 0x00	; 0
 a5e:	19 f0       	breq	.+6      	; 0xa66
 a60:	ea 81       	ldd	r30, Y+2	; 0x02
 a62:	e0 64       	ori	r30, 0x40	; 64
 a64:	ea 83       	std	Y+2, r30	; 0x02

00000a66 <as01>:
 a66:	92 ce       	rjmp	.-732    	; 0x78c

00000a68 <AvrXSendMessage>:
 a68:	f8 94       	cli
 a6a:	42 de       	rcall	.-892    	; 0x6f0
 a6c:	78 94       	sei
 a6e:	01 d0       	rcall	.+2      	; 0xa72
 a70:	8d ce       	rjmp	.-742    	; 0x78c

00000a72 <AvrXIntSendMessage>:
 a72:	f9 2f       	mov	r31, r25
 a74:	e8 2f       	mov	r30, r24
 a76:	67 df       	rcall	.-306    	; 0x946
 a78:	49 cf       	rjmp	.-366    	; 0x90c

00000a7a <AvrXWaitMessage>:
 a7a:	e8 2f       	mov	r30, r24
 a7c:	f9 2f       	mov	r31, r25
 a7e:	f8 94       	cli
 a80:	79 df       	rcall	.-270    	; 0x974
 a82:	78 94       	sei
 a84:	21 f4       	brne	.+8      	; 0xa8e
 a86:	1e df       	rcall	.-452    	; 0x8c4
 a88:	82 50       	subi	r24, 0x02	; 2
 a8a:	90 40       	sbci	r25, 0x00	; 0
 a8c:	f6 cf       	rjmp	.-20     	; 0xa7a

00000a8e <_rm01>:
 a8e:	d5 d0       	rcall	.+426    	; 0xc3a
 a90:	86 2f       	mov	r24, r22
 a92:	97 2f       	mov	r25, r23
 a94:	08 95       	ret

00000a96 <AvrXDelay>:
 a96:	01 d0       	rcall	.+2      	; 0xa9a
 a98:	15 cf       	rjmp	.-470    	; 0x8c4

00000a9a <AvrXStartTimer>:
 a9a:	60 50       	subi	r22, 0x00	; 0
 a9c:	70 40       	sbci	r23, 0x00	; 0
 a9e:	09 f4       	brne	.+2      	; 0xaa2
 aa0:	28 cf       	rjmp	.-432    	; 0x8f2

00000aa2 <CountNotZero>:
 aa2:	f8 94       	cli
 aa4:	25 de       	rcall	.-950    	; 0x6f0
 aa6:	78 94       	sei
 aa8:	c8 d0       	rcall	.+400    	; 0xc3a
 aaa:	e4 e3       	ldi	r30, 0x34	; 52
 aac:	f1 e0       	ldi	r31, 0x01	; 1
 aae:	f8 94       	cli
 ab0:	20 91 36 01 	lds	r18, 0x0136
 ab4:	2a 95       	dec	r18
 ab6:	20 93 36 01 	sts	0x0136, r18
 aba:	78 94       	sei

00000abc <ast00>:
 abc:	ce 2f       	mov	r28, r30
 abe:	df 2f       	mov	r29, r31
 ac0:	e8 81       	ld	r30, Y
 ac2:	f9 81       	ldd	r31, Y+1	; 0x01
 ac4:	30 96       	adiw	r30, 0x00	; 0
 ac6:	59 f0       	breq	.+22     	; 0xade
 ac8:	24 81       	ldd	r18, Z+4	; 0x04
 aca:	35 81       	ldd	r19, Z+5	; 0x05
 acc:	62 1b       	sub	r22, r18
 ace:	73 0b       	sbc	r23, r19
 ad0:	a8 f7       	brcc	.-22     	; 0xabc
 ad2:	62 0f       	add	r22, r18
 ad4:	73 1f       	adc	r23, r19
 ad6:	26 1b       	sub	r18, r22
 ad8:	37 0b       	sbc	r19, r23
 ada:	24 83       	std	Z+4, r18	; 0x04
 adc:	35 83       	std	Z+5, r19	; 0x05

00000ade <ast01>:
 ade:	99 83       	std	Y+1, r25	; 0x01
 ae0:	88 83       	st	Y, r24
 ae2:	d9 2f       	mov	r29, r25
 ae4:	c8 2f       	mov	r28, r24
 ae6:	f9 83       	std	Y+1, r31	; 0x01
 ae8:	e8 83       	st	Y, r30
 aea:	6c 83       	std	Y+4, r22	; 0x04
 aec:	7d 83       	std	Y+5, r23	; 0x05
 aee:	3c d0       	rcall	.+120    	; 0xb68
 af0:	4d ce       	rjmp	.-870    	; 0x78c

00000af2 <AvrXTimerHandler>:
 af2:	f8 94       	cli
 af4:	20 91 36 01 	lds	r18, 0x0136
 af8:	21 50       	subi	r18, 0x01	; 1
 afa:	20 93 36 01 	sts	0x0136, r18
 afe:	78 94       	sei
 b00:	08 f0       	brcs	.+2      	; 0xb04
 b02:	08 95       	ret

00000b04 <ati00>:
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	d0 91 35 01 	lds	r29, 0x0135
 b10:	c0 91 34 01 	lds	r28, 0x0134
 b14:	20 96       	adiw	r28, 0x00	; 0
 b16:	21 f1       	breq	.+72     	; 0xb60
 b18:	fd 81       	ldd	r31, Y+5	; 0x05
 b1a:	ec 81       	ldd	r30, Y+4	; 0x04
 b1c:	31 97       	sbiw	r30, 0x01	; 1
 b1e:	fd 83       	std	Y+5, r31	; 0x05
 b20:	ec 83       	std	Y+4, r30	; 0x04

00000b22 <ati01>:
 b22:	ef 2b       	or	r30, r31
 b24:	e9 f4       	brne	.+58     	; 0xb60
 b26:	a8 81       	ld	r26, Y
 b28:	b9 81       	ldd	r27, Y+1	; 0x01
 b2a:	b0 93 35 01 	sts	0x0135, r27
 b2e:	a0 93 34 01 	sts	0x0134, r26
 b32:	f9 83       	std	Y+1, r31	; 0x01
 b34:	e8 83       	st	Y, r30
 b36:	8a 81       	ldd	r24, Y+2	; 0x02
 b38:	9b 81       	ldd	r25, Y+3	; 0x03
 b3a:	82 50       	subi	r24, 0x02	; 2
 b3c:	90 40       	sbci	r25, 0x00	; 0
 b3e:	31 f4       	brne	.+12     	; 0xb4c
 b40:	8e 81       	ldd	r24, Y+6	; 0x06
 b42:	9f 81       	ldd	r25, Y+7	; 0x07
 b44:	7d 2f       	mov	r23, r29
 b46:	6c 2f       	mov	r22, r28
 b48:	94 df       	rcall	.-216    	; 0xa72
 b4a:	03 c0       	rjmp	.+6      	; 0xb52

00000b4c <ati04>:
 b4c:	8c 2f       	mov	r24, r28
 b4e:	9d 2f       	mov	r25, r29
 b50:	dd de       	rcall	.-582    	; 0x90c

00000b52 <ati03>:
 b52:	10 96       	adiw	r26, 0x00	; 0
 b54:	29 f0       	breq	.+10     	; 0xb60
 b56:	ca 2f       	mov	r28, r26
 b58:	db 2f       	mov	r29, r27
 b5a:	fd 81       	ldd	r31, Y+5	; 0x05
 b5c:	ec 81       	ldd	r30, Y+4	; 0x04
 b5e:	e1 cf       	rjmp	.-62     	; 0xb22

00000b60 <ati02>:
 b60:	bf 91       	pop	r27
 b62:	af 91       	pop	r26
 b64:	df 91       	pop	r29
 b66:	cf 91       	pop	r28

00000b68 <TimerHandler>:
 b68:	f8 94       	cli
 b6a:	20 91 36 01 	lds	r18, 0x0136
 b6e:	23 95       	inc	r18
 b70:	20 93 36 01 	sts	0x0136, r18
 b74:	78 94       	sei
 b76:	31 f6       	brne	.-116    	; 0xb04
 b78:	08 95       	ret

00000b7a <AvrXStartTimerMessage>:
 b7a:	60 50       	subi	r22, 0x00	; 0
 b7c:	70 40       	sbci	r23, 0x00	; 0
 b7e:	29 f4       	brne	.+10     	; 0xb8a
 b80:	68 2f       	mov	r22, r24
 b82:	79 2f       	mov	r23, r25
 b84:	84 2f       	mov	r24, r20
 b86:	95 2f       	mov	r25, r21
 b88:	6f cf       	rjmp	.-290    	; 0xa68

00000b8a <axstm0>:
 b8a:	e8 2f       	mov	r30, r24
 b8c:	f9 2f       	mov	r31, r25
 b8e:	57 83       	std	Z+7, r21	; 0x07
 b90:	46 83       	std	Z+6, r20	; 0x06
 b92:	42 e0       	ldi	r20, 0x02	; 2
 b94:	50 e0       	ldi	r21, 0x00	; 0
 b96:	53 83       	std	Z+3, r21	; 0x03
 b98:	42 83       	std	Z+2, r20	; 0x02
 b9a:	83 cf       	rjmp	.-250    	; 0xaa2

00000b9c <AvrXCancelTimer>:
 b9c:	f8 94       	cli
 b9e:	a8 dd       	rcall	.-1200   	; 0x6f0
 ba0:	78 94       	sei
 ba2:	b4 de       	rcall	.-664    	; 0x90c
 ba4:	6a 8d       	ldd	r22, Y+26	; 0x1a
 ba6:	7b 8d       	ldd	r23, Y+27	; 0x1b
 ba8:	e4 e3       	ldi	r30, 0x34	; 52
 baa:	f1 e0       	ldi	r31, 0x01	; 1
 bac:	f8 94       	cli
 bae:	d9 de       	rcall	.-590    	; 0x962
 bb0:	20 50       	subi	r18, 0x00	; 0
 bb2:	30 40       	sbci	r19, 0x00	; 0
 bb4:	59 f0       	breq	.+22     	; 0xbcc
 bb6:	c6 2f       	mov	r28, r22
 bb8:	d7 2f       	mov	r29, r23
 bba:	6c 81       	ldd	r22, Y+4	; 0x04
 bbc:	7d 81       	ldd	r23, Y+5	; 0x05
 bbe:	95 81       	ldd	r25, Z+5	; 0x05
 bc0:	84 81       	ldd	r24, Z+4	; 0x04
 bc2:	86 0f       	add	r24, r22
 bc4:	97 1f       	adc	r25, r23
 bc6:	84 83       	std	Z+4, r24	; 0x04
 bc8:	95 83       	std	Z+5, r25	; 0x05
 bca:	e0 cd       	rjmp	.-1088   	; 0x78c

00000bcc <act00>:
 bcc:	2a 8f       	std	Y+26, r18	; 0x1a
 bce:	3b 8f       	std	Y+27, r19	; 0x1b
 bd0:	dd cd       	rjmp	.-1094   	; 0x78c

00000bd2 <AvrXReadEEProm>:
 bd2:	68 2f       	mov	r22, r24
 bd4:	79 2f       	mov	r23, r25
 bd6:	91 e0       	ldi	r25, 0x01	; 1
 bd8:	88 e3       	ldi	r24, 0x38	; 56
 bda:	76 de       	rcall	.-788    	; 0x8c8

00000bdc <are01>:
 bdc:	e1 99       	sbic	0x1c, 1	; 28
 bde:	fe cf       	rjmp	.-4      	; 0xbdc
 be0:	6e bb       	out	0x1e, r22	; 30
 be2:	7f bb       	out	0x1f, r23	; 31
 be4:	e0 9a       	sbi	0x1c, 0	; 28
 be6:	0d b2       	in	r0, 0x1d	; 29
 be8:	0f 92       	push	r0
 bea:	85 de       	rcall	.-758    	; 0x8f6
 bec:	8f 91       	pop	r24
 bee:	08 95       	ret

00000bf0 <AvrXReadEEPromWord>:
 bf0:	68 2f       	mov	r22, r24
 bf2:	79 2f       	mov	r23, r25
 bf4:	91 e0       	ldi	r25, 0x01	; 1
 bf6:	88 e3       	ldi	r24, 0x38	; 56
 bf8:	67 de       	rcall	.-818    	; 0x8c8

00000bfa <arew01>:
 bfa:	e1 99       	sbic	0x1c, 1	; 28
 bfc:	fe cf       	rjmp	.-4      	; 0xbfa
 bfe:	6e bb       	out	0x1e, r22	; 30
 c00:	7f bb       	out	0x1f, r23	; 31
 c02:	e0 9a       	sbi	0x1c, 0	; 28
 c04:	0d b2       	in	r0, 0x1d	; 29
 c06:	0f 92       	push	r0
 c08:	6f 5f       	subi	r22, 0xFF	; 255
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255
 c0c:	6e bb       	out	0x1e, r22	; 30
 c0e:	7f bb       	out	0x1f, r23	; 31
 c10:	e0 9a       	sbi	0x1c, 0	; 28
 c12:	0d b2       	in	r0, 0x1d	; 29
 c14:	0f 92       	push	r0
 c16:	6f de       	rcall	.-802    	; 0x8f6
 c18:	9f 91       	pop	r25
 c1a:	8f 91       	pop	r24
 c1c:	08 95       	ret

00000c1e <AvrXWriteEEProm>:
 c1e:	46 2f       	mov	r20, r22
 c20:	68 2f       	mov	r22, r24
 c22:	79 2f       	mov	r23, r25
 c24:	91 e0       	ldi	r25, 0x01	; 1
 c26:	88 e3       	ldi	r24, 0x38	; 56
 c28:	4f de       	rcall	.-866    	; 0x8c8

00000c2a <awe00>:
 c2a:	e1 99       	sbic	0x1c, 1	; 28
 c2c:	fe cf       	rjmp	.-4      	; 0xc2a
 c2e:	6e bb       	out	0x1e, r22	; 30
 c30:	7f bb       	out	0x1f, r23	; 31
 c32:	4d bb       	out	0x1d, r20	; 29
 c34:	e2 9a       	sbi	0x1c, 2	; 28
 c36:	e1 9a       	sbi	0x1c, 1	; 28
 c38:	5e ce       	rjmp	.-836    	; 0x8f6

00000c3a <AvrXIntResetObjectSemaphore>:
 c3a:	e8 2f       	mov	r30, r24
 c3c:	f9 2f       	mov	r31, r25
 c3e:	32 96       	adiw	r30, 0x02	; 2
 c40:	02 c0       	rjmp	.+4      	; 0xc46

00000c42 <AvrXIntResetSemaphore>:
 c42:	f9 2f       	mov	r31, r25
 c44:	e8 2f       	mov	r30, r24

00000c46 <ars00>:
 c46:	f8 94       	cli
 c48:	40 81       	ld	r20, Z
 c4a:	51 81       	ldd	r21, Z+1	; 0x01
 c4c:	41 50       	subi	r20, 0x01	; 1
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	11 f0       	breq	.+4      	; 0xc56
 c52:	4f 5f       	subi	r20, 0xFF	; 255
 c54:	5f 4f       	sbci	r21, 0xFF	; 255

00000c56 <ars01>:
 c56:	51 83       	std	Z+1, r21	; 0x01
 c58:	40 83       	st	Z, r20
 c5a:	18 95       	reti
