
AvrXBufferedSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001df2  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00001df2  00001e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000307  008000da  008000da  00001f00  2**2
                  ALLOC
  3 .noinit       00000000  008003e1  008003e1  00001f00  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001f00  2**0
                  CONTENTS
  5 .stab         00006654  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00003333  00000000  00000000  00008554  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8
       4:	0c 94 6f 00 	jmp	0xde
       8:	0c 94 6f 00 	jmp	0xde
       c:	0c 94 6f 00 	jmp	0xde
      10:	0c 94 bc 03 	jmp	0x778
      14:	0c 94 c8 02 	jmp	0x590
      18:	0c 94 8f 03 	jmp	0x71e
      1c:	0c 94 35 03 	jmp	0x66a
      20:	0c 94 62 03 	jmp	0x6c4
      24:	0c 94 9b 02 	jmp	0x536
      28:	0c 94 08 03 	jmp	0x610
      2c:	0c 94 fb 04 	jmp	0x9f6
      30:	0c 94 6f 00 	jmp	0xde
      34:	0c 94 aa 06 	jmp	0xd54
      38:	0c 94 b6 06 	jmp	0xd6c
      3c:	0c 94 6f 00 	jmp	0xde
      40:	0c 94 6f 00 	jmp	0xde
      44:	0c 94 6f 00 	jmp	0xde
      48:	0c 94 6f 00 	jmp	0xde
      4c:	0c 94 6f 00 	jmp	0xde
      50:	0c 94 6f 00 	jmp	0xde

00000054 <__ctors_end>:
      54:	32 02       	muls	r19, r18
      56:	b0 05       	cpc	r27, r0
      58:	39 02       	muls	r19, r25
      5a:	03 36       	cpi	r16, 0x63	; 99

0000005b <getCommandsTcb>:
      5b:	36 03 8e 05 b2 01 05                                6......

00000062 <task0Tcb>:
      62:	af 02 30 05 33 02 04                                ..0.3..

00000069 <TimerRTCPrescaleFactor>:
      69:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000079 <TimerPrescaleFactor>:
      79:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000085 <__c.2>:
      85:	63 20 25 64 00                                      c %d.

0000008a <__c.3>:
      8a:	63 20 25 64 00                                      c %d.

0000008f <__c.0>:
      8f:	49 20 66 6f 75 6e 64 65 64 20 52 68 69 7a 6f 6d     I founded Rhizom
      9f:	65 21 0d 0a 00                                      e!...

000000a4 <__c.1>:
      a4:	25 64 20 00                                         %d .

000000a8 <__init>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf e5       	ldi	r28, 0x5F	; 95
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	10 e0       	ldi	r17, 0x00	; 0
      b6:	a0 e6       	ldi	r26, 0x60	; 96
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e2 ef       	ldi	r30, 0xF2	; 242
      bc:	fd e1       	ldi	r31, 0x1D	; 29
      be:	02 c0       	rjmp	.+4      	; 0xc4

000000c0 <.do_copy_data_loop>:
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0

000000c4 <.do_copy_data_start>:
      c4:	aa 3d       	cpi	r26, 0xDA	; 218
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0

000000ca <__do_clear_bss>:
      ca:	13 e0       	ldi	r17, 0x03	; 3
      cc:	aa ed       	ldi	r26, 0xDA	; 218
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	01 c0       	rjmp	.+2      	; 0xd4

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a1 3e       	cpi	r26, 0xE1	; 225
      d6:	b1 07       	cpc	r27, r17
      d8:	e1 f7       	brne	.-8      	; 0xd2
      da:	0c 94 d9 05 	jmp	0xbb2

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0x0

000000e2 <parserInit>:

void parserInit(void)
{
	// initialize input buffer
	parserBufferLength = 0;
      e2:	10 92 c9 01 	sts	0x01C9, r1
	// initialize executing function
	ParserExecFunction = 0;
      e6:	10 92 f6 00 	sts	0x00F6, r1
      ea:	10 92 f5 00 	sts	0x00F5, r1
	// initialize command list
	parserNumCommands = 0;
      ee:	10 92 0b 01 	sts	0x010B, r1
      f2:	08 95       	ret

000000f4 <parserAddCommand>:
}


void parserAddCommand(unsigned char* newCmdString, ParserFuncPtrType newCmdFuncPtr)
{
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	9c 01       	movw	r18, r24
      fa:	8b 01       	movw	r16, r22
	// add command string to end of command list
	strcpy(CommandList[parserNumCommands], newCmdString);
      fc:	90 91 0b 01 	lds	r25, 0x010B
     100:	8f e0       	ldi	r24, 0x0F	; 15
     102:	98 9f       	mul	r25, r24
     104:	c0 01       	movw	r24, r0
     106:	11 24       	eor	r1, r1
     108:	b9 01       	movw	r22, r18
     10a:	8e 5e       	subi	r24, 0xEE	; 238
     10c:	9e 4f       	sbci	r25, 0xFE	; 254
     10e:	0e 94 7c 08 	call	0x10f8
	// add command function ptr to end of function list
	ParserFunctionList[parserNumCommands] = newCmdFuncPtr;
     112:	80 91 0b 01 	lds	r24, 0x010B
     116:	e8 2f       	mov	r30, r24
     118:	ff 27       	eor	r31, r31
     11a:	ee 0f       	add	r30, r30
     11c:	ff 1f       	adc	r31, r31
     11e:	e9 50       	subi	r30, 0x09	; 9
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	11 83       	std	Z+1, r17	; 0x01
     124:	00 83       	st	Z, r16
	// increment number of registered commands
	parserNumCommands++;
     126:	8f 5f       	subi	r24, 0xFF	; 255
     128:	80 93 0b 01 	sts	0x010B, r24
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	08 95       	ret

00000132 <parserSetOutputFunc>:
}


void parserSetOutputFunc(void (*output_func)(unsigned char c))
{
	// set new output function
	parserOutputFunc = output_func;
     132:	90 93 f4 00 	sts	0x00F4, r25
     136:	80 93 f3 00 	sts	0x00F3, r24
     13a:	08 95       	ret

0000013c <parserProcessInputString>:
}


void parserInputFunc(unsigned char c)
{
	// process the received character
	
	if (c != '\r')		//anything other than return character must be a part of the command
	{	
		// echo character to the output
//		parserOutputFunc(c);
		// add it to the command line buffer
		parserBuffer[parserBufferLength] = c;
		// update buffer length
		parserBufferLength++;
	}
	else				//return character -> process command
	{
		// add null termination to command
		parserBuffer[parserBufferLength] = 0;
		// command is complete, process it
		parserProcessInputString();
		// reset buffer
		parserBufferLength = 0;
	}
}


void parserProcessInputString(void)
{
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
	unsigned char cmdIndex;

	// search command list for match with entered command
	for(cmdIndex=0; cmdIndex<parserNumCommands; cmdIndex++)
     142:	10 e0       	ldi	r17, 0x00	; 0
     144:	80 91 0b 01 	lds	r24, 0x010B
     148:	18 17       	cp	r17, r24
     14a:	48 f5       	brcc	.+82     	; 0x19e
	{
		if( !strncmp(CommandList[cmdIndex], parserBuffer, 1) )		//command is first char of buffer
     14c:	a1 2f       	mov	r26, r17
     14e:	bb 27       	eor	r27, r27
     150:	fd 01       	movw	r30, r26
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	ee 0f       	add	r30, r30
     156:	ff 1f       	adc	r31, r31
     158:	8a 95       	dec	r24
     15a:	e1 f7       	brne	.-8      	; 0x154
     15c:	ea 1b       	sub	r30, r26
     15e:	fb 0b       	sbc	r31, r27
     160:	ee 5e       	subi	r30, 0xEE	; 238
     162:	fe 4f       	sbci	r31, 0xFE	; 254
     164:	80 81       	ld	r24, Z
     166:	c8 2f       	mov	r28, r24
     168:	dd 27       	eor	r29, r29
     16a:	80 91 ba 01 	lds	r24, 0x01BA
     16e:	c8 1b       	sub	r28, r24
     170:	d1 09       	sbc	r29, r1
     172:	20 97       	sbiw	r28, 0x00	; 0
     174:	79 f4       	brne	.+30     	; 0x194
		{
			// user-entered command matched a command in the list (database)
			ParserExecFunction = ParserFunctionList[cmdIndex];
     176:	aa 0f       	add	r26, r26
     178:	bb 1f       	adc	r27, r27
     17a:	a9 50       	subi	r26, 0x09	; 9
     17c:	bf 4f       	sbci	r27, 0xFF	; 255
     17e:	ed 91       	ld	r30, X+
     180:	fc 91       	ld	r31, X
     182:	f0 93 f6 00 	sts	0x00F6, r31
     186:	e0 93 f5 00 	sts	0x00F5, r30
			// run the corresponding function
			ParserExecFunction();
     18a:	09 95       	icall
			// reset
			ParserExecFunction = 0;
     18c:	d0 93 f6 00 	sts	0x00F6, r29
     190:	c0 93 f5 00 	sts	0x00F5, r28
     194:	1f 5f       	subi	r17, 0xFF	; 255
     196:	80 91 0b 01 	lds	r24, 0x010B
     19a:	18 17       	cp	r17, r24
     19c:	b8 f2       	brcs	.-82     	; 0x14c
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	1f 91       	pop	r17
     1a4:	08 95       	ret

000001a6 <parserInputFunc>:
     1a6:	90 91 c9 01 	lds	r25, 0x01C9
     1aa:	8d 30       	cpi	r24, 0x0D	; 13
     1ac:	49 f0       	breq	.+18     	; 0x1c0
     1ae:	e9 2f       	mov	r30, r25
     1b0:	ff 27       	eor	r31, r31
     1b2:	e6 54       	subi	r30, 0x46	; 70
     1b4:	fe 4f       	sbci	r31, 0xFE	; 254
     1b6:	80 83       	st	Z, r24
     1b8:	9f 5f       	subi	r25, 0xFF	; 255
     1ba:	90 93 c9 01 	sts	0x01C9, r25
     1be:	08 95       	ret
     1c0:	e9 2f       	mov	r30, r25
     1c2:	ff 27       	eor	r31, r31
     1c4:	e6 54       	subi	r30, 0x46	; 70
     1c6:	fe 4f       	sbci	r31, 0xFE	; 254
     1c8:	10 82       	st	Z, r1
     1ca:	0e 94 9e 00 	call	0x13c
     1ce:	10 92 c9 01 	sts	0x01C9, r1
     1d2:	08 95       	ret

000001d4 <parserGetArgStr>:
		}
	}
}

// return string pointer to argument [argnum]
unsigned char* parserGetArgStr(void)
{
	return &parserBuffer[2];		//spec states that commands are 1 char followed by a space followed by the arg, so the
}									//arg must start at idx 2
     1d4:	8c eb       	ldi	r24, 0xBC	; 188
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	08 95       	ret

000001da <parserGetArgInt>:

//return argument as a long
int parserGetArgInt(void)
{
	char* endptr;
	return atoi(parserGetArgStr());
     1da:	0e 94 ea 00 	call	0x1d4
     1de:	0e 94 54 07 	call	0xea8
     1e2:	08 95       	ret

000001e4 <delay_us>:
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 
     1e4:	03 96       	adiw	r24, 0x03	; 3
     1e6:	65 e0       	ldi	r22, 0x05	; 5
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	0e 94 a7 0e 	call	0x1d4e
     1ee:	cb 01       	movw	r24, r22
     1f0:	aa 27       	eor	r26, r26
     1f2:	bb 27       	eor	r27, r27
     1f4:	24 e0       	ldi	r18, 0x04	; 4
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	aa 1f       	adc	r26, r26
     1fc:	bb 1f       	adc	r27, r27
     1fe:	2a 95       	dec	r18
     200:	d1 f7       	brne	.-12     	; 0x1f6

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	11 f0       	breq	.+4      	; 0x20a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	fc cf       	rjmp	.-8      	; 0x202
     20a:	08 95       	ret

0000020c <timerDetach>:
}
/*
void delay_ms(unsigned char time_ms)
{
	unsigned short delay_count = F_CPU / 4000;

	unsigned short cnt;
	asm volatile ("\n"
                  "L_dl1%=:\n\t"
                  "mov %A0, %A2\n\t"
                  "mov %B0, %B2\n"
                  "L_dl2%=:\n\t"
                  "sbiw %A0, 1\n\t"
                  "brne L_dl2%=\n\t"
                  "dec %1\n\t" "brne L_dl1%=\n\t":"=&w" (cnt)
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
	timer1Init();
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
	#endif
	// enable interrupts
	sei();
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt

	timer0ClearOverflowCount();				// initialize time registers
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
	outb(TCNT1H, 0);						// reset TCNT1
	outb(TCNT1L, 0);
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow

	timer2ClearOverflowCount();				// initialize time registers
}
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
}
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
}

u16 timer1GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR1B) & TIMER_PRESCALE_MASK)));
}

#ifdef TCNT2	// support timer2 only if it exists
u16 timer2GetPrescaler(void)
{
	//TODO: can we assume for all 3-timer AVR processors,
	// that timer2 is the RTC timer?

	// get the current prescaler setting
	return (pgm_read_word(TimerRTCPrescaleFactor+(inb(TCCR2) & TIMER_PRESCALE_MASK)));
}
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
	}
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     20c:	88 30       	cpi	r24, 0x08	; 8
     20e:	40 f4       	brcc	.+16     	; 0x220
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     210:	e8 2f       	mov	r30, r24
     212:	ff 27       	eor	r31, r31
     214:	ee 0f       	add	r30, r30
     216:	ff 1f       	adc	r31, r31
     218:	e6 52       	subi	r30, 0x26	; 38
     21a:	ff 4f       	sbci	r31, 0xFF	; 255
     21c:	11 82       	std	Z+1, r1	; 0x01
     21e:	10 82       	st	Z, r1
     220:	08 95       	ret

00000222 <timer0SetPrescaler>:
     222:	93 b7       	in	r25, 0x33	; 51
     224:	98 7f       	andi	r25, 0xF8	; 248
     226:	98 2b       	or	r25, r24
     228:	93 bf       	out	0x33, r25	; 51
     22a:	08 95       	ret

0000022c <timer0ClearOverflowCount>:
	}
}
/*
u32 timerMsToTics(u16 ms)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of timer tics in x milliseconds
	return (ms*(F_CPU/(prescaleDiv*256)))/1000;
}

u16 timerTicsToMs(u32 tics)
{
	// calculate the prescaler division rate
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
	// pauses for exactly <pause_ms> number of milliseconds
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
	// reset pause timer overflow count
	TimerPauseReg = 0;
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
	{
		if( TimerPauseReg < (pause>>8));
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
			sleep_mode();
		}
	}

	/* old inaccurate code, for reference
	
	// calculate delay for [pause_ms] milliseconds
	u16 prescaleDiv = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)));
	u32 pause = (pause_ms*(F_CPU/(prescaleDiv*256)))/1000;
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     22c:	10 92 0e 01 	sts	0x010E, r1
     230:	10 92 0f 01 	sts	0x010F, r1
     234:	10 92 10 01 	sts	0x0110, r1
     238:	10 92 11 01 	sts	0x0111, r1
     23c:	08 95       	ret

0000023e <timer0Init>:
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	0e 94 11 01 	call	0x222
     244:	12 be       	out	0x32, r1	; 50
     246:	89 b7       	in	r24, 0x39	; 57
     248:	81 60       	ori	r24, 0x01	; 1
     24a:	89 bf       	out	0x39, r24	; 57
     24c:	0e 94 16 01 	call	0x22c
     250:	08 95       	ret

00000252 <timer1SetPrescaler>:
     252:	9e b5       	in	r25, 0x2e	; 46
     254:	98 7f       	andi	r25, 0xF8	; 248
     256:	98 2b       	or	r25, r24
     258:	9e bd       	out	0x2e, r25	; 46
     25a:	08 95       	ret

0000025c <timer1Init>:
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	0e 94 29 01 	call	0x252
     262:	1d bc       	out	0x2d, r1	; 45
     264:	1c bc       	out	0x2c, r1	; 44
     266:	89 b7       	in	r24, 0x39	; 57
     268:	84 60       	ori	r24, 0x04	; 4
     26a:	89 bf       	out	0x39, r24	; 57
     26c:	08 95       	ret

0000026e <timer2SetPrescaler>:
     26e:	95 b5       	in	r25, 0x25	; 37
     270:	98 7f       	andi	r25, 0xF8	; 248
     272:	98 2b       	or	r25, r24
     274:	95 bd       	out	0x25, r25	; 37
     276:	08 95       	ret

00000278 <timer2ClearOverflowCount>:
}

long timer0GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer0ClearOverflowCount() command was called)
	return Timer0Reg0;
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     278:	10 92 ac 01 	sts	0x01AC, r1
     27c:	10 92 ad 01 	sts	0x01AD, r1
     280:	10 92 ae 01 	sts	0x01AE, r1
     284:	10 92 af 01 	sts	0x01AF, r1
     288:	08 95       	ret

0000028a <timer2Init>:
     28a:	84 e0       	ldi	r24, 0x04	; 4
     28c:	0e 94 37 01 	call	0x26e
     290:	14 bc       	out	0x24, r1	; 36
     292:	89 b7       	in	r24, 0x39	; 57
     294:	80 64       	ori	r24, 0x40	; 64
     296:	89 bf       	out	0x39, r24	; 57
     298:	0e 94 3c 01 	call	0x278
     29c:	08 95       	ret

0000029e <timerInit>:
     29e:	cf 93       	push	r28
     2a0:	c0 e0       	ldi	r28, 0x00	; 0
     2a2:	8c 2f       	mov	r24, r28
     2a4:	0e 94 06 01 	call	0x20c
     2a8:	cf 5f       	subi	r28, 0xFF	; 255
     2aa:	c8 30       	cpi	r28, 0x08	; 8
     2ac:	d0 f3       	brcs	.-12     	; 0x2a2
     2ae:	0e 94 1f 01 	call	0x23e
     2b2:	0e 94 2e 01 	call	0x25c
     2b6:	0e 94 45 01 	call	0x28a
     2ba:	78 94       	sei
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <timer0GetPrescaler>:
     2c0:	83 b7       	in	r24, 0x33	; 51
     2c2:	e8 2f       	mov	r30, r24
     2c4:	ff 27       	eor	r31, r31
     2c6:	e7 70       	andi	r30, 0x07	; 7
     2c8:	f0 70       	andi	r31, 0x00	; 0
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	e7 58       	subi	r30, 0x87	; 135
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	85 91       	lpm	r24, Z+
     2d4:	94 91       	lpm	r25, Z
     2d6:	08 95       	ret

000002d8 <timer1GetPrescaler>:
     2d8:	8e b5       	in	r24, 0x2e	; 46
     2da:	e8 2f       	mov	r30, r24
     2dc:	ff 27       	eor	r31, r31
     2de:	e7 70       	andi	r30, 0x07	; 7
     2e0:	f0 70       	andi	r31, 0x00	; 0
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e7 58       	subi	r30, 0x87	; 135
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	85 91       	lpm	r24, Z+
     2ec:	94 91       	lpm	r25, Z
     2ee:	08 95       	ret

000002f0 <timer2GetPrescaler>:
     2f0:	85 b5       	in	r24, 0x25	; 37
     2f2:	e8 2f       	mov	r30, r24
     2f4:	ff 27       	eor	r31, r31
     2f6:	e7 70       	andi	r30, 0x07	; 7
     2f8:	f0 70       	andi	r31, 0x00	; 0
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	e7 59       	subi	r30, 0x97	; 151
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	85 91       	lpm	r24, Z+
     304:	94 91       	lpm	r25, Z
     306:	08 95       	ret

00000308 <timerAttach>:
     308:	88 30       	cpi	r24, 0x08	; 8
     30a:	40 f4       	brcc	.+16     	; 0x31c
     30c:	e8 2f       	mov	r30, r24
     30e:	ff 27       	eor	r31, r31
     310:	ee 0f       	add	r30, r30
     312:	ff 1f       	adc	r31, r31
     314:	e6 52       	subi	r30, 0x26	; 38
     316:	ff 4f       	sbci	r31, 0xFF	; 255
     318:	71 83       	std	Z+1, r23	; 0x01
     31a:	60 83       	st	Z, r22
     31c:	08 95       	ret

0000031e <timerPause>:
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
     32e:	d2 b6       	in	r13, 0x32	; 50
     330:	10 92 a8 01 	sts	0x01A8, r1
     334:	10 92 a9 01 	sts	0x01A9, r1
     338:	10 92 aa 01 	sts	0x01AA, r1
     33c:	10 92 ab 01 	sts	0x01AB, r1
     340:	0e 94 60 01 	call	0x2c0
     344:	9c 01       	movw	r18, r24
     346:	44 27       	eor	r20, r20
     348:	55 27       	eor	r21, r21
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	74 e2       	ldi	r23, 0x24	; 36
     34e:	84 ef       	ldi	r24, 0xF4	; 244
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 dd 0e 	call	0x1dba
     356:	29 3b       	cpi	r18, 0xB9	; 185
     358:	8d e8       	ldi	r24, 0x8D	; 141
     35a:	38 07       	cpc	r19, r24
     35c:	86 e0       	ldi	r24, 0x06	; 6
     35e:	48 07       	cpc	r20, r24
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	58 07       	cpc	r21, r24
     364:	c0 f4       	brcc	.+48     	; 0x396
     366:	87 e2       	ldi	r24, 0x27	; 39
     368:	c1 31       	cpi	r28, 0x11	; 17
     36a:	d8 07       	cpc	r29, r24
     36c:	a0 f4       	brcc	.+40     	; 0x396
     36e:	ce 01       	movw	r24, r28
     370:	aa 27       	eor	r26, r26
     372:	bb 27       	eor	r27, r27
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 88 0e 	call	0x1d10
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	bc 01       	movw	r22, r24
     382:	cd 01       	movw	r24, r26
     384:	28 ee       	ldi	r18, 0xE8	; 232
     386:	33 e0       	ldi	r19, 0x03	; 3
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 bb 0e 	call	0x1d76
     390:	fa 01       	movw	r30, r20
     392:	e9 01       	movw	r28, r18
     394:	11 c0       	rjmp	.+34     	; 0x3b8
     396:	7e 01       	movw	r14, r28
     398:	00 27       	eor	r16, r16
     39a:	11 27       	eor	r17, r17
     39c:	ca 01       	movw	r24, r20
     39e:	b9 01       	movw	r22, r18
     3a0:	28 ee       	ldi	r18, 0xE8	; 232
     3a2:	33 e0       	ldi	r19, 0x03	; 3
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 bb 0e 	call	0x1d76
     3ac:	c8 01       	movw	r24, r16
     3ae:	b7 01       	movw	r22, r14
     3b0:	0e 94 88 0e 	call	0x1d10
     3b4:	fc 01       	movw	r30, r24
     3b6:	eb 01       	movw	r28, r22
     3b8:	80 91 a8 01 	lds	r24, 0x01A8
     3bc:	90 91 a9 01 	lds	r25, 0x01A9
     3c0:	a0 91 aa 01 	lds	r26, 0x01AA
     3c4:	b0 91 ab 01 	lds	r27, 0x01AB
     3c8:	22 27       	eor	r18, r18
     3ca:	38 2f       	mov	r19, r24
     3cc:	49 2f       	mov	r20, r25
     3ce:	5a 2f       	mov	r21, r26
     3d0:	82 b7       	in	r24, 0x32	; 50
     3d2:	99 27       	eor	r25, r25
     3d4:	aa 27       	eor	r26, r26
     3d6:	bb 27       	eor	r27, r27
     3d8:	28 2b       	or	r18, r24
     3da:	39 2b       	or	r19, r25
     3dc:	4a 2b       	or	r20, r26
     3de:	5b 2b       	or	r21, r27
     3e0:	cd 0d       	add	r28, r13
     3e2:	d1 1d       	adc	r29, r1
     3e4:	e1 1d       	adc	r30, r1
     3e6:	f1 1d       	adc	r31, r1
     3e8:	2c 17       	cp	r18, r28
     3ea:	3d 07       	cpc	r19, r29
     3ec:	4e 07       	cpc	r20, r30
     3ee:	5f 07       	cpc	r21, r31
     3f0:	58 f5       	brcc	.+86     	; 0x448
     3f2:	80 91 a8 01 	lds	r24, 0x01A8
     3f6:	90 91 a9 01 	lds	r25, 0x01A9
     3fa:	a0 91 aa 01 	lds	r26, 0x01AA
     3fe:	b0 91 ab 01 	lds	r27, 0x01AB
     402:	85 b7       	in	r24, 0x35	; 53
     404:	8f 78       	andi	r24, 0x8F	; 143
     406:	85 bf       	out	0x35, r24	; 53
     408:	85 b7       	in	r24, 0x35	; 53
     40a:	80 68       	ori	r24, 0x80	; 128
     40c:	85 bf       	out	0x35, r24	; 53
     40e:	88 95       	sleep
     410:	85 b7       	in	r24, 0x35	; 53
     412:	8f 77       	andi	r24, 0x7F	; 127
     414:	85 bf       	out	0x35, r24	; 53
     416:	80 91 a8 01 	lds	r24, 0x01A8
     41a:	90 91 a9 01 	lds	r25, 0x01A9
     41e:	a0 91 aa 01 	lds	r26, 0x01AA
     422:	b0 91 ab 01 	lds	r27, 0x01AB
     426:	ba 2f       	mov	r27, r26
     428:	a9 2f       	mov	r26, r25
     42a:	98 2f       	mov	r25, r24
     42c:	88 27       	eor	r24, r24
     42e:	22 b7       	in	r18, 0x32	; 50
     430:	33 27       	eor	r19, r19
     432:	44 27       	eor	r20, r20
     434:	55 27       	eor	r21, r21
     436:	82 2b       	or	r24, r18
     438:	93 2b       	or	r25, r19
     43a:	a4 2b       	or	r26, r20
     43c:	b5 2b       	or	r27, r21
     43e:	8c 17       	cp	r24, r28
     440:	9d 07       	cpc	r25, r29
     442:	ae 07       	cpc	r26, r30
     444:	bf 07       	cpc	r27, r31
     446:	a8 f2       	brcs	.-86     	; 0x3f2
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	08 95       	ret

00000458 <timer0GetOverflowCount>:
     458:	80 91 0e 01 	lds	r24, 0x010E
     45c:	90 91 0f 01 	lds	r25, 0x010F
     460:	a0 91 10 01 	lds	r26, 0x0110
     464:	b0 91 11 01 	lds	r27, 0x0111
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	08 95       	ret

0000046e <timer2GetOverflowCount>:
}

long timer2GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer2ClearOverflowCount() command was called)
	return Timer2Reg0;
     46e:	80 91 ac 01 	lds	r24, 0x01AC
     472:	90 91 ad 01 	lds	r25, 0x01AD
     476:	a0 91 ae 01 	lds	r26, 0x01AE
     47a:	b0 91 af 01 	lds	r27, 0x01AF
}
     47e:	bc 01       	movw	r22, r24
     480:	cd 01       	movw	r24, r26
     482:	08 95       	ret

00000484 <timer1PWMInit>:
#endif

void timer1PWMInit(u08 bitRes)
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     484:	89 30       	cpi	r24, 0x09	; 9
     486:	31 f4       	brne	.+12     	; 0x494
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     488:	8f b5       	in	r24, 0x2f	; 47
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     48e:	8f b5       	in	r24, 0x2f	; 47
     490:	8e 7f       	andi	r24, 0xFE	; 254
     492:	0a c0       	rjmp	.+20     	; 0x4a8
	}
	else if( bitRes == 10 )
     494:	8a 30       	cpi	r24, 0x0A	; 10
     496:	19 f4       	brne	.+6      	; 0x49e
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     498:	8f b5       	in	r24, 0x2f	; 47
     49a:	82 60       	ori	r24, 0x02	; 2
     49c:	02 c0       	rjmp	.+4      	; 0x4a2
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     49e:	8f b5       	in	r24, 0x2f	; 47
     4a0:	8d 7f       	andi	r24, 0xFD	; 253
     4a2:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     4a4:	8f b5       	in	r24, 0x2f	; 47
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     4aa:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     4ac:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     4ae:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     4b0:	18 bc       	out	0x28, r1	; 40
     4b2:	08 95       	ret

000004b4 <timer1PWMInitICR>:
}

#ifdef WGM10
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
     4b4:	9c 01       	movw	r18, r24
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     4b6:	8f b5       	in	r24, 0x2f	; 47
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1A,WGM11);
     4bc:	8f b5       	in	r24, 0x2f	; 47
     4be:	82 60       	ori	r24, 0x02	; 2
     4c0:	8f bd       	out	0x2f, r24	; 47
	sbi(TCCR1B,WGM12);
     4c2:	8e b5       	in	r24, 0x2e	; 46
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1B,WGM13);
     4c8:	8e b5       	in	r24, 0x2e	; 46
     4ca:	80 61       	ori	r24, 0x10	; 16
     4cc:	8e bd       	out	0x2e, r24	; 46
	
	// set top count value
	ICR1 = topcount;
     4ce:	37 bd       	out	0x27, r19	; 39
     4d0:	26 bd       	out	0x26, r18	; 38
	
	// clear output compare value A
	OCR1A = 0;
     4d2:	1b bc       	out	0x2b, r1	; 43
     4d4:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	OCR1B = 0;
     4d6:	19 bc       	out	0x29, r1	; 41
     4d8:	18 bc       	out	0x28, r1	; 40
     4da:	08 95       	ret

000004dc <timer1PWMAOff>:

}
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
	timer1PWMBOff();
}

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
	cbi(TCCR1A,COM1A0);
}

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
     4dc:	8f b5       	in	r24, 0x2f	; 47
     4de:	8f 77       	andi	r24, 0x7F	; 127
     4e0:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     4e2:	8f b5       	in	r24, 0x2f	; 47
     4e4:	8f 7b       	andi	r24, 0xBF	; 191
     4e6:	8f bd       	out	0x2f, r24	; 47
     4e8:	08 95       	ret

000004ea <timer1PWMBOff>:
}

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
     4ea:	8f b5       	in	r24, 0x2f	; 47
     4ec:	8f 7d       	andi	r24, 0xDF	; 223
     4ee:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     4f0:	8f b5       	in	r24, 0x2f	; 47
     4f2:	8f 7e       	andi	r24, 0xEF	; 239
     4f4:	8f bd       	out	0x2f, r24	; 47
     4f6:	08 95       	ret

000004f8 <timer1PWMOff>:
     4f8:	8f b5       	in	r24, 0x2f	; 47
     4fa:	8d 7f       	andi	r24, 0xFD	; 253
     4fc:	8f bd       	out	0x2f, r24	; 47
     4fe:	8f b5       	in	r24, 0x2f	; 47
     500:	8e 7f       	andi	r24, 0xFE	; 254
     502:	8f bd       	out	0x2f, r24	; 47
     504:	0e 94 6e 02 	call	0x4dc
     508:	0e 94 75 02 	call	0x4ea
     50c:	08 95       	ret

0000050e <timer1PWMAOn>:
     50e:	8f b5       	in	r24, 0x2f	; 47
     510:	80 68       	ori	r24, 0x80	; 128
     512:	8f bd       	out	0x2f, r24	; 47
     514:	8f b5       	in	r24, 0x2f	; 47
     516:	8f 7b       	andi	r24, 0xBF	; 191
     518:	8f bd       	out	0x2f, r24	; 47
     51a:	08 95       	ret

0000051c <timer1PWMBOn>:
     51c:	8f b5       	in	r24, 0x2f	; 47
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	8f bd       	out	0x2f, r24	; 47
     522:	8f b5       	in	r24, 0x2f	; 47
     524:	8f 7e       	andi	r24, 0xEF	; 239
     526:	8f bd       	out	0x2f, r24	; 47
     528:	08 95       	ret

0000052a <timer1PWMASet>:
}

void timer1PWMASet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel A
	// this PWM output is generated on OC1A pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     52a:	9b bd       	out	0x2b, r25	; 43
     52c:	8a bd       	out	0x2a, r24	; 42
     52e:	08 95       	ret

00000530 <timer1PWMBSet>:
}

void timer1PWMBSet(u16 pwmDuty)
{
	// set PWM (output compare) duty for channel B
	// this PWM output is generated on OC1B pin
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     530:	99 bd       	out	0x29, r25	; 41
     532:	88 bd       	out	0x28, r24	; 40
     534:	08 95       	ret

00000536 <__vector_9>:
}
/*
//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{
	Timer0Reg0++;			// increment low-order counter

	// increment pause counter
	TimerPauseReg++;

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
		TimerIntFunc[TIMER0OVERFLOW_INT]();
}
*/

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     558:	80 91 dc 00 	lds	r24, 0x00DC
     55c:	90 91 dd 00 	lds	r25, 0x00DD
     560:	89 2b       	or	r24, r25
     562:	29 f0       	breq	.+10     	; 0x56e
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     564:	e0 91 dc 00 	lds	r30, 0x00DC
     568:	f0 91 dd 00 	lds	r31, 0x00DD
     56c:	09 95       	icall
     56e:	ff 91       	pop	r31
     570:	ef 91       	pop	r30
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	4f 91       	pop	r20
     582:	3f 91       	pop	r19
     584:	2f 91       	pop	r18
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <__vector_5>:
}

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW2)
{
     590:	1f 92       	push	r1
     592:	0f 92       	push	r0
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	0f 92       	push	r0
     598:	11 24       	eor	r1, r1
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     5b2:	80 91 ac 01 	lds	r24, 0x01AC
     5b6:	90 91 ad 01 	lds	r25, 0x01AD
     5ba:	a0 91 ae 01 	lds	r26, 0x01AE
     5be:	b0 91 af 01 	lds	r27, 0x01AF
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	a1 1d       	adc	r26, r1
     5c6:	b1 1d       	adc	r27, r1
     5c8:	80 93 ac 01 	sts	0x01AC, r24
     5cc:	90 93 ad 01 	sts	0x01AD, r25
     5d0:	a0 93 ae 01 	sts	0x01AE, r26
     5d4:	b0 93 af 01 	sts	0x01AF, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     5d8:	80 91 e4 00 	lds	r24, 0x00E4
     5dc:	90 91 e5 00 	lds	r25, 0x00E5
     5e0:	89 2b       	or	r24, r25
     5e2:	29 f0       	breq	.+10     	; 0x5ee
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     5e4:	e0 91 e4 00 	lds	r30, 0x00E4
     5e8:	f0 91 e5 00 	lds	r31, 0x00E5
     5ec:	09 95       	icall
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0f be       	out	0x3f, r0	; 63
     60a:	0f 90       	pop	r0
     60c:	1f 90       	pop	r1
     60e:	18 95       	reti

00000610 <__vector_10>:
}
#endif

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE0)
{
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     632:	80 91 e8 00 	lds	r24, 0x00E8
     636:	90 91 e9 00 	lds	r25, 0x00E9
     63a:	89 2b       	or	r24, r25
     63c:	29 f0       	breq	.+10     	; 0x648
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     63e:	e0 91 e8 00 	lds	r30, 0x00E8
     642:	f0 91 e9 00 	lds	r31, 0x00E9
     646:	09 95       	icall
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	1f 90       	pop	r1
     668:	18 95       	reti

0000066a <__vector_7>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1A)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	2f 93       	push	r18
     676:	3f 93       	push	r19
     678:	4f 93       	push	r20
     67a:	5f 93       	push	r21
     67c:	6f 93       	push	r22
     67e:	7f 93       	push	r23
     680:	8f 93       	push	r24
     682:	9f 93       	push	r25
     684:	af 93       	push	r26
     686:	bf 93       	push	r27
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     68c:	80 91 de 00 	lds	r24, 0x00DE
     690:	90 91 df 00 	lds	r25, 0x00DF
     694:	89 2b       	or	r24, r25
     696:	29 f0       	breq	.+10     	; 0x6a2
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     698:	e0 91 de 00 	lds	r30, 0x00DE
     69c:	f0 91 df 00 	lds	r31, 0x00DF
     6a0:	09 95       	icall
     6a2:	ff 91       	pop	r31
     6a4:	ef 91       	pop	r30
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_8>:
}

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1B)
{
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     6e6:	80 91 e0 00 	lds	r24, 0x00E0
     6ea:	90 91 e1 00 	lds	r25, 0x00E1
     6ee:	89 2b       	or	r24, r25
     6f0:	29 f0       	breq	.+10     	; 0x6fc
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     6f2:	e0 91 e0 00 	lds	r30, 0x00E0
     6f6:	f0 91 e1 00 	lds	r31, 0x00E1
     6fa:	09 95       	icall
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_6>:
}

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(SIG_INPUT_CAPTURE1)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	2f 93       	push	r18
     72a:	3f 93       	push	r19
     72c:	4f 93       	push	r20
     72e:	5f 93       	push	r21
     730:	6f 93       	push	r22
     732:	7f 93       	push	r23
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	af 93       	push	r26
     73a:	bf 93       	push	r27
     73c:	ef 93       	push	r30
     73e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     740:	80 91 e2 00 	lds	r24, 0x00E2
     744:	90 91 e3 00 	lds	r25, 0x00E3
     748:	89 2b       	or	r24, r25
     74a:	29 f0       	breq	.+10     	; 0x756
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     74c:	e0 91 e2 00 	lds	r30, 0x00E2
     750:	f0 91 e3 00 	lds	r31, 0x00E3
     754:	09 95       	icall
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <__vector_4>:
}

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE2)
{
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     79a:	80 91 e6 00 	lds	r24, 0x00E6
     79e:	90 91 e7 00 	lds	r25, 0x00E7
     7a2:	89 2b       	or	r24, r25
     7a4:	29 f0       	breq	.+10     	; 0x7b0
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     7a6:	e0 91 e6 00 	lds	r30, 0x00E6
     7aa:	f0 91 e7 00 	lds	r31, 0x00E7
     7ae:	09 95       	icall
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	bf 91       	pop	r27
     7b6:	af 91       	pop	r26
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	7f 91       	pop	r23
     7be:	6f 91       	pop	r22
     7c0:	5f 91       	pop	r21
     7c2:	4f 91       	pop	r20
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	0f 90       	pop	r0
     7ce:	1f 90       	pop	r1
     7d0:	18 95       	reti

000007d2 <servoInit>:
     7d2:	89 b7       	in	r24, 0x39	; 57
     7d4:	8f 7e       	andi	r24, 0xEF	; 239
     7d6:	89 bf       	out	0x39, r24	; 57
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	0e 94 29 01 	call	0x252
     7de:	6c e8       	ldi	r22, 0x8C	; 140
     7e0:	74 e0       	ldi	r23, 0x04	; 4
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 84 01 	call	0x308
     7e8:	a2 e2       	ldi	r26, 0x22	; 34
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	55 e1       	ldi	r21, 0x15	; 21
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	eb ee       	ldi	r30, 0xEB	; 235
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	b3 83       	std	Z+3, r27	; 0x03
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	50 83       	st	Z, r21
     802:	cb 01       	movw	r24, r22
     804:	02 2e       	mov	r0, r18
     806:	02 c0       	rjmp	.+4      	; 0x80c
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808
     810:	81 83       	std	Z+1, r24	; 0x01
     812:	41 50       	subi	r20, 0x01	; 1
     814:	2f 5f       	subi	r18, 0xFF	; 255
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	34 96       	adiw	r30, 0x04	; 4
     81a:	47 ff       	sbrs	r20, 7
     81c:	ef cf       	rjmp	.-34     	; 0x7fc
     81e:	10 92 0d 01 	sts	0x010D, r1
     822:	10 92 0c 01 	sts	0x010C, r1
     826:	8a ed       	ldi	r24, 0xDA	; 218
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	90 93 b1 01 	sts	0x01B1, r25
     82e:	80 93 b0 01 	sts	0x01B0, r24
     832:	2a b5       	in	r18, 0x2a	; 42
     834:	8b b5       	in	r24, 0x2b	; 43
     836:	99 27       	eor	r25, r25
     838:	98 2f       	mov	r25, r24
     83a:	88 27       	eor	r24, r24
     83c:	82 0f       	add	r24, r18
     83e:	91 1d       	adc	r25, r1
     840:	86 52       	subi	r24, 0x26	; 38
     842:	9b 4f       	sbci	r25, 0xFB	; 251
     844:	29 2f       	mov	r18, r25
     846:	33 27       	eor	r19, r19
     848:	2b bd       	out	0x2b, r18	; 43
     84a:	8a bd       	out	0x2a, r24	; 42
     84c:	89 b7       	in	r24, 0x39	; 57
     84e:	80 61       	ori	r24, 0x10	; 16
     850:	89 bf       	out	0x39, r24	; 57
     852:	08 95       	ret

00000854 <servoOff>:
     854:	89 b7       	in	r24, 0x39	; 57
     856:	8f 7e       	andi	r24, 0xEF	; 239
     858:	89 bf       	out	0x39, r24	; 57
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	0e 94 06 01 	call	0x20c
     860:	08 95       	ret

00000862 <servoSetChannelIO>:
     862:	24 2f       	mov	r18, r20
     864:	e8 2f       	mov	r30, r24
     866:	ff 27       	eor	r31, r31
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	e5 51       	subi	r30, 0x15	; 21
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	60 83       	st	Z, r22
     876:	33 27       	eor	r19, r19
     878:	27 70       	andi	r18, 0x07	; 7
     87a:	30 70       	andi	r19, 0x00	; 0
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	2a 95       	dec	r18
     888:	e2 f7       	brpl	.-8      	; 0x882
     88a:	81 83       	std	Z+1, r24	; 0x01
     88c:	08 95       	ret

0000088e <servoSetPositionRaw>:
     88e:	62 32       	cpi	r22, 0x22	; 34
     890:	71 05       	cpc	r23, r1
     892:	10 f4       	brcc	.+4      	; 0x898
     894:	62 e2       	ldi	r22, 0x22	; 34
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	6b 38       	cpi	r22, 0x8B	; 139
     89a:	71 05       	cpc	r23, r1
     89c:	10 f0       	brcs	.+4      	; 0x8a2
     89e:	6a e8       	ldi	r22, 0x8A	; 138
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	e8 2f       	mov	r30, r24
     8a4:	ff 27       	eor	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	e5 51       	subi	r30, 0x15	; 21
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	73 83       	std	Z+3, r23	; 0x03
     8b4:	62 83       	std	Z+2, r22	; 0x02
     8b6:	08 95       	ret

000008b8 <servoSetPosition>:
     8b8:	28 2f       	mov	r18, r24
     8ba:	88 e6       	ldi	r24, 0x68	; 104
     8bc:	68 9f       	mul	r22, r24
     8be:	c0 01       	movw	r24, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	6f ef       	ldi	r22, 0xFF	; 255
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 a7 0e 	call	0x1d4e
     8ca:	cb 01       	movw	r24, r22
     8cc:	82 96       	adiw	r24, 0x22	; 34
     8ce:	bc 01       	movw	r22, r24
     8d0:	82 2f       	mov	r24, r18
     8d2:	0e 94 47 04 	call	0x88e
     8d6:	08 95       	ret

000008d8 <servoGetPositionRaw>:
     8d8:	e8 2f       	mov	r30, r24
     8da:	ff 27       	eor	r31, r31
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e5 51       	subi	r30, 0x15	; 21
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	08 95       	ret

000008ee <servoGetPosition>:
     8ee:	0e 94 6c 04 	call	0x8d8
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	82 9f       	mul	r24, r18
     8f8:	a0 01       	movw	r20, r0
     8fa:	83 9f       	mul	r24, r19
     8fc:	50 0d       	add	r21, r0
     8fe:	92 9f       	mul	r25, r18
     900:	50 0d       	add	r21, r0
     902:	11 24       	eor	r1, r1
     904:	ca 01       	movw	r24, r20
     906:	8e 5d       	subi	r24, 0xDE	; 222
     908:	91 42       	sbci	r25, 0x21	; 33
     90a:	68 e6       	ldi	r22, 0x68	; 104
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0e 94 a7 0e 	call	0x1d4e
     912:	cb 01       	movw	r24, r22
     914:	99 27       	eor	r25, r25
     916:	08 95       	ret

00000918 <servoService>:
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	e0 91 ea 00 	lds	r30, 0x00EA
     920:	e2 30       	cpi	r30, 0x02	; 2
     922:	80 f4       	brcc	.+32     	; 0x944
     924:	ff 27       	eor	r31, r31
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	e5 51       	subi	r30, 0x15	; 21
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	80 81       	ld	r24, Z
     934:	a8 2f       	mov	r26, r24
     936:	bb 27       	eor	r27, r27
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	90 95       	com	r25
     93c:	ed 01       	movw	r28, r26
     93e:	88 a1       	ldd	r24, Y+32	; 0x20
     940:	89 23       	and	r24, r25
     942:	88 a3       	std	Y+32, r24	; 0x20
     944:	80 91 ea 00 	lds	r24, 0x00EA
     948:	8f 5f       	subi	r24, 0xFF	; 255
     94a:	80 93 ea 00 	sts	0x00EA, r24
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	19 f1       	breq	.+70     	; 0x998
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	10 f0       	brcs	.+4      	; 0x95a
     956:	10 92 ea 00 	sts	0x00EA, r1
     95a:	80 91 ea 00 	lds	r24, 0x00EA
     95e:	e8 2f       	mov	r30, r24
     960:	ff 27       	eor	r31, r31
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	e5 51       	subi	r30, 0x15	; 21
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	80 81       	ld	r24, Z
     970:	a8 2f       	mov	r26, r24
     972:	bb 27       	eor	r27, r27
     974:	ed 01       	movw	r28, r26
     976:	88 a1       	ldd	r24, Y+32	; 0x20
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	89 2b       	or	r24, r25
     97c:	88 a3       	std	Y+32, r24	; 0x20
     97e:	80 91 ea 00 	lds	r24, 0x00EA
     982:	e8 2f       	mov	r30, r24
     984:	ff 27       	eor	r31, r31
     986:	ee 0f       	add	r30, r30
     988:	ff 1f       	adc	r31, r31
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	e5 51       	subi	r30, 0x15	; 21
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	42 81       	ldd	r20, Z+2	; 0x02
     994:	53 81       	ldd	r21, Z+3	; 0x03
     996:	0a c0       	rjmp	.+20     	; 0x9ac
     998:	40 91 b0 01 	lds	r20, 0x01B0
     99c:	50 91 b1 01 	lds	r21, 0x01B1
     9a0:	80 91 0c 01 	lds	r24, 0x010C
     9a4:	90 91 0d 01 	lds	r25, 0x010D
     9a8:	48 1b       	sub	r20, r24
     9aa:	59 0b       	sbc	r21, r25
     9ac:	2a b5       	in	r18, 0x2a	; 42
     9ae:	8b b5       	in	r24, 0x2b	; 43
     9b0:	99 27       	eor	r25, r25
     9b2:	98 2f       	mov	r25, r24
     9b4:	88 27       	eor	r24, r24
     9b6:	82 0f       	add	r24, r18
     9b8:	91 1d       	adc	r25, r1
     9ba:	84 0f       	add	r24, r20
     9bc:	95 1f       	adc	r25, r21
     9be:	29 2f       	mov	r18, r25
     9c0:	33 27       	eor	r19, r19
     9c2:	2b bd       	out	0x2b, r18	; 43
     9c4:	8a bd       	out	0x2a, r24	; 42
     9c6:	80 91 0c 01 	lds	r24, 0x010C
     9ca:	90 91 0d 01 	lds	r25, 0x010D
     9ce:	84 0f       	add	r24, r20
     9d0:	95 1f       	adc	r25, r21
     9d2:	90 93 0d 01 	sts	0x010D, r25
     9d6:	80 93 0c 01 	sts	0x010C, r24
     9da:	20 91 b0 01 	lds	r18, 0x01B0
     9de:	30 91 b1 01 	lds	r19, 0x01B1
     9e2:	82 17       	cp	r24, r18
     9e4:	93 07       	cpc	r25, r19
     9e6:	20 f0       	brcs	.+8      	; 0x9f0
     9e8:	10 92 0d 01 	sts	0x010D, r1
     9ec:	10 92 0c 01 	sts	0x010C, r1
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <__vector_11>:
     9f6:	0e 94 93 0c 	call	0x1926
     9fa:	82 b7       	in	r24, 0x32	; 50
     9fc:	8f 53       	subi	r24, 0x3F	; 63
     9fe:	82 bf       	out	0x32, r24	; 50
     a00:	0e 94 2d 0e 	call	0x1c5a
     a04:	0e 94 df 0c 	call	0x19be

00000a08 <myputs>:
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	8c 01       	movw	r16, r24
     a12:	eb 01       	movw	r28, r22
     a14:	88 81       	ld	r24, Y
     a16:	88 23       	and	r24, r24
     a18:	31 f0       	breq	.+12     	; 0xa26
     a1a:	89 91       	ld	r24, Y+
     a1c:	f8 01       	movw	r30, r16
     a1e:	09 95       	icall
     a20:	88 81       	ld	r24, Y
     a22:	88 23       	and	r24, r24
     a24:	d1 f7       	brne	.-12     	; 0xa1a
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <myputs_P>:
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	8c 01       	movw	r16, r24
     a3a:	eb 01       	movw	r28, r22
     a3c:	fb 01       	movw	r30, r22
     a3e:	84 91       	lpm	r24, Z
     a40:	88 23       	and	r24, r24
     a42:	49 f0       	breq	.+18     	; 0xa56
     a44:	fe 01       	movw	r30, r28
     a46:	21 96       	adiw	r28, 0x01	; 1
     a48:	84 91       	lpm	r24, Z
     a4a:	f8 01       	movw	r30, r16
     a4c:	09 95       	icall
     a4e:	fe 01       	movw	r30, r28
     a50:	84 91       	lpm	r24, Z
     a52:	88 23       	and	r24, r24
     a54:	b9 f7       	brne	.-18     	; 0xa44
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <task0>:
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	26 97       	sbiw	r28, 0x06	; 6
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		int c = 0;
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	10 e0       	ldi	r17, 0x00	; 0
		
		while (c<360)
		{	printf_P(PSTR("c %d"), c);
     a78:	1f 93       	push	r17
     a7a:	0f 93       	push	r16
     a7c:	85 e8       	ldi	r24, 0x85	; 133
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	0e 94 57 08 	call	0x10ae
			putchar('\r'),putchar('\n');
     a88:	60 91 d9 03 	lds	r22, 0x03D9
     a8c:	70 91 da 03 	lds	r23, 0x03DA
     a90:	8d e0       	ldi	r24, 0x0D	; 13
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 07 08 	call	0x100e
     a98:	60 91 d9 03 	lds	r22, 0x03D9
     a9c:	70 91 da 03 	lds	r23, 0x03DA
     aa0:	8a e0       	ldi	r24, 0x0A	; 10
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 07 08 	call	0x100e
			c++;
     aa8:	0f 5f       	subi	r16, 0xFF	; 255
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
			AvrXDelay(&timer, 100);
     aac:	64 e6       	ldi	r22, 0x64	; 100
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 ff 0d 	call	0x1bfe
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	08 36       	cpi	r16, 0x68	; 104
     ac4:	18 07       	cpc	r17, r24
     ac6:	c4 f2       	brlt	.-80     	; 0xa78
     ac8:	08 e6       	ldi	r16, 0x68	; 104
     aca:	11 e0       	ldi	r17, 0x01	; 1
		}
		while (c > 0)
		{	printf_P(PSTR("c %d"), c);
     acc:	1f 93       	push	r17
     ace:	0f 93       	push	r16
     ad0:	8a e8       	ldi	r24, 0x8A	; 138
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	0e 94 57 08 	call	0x10ae
			putchar('\r'),putchar('\n');
     adc:	60 91 d9 03 	lds	r22, 0x03D9
     ae0:	70 91 da 03 	lds	r23, 0x03DA
     ae4:	8d e0       	ldi	r24, 0x0D	; 13
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 07 08 	call	0x100e
     aec:	60 91 d9 03 	lds	r22, 0x03D9
     af0:	70 91 da 03 	lds	r23, 0x03DA
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 07 08 	call	0x100e
			c--;
     afc:	01 50       	subi	r16, 0x01	; 1
     afe:	10 40       	sbci	r17, 0x00	; 0
			AvrXDelay(&timer, 100);
     b00:	64 e6       	ldi	r22, 0x64	; 100
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 ff 0d 	call	0x1bfe
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	10 16       	cp	r1, r16
     b16:	11 06       	cpc	r1, r17
     b18:	cc f2       	brlt	.-78     	; 0xacc
     b1a:	ac cf       	rjmp	.-168    	; 0xa74

00000b1c <getCommands>:
		}
	}
}
AVRX_GCC_TASKDEF(getCommands, 100, 5)
{	
	int c;		
	
	while (1)
	{
		while ((c = getchar()) != EOF)
     b1c:	15 c0       	rjmp	.+42     	; 0xb48
		{	
			if (c == '\r')
     b1e:	cd 30       	cpi	r28, 0x0D	; 13
     b20:	d1 05       	cpc	r29, r1
     b22:	79 f4       	brne	.+30     	; 0xb42
			{	putchar('\r');
     b24:	60 91 d9 03 	lds	r22, 0x03D9
     b28:	70 91 da 03 	lds	r23, 0x03DA
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 07 08 	call	0x100e
				putchar('\n');
     b32:	60 91 d9 03 	lds	r22, 0x03D9
     b36:	70 91 da 03 	lds	r23, 0x03DA
     b3a:	8a e0       	ldi	r24, 0x0A	; 10
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 07 08 	call	0x100e
			}
			parserInputFunc(c);
     b42:	8c 2f       	mov	r24, r28
     b44:	0e 94 d3 00 	call	0x1a6
     b48:	80 91 d7 03 	lds	r24, 0x03D7
     b4c:	90 91 d8 03 	lds	r25, 0x03D8
     b50:	0e 94 ca 07 	call	0xf94
     b54:	ec 01       	movw	r28, r24
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	cf 3f       	cpi	r28, 0xFF	; 255
     b5a:	d8 07       	cpc	r29, r24
     b5c:	01 f7       	brne	.-64     	; 0xb1e
     b5e:	f4 cf       	rjmp	.-24     	; 0xb48

00000b60 <marktribe>:
		}
	}
}

AVRX_GCC_TASKDEF(marktribe, 70, 3)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	26 97       	sbiw	r28, 0x06	; 6
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer2;
    int c = 'a';
     b74:	01 e6       	ldi	r16, 0x61	; 97
     b76:	10 e0       	ldi	r17, 0x00	; 0
    printf_P(PSTR("I founded Rhizome!\r\n"));
     b78:	8f e8       	ldi	r24, 0x8F	; 143
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	0e 94 57 08 	call	0x10ae
    while(1)
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
    {    
        printf_P(PSTR("%d "),c);
     b88:	1f 93       	push	r17
     b8a:	0f 93       	push	r16
     b8c:	84 ea       	ldi	r24, 0xA4	; 164
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	0e 94 57 08 	call	0x10ae
        c++;
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
        AvrXDelay(&timer2, 10000); //supposed to be a 1000 ms delay
     b9c:	60 e1       	ldi	r22, 0x10	; 16
     b9e:	77 e2       	ldi	r23, 0x27	; 39
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 ff 0d 	call	0x1bfe
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	eb cf       	rjmp	.-42     	; 0xb88

00000bb2 <main>:
    }
    
}
	
/*
AVRX_GCC_TASKDEF(servos, 120, 1)
{
	TimerControlBlock timer3;
	
	u08 pos;
	u08 channel;

	// do some examples
	// initialize RC servo system
	servoInit();
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);


	// set port pins to output
	outb(DDRC, 0x01);

	pos = 0;
	
	#define SPEED_SERVO	1

	// spin servos sequentially back and forth between their limits
	while(1)
	{
		for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
		{
			for(pos=0; pos<SERVO_POSITION_MAX; pos++)
			{
				servoSetPosition(channel,pos);
				AvrXDelay(&timer3, 1000);;
			}
		}

		for(channel=0; channel<SERVO_NUM_CHANNELS; channel++)
		{
			for(pos=SERVO_POSITION_MAX; pos>=1; pos--)
			{
				servoSetPosition(channel,pos);
				AvrXDelay(&timer3, 1000);;
			}
		}
	}
}
*/
//#endif // USART_CHANNELS & CHANNEL_0

int main(void)
{
     bb2:	cf e5       	ldi	r28, 0x5F	; 95
     bb4:	d8 e0       	ldi	r29, 0x08	; 8
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 18 0d 	call	0x1a30

	MCUCR = _BV(SE);
     bc2:	80 e8       	ldi	r24, 0x80	; 128
     bc4:	85 bf       	out	0x35, r24	; 53
	TCNT0 = TCNT0_INIT;
     bc6:	81 ec       	ldi	r24, 0xC1	; 193
     bc8:	82 bf       	out	0x32, r24	; 50
#if defined (__AVR_ATmega103__) || defined (__ATmega103__)
	TCCR0 =  ((1<<CS02) | (1<<CS01));
#elif defined (__AVR_ATmega128__) || defined (__ATmega128__) || defined (__AVR_ATmega64__) || defined (__ATmega64__)
	TCCR0 =  ((1<<CS2) | (1<<CS1));
#else	// Most other chips...  Note: some are TCCR0 and some are TCCR0B...
	TCCR0 =  (1<<CS02);
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	83 bf       	out	0x33, r24	; 51
#endif
	TIMSK = _BV(TOIE0);
     bce:	11 e0       	ldi	r17, 0x01	; 1
     bd0:	19 bf       	out	0x39, r17	; 57

    InitSerial0(BAUD(57600));
     bd2:	81 e2       	ldi	r24, 0x21	; 33
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 77 06 	call	0xcee
    fdevopen(put_char0, get_c0,0);		// Set up standard I/O
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	60 ea       	ldi	r22, 0xA0	; 160
     be0:	76 e0       	ldi	r23, 0x06	; 6
     be2:	87 e9       	ldi	r24, 0x97	; 151
     be4:	96 e0       	ldi	r25, 0x06	; 6
     be6:	0e 94 81 07 	call	0xf02

	// initialize parser system
	parserInit();
     bea:	0e 94 71 00 	call	0xe2
	// direct output to uart (serial port)
	parserSetOutputFunc(put_char0);
     bee:	87 e9       	ldi	r24, 0x97	; 151
     bf0:	96 e0       	ldi	r25, 0x06	; 6
     bf2:	0e 94 99 00 	call	0x132
	// add commands to the command database
	parserAddCommand("a",		testFunctionA);
     bf6:	67 e2       	ldi	r22, 0x27	; 39
     bf8:	76 e0       	ldi	r23, 0x06	; 6
     bfa:	80 e6       	ldi	r24, 0x60	; 96
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 7a 00 	call	0xf4
	parserAddCommand("b",		testFunctionB);
     c02:	6f e4       	ldi	r22, 0x4F	; 79
     c04:	76 e0       	ldi	r23, 0x06	; 6
     c06:	82 e6       	ldi	r24, 0x62	; 98
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 7a 00 	call	0xf4
    
	// initialize the timer system -- FROM AVRLIB
	//timerInit();
	
	//////////////////////////////////////////////////Servos//////////////////////////
	servoInit();
     c0e:	0e 94 e9 03 	call	0x7d2
	// setup servo output channel-to-I/Opin mapping
	// format is servoSetChannelIO( CHANNEL#, PORT, PIN );
	servoSetChannelIO(0, _SFR_IO_ADDR(PORTC), PC0);
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	65 e1       	ldi	r22, 0x15	; 21
     c16:	84 2f       	mov	r24, r20
     c18:	0e 94 31 04 	call	0x862
	servoSetChannelIO(1, _SFR_IO_ADDR(PORTC), PC1);
     c1c:	41 2f       	mov	r20, r17
     c1e:	65 e1       	ldi	r22, 0x15	; 21
     c20:	81 2f       	mov	r24, r17
     c22:	0e 94 31 04 	call	0x862

	// set port pins to output
	outb(DDRC, 0x03);
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	84 bb       	out	0x14, r24	; 20

	
	#define SPEED_SERVO	1
	//////////////////////////////////////////////////////////////////////////////////
	
	AvrXRunTask(TCB(getCommands));
     c2a:	8b e5       	ldi	r24, 0x5B	; 91
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 24 0d 	call	0x1a48
	AvrXRunTask(TCB(marktribe));
     c32:	84 e5       	ldi	r24, 0x54	; 84
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 24 0d 	call	0x1a48
	AvrXRunTask(TCB(task0));
     c3a:	82 e6       	ldi	r24, 0x62	; 98
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 24 0d 	call	0x1a48
	//AvrXRunTask(TCB(servos));
    
	Epilog();
     c42:	0e 94 df 0c 	call	0x19be
	return(0);
}
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0c 94 f8 0e 	jmp	0x1df0

00000c4e <testFunctionA>:

void testFunctionA(void)
{	

	funcAParam = parserGetArgInt();
     c4e:	0e 94 ed 00 	call	0x1da
     c52:	90 93 40 02 	sts	0x0240, r25
     c56:	80 93 3f 02 	sts	0x023F, r24
	printf("test successful: 'a' function called with argument %d", funcAParam);
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	84 e6       	ldi	r24, 0x64	; 100
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	0e 94 42 08 	call	0x1084
	servoSetPosition(LEFT_SERVO_CHAN,(char) funcAParam);
     c6a:	60 91 3f 02 	lds	r22, 0x023F
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 5c 04 	call	0x8b8
	putchar('\r');
     c74:	60 91 d9 03 	lds	r22, 0x03D9
     c78:	70 91 da 03 	lds	r23, 0x03DA
     c7c:	8d e0       	ldi	r24, 0x0D	; 13
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 07 08 	call	0x100e
	putchar('\n');
     c84:	60 91 d9 03 	lds	r22, 0x03D9
     c88:	70 91 da 03 	lds	r23, 0x03DA
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 07 08 	call	0x100e
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	08 95       	ret

00000c9e <testFunctionB>:
}

void testFunctionB(void)
{	
	
	
	funcBParam = parserGetArgInt();
     c9e:	0e 94 ed 00 	call	0x1da
     ca2:	90 93 b9 01 	sts	0x01B9, r25
     ca6:	80 93 b8 01 	sts	0x01B8, r24
	printf("test successful: 'b' function called with argument %d", funcBParam);
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	8a e9       	ldi	r24, 0x9A	; 154
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 42 08 	call	0x1084
	servoSetPosition(RIGHT_SERVO_CHAN,(char) funcBParam);
     cba:	60 91 b8 01 	lds	r22, 0x01B8
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 5c 04 	call	0x8b8
	putchar('\r');
     cc4:	60 91 d9 03 	lds	r22, 0x03D9
     cc8:	70 91 da 03 	lds	r23, 0x03DA
     ccc:	8d e0       	ldi	r24, 0x0D	; 13
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 07 08 	call	0x100e
	putchar('\n');
     cd4:	60 91 d9 03 	lds	r22, 0x03D9
     cd8:	70 91 da 03 	lds	r23, 0x03DA
     cdc:	8a e0       	ldi	r24, 0x0A	; 10
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 07 08 	call	0x100e
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	08 95       	ret

00000cee <InitSerial0>:
     cee:	89 b9       	out	0x09, r24	; 9
     cf0:	89 2f       	mov	r24, r25
     cf2:	99 27       	eor	r25, r25
     cf4:	80 bd       	out	0x20, r24	; 32
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	8b b9       	out	0x0b, r24	; 11
     cfa:	88 e9       	ldi	r24, 0x98	; 152
     cfc:	8a b9       	out	0x0a, r24	; 10
     cfe:	86 e8       	ldi	r24, 0x86	; 134
     d00:	80 bd       	out	0x20, r24	; 32
     d02:	8e e5       	ldi	r24, 0x5E	; 94
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	0e 94 27 07 	call	0xe4e
     d0a:	84 e6       	ldi	r24, 0x64	; 100
     d0c:	80 93 64 03 	sts	0x0364, r24
     d10:	87 e3       	ldi	r24, 0x37	; 55
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 27 07 	call	0xe4e
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	80 93 3d 03 	sts	0x033D, r24
     d1e:	08 95       	ret

00000d20 <put_c0>:
     d20:	68 2f       	mov	r22, r24
     d22:	87 e3       	ldi	r24, 0x37	; 55
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 c4 06 	call	0xd88
     d2a:	55 9a       	sbi	0x0a, 5	; 10
     d2c:	08 95       	ret

00000d2e <put_char0>:
     d2e:	68 2f       	mov	r22, r24
     d30:	87 e3       	ldi	r24, 0x37	; 55
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	0e 94 01 07 	call	0xe02
     d38:	55 9a       	sbi	0x0a, 5	; 10
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	08 95       	ret

00000d40 <get_c0>:
     d40:	8e e5       	ldi	r24, 0x5E	; 94
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 e0 06 	call	0xdc0
     d48:	08 95       	ret

00000d4a <get_char0>:
     d4a:	8e e5       	ldi	r24, 0x5E	; 94
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	0e 94 16 07 	call	0xe2c
     d52:	08 95       	ret

00000d54 <__vector_13>:
     d54:	0e 94 93 0c 	call	0x1926
     d58:	57 98       	cbi	0x0a, 7	; 10
     d5a:	78 94       	sei
     d5c:	6c b1       	in	r22, 0x0c	; 12
     d5e:	8e e5       	ldi	r24, 0x5E	; 94
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 c4 06 	call	0xd88
     d66:	57 9a       	sbi	0x0a, 7	; 10
     d68:	0e 94 df 0c 	call	0x19be

00000d6c <__vector_14>:
     d6c:	0e 94 93 0c 	call	0x1926
     d70:	55 98       	cbi	0x0a, 5	; 10
     d72:	78 94       	sei
     d74:	87 e3       	ldi	r24, 0x37	; 55
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 e0 06 	call	0xdc0
     d7c:	97 fd       	sbrc	r25, 7
     d7e:	02 c0       	rjmp	.+4      	; 0xd84
     d80:	8c b9       	out	0x0c, r24	; 12
     d82:	55 9a       	sbi	0x0a, 5	; 10
     d84:	0e 94 df 0c 	call	0x19be

00000d88 <AvrXPutFifo>:
     d88:	dc 01       	movw	r26, r24
     d8a:	fc 01       	movw	r30, r24
     d8c:	24 81       	ldd	r18, Z+4	; 0x04
     d8e:	92 2f       	mov	r25, r18
     d90:	9f 5f       	subi	r25, 0xFF	; 255
     d92:	86 81       	ldd	r24, Z+6	; 0x06
     d94:	98 17       	cp	r25, r24
     d96:	08 f0       	brcs	.+2      	; 0xd9a
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fd 01       	movw	r30, r26
     d9c:	85 81       	ldd	r24, Z+5	; 0x05
     d9e:	98 17       	cp	r25, r24
     da0:	19 f4       	brne	.+6      	; 0xda8
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	08 95       	ret
     da8:	fd 01       	movw	r30, r26
     daa:	e2 0f       	add	r30, r18
     dac:	f1 1d       	adc	r31, r1
     dae:	67 83       	std	Z+7, r22	; 0x07
     db0:	fd 01       	movw	r30, r26
     db2:	94 83       	std	Z+4, r25	; 0x04
     db4:	cd 01       	movw	r24, r26
     db6:	0e 94 96 0d 	call	0x1b2c
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	08 95       	ret

00000dc0 <AvrXPullFifo>:
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	dc 01       	movw	r26, r24
     dc6:	fc 01       	movw	r30, r24
     dc8:	84 81       	ldd	r24, Z+4	; 0x04
     dca:	95 81       	ldd	r25, Z+5	; 0x05
     dcc:	89 17       	cp	r24, r25
     dce:	19 f4       	brne	.+6      	; 0xdd6
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	9f ef       	ldi	r25, 0xFF	; 255
     dd4:	13 c0       	rjmp	.+38     	; 0xdfc
     dd6:	fd 01       	movw	r30, r26
     dd8:	e9 0f       	add	r30, r25
     dda:	f1 1d       	adc	r31, r1
     ddc:	87 81       	ldd	r24, Z+7	; 0x07
     dde:	c8 2f       	mov	r28, r24
     de0:	dd 27       	eor	r29, r29
     de2:	9f 5f       	subi	r25, 0xFF	; 255
     de4:	fd 01       	movw	r30, r26
     de6:	86 81       	ldd	r24, Z+6	; 0x06
     de8:	98 17       	cp	r25, r24
     dea:	08 f0       	brcs	.+2      	; 0xdee
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	fd 01       	movw	r30, r26
     df0:	95 83       	std	Z+5, r25	; 0x05
     df2:	cd 01       	movw	r24, r26
     df4:	02 96       	adiw	r24, 0x02	; 2
     df6:	0e 94 96 0d 	call	0x1b2c
     dfa:	ce 01       	movw	r24, r28
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <AvrXWaitPutFifo>:
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ec 01       	movw	r28, r24
     e0a:	16 2f       	mov	r17, r22
     e0c:	04 c0       	rjmp	.+8      	; 0xe16
     e0e:	ce 01       	movw	r24, r28
     e10:	02 96       	adiw	r24, 0x02	; 2
     e12:	0e 94 7f 0d 	call	0x1afe
     e16:	61 2f       	mov	r22, r17
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 c4 06 	call	0xd88
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	a9 f3       	breq	.-22     	; 0xe0e
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	08 95       	ret

00000e2c <AvrXWaitPullFifo>:
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	03 c0       	rjmp	.+6      	; 0xe3a
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 7f 0d 	call	0x1afe
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 e0 06 	call	0xdc0
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	8f 3f       	cpi	r24, 0xFF	; 255
     e44:	92 07       	cpc	r25, r18
     e46:	b1 f3       	breq	.-20     	; 0xe34
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <AvrXFlushFifo>:
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	8c 01       	movw	r16, r24
     e54:	fc 01       	movw	r30, r24
     e56:	14 82       	std	Z+4, r1	; 0x04
     e58:	15 82       	std	Z+5, r1	; 0x05
     e5a:	02 96       	adiw	r24, 0x02	; 2
     e5c:	0e 94 f2 0d 	call	0x1be4
     e60:	c8 01       	movw	r24, r16
     e62:	0e 94 f2 0d 	call	0x1be4
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <AvrXPeekFifo>:
     e6c:	fc 01       	movw	r30, r24
     e6e:	84 81       	ldd	r24, Z+4	; 0x04
     e70:	95 81       	ldd	r25, Z+5	; 0x05
     e72:	89 17       	cp	r24, r25
     e74:	19 f4       	brne	.+6      	; 0xe7c
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	08 95       	ret
     e7c:	e9 0f       	add	r30, r25
     e7e:	f1 1d       	adc	r31, r1
     e80:	87 81       	ldd	r24, Z+7	; 0x07
     e82:	99 27       	eor	r25, r25
     e84:	08 95       	ret

00000e86 <AvrXStatFifo>:
     e86:	fc 01       	movw	r30, r24
     e88:	8f b7       	in	r24, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	94 81       	ldd	r25, Z+4	; 0x04
     e8e:	29 2f       	mov	r18, r25
     e90:	33 27       	eor	r19, r19
     e92:	95 81       	ldd	r25, Z+5	; 0x05
     e94:	29 1b       	sub	r18, r25
     e96:	31 09       	sbc	r19, r1
     e98:	8f bf       	out	0x3f, r24	; 63
     e9a:	37 ff       	sbrs	r19, 7
     e9c:	03 c0       	rjmp	.+6      	; 0xea4
     e9e:	86 81       	ldd	r24, Z+6	; 0x06
     ea0:	28 0f       	add	r18, r24
     ea2:	31 1d       	adc	r19, r1
     ea4:	c9 01       	movw	r24, r18
     ea6:	08 95       	ret

00000ea8 <atoi>:
     ea8:	fc 01       	movw	r30, r24
     eaa:	88 27       	eor	r24, r24
     eac:	99 27       	eor	r25, r25
     eae:	e8 94       	clt

00000eb0 <.atoi_loop>:
     eb0:	21 91       	ld	r18, Z+
     eb2:	22 23       	and	r18, r18
     eb4:	f1 f0       	breq	.+60     	; 0xef2
     eb6:	20 32       	cpi	r18, 0x20	; 32
     eb8:	d9 f3       	breq	.-10     	; 0xeb0
     eba:	29 30       	cpi	r18, 0x09	; 9
     ebc:	c9 f3       	breq	.-14     	; 0xeb0
     ebe:	2a 30       	cpi	r18, 0x0A	; 10
     ec0:	b9 f3       	breq	.-18     	; 0xeb0
     ec2:	2c 30       	cpi	r18, 0x0C	; 12
     ec4:	a9 f3       	breq	.-22     	; 0xeb0
     ec6:	2d 30       	cpi	r18, 0x0D	; 13
     ec8:	99 f3       	breq	.-26     	; 0xeb0
     eca:	26 37       	cpi	r18, 0x76	; 118
     ecc:	89 f3       	breq	.-30     	; 0xeb0
     ece:	2b 32       	cpi	r18, 0x2B	; 43
     ed0:	19 f0       	breq	.+6      	; 0xed8
     ed2:	2d 32       	cpi	r18, 0x2D	; 45
     ed4:	21 f4       	brne	.+8      	; 0xede

00000ed6 <.atoi_neg>:
     ed6:	68 94       	set

00000ed8 <.atoi_loop2>:
     ed8:	21 91       	ld	r18, Z+
     eda:	22 23       	and	r18, r18
     edc:	51 f0       	breq	.+20     	; 0xef2

00000ede <.atoi_digit>:
     ede:	20 33       	cpi	r18, 0x30	; 48
     ee0:	44 f0       	brlt	.+16     	; 0xef2
     ee2:	2a 33       	cpi	r18, 0x3A	; 58
     ee4:	34 f4       	brge	.+12     	; 0xef2
     ee6:	20 53       	subi	r18, 0x30	; 48
     ee8:	0e 94 3a 08 	call	0x1074
     eec:	82 0f       	add	r24, r18
     eee:	91 1d       	adc	r25, r1
     ef0:	f3 cf       	rjmp	.-26     	; 0xed8

00000ef2 <.atoi_sig>:
     ef2:	81 15       	cp	r24, r1
     ef4:	91 05       	cpc	r25, r1
     ef6:	21 f0       	breq	.+8      	; 0xf00
     ef8:	1e f4       	brtc	.+6      	; 0xf00
     efa:	80 95       	com	r24
     efc:	90 95       	com	r25
     efe:	01 96       	adiw	r24, 0x01	; 1

00000f00 <.atoi_done>:
     f00:	08 95       	ret

00000f02 <fdevopen>:
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	8c 01       	movw	r16, r24
     f0c:	eb 01       	movw	r28, r22
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	a1 f1       	breq	.+104    	; 0xf7a
     f12:	6c e0       	ldi	r22, 0x0C	; 12
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 40 0b 	call	0x1680
     f1e:	fc 01       	movw	r30, r24
     f20:	89 2b       	or	r24, r25
     f22:	21 f1       	breq	.+72     	; 0xf6c
     f24:	20 97       	sbiw	r28, 0x00	; 0
     f26:	51 f0       	breq	.+20     	; 0xf3c
     f28:	d3 87       	std	Z+11, r29	; 0x0b
     f2a:	c2 87       	std	Z+10, r28	; 0x0a
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	23 83       	std	Z+3, r18	; 0x03
     f30:	80 91 d7 03 	lds	r24, 0x03D7
     f34:	90 91 d8 03 	lds	r25, 0x03D8
     f38:	89 2b       	or	r24, r25
     f3a:	d1 f0       	breq	.+52     	; 0xf70
     f3c:	01 15       	cp	r16, r1
     f3e:	11 05       	cpc	r17, r1
     f40:	a9 f0       	breq	.+42     	; 0xf6c
     f42:	11 87       	std	Z+9, r17	; 0x09
     f44:	00 87       	std	Z+8, r16	; 0x08
     f46:	03 81       	ldd	r16, Z+3	; 0x03
     f48:	02 60       	ori	r16, 0x02	; 2
     f4a:	03 83       	std	Z+3, r16	; 0x03
     f4c:	a0 91 d9 03 	lds	r26, 0x03D9
     f50:	b0 91 da 03 	lds	r27, 0x03DA
     f54:	ab 2b       	or	r26, r27
     f56:	51 f4       	brne	.+20     	; 0xf6c
     f58:	f0 93 da 03 	sts	0x03DA, r31
     f5c:	e0 93 d9 03 	sts	0x03D9, r30
     f60:	c0 91 db 03 	lds	r28, 0x03DB
     f64:	d0 91 dc 03 	lds	r29, 0x03DC
     f68:	cd 2b       	or	r28, r29
     f6a:	51 f0       	breq	.+20     	; 0xf80
     f6c:	cf 01       	movw	r24, r30
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a
     f70:	f0 93 d8 03 	sts	0x03D8, r31
     f74:	e0 93 d7 03 	sts	0x03D7, r30
     f78:	e1 cf       	rjmp	.-62     	; 0xf3c
     f7a:	67 2b       	or	r22, r23
     f7c:	51 f6       	brne	.-108    	; 0xf12
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a
     f80:	f0 93 dc 03 	sts	0x03DC, r31
     f84:	e0 93 db 03 	sts	0x03DB, r30
     f88:	f1 cf       	rjmp	.-30     	; 0xf6c
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <fgetc>:
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	ec 01       	movw	r28, r24
     f9a:	2b 81       	ldd	r18, Y+3	; 0x03
     f9c:	82 2f       	mov	r24, r18
     f9e:	99 27       	eor	r25, r25
     fa0:	80 ff       	sbrs	r24, 0
     fa2:	30 c0       	rjmp	.+96     	; 0x1004
     fa4:	86 fd       	sbrc	r24, 6
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4
     fa8:	82 ff       	sbrs	r24, 2
     faa:	1d c0       	rjmp	.+58     	; 0xfe6
     fac:	e8 81       	ld	r30, Y
     fae:	f9 81       	ldd	r31, Y+1	; 0x01
     fb0:	31 91       	ld	r19, Z+
     fb2:	43 2f       	mov	r20, r19
     fb4:	55 27       	eor	r21, r21
     fb6:	47 fd       	sbrc	r20, 7
     fb8:	50 95       	com	r21
     fba:	f9 83       	std	Y+1, r31	; 0x01
     fbc:	e8 83       	st	Y, r30
     fbe:	41 15       	cp	r20, r1
     fc0:	51 05       	cpc	r21, r1
     fc2:	f1 f0       	breq	.+60     	; 0x1000
     fc4:	ae 81       	ldd	r26, Y+6	; 0x06
     fc6:	bf 81       	ldd	r27, Y+7	; 0x07
     fc8:	11 96       	adiw	r26, 0x01	; 1
     fca:	bf 83       	std	Y+7, r27	; 0x07
     fcc:	ae 83       	std	Y+6, r26	; 0x06
     fce:	84 2f       	mov	r24, r20
     fd0:	99 27       	eor	r25, r25
     fd2:	1a c0       	rjmp	.+52     	; 0x1008
     fd4:	2f 7b       	andi	r18, 0xBF	; 191
     fd6:	2b 83       	std	Y+3, r18	; 0x03
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	9f 83       	std	Y+7, r25	; 0x07
     fe0:	8e 83       	std	Y+6, r24	; 0x06
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	f5 cf       	rjmp	.-22     	; 0xfd0
     fe6:	ea 85       	ldd	r30, Y+10	; 0x0a
     fe8:	fb 85       	ldd	r31, Y+11	; 0x0b
     fea:	09 95       	icall
     fec:	ac 01       	movw	r20, r24
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	4f 3f       	cpi	r20, 0xFF	; 255
     ff2:	58 07       	cpc	r21, r24
     ff4:	39 f7       	brne	.-50     	; 0xfc4
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	20 61       	ori	r18, 0x10	; 16
     ffa:	2b 83       	std	Y+3, r18	; 0x03
     ffc:	ca 01       	movw	r24, r20
     ffe:	04 c0       	rjmp	.+8      	; 0x1008
    1000:	20 62       	ori	r18, 0x20	; 32
    1002:	2b 83       	std	Y+3, r18	; 0x03
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <fputc>:
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	8c 01       	movw	r16, r24
    1018:	eb 01       	movw	r28, r22
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	99 27       	eor	r25, r25
    101e:	81 ff       	sbrs	r24, 1
    1020:	22 c0       	rjmp	.+68     	; 0x1066
    1022:	82 ff       	sbrs	r24, 2
    1024:	14 c0       	rjmp	.+40     	; 0x104e
    1026:	2e 81       	ldd	r18, Y+6	; 0x06
    1028:	3f 81       	ldd	r19, Y+7	; 0x07
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	28 17       	cp	r18, r24
    1030:	39 07       	cpc	r19, r25
    1032:	3c f4       	brge	.+14     	; 0x1042
    1034:	e8 81       	ld	r30, Y
    1036:	f9 81       	ldd	r31, Y+1	; 0x01
    1038:	01 93       	st	Z+, r16
    103a:	f9 83       	std	Y+1, r31	; 0x01
    103c:	e8 83       	st	Y, r30
    103e:	2e 81       	ldd	r18, Y+6	; 0x06
    1040:	3f 81       	ldd	r19, Y+7	; 0x07
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	3f 83       	std	Y+7, r19	; 0x07
    1048:	2e 83       	std	Y+6, r18	; 0x06
    104a:	c8 01       	movw	r24, r16
    104c:	0e c0       	rjmp	.+28     	; 0x106a
    104e:	e8 85       	ldd	r30, Y+8	; 0x08
    1050:	f9 85       	ldd	r31, Y+9	; 0x09
    1052:	80 2f       	mov	r24, r16
    1054:	09 95       	icall
    1056:	89 2b       	or	r24, r25
    1058:	31 f4       	brne	.+12     	; 0x1066
    105a:	ae 81       	ldd	r26, Y+6	; 0x06
    105c:	bf 81       	ldd	r27, Y+7	; 0x07
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	bf 83       	std	Y+7, r27	; 0x07
    1062:	ae 83       	std	Y+6, r26	; 0x06
    1064:	f2 cf       	rjmp	.-28     	; 0x104a
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <__mulhi_const_10>:
    1074:	7a e0       	ldi	r23, 0x0A	; 10
    1076:	97 9f       	mul	r25, r23
    1078:	90 2d       	mov	r25, r0
    107a:	87 9f       	mul	r24, r23
    107c:	80 2d       	mov	r24, r0
    107e:	91 0d       	add	r25, r1
    1080:	11 24       	eor	r1, r1
    1082:	08 95       	ret

00001084 <printf>:
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	e5 e0       	ldi	r30, 0x05	; 5
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	ec 0f       	add	r30, r28
    1092:	fd 1f       	adc	r31, r29
    1094:	81 91       	ld	r24, Z+
    1096:	91 91       	ld	r25, Z+
    1098:	af 01       	movw	r20, r30
    109a:	bc 01       	movw	r22, r24
    109c:	80 91 d9 03 	lds	r24, 0x03D9
    10a0:	90 91 da 03 	lds	r25, 0x03DA
    10a4:	0e 94 83 08 	call	0x1106
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <printf_P>:
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	45 e0       	ldi	r20, 0x05	; 5
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	4c 0f       	add	r20, r28
    10bc:	5d 1f       	adc	r21, r29
    10be:	fa 01       	movw	r30, r20
    10c0:	21 91       	ld	r18, Z+
    10c2:	31 91       	ld	r19, Z+
    10c4:	af 01       	movw	r20, r30
    10c6:	a0 91 d9 03 	lds	r26, 0x03D9
    10ca:	b0 91 da 03 	lds	r27, 0x03DA
    10ce:	fd 01       	movw	r30, r26
    10d0:	83 81       	ldd	r24, Z+3	; 0x03
    10d2:	88 60       	ori	r24, 0x08	; 8
    10d4:	83 83       	std	Z+3, r24	; 0x03
    10d6:	b9 01       	movw	r22, r18
    10d8:	80 91 d9 03 	lds	r24, 0x03D9
    10dc:	90 91 da 03 	lds	r25, 0x03DA
    10e0:	0e 94 83 08 	call	0x1106
    10e4:	e0 91 d9 03 	lds	r30, 0x03D9
    10e8:	f0 91 da 03 	lds	r31, 0x03DA
    10ec:	23 81       	ldd	r18, Z+3	; 0x03
    10ee:	27 7f       	andi	r18, 0xF7	; 247
    10f0:	23 83       	std	Z+3, r18	; 0x03
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <strcpy>:
    10f8:	fb 01       	movw	r30, r22
    10fa:	dc 01       	movw	r26, r24

000010fc <.strcpy_loop>:
    10fc:	01 90       	ld	r0, Z+
    10fe:	0d 92       	st	X+, r0
    1100:	00 20       	and	r0, r0
    1102:	e1 f7       	brne	.-8      	; 0x10fc
    1104:	08 95       	ret

00001106 <vfprintf>:
    1106:	2f 92       	push	r2
    1108:	3f 92       	push	r3
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	62 97       	sbiw	r28, 0x12	; 18
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	ee 24       	eor	r14, r14
    113c:	ff 24       	eor	r15, r15
    113e:	87 01       	movw	r16, r14
    1140:	1c 01       	movw	r2, r24
    1142:	7e 87       	std	Y+14, r23	; 0x0e
    1144:	6d 87       	std	Y+13, r22	; 0x0d
    1146:	2a 01       	movw	r4, r20
    1148:	cc 24       	eor	r12, r12
    114a:	dd 24       	eor	r13, r13
    114c:	fc 01       	movw	r30, r24
    114e:	d7 82       	std	Z+7, r13	; 0x07
    1150:	c6 82       	std	Z+6, r12	; 0x06
    1152:	83 81       	ldd	r24, Z+3	; 0x03
    1154:	81 fd       	sbrc	r24, 1
    1156:	68 c2       	rjmp	.+1232   	; 0x1628
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	78 c2       	rjmp	.+1264   	; 0x164e
    115e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1160:	9e 85       	ldd	r25, Y+14	; 0x0e
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	9e 87       	std	Y+14, r25	; 0x0e
    1166:	8d 87       	std	Y+13, r24	; 0x0d
    1168:	c0 fe       	sbrs	r12, 0
    116a:	4b c2       	rjmp	.+1174   	; 0x1602
    116c:	8f 85       	ldd	r24, Y+15	; 0x0f
    116e:	80 53       	subi	r24, 0x30	; 48
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	d0 f4       	brcc	.+52     	; 0x11a8
    1174:	9f 85       	ldd	r25, Y+15	; 0x0f
    1176:	90 33       	cpi	r25, 0x30	; 48
    1178:	39 f4       	brne	.+14     	; 0x1188
    117a:	66 20       	and	r6, r6
    117c:	29 f4       	brne	.+10     	; 0x1188
    117e:	c3 fc       	sbrc	r12, 3
    1180:	03 c0       	rjmp	.+6      	; 0x1188
    1182:	e0 e0       	ldi	r30, 0x00	; 0
    1184:	f1 e0       	ldi	r31, 0x01	; 1
    1186:	8d c0       	rjmp	.+282    	; 0x12a2
    1188:	8a e0       	ldi	r24, 0x0A	; 10
    118a:	68 9e       	mul	r6, r24
    118c:	60 2c       	mov	r6, r0
    118e:	11 24       	eor	r1, r1
    1190:	ff 85       	ldd	r31, Y+15	; 0x0f
    1192:	6f 0e       	add	r6, r31
    1194:	20 ed       	ldi	r18, 0xD0	; 208
    1196:	62 0e       	add	r6, r18
    1198:	67 fe       	sbrs	r6, 7
    119a:	02 c0       	rjmp	.+4      	; 0x11a0
    119c:	5f e7       	ldi	r21, 0x7F	; 127
    119e:	65 2e       	mov	r6, r21
    11a0:	c3 fc       	sbrc	r12, 3
    11a2:	42 c2       	rjmp	.+1156   	; 0x1628
    11a4:	76 2c       	mov	r7, r6
    11a6:	40 c2       	rjmp	.+1152   	; 0x1628
    11a8:	c3 fe       	sbrs	r12, 3
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4
    11ac:	66 20       	and	r6, r6
    11ae:	11 f4       	brne	.+4      	; 0x11b4
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	64 2e       	mov	r6, r20
    11b4:	ef 85       	ldd	r30, Y+15	; 0x0f
    11b6:	8e 2f       	mov	r24, r30
    11b8:	99 27       	eor	r25, r25
    11ba:	87 fd       	sbrc	r24, 7
    11bc:	90 95       	com	r25
    11be:	88 36       	cpi	r24, 0x68	; 104
    11c0:	91 05       	cpc	r25, r1
    11c2:	8c f5       	brge	.+98     	; 0x1226
    11c4:	85 36       	cpi	r24, 0x65	; 101
    11c6:	91 05       	cpc	r25, r1
    11c8:	0c f0       	brlt	.+2      	; 0x11cc
    11ca:	6e c0       	rjmp	.+220    	; 0x12a8
    11cc:	83 35       	cpi	r24, 0x53	; 83
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4
    11d2:	93 c0       	rjmp	.+294    	; 0x12fa
    11d4:	84 35       	cpi	r24, 0x54	; 84
    11d6:	91 05       	cpc	r25, r1
    11d8:	cc f4       	brge	.+50     	; 0x120c
    11da:	8b 32       	cpi	r24, 0x2B	; 43
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2
    11e0:	49 c0       	rjmp	.+146    	; 0x1274
    11e2:	8c 32       	cpi	r24, 0x2C	; 44
    11e4:	91 05       	cpc	r25, r1
    11e6:	4c f4       	brge	.+18     	; 0x11fa
    11e8:	80 32       	cpi	r24, 0x20	; 32
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0
    11ee:	46 c0       	rjmp	.+140    	; 0x127c
    11f0:	83 32       	cpi	r24, 0x23	; 35
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8
    11f6:	4a c0       	rjmp	.+148    	; 0x128c
    11f8:	fe c1       	rjmp	.+1020   	; 0x15f6
    11fa:	8d 32       	cpi	r24, 0x2D	; 45
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202
    1200:	40 c0       	rjmp	.+128    	; 0x1282
    1202:	8e 32       	cpi	r24, 0x2E	; 46
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a
    1208:	44 c0       	rjmp	.+136    	; 0x1292
    120a:	f5 c1       	rjmp	.+1002   	; 0x15f6
    120c:	83 36       	cpi	r24, 0x63	; 99
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214
    1212:	50 c0       	rjmp	.+160    	; 0x12b4
    1214:	84 36       	cpi	r24, 0x64	; 100
    1216:	91 05       	cpc	r25, r1
    1218:	0c f0       	brlt	.+2      	; 0x121c
    121a:	8a c0       	rjmp	.+276    	; 0x1330
    121c:	88 35       	cpi	r24, 0x58	; 88
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224
    1222:	bc c0       	rjmp	.+376    	; 0x139c
    1224:	e8 c1       	rjmp	.+976    	; 0x15f6
    1226:	80 37       	cpi	r24, 0x70	; 112
    1228:	91 05       	cpc	r25, r1
    122a:	09 f4       	brne	.+2      	; 0x122e
    122c:	b1 c0       	rjmp	.+354    	; 0x1390
    122e:	81 37       	cpi	r24, 0x71	; 113
    1230:	91 05       	cpc	r25, r1
    1232:	84 f4       	brge	.+32     	; 0x1254
    1234:	8c 36       	cpi	r24, 0x6C	; 108
    1236:	91 05       	cpc	r25, r1
    1238:	91 f1       	breq	.+100    	; 0x129e
    123a:	8d 36       	cpi	r24, 0x6D	; 109
    123c:	91 05       	cpc	r25, r1
    123e:	2c f4       	brge	.+10     	; 0x124a
    1240:	89 36       	cpi	r24, 0x69	; 105
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248
    1246:	74 c0       	rjmp	.+232    	; 0x1330
    1248:	d6 c1       	rjmp	.+940    	; 0x15f6
    124a:	8f 36       	cpi	r24, 0x6F	; 111
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252
    1250:	9c c0       	rjmp	.+312    	; 0x138a
    1252:	d1 c1       	rjmp	.+930    	; 0x15f6
    1254:	85 37       	cpi	r24, 0x75	; 117
    1256:	91 05       	cpc	r25, r1
    1258:	09 f4       	brne	.+2      	; 0x125c
    125a:	a2 c0       	rjmp	.+324    	; 0x13a0
    125c:	86 37       	cpi	r24, 0x76	; 118
    125e:	91 05       	cpc	r25, r1
    1260:	24 f4       	brge	.+8      	; 0x126a
    1262:	83 37       	cpi	r24, 0x73	; 115
    1264:	91 05       	cpc	r25, r1
    1266:	71 f1       	breq	.+92     	; 0x12c4
    1268:	c6 c1       	rjmp	.+908    	; 0x15f6
    126a:	88 37       	cpi	r24, 0x78	; 120
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272
    1270:	95 c0       	rjmp	.+298    	; 0x139c
    1272:	c1 c1       	rjmp	.+898    	; 0x15f6
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	c8 2a       	or	r12, r24
    127a:	d9 2a       	or	r13, r25
    127c:	e0 e2       	ldi	r30, 0x20	; 32
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	10 c0       	rjmp	.+32     	; 0x12a2
    1282:	80 e8       	ldi	r24, 0x80	; 128
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	c8 2a       	or	r12, r24
    1288:	d9 2a       	or	r13, r25
    128a:	ce c1       	rjmp	.+924    	; 0x1628
    128c:	e0 e4       	ldi	r30, 0x40	; 64
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	08 c0       	rjmp	.+16     	; 0x12a2
    1292:	88 e0       	ldi	r24, 0x08	; 8
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	c8 2a       	or	r12, r24
    1298:	d9 2a       	or	r13, r25
    129a:	66 24       	eor	r6, r6
    129c:	c5 c1       	rjmp	.+906    	; 0x1628
    129e:	e4 e0       	ldi	r30, 0x04	; 4
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	ce 2a       	or	r12, r30
    12a4:	df 2a       	or	r13, r31
    12a6:	c0 c1       	rjmp	.+896    	; 0x1628
    12a8:	3f e3       	ldi	r19, 0x3F	; 63
    12aa:	e3 2e       	mov	r14, r19
    12ac:	7a 94       	dec	r7
    12ae:	f3 e6       	ldi	r31, 0x63	; 99
    12b0:	ff 87       	std	Y+15, r31	; 0x0f
    12b2:	3c c1       	rjmp	.+632    	; 0x152c
    12b4:	f2 01       	movw	r30, r4
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	48 0e       	add	r4, r24
    12bc:	59 1e       	adc	r5, r25
    12be:	e0 80       	ld	r14, Z
    12c0:	7a 94       	dec	r7
    12c2:	34 c1       	rjmp	.+616    	; 0x152c
    12c4:	f2 01       	movw	r30, r4
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	48 0e       	add	r4, r24
    12cc:	59 1e       	adc	r5, r25
    12ce:	a0 81       	ld	r26, Z
    12d0:	b1 81       	ldd	r27, Z+1	; 0x01
    12d2:	7d 01       	movw	r14, r26
    12d4:	c3 fe       	sbrs	r12, 3
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea
    12d8:	86 2d       	mov	r24, r6
    12da:	99 27       	eor	r25, r25
    12dc:	87 fd       	sbrc	r24, 7
    12de:	90 95       	com	r25
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 7d 0c 	call	0x18fa
    12e8:	1f c0       	rjmp	.+62     	; 0x1328
    12ea:	fd 01       	movw	r30, r26
    12ec:	01 90       	ld	r0, Z+
    12ee:	00 20       	and	r0, r0
    12f0:	e9 f7       	brne	.-6      	; 0x12ec
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	ea 1b       	sub	r30, r26
    12f6:	e8 8b       	std	Y+16, r30	; 0x10
    12f8:	18 c0       	rjmp	.+48     	; 0x132a
    12fa:	f2 01       	movw	r30, r4
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	48 0e       	add	r4, r24
    1302:	59 1e       	adc	r5, r25
    1304:	01 90       	ld	r0, Z+
    1306:	f0 81       	ld	r31, Z
    1308:	e0 2d       	mov	r30, r0
    130a:	7f 01       	movw	r14, r30
    130c:	c3 fe       	sbrs	r12, 3
    130e:	09 c0       	rjmp	.+18     	; 0x1322
    1310:	86 2d       	mov	r24, r6
    1312:	99 27       	eor	r25, r25
    1314:	87 fd       	sbrc	r24, 7
    1316:	90 95       	com	r25
    1318:	bc 01       	movw	r22, r24
    131a:	cf 01       	movw	r24, r30
    131c:	0e 94 88 0c 	call	0x1910
    1320:	03 c0       	rjmp	.+6      	; 0x1328
    1322:	cf 01       	movw	r24, r30
    1324:	0e 94 74 0c 	call	0x18e8
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	98 89       	ldd	r25, Y+16	; 0x10
    132c:	79 1a       	sub	r7, r25
    132e:	fe c0       	rjmp	.+508    	; 0x152c
    1330:	c2 fe       	sbrs	r12, 2
    1332:	0a c0       	rjmp	.+20     	; 0x1348
    1334:	f2 01       	movw	r30, r4
    1336:	84 e0       	ldi	r24, 0x04	; 4
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	48 0e       	add	r4, r24
    133c:	59 1e       	adc	r5, r25
    133e:	20 81       	ld	r18, Z
    1340:	31 81       	ldd	r19, Z+1	; 0x01
    1342:	42 81       	ldd	r20, Z+2	; 0x02
    1344:	53 81       	ldd	r21, Z+3	; 0x03
    1346:	0c c0       	rjmp	.+24     	; 0x1360
    1348:	f2 01       	movw	r30, r4
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	48 0e       	add	r4, r24
    1350:	59 1e       	adc	r5, r25
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	9c 01       	movw	r18, r24
    1358:	44 27       	eor	r20, r20
    135a:	37 fd       	sbrc	r19, 7
    135c:	40 95       	com	r20
    135e:	54 2f       	mov	r21, r20
    1360:	79 01       	movw	r14, r18
    1362:	8a 01       	movw	r16, r20
    1364:	57 ff       	sbrs	r21, 7
    1366:	0c c0       	rjmp	.+24     	; 0x1380
    1368:	e2 e0       	ldi	r30, 0x02	; 2
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	ce 2a       	or	r12, r30
    136e:	df 2a       	or	r13, r31
    1370:	10 95       	com	r17
    1372:	00 95       	com	r16
    1374:	f0 94       	com	r15
    1376:	e0 94       	com	r14
    1378:	e1 1c       	adc	r14, r1
    137a:	f1 1c       	adc	r15, r1
    137c:	01 1d       	adc	r16, r1
    137e:	11 1d       	adc	r17, r1
    1380:	8f eb       	ldi	r24, 0xBF	; 191
    1382:	9f ef       	ldi	r25, 0xFF	; 255
    1384:	c8 22       	and	r12, r24
    1386:	d9 22       	and	r13, r25
    1388:	27 c0       	rjmp	.+78     	; 0x13d8
    138a:	98 e0       	ldi	r25, 0x08	; 8
    138c:	98 8b       	std	Y+16, r25	; 0x10
    138e:	08 c0       	rjmp	.+16     	; 0x13a0
    1390:	e0 e4       	ldi	r30, 0x40	; 64
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	ce 2a       	or	r12, r30
    1396:	df 2a       	or	r13, r31
    1398:	f8 e7       	ldi	r31, 0x78	; 120
    139a:	ff 87       	std	Y+15, r31	; 0x0f
    139c:	20 e1       	ldi	r18, 0x10	; 16
    139e:	28 8b       	std	Y+16, r18	; 0x10
    13a0:	c2 fe       	sbrs	r12, 2
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8
    13a4:	f2 01       	movw	r30, r4
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	48 0e       	add	r4, r24
    13ac:	59 1e       	adc	r5, r25
    13ae:	20 81       	ld	r18, Z
    13b0:	31 81       	ldd	r19, Z+1	; 0x01
    13b2:	42 81       	ldd	r20, Z+2	; 0x02
    13b4:	53 81       	ldd	r21, Z+3	; 0x03
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc
    13b8:	f2 01       	movw	r30, r4
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	48 0e       	add	r4, r24
    13c0:	59 1e       	adc	r5, r25
    13c2:	80 81       	ld	r24, Z
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	9c 01       	movw	r18, r24
    13c8:	44 27       	eor	r20, r20
    13ca:	55 27       	eor	r21, r21
    13cc:	79 01       	movw	r14, r18
    13ce:	8a 01       	movw	r16, r20
    13d0:	ef ec       	ldi	r30, 0xCF	; 207
    13d2:	ff ef       	ldi	r31, 0xFF	; 255
    13d4:	ce 22       	and	r12, r30
    13d6:	df 22       	and	r13, r31
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	9a 8b       	std	Y+18, r25	; 0x12
    13de:	89 8b       	std	Y+17, r24	; 0x11
    13e0:	98 89       	ldd	r25, Y+16	; 0x10
    13e2:	89 2e       	mov	r8, r25
    13e4:	99 24       	eor	r9, r9
    13e6:	aa 24       	eor	r10, r10
    13e8:	bb 24       	eor	r11, r11
    13ea:	c8 01       	movw	r24, r16
    13ec:	b7 01       	movw	r22, r14
    13ee:	a5 01       	movw	r20, r10
    13f0:	94 01       	movw	r18, r8
    13f2:	0e 94 bb 0e 	call	0x1d76
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	e9 89       	ldd	r30, Y+17	; 0x11
    13fc:	fa 89       	ldd	r31, Y+18	; 0x12
    13fe:	80 83       	st	Z, r24
    1400:	8a 30       	cpi	r24, 0x0A	; 10
    1402:	24 f0       	brlt	.+8      	; 0x140c
    1404:	ff 85       	ldd	r31, Y+15	; 0x0f
    1406:	8f 0f       	add	r24, r31
    1408:	81 52       	subi	r24, 0x21	; 33
    140a:	01 c0       	rjmp	.+2      	; 0x140e
    140c:	80 5d       	subi	r24, 0xD0	; 208
    140e:	e9 89       	ldd	r30, Y+17	; 0x11
    1410:	fa 89       	ldd	r31, Y+18	; 0x12
    1412:	81 93       	st	Z+, r24
    1414:	fa 8b       	std	Y+18, r31	; 0x12
    1416:	e9 8b       	std	Y+17, r30	; 0x11
    1418:	c8 01       	movw	r24, r16
    141a:	b7 01       	movw	r22, r14
    141c:	a5 01       	movw	r20, r10
    141e:	94 01       	movw	r18, r8
    1420:	0e 94 bb 0e 	call	0x1d76
    1424:	79 01       	movw	r14, r18
    1426:	8a 01       	movw	r16, r20
    1428:	21 15       	cp	r18, r1
    142a:	31 05       	cpc	r19, r1
    142c:	41 05       	cpc	r20, r1
    142e:	51 05       	cpc	r21, r1
    1430:	e1 f6       	brne	.-72     	; 0x13ea
    1432:	e9 88       	ldd	r14, Y+17	; 0x11
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	8c 0f       	add	r24, r28
    143a:	9d 1f       	adc	r25, r29
    143c:	e8 1a       	sub	r14, r24
    143e:	c6 01       	movw	r24, r12
    1440:	82 73       	andi	r24, 0x32	; 50
    1442:	90 70       	andi	r25, 0x00	; 0
    1444:	89 2b       	or	r24, r25
    1446:	09 f0       	breq	.+2      	; 0x144a
    1448:	7a 94       	dec	r7
    144a:	c6 fe       	sbrs	r12, 6
    144c:	0d c0       	rjmp	.+26     	; 0x1468
    144e:	87 2d       	mov	r24, r7
    1450:	99 27       	eor	r25, r25
    1452:	87 fd       	sbrc	r24, 7
    1454:	90 95       	com	r25
    1456:	e8 89       	ldd	r30, Y+16	; 0x10
    1458:	e0 31       	cpi	r30, 0x10	; 16
    145a:	21 f4       	brne	.+8      	; 0x1464
    145c:	2e ef       	ldi	r18, 0xFE	; 254
    145e:	72 2e       	mov	r7, r18
    1460:	78 0e       	add	r7, r24
    1462:	02 c0       	rjmp	.+4      	; 0x1468
    1464:	78 2e       	mov	r7, r24
    1466:	7a 94       	dec	r7
    1468:	c3 fe       	sbrs	r12, 3
    146a:	0f c0       	rjmp	.+30     	; 0x148a
    146c:	26 2d       	mov	r18, r6
    146e:	33 27       	eor	r19, r19
    1470:	27 fd       	sbrc	r18, 7
    1472:	30 95       	com	r19
    1474:	8e 2d       	mov	r24, r14
    1476:	99 27       	eor	r25, r25
    1478:	82 17       	cp	r24, r18
    147a:	93 07       	cpc	r25, r19
    147c:	2c f0       	brlt	.+10     	; 0x1488
    147e:	87 ef       	ldi	r24, 0xF7	; 247
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	c8 22       	and	r12, r24
    1484:	d9 22       	and	r13, r25
    1486:	01 c0       	rjmp	.+2      	; 0x148a
    1488:	6e 18       	sub	r6, r14
    148a:	c3 fe       	sbrs	r12, 3
    148c:	02 c0       	rjmp	.+4      	; 0x1492
    148e:	76 18       	sub	r7, r6
    1490:	01 c0       	rjmp	.+2      	; 0x1494
    1492:	7e 18       	sub	r7, r14
    1494:	c6 01       	movw	r24, r12
    1496:	80 78       	andi	r24, 0x80	; 128
    1498:	91 70       	andi	r25, 0x01	; 1
    149a:	89 2b       	or	r24, r25
    149c:	51 f4       	brne	.+20     	; 0x14b2
    149e:	87 2d       	mov	r24, r7
    14a0:	7a 94       	dec	r7
    14a2:	18 16       	cp	r1, r24
    14a4:	34 f4       	brge	.+12     	; 0x14b2
    14a6:	b1 01       	movw	r22, r2
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 07 08 	call	0x100e
    14b0:	f6 cf       	rjmp	.-20     	; 0x149e
    14b2:	c1 fe       	sbrs	r12, 1
    14b4:	04 c0       	rjmp	.+8      	; 0x14be
    14b6:	b1 01       	movw	r22, r2
    14b8:	8d e2       	ldi	r24, 0x2D	; 45
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4
    14be:	c4 fe       	sbrs	r12, 4
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca
    14c2:	b1 01       	movw	r22, r2
    14c4:	8b e2       	ldi	r24, 0x2B	; 43
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4
    14ca:	c5 fe       	sbrs	r12, 5
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8
    14ce:	b1 01       	movw	r22, r2
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 07 08 	call	0x100e
    14d8:	c6 fe       	sbrs	r12, 6
    14da:	10 c0       	rjmp	.+32     	; 0x14fc
    14dc:	b1 01       	movw	r22, r2
    14de:	80 e3       	ldi	r24, 0x30	; 48
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 07 08 	call	0x100e
    14e6:	98 89       	ldd	r25, Y+16	; 0x10
    14e8:	90 31       	cpi	r25, 0x10	; 16
    14ea:	41 f4       	brne	.+16     	; 0x14fc
    14ec:	b1 01       	movw	r22, r2
    14ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    14f0:	8e 2f       	mov	r24, r30
    14f2:	99 27       	eor	r25, r25
    14f4:	87 fd       	sbrc	r24, 7
    14f6:	90 95       	com	r25
    14f8:	0e 94 07 08 	call	0x100e
    14fc:	d0 fe       	sbrs	r13, 0
    14fe:	0a c0       	rjmp	.+20     	; 0x1514
    1500:	87 2d       	mov	r24, r7
    1502:	7a 94       	dec	r7
    1504:	18 16       	cp	r1, r24
    1506:	34 f4       	brge	.+12     	; 0x1514
    1508:	b1 01       	movw	r22, r2
    150a:	80 e3       	ldi	r24, 0x30	; 48
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 07 08 	call	0x100e
    1512:	f6 cf       	rjmp	.-20     	; 0x1500
    1514:	c3 fe       	sbrs	r12, 3
    1516:	0a c0       	rjmp	.+20     	; 0x152c
    1518:	86 2d       	mov	r24, r6
    151a:	6a 94       	dec	r6
    151c:	18 16       	cp	r1, r24
    151e:	34 f4       	brge	.+12     	; 0x152c
    1520:	b1 01       	movw	r22, r2
    1522:	80 e3       	ldi	r24, 0x30	; 48
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 07 08 	call	0x100e
    152a:	f6 cf       	rjmp	.-20     	; 0x1518
    152c:	90 e8       	ldi	r25, 0x80	; 128
    152e:	b9 2e       	mov	r11, r25
    1530:	bc 20       	and	r11, r12
    1532:	51 f4       	brne	.+20     	; 0x1548
    1534:	87 2d       	mov	r24, r7
    1536:	7a 94       	dec	r7
    1538:	18 16       	cp	r1, r24
    153a:	34 f4       	brge	.+12     	; 0x1548
    153c:	b1 01       	movw	r22, r2
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 07 08 	call	0x100e
    1546:	f6 cf       	rjmp	.-20     	; 0x1534
    1548:	ff 85       	ldd	r31, Y+15	; 0x0f
    154a:	f3 36       	cpi	r31, 0x63	; 99
    154c:	41 f4       	brne	.+16     	; 0x155e
    154e:	8e 2d       	mov	r24, r14
    1550:	b1 01       	movw	r22, r2
    1552:	99 27       	eor	r25, r25
    1554:	87 fd       	sbrc	r24, 7
    1556:	90 95       	com	r25
    1558:	0e 94 07 08 	call	0x100e
    155c:	40 c0       	rjmp	.+128    	; 0x15de
    155e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1560:	23 37       	cpi	r18, 0x73	; 115
    1562:	b1 f4       	brne	.+44     	; 0x1590
    1564:	88 89       	ldd	r24, Y+16	; 0x10
    1566:	81 50       	subi	r24, 0x01	; 1
    1568:	88 8b       	std	Y+16, r24	; 0x10
    156a:	8f 3f       	cpi	r24, 0xFF	; 255
    156c:	c1 f1       	breq	.+112    	; 0x15de
    156e:	f7 01       	movw	r30, r14
    1570:	80 81       	ld	r24, Z
    1572:	08 94       	sec
    1574:	e1 1c       	adc	r14, r1
    1576:	f1 1c       	adc	r15, r1
    1578:	b1 01       	movw	r22, r2
    157a:	99 27       	eor	r25, r25
    157c:	87 fd       	sbrc	r24, 7
    157e:	90 95       	com	r25
    1580:	0e 94 07 08 	call	0x100e
    1584:	98 89       	ldd	r25, Y+16	; 0x10
    1586:	91 50       	subi	r25, 0x01	; 1
    1588:	98 8b       	std	Y+16, r25	; 0x10
    158a:	9f 3f       	cpi	r25, 0xFF	; 255
    158c:	81 f7       	brne	.-32     	; 0x156e
    158e:	27 c0       	rjmp	.+78     	; 0x15de
    1590:	ef 85       	ldd	r30, Y+15	; 0x0f
    1592:	e3 35       	cpi	r30, 0x53	; 83
    1594:	79 f4       	brne	.+30     	; 0x15b4
    1596:	f8 89       	ldd	r31, Y+16	; 0x10
    1598:	f1 50       	subi	r31, 0x01	; 1
    159a:	f8 8b       	std	Y+16, r31	; 0x10
    159c:	ff 3f       	cpi	r31, 0xFF	; 255
    159e:	f9 f0       	breq	.+62     	; 0x15de
    15a0:	f7 01       	movw	r30, r14
    15a2:	84 91       	lpm	r24, Z
    15a4:	b1 01       	movw	r22, r2
    15a6:	99 27       	eor	r25, r25
    15a8:	0e 94 07 08 	call	0x100e
    15ac:	08 94       	sec
    15ae:	e1 1c       	adc	r14, r1
    15b0:	f1 1c       	adc	r15, r1
    15b2:	f1 cf       	rjmp	.-30     	; 0x1596
    15b4:	6e 01       	movw	r12, r28
    15b6:	08 94       	sec
    15b8:	c1 1c       	adc	r12, r1
    15ba:	d1 1c       	adc	r13, r1
    15bc:	89 89       	ldd	r24, Y+17	; 0x11
    15be:	9a 89       	ldd	r25, Y+18	; 0x12
    15c0:	8c 15       	cp	r24, r12
    15c2:	9d 05       	cpc	r25, r13
    15c4:	61 f0       	breq	.+24     	; 0x15de
    15c6:	e9 89       	ldd	r30, Y+17	; 0x11
    15c8:	fa 89       	ldd	r31, Y+18	; 0x12
    15ca:	82 91       	ld	r24, -Z
    15cc:	fa 8b       	std	Y+18, r31	; 0x12
    15ce:	e9 8b       	std	Y+17, r30	; 0x11
    15d0:	b1 01       	movw	r22, r2
    15d2:	99 27       	eor	r25, r25
    15d4:	87 fd       	sbrc	r24, 7
    15d6:	90 95       	com	r25
    15d8:	0e 94 07 08 	call	0x100e
    15dc:	ef cf       	rjmp	.-34     	; 0x15bc
    15de:	bb 20       	and	r11, r11
    15e0:	69 f0       	breq	.+26     	; 0x15fc
    15e2:	87 2d       	mov	r24, r7
    15e4:	7a 94       	dec	r7
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f4       	brge	.+18     	; 0x15fc
    15ea:	b1 01       	movw	r22, r2
    15ec:	80 e2       	ldi	r24, 0x20	; 32
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 07 08 	call	0x100e
    15f4:	f6 cf       	rjmp	.-20     	; 0x15e2
    15f6:	b1 01       	movw	r22, r2
    15f8:	0e 94 07 08 	call	0x100e
    15fc:	cc 24       	eor	r12, r12
    15fe:	dd 24       	eor	r13, r13
    1600:	13 c0       	rjmp	.+38     	; 0x1628
    1602:	9f 85       	ldd	r25, Y+15	; 0x0f
    1604:	95 32       	cpi	r25, 0x25	; 37
    1606:	41 f4       	brne	.+16     	; 0x1618
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	c8 2e       	mov	r12, r24
    160c:	d1 2c       	mov	r13, r1
    160e:	66 24       	eor	r6, r6
    1610:	76 2c       	mov	r7, r6
    1612:	ea e0       	ldi	r30, 0x0A	; 10
    1614:	e8 8b       	std	Y+16, r30	; 0x10
    1616:	08 c0       	rjmp	.+16     	; 0x1628
    1618:	b1 01       	movw	r22, r2
    161a:	ff 85       	ldd	r31, Y+15	; 0x0f
    161c:	8f 2f       	mov	r24, r31
    161e:	99 27       	eor	r25, r25
    1620:	87 fd       	sbrc	r24, 7
    1622:	90 95       	com	r25
    1624:	0e 94 07 08 	call	0x100e
    1628:	f1 01       	movw	r30, r2
    162a:	83 81       	ldd	r24, Z+3	; 0x03
    162c:	83 ff       	sbrs	r24, 3
    162e:	04 c0       	rjmp	.+8      	; 0x1638
    1630:	ed 85       	ldd	r30, Y+13	; 0x0d
    1632:	fe 85       	ldd	r31, Y+14	; 0x0e
    1634:	f4 91       	lpm	r31, Z
    1636:	03 c0       	rjmp	.+6      	; 0x163e
    1638:	ed 85       	ldd	r30, Y+13	; 0x0d
    163a:	fe 85       	ldd	r31, Y+14	; 0x0e
    163c:	f0 81       	ld	r31, Z
    163e:	ff 87       	std	Y+15, r31	; 0x0f
    1640:	2f 85       	ldd	r18, Y+15	; 0x0f
    1642:	22 23       	and	r18, r18
    1644:	09 f0       	breq	.+2      	; 0x1648
    1646:	8b cd       	rjmp	.-1258   	; 0x115e
    1648:	f1 01       	movw	r30, r2
    164a:	86 81       	ldd	r24, Z+6	; 0x06
    164c:	97 81       	ldd	r25, Z+7	; 0x07
    164e:	62 96       	adiw	r28, 0x12	; 18
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	af 90       	pop	r10
    166e:	9f 90       	pop	r9
    1670:	8f 90       	pop	r8
    1672:	7f 90       	pop	r7
    1674:	6f 90       	pop	r6
    1676:	5f 90       	pop	r5
    1678:	4f 90       	pop	r4
    167a:	3f 90       	pop	r3
    167c:	2f 90       	pop	r2
    167e:	08 95       	ret

00001680 <calloc>:
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	86 9f       	mul	r24, r22
    168a:	80 01       	movw	r16, r0
    168c:	87 9f       	mul	r24, r23
    168e:	10 0d       	add	r17, r0
    1690:	96 9f       	mul	r25, r22
    1692:	10 0d       	add	r17, r0
    1694:	11 24       	eor	r1, r1
    1696:	c8 01       	movw	r24, r16
    1698:	0e 94 5c 0b 	call	0x16b8
    169c:	ec 01       	movw	r28, r24
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	29 f0       	breq	.+10     	; 0x16ac
    16a2:	a8 01       	movw	r20, r16
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 6d 0c 	call	0x18da
    16ac:	ce 01       	movw	r24, r28
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <malloc>:
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	9c 01       	movw	r18, r24
    16be:	02 97       	sbiw	r24, 0x02	; 2
    16c0:	10 f4       	brcc	.+4      	; 0x16c6
    16c2:	22 e0       	ldi	r18, 0x02	; 2
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	60 91 df 03 	lds	r22, 0x03DF
    16ce:	70 91 e0 03 	lds	r23, 0x03E0
    16d2:	fb 01       	movw	r30, r22
    16d4:	da 01       	movw	r26, r20
    16d6:	61 15       	cp	r22, r1
    16d8:	71 05       	cpc	r23, r1
    16da:	69 f1       	breq	.+90     	; 0x1736
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	82 17       	cp	r24, r18
    16e2:	93 07       	cpc	r25, r19
    16e4:	09 f4       	brne	.+2      	; 0x16e8
    16e6:	52 c0       	rjmp	.+164    	; 0x178c
    16e8:	28 17       	cp	r18, r24
    16ea:	39 07       	cpc	r19, r25
    16ec:	38 f4       	brcc	.+14     	; 0x16fc
    16ee:	41 15       	cp	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	19 f0       	breq	.+6      	; 0x16fa
    16f4:	84 17       	cp	r24, r20
    16f6:	95 07       	cpc	r25, r21
    16f8:	08 f4       	brcc	.+2      	; 0x16fc
    16fa:	ac 01       	movw	r20, r24
    16fc:	df 01       	movw	r26, r30
    16fe:	02 80       	ldd	r0, Z+2	; 0x02
    1700:	f3 81       	ldd	r31, Z+3	; 0x03
    1702:	e0 2d       	mov	r30, r0
    1704:	30 97       	sbiw	r30, 0x00	; 0
    1706:	51 f7       	brne	.-44     	; 0x16dc
    1708:	41 15       	cp	r20, r1
    170a:	51 05       	cpc	r21, r1
    170c:	a1 f0       	breq	.+40     	; 0x1736
    170e:	da 01       	movw	r26, r20
    1710:	a2 1b       	sub	r26, r18
    1712:	b3 0b       	sbc	r27, r19
    1714:	14 97       	sbiw	r26, 0x04	; 4
    1716:	08 f4       	brcc	.+2      	; 0x171a
    1718:	43 c0       	rjmp	.+134    	; 0x17a0
    171a:	db 01       	movw	r26, r22
    171c:	0a c0       	rjmp	.+20     	; 0x1732
    171e:	6d 91       	ld	r22, X+
    1720:	7c 91       	ld	r23, X
    1722:	11 97       	sbiw	r26, 0x01	; 1
    1724:	64 17       	cp	r22, r20
    1726:	75 07       	cpc	r23, r21
    1728:	09 f4       	brne	.+2      	; 0x172c
    172a:	50 c0       	rjmp	.+160    	; 0x17cc
    172c:	fd 01       	movw	r30, r26
    172e:	a2 81       	ldd	r26, Z+2	; 0x02
    1730:	b3 81       	ldd	r27, Z+3	; 0x03
    1732:	10 97       	sbiw	r26, 0x00	; 0
    1734:	a1 f7       	brne	.-24     	; 0x171e
    1736:	e0 91 dd 03 	lds	r30, 0x03DD
    173a:	f0 91 de 03 	lds	r31, 0x03DE
    173e:	30 97       	sbiw	r30, 0x00	; 0
    1740:	41 f4       	brne	.+16     	; 0x1752
    1742:	e0 91 d6 00 	lds	r30, 0x00D6
    1746:	f0 91 d7 00 	lds	r31, 0x00D7
    174a:	f0 93 de 03 	sts	0x03DE, r31
    174e:	e0 93 dd 03 	sts	0x03DD, r30
    1752:	40 91 d4 00 	lds	r20, 0x00D4
    1756:	50 91 d5 00 	lds	r21, 0x00D5
    175a:	41 15       	cp	r20, r1
    175c:	51 05       	cpc	r21, r1
    175e:	29 f1       	breq	.+74     	; 0x17aa
    1760:	4e 1b       	sub	r20, r30
    1762:	5f 0b       	sbc	r21, r31
    1764:	42 17       	cp	r20, r18
    1766:	53 07       	cpc	r21, r19
    1768:	e8 f0       	brcs	.+58     	; 0x17a4
    176a:	c9 01       	movw	r24, r18
    176c:	02 96       	adiw	r24, 0x02	; 2
    176e:	48 17       	cp	r20, r24
    1770:	59 07       	cpc	r21, r25
    1772:	c0 f0       	brcs	.+48     	; 0x17a4
    1774:	ef 01       	movw	r28, r30
    1776:	c2 0f       	add	r28, r18
    1778:	d3 1f       	adc	r29, r19
    177a:	22 96       	adiw	r28, 0x02	; 2
    177c:	d0 93 de 03 	sts	0x03DE, r29
    1780:	c0 93 dd 03 	sts	0x03DD, r28
    1784:	21 93       	st	Z+, r18
    1786:	31 93       	st	Z+, r19
    1788:	cf 01       	movw	r24, r30
    178a:	42 c0       	rjmp	.+132    	; 0x1810
    178c:	10 97       	sbiw	r26, 0x00	; 0
    178e:	b1 f0       	breq	.+44     	; 0x17bc
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	ed 01       	movw	r28, r26
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	cf 01       	movw	r24, r30
    179c:	02 96       	adiw	r24, 0x02	; 2
    179e:	38 c0       	rjmp	.+112    	; 0x1810
    17a0:	9a 01       	movw	r18, r20
    17a2:	bb cf       	rjmp	.-138    	; 0x171a
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	33 c0       	rjmp	.+102    	; 0x1810
    17aa:	4d b7       	in	r20, 0x3d	; 61
    17ac:	5e b7       	in	r21, 0x3e	; 62
    17ae:	a0 91 d8 00 	lds	r26, 0x00D8
    17b2:	b0 91 d9 00 	lds	r27, 0x00D9
    17b6:	4a 1b       	sub	r20, r26
    17b8:	5b 0b       	sbc	r21, r27
    17ba:	d2 cf       	rjmp	.-92     	; 0x1760
    17bc:	22 81       	ldd	r18, Z+2	; 0x02
    17be:	33 81       	ldd	r19, Z+3	; 0x03
    17c0:	30 93 e0 03 	sts	0x03E0, r19
    17c4:	20 93 df 03 	sts	0x03DF, r18
    17c8:	cf 01       	movw	r24, r30
    17ca:	e8 cf       	rjmp	.-48     	; 0x179c
    17cc:	24 17       	cp	r18, r20
    17ce:	35 07       	cpc	r19, r21
    17d0:	61 f0       	breq	.+24     	; 0x17ea
    17d2:	ea 01       	movw	r28, r20
    17d4:	c2 1b       	sub	r28, r18
    17d6:	d3 0b       	sbc	r29, r19
    17d8:	fd 01       	movw	r30, r26
    17da:	ec 0f       	add	r30, r28
    17dc:	fd 1f       	adc	r31, r29
    17de:	21 93       	st	Z+, r18
    17e0:	31 93       	st	Z+, r19
    17e2:	22 97       	sbiw	r28, 0x02	; 2
    17e4:	cd 93       	st	X+, r28
    17e6:	dc 93       	st	X, r29
    17e8:	cf cf       	rjmp	.-98     	; 0x1788
    17ea:	30 97       	sbiw	r30, 0x00	; 0
    17ec:	41 f0       	breq	.+16     	; 0x17fe
    17ee:	ed 01       	movw	r28, r26
    17f0:	4a 81       	ldd	r20, Y+2	; 0x02
    17f2:	5b 81       	ldd	r21, Y+3	; 0x03
    17f4:	53 83       	std	Z+3, r21	; 0x03
    17f6:	42 83       	std	Z+2, r20	; 0x02
    17f8:	cd 01       	movw	r24, r26
    17fa:	02 96       	adiw	r24, 0x02	; 2
    17fc:	09 c0       	rjmp	.+18     	; 0x1810
    17fe:	fd 01       	movw	r30, r26
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	90 93 e0 03 	sts	0x03E0, r25
    1808:	80 93 df 03 	sts	0x03DF, r24
    180c:	cd 01       	movw	r24, r26
    180e:	f5 cf       	rjmp	.-22     	; 0x17fa
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <free>:
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	09 f4       	brne	.+2      	; 0x1820
    181e:	5a c0       	rjmp	.+180    	; 0x18d4
    1820:	dc 01       	movw	r26, r24
    1822:	12 97       	sbiw	r26, 0x02	; 2
    1824:	ed 01       	movw	r28, r26
    1826:	1b 82       	std	Y+3, r1	; 0x03
    1828:	1a 82       	std	Y+2, r1	; 0x02
    182a:	80 91 df 03 	lds	r24, 0x03DF
    182e:	90 91 e0 03 	lds	r25, 0x03E0
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	d9 f1       	breq	.+118    	; 0x18ac
    1836:	fc 01       	movw	r30, r24
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	ea 17       	cp	r30, r26
    183e:	fb 07       	cpc	r31, r27
    1840:	48 f4       	brcc	.+18     	; 0x1854
    1842:	af 01       	movw	r20, r30
    1844:	02 80       	ldd	r0, Z+2	; 0x02
    1846:	f3 81       	ldd	r31, Z+3	; 0x03
    1848:	e0 2d       	mov	r30, r0
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	a1 f0       	breq	.+40     	; 0x1876
    184e:	ea 17       	cp	r30, r26
    1850:	fb 07       	cpc	r31, r27
    1852:	b8 f3       	brcs	.-18     	; 0x1842
    1854:	ed 01       	movw	r28, r26
    1856:	fb 83       	std	Y+3, r31	; 0x03
    1858:	ea 83       	std	Y+2, r30	; 0x02
    185a:	2d 91       	ld	r18, X+
    185c:	3c 91       	ld	r19, X
    185e:	11 97       	sbiw	r26, 0x01	; 1
    1860:	e9 01       	movw	r28, r18
    1862:	ca 0f       	add	r28, r26
    1864:	db 1f       	adc	r29, r27
    1866:	ce 01       	movw	r24, r28
    1868:	02 96       	adiw	r24, 0x02	; 2
    186a:	8e 17       	cp	r24, r30
    186c:	9f 07       	cpc	r25, r31
    186e:	19 f1       	breq	.+70     	; 0x18b6
    1870:	41 15       	cp	r20, r1
    1872:	51 05       	cpc	r21, r1
    1874:	d9 f0       	breq	.+54     	; 0x18ac
    1876:	ea 01       	movw	r28, r20
    1878:	bb 83       	std	Y+3, r27	; 0x03
    187a:	aa 83       	std	Y+2, r26	; 0x02
    187c:	ca 01       	movw	r24, r20
    187e:	02 96       	adiw	r24, 0x02	; 2
    1880:	28 81       	ld	r18, Y
    1882:	39 81       	ldd	r19, Y+1	; 0x01
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	8a 17       	cp	r24, r26
    188a:	9b 07       	cpc	r25, r27
    188c:	19 f5       	brne	.+70     	; 0x18d4
    188e:	6d 91       	ld	r22, X+
    1890:	7c 91       	ld	r23, X
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	26 0f       	add	r18, r22
    1896:	37 1f       	adc	r19, r23
    1898:	2e 5f       	subi	r18, 0xFE	; 254
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	39 83       	std	Y+1, r19	; 0x01
    189e:	28 83       	st	Y, r18
    18a0:	fd 01       	movw	r30, r26
    18a2:	42 81       	ldd	r20, Z+2	; 0x02
    18a4:	53 81       	ldd	r21, Z+3	; 0x03
    18a6:	5b 83       	std	Y+3, r21	; 0x03
    18a8:	4a 83       	std	Y+2, r20	; 0x02
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4
    18ac:	b0 93 e0 03 	sts	0x03E0, r27
    18b0:	a0 93 df 03 	sts	0x03DF, r26
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4
    18b6:	6a 81       	ldd	r22, Y+2	; 0x02
    18b8:	7b 81       	ldd	r23, Y+3	; 0x03
    18ba:	26 0f       	add	r18, r22
    18bc:	37 1f       	adc	r19, r23
    18be:	2e 5f       	subi	r18, 0xFE	; 254
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	11 96       	adiw	r26, 0x01	; 1
    18c4:	3c 93       	st	X, r19
    18c6:	2e 93       	st	-X, r18
    18c8:	22 81       	ldd	r18, Z+2	; 0x02
    18ca:	33 81       	ldd	r19, Z+3	; 0x03
    18cc:	fd 01       	movw	r30, r26
    18ce:	33 83       	std	Z+3, r19	; 0x03
    18d0:	22 83       	std	Z+2, r18	; 0x02
    18d2:	ce cf       	rjmp	.-100    	; 0x1870
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <memset>:
    18da:	dc 01       	movw	r26, r24
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0

000018de <.memset_loop>:
    18de:	6d 93       	st	X+, r22

000018e0 <.memset_start>:
    18e0:	41 50       	subi	r20, 0x01	; 1
    18e2:	50 40       	sbci	r21, 0x00	; 0
    18e4:	e0 f7       	brcc	.-8      	; 0x18de
    18e6:	08 95       	ret

000018e8 <strlen_P>:
    18e8:	fc 01       	movw	r30, r24

000018ea <.strlen_P_loop>:
    18ea:	05 90       	lpm	r0, Z+
    18ec:	00 20       	and	r0, r0
    18ee:	e9 f7       	brne	.-6      	; 0x18ea
    18f0:	80 95       	com	r24
    18f2:	90 95       	com	r25
    18f4:	8e 0f       	add	r24, r30
    18f6:	9f 1f       	adc	r25, r31
    18f8:	08 95       	ret

000018fa <strnlen>:
    18fa:	fc 01       	movw	r30, r24

000018fc <.strnlen_loop>:
    18fc:	61 50       	subi	r22, 0x01	; 1
    18fe:	70 40       	sbci	r23, 0x00	; 0
    1900:	01 90       	ld	r0, Z+
    1902:	01 10       	cpse	r0, r1
    1904:	d8 f7       	brcc	.-10     	; 0x18fc
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	8e 0f       	add	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	08 95       	ret

00001910 <strnlen_P>:
    1910:	fc 01       	movw	r30, r24
    1912:	61 50       	subi	r22, 0x01	; 1
    1914:	70 40       	sbci	r23, 0x00	; 0
    1916:	05 90       	lpm	r0, Z+
    1918:	01 10       	cpse	r0, r1
    191a:	d8 f7       	brcc	.-10     	; 0x1912
    191c:	80 95       	com	r24
    191e:	90 95       	com	r25
    1920:	8e 0f       	add	r24, r30
    1922:	9f 1f       	adc	r25, r31
    1924:	08 95       	ret

00001926 <IntProlog>:
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	bf 93       	push	r27
    192c:	af 93       	push	r26
    192e:	9f 93       	push	r25
    1930:	d3 e0       	ldi	r29, 0x03	; 3
    1932:	cc ec       	ldi	r28, 0xCC	; 204
    1934:	9f b7       	in	r25, 0x3f	; 63
    1936:	ae 81       	ldd	r26, Y+6	; 0x06
    1938:	af 5f       	subi	r26, 0xFF	; 255
    193a:	ae 83       	std	Y+6, r26	; 0x06
    193c:	60 f0       	brcs	.+24     	; 0x1956
    193e:	aa 81       	ldd	r26, Y+2	; 0x02
    1940:	bb 81       	ldd	r27, Y+3	; 0x03
    1942:	ba 2b       	or	r27, r26
    1944:	41 f4       	brne	.+16     	; 0x1956
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	fe 81       	ldd	r31, Y+6	; 0x06
    194c:	ef 81       	ldd	r30, Y+7	; 0x07
    194e:	29 96       	adiw	r28, 0x09	; 9
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	09 94       	ijmp

00001956 <SaveContext>:
    1956:	8f 93       	push	r24
    1958:	7f 93       	push	r23
    195a:	6f 93       	push	r22
    195c:	5f 93       	push	r21
    195e:	4f 93       	push	r20
    1960:	3f 93       	push	r19
    1962:	2f 93       	push	r18
    1964:	1f 93       	push	r17
    1966:	0f 93       	push	r16
    1968:	ff 92       	push	r15
    196a:	ef 92       	push	r14
    196c:	df 92       	push	r13
    196e:	cf 92       	push	r12
    1970:	bf 92       	push	r11
    1972:	af 92       	push	r10
    1974:	9f 92       	push	r9
    1976:	8f 92       	push	r8
    1978:	7f 92       	push	r7
    197a:	6f 92       	push	r6
    197c:	5f 92       	push	r5
    197e:	4f 92       	push	r4
    1980:	3f 92       	push	r3
    1982:	2f 92       	push	r2
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	9f 93       	push	r25
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1990:	39 a1       	ldd	r19, Y+33	; 0x21
    1992:	48 a1       	ldd	r20, Y+32	; 0x20
    1994:	e8 a3       	std	Y+32, r30	; 0x20
    1996:	f9 a3       	std	Y+33, r31	; 0x21
    1998:	70 f0       	brcs	.+28     	; 0x19b6
    199a:	f3 e0       	ldi	r31, 0x03	; 3
    199c:	ec ec       	ldi	r30, 0xCC	; 204
    199e:	d3 81       	ldd	r29, Z+3	; 0x03
    19a0:	c2 81       	ldd	r28, Z+2	; 0x02
    19a2:	be b7       	in	r27, 0x3e	; 62
    19a4:	ad b7       	in	r26, 0x3d	; 61
    19a6:	bd 83       	std	Y+5, r27	; 0x05
    19a8:	ac 83       	std	Y+4, r26	; 0x04
    19aa:	24 81       	ldd	r18, Z+4	; 0x04
    19ac:	2d bf       	out	0x3d, r18	; 61
    19ae:	25 81       	ldd	r18, Z+5	; 0x05
    19b0:	2e bf       	out	0x3e, r18	; 62
    19b2:	ca 2f       	mov	r28, r26
    19b4:	db 2f       	mov	r29, r27

000019b6 <AlreadyInKernel>:
    19b6:	11 24       	eor	r1, r1
    19b8:	e3 2f       	mov	r30, r19
    19ba:	f4 2f       	mov	r31, r20
    19bc:	09 94       	ijmp

000019be <Epilog>:
    19be:	ef 91       	pop	r30
    19c0:	ef 91       	pop	r30

000019c2 <_Epilog>:
    19c2:	ec ec       	ldi	r30, 0xCC	; 204
    19c4:	f3 e0       	ldi	r31, 0x03	; 3
    19c6:	f8 94       	cli
    19c8:	06 81       	ldd	r16, Z+6	; 0x06
    19ca:	0a 95       	dec	r16
    19cc:	06 83       	std	Z+6, r16	; 0x06
    19ce:	54 f4       	brge	.+20     	; 0x19e4
    19d0:	d1 81       	ldd	r29, Z+1	; 0x01
    19d2:	c0 81       	ld	r28, Z
    19d4:	d3 83       	std	Z+3, r29	; 0x03
    19d6:	c2 83       	std	Z+2, r28	; 0x02
    19d8:	20 96       	adiw	r28, 0x00	; 0
    19da:	39 f1       	breq	.+78     	; 0x1a2a
    19dc:	bd 81       	ldd	r27, Y+5	; 0x05
    19de:	ac 81       	ldd	r26, Y+4	; 0x04
    19e0:	ad bf       	out	0x3d, r26	; 61
    19e2:	be bf       	out	0x3e, r27	; 62

000019e4 <SkipTaskSwap>:
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	2f 90       	pop	r2
    19ee:	3f 90       	pop	r3
    19f0:	4f 90       	pop	r4
    19f2:	5f 90       	pop	r5
    19f4:	6f 90       	pop	r6
    19f6:	7f 90       	pop	r7
    19f8:	8f 90       	pop	r8
    19fa:	9f 90       	pop	r9
    19fc:	af 90       	pop	r10
    19fe:	bf 90       	pop	r11
    1a00:	cf 90       	pop	r12
    1a02:	df 90       	pop	r13
    1a04:	ef 90       	pop	r14
    1a06:	ff 90       	pop	r15
    1a08:	0f 91       	pop	r16
    1a0a:	1f 91       	pop	r17
    1a0c:	2f 91       	pop	r18
    1a0e:	3f 91       	pop	r19
    1a10:	4f 91       	pop	r20
    1a12:	5f 91       	pop	r21
    1a14:	6f 91       	pop	r22
    1a16:	7f 91       	pop	r23
    1a18:	8f 91       	pop	r24
    1a1a:	9f 91       	pop	r25
    1a1c:	af 91       	pop	r26
    1a1e:	bf 91       	pop	r27
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	ef 91       	pop	r30
    1a26:	ff 91       	pop	r31
    1a28:	18 95       	reti

00001a2a <_IdleTask>:
    1a2a:	78 94       	sei
    1a2c:	88 95       	sleep

00001a2e <snooze>:
    1a2e:	fd cf       	rjmp	.-6      	; 0x1a2a

00001a30 <AvrXSetKernelStack>:
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	80 50       	subi	r24, 0x00	; 0
    1a36:	90 40       	sbci	r25, 0x00	; 0
    1a38:	11 f4       	brne	.+4      	; 0x1a3e
    1a3a:	8d b7       	in	r24, 0x3d	; 61
    1a3c:	9e b7       	in	r25, 0x3e	; 62

00001a3e <sks1>:
    1a3e:	80 93 d0 03 	sts	0x03D0, r24
    1a42:	90 93 d1 03 	sts	0x03D1, r25
    1a46:	09 94       	ijmp

00001a48 <AvrXRunTask>:
    1a48:	01 d0       	rcall	.+2      	; 0x1a4c
    1a4a:	23 c0       	rjmp	.+70     	; 0x1a92

00001a4c <AvrXInitTask>:
    1a4c:	e8 2f       	mov	r30, r24
    1a4e:	f9 2f       	mov	r31, r25
    1a50:	1d d0       	rcall	.+58     	; 0x1a8c
    1a52:	a0 2d       	mov	r26, r0
    1a54:	1b d0       	rcall	.+54     	; 0x1a8c
    1a56:	b0 2d       	mov	r27, r0
    1a58:	19 d0       	rcall	.+50     	; 0x1a8c
    1a5a:	0c 92       	st	X, r0
    1a5c:	17 d0       	rcall	.+46     	; 0x1a8c
    1a5e:	0e 92       	st	-X, r0
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	51 e2       	ldi	r21, 0x21	; 33

00001a66 <PushRegisters>:
    1a66:	4e 93       	st	-X, r20
    1a68:	5a 95       	dec	r21
    1a6a:	e9 f7       	brne	.-6      	; 0x1a66
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	0e d0       	rcall	.+28     	; 0x1a8c
    1a70:	80 2d       	mov	r24, r0
    1a72:	0c d0       	rcall	.+24     	; 0x1a8c
    1a74:	90 2d       	mov	r25, r0
    1a76:	0a d0       	rcall	.+20     	; 0x1a8c
    1a78:	e8 2f       	mov	r30, r24
    1a7a:	f9 2f       	mov	r31, r25
    1a7c:	a4 83       	std	Z+4, r26	; 0x04
    1a7e:	b5 83       	std	Z+5, r27	; 0x05
    1a80:	03 82       	std	Z+3, r0	; 0x03
    1a82:	a0 e6       	ldi	r26, 0x60	; 96
    1a84:	a2 83       	std	Z+2, r26	; 0x02
    1a86:	41 83       	std	Z+1, r20	; 0x01
    1a88:	40 83       	st	Z, r20
    1a8a:	08 95       	ret

00001a8c <lpm_inc>:
    1a8c:	c8 95       	lpm
    1a8e:	31 96       	adiw	r30, 0x01	; 1
    1a90:	08 95       	ret

00001a92 <AvrXResume>:
    1a92:	f8 94       	cli
    1a94:	48 df       	rcall	.-368    	; 0x1926
    1a96:	78 94       	sei
    1a98:	e8 2f       	mov	r30, r24
    1a9a:	f9 2f       	mov	r31, r25
    1a9c:	22 81       	ldd	r18, Z+2	; 0x02
    1a9e:	2f 7d       	andi	r18, 0xDF	; 223
    1aa0:	22 83       	std	Z+2, r18	; 0x02
    1aa2:	26 ff       	sbrs	r18, 6
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac
    1aa6:	2f 7b       	andi	r18, 0xBF	; 191
    1aa8:	22 83       	std	Z+2, r18	; 0x02
    1aaa:	01 d0       	rcall	.+2      	; 0x1aae

00001aac <ar00>:
    1aac:	8a cf       	rjmp	.-236    	; 0x19c2

00001aae <_QueuePid>:
    1aae:	e8 2f       	mov	r30, r24
    1ab0:	f9 2f       	mov	r31, r25
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	22 81       	ldd	r18, Z+2	; 0x02
    1ab6:	20 73       	andi	r18, 0x30	; 48
    1ab8:	e1 f4       	brne	.+56     	; 0x1af2
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	43 81       	ldd	r20, Z+3	; 0x03
    1ac0:	cc ec       	ldi	r28, 0xCC	; 204
    1ac2:	d3 e0       	ldi	r29, 0x03	; 3
    1ac4:	2f b7       	in	r18, 0x3f	; 63
    1ac6:	f8 94       	cli

00001ac8 <_qp00>:
    1ac8:	33 95       	inc	r19
    1aca:	ec 2f       	mov	r30, r28
    1acc:	fd 2f       	mov	r31, r29
    1ace:	c0 81       	ld	r28, Z
    1ad0:	d1 81       	ldd	r29, Z+1	; 0x01
    1ad2:	20 96       	adiw	r28, 0x00	; 0
    1ad4:	19 f0       	breq	.+6      	; 0x1adc
    1ad6:	5b 81       	ldd	r21, Y+3	; 0x03
    1ad8:	45 17       	cp	r20, r21
    1ada:	b0 f7       	brcc	.-20     	; 0x1ac8

00001adc <_qp01>:
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
    1ae0:	f9 2f       	mov	r31, r25
    1ae2:	e8 2f       	mov	r30, r24
    1ae4:	d1 83       	std	Z+1, r29	; 0x01
    1ae6:	c0 83       	st	Z, r28
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	83 2f       	mov	r24, r19
    1aee:	2f bf       	out	0x3f, r18	; 63
    1af0:	08 95       	ret

00001af2 <_qpSUSPEND>:
    1af2:	83 2f       	mov	r24, r19
    1af4:	20 64       	ori	r18, 0x40	; 64
    1af6:	22 83       	std	Z+2, r18	; 0x02
    1af8:	08 95       	ret

00001afa <AvrXWaitMessageAck>:
    1afa:	8e 5f       	subi	r24, 0xFE	; 254
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255

00001afe <AvrXWaitSemaphore>:
    1afe:	e8 2f       	mov	r30, r24
    1b00:	f9 2f       	mov	r31, r25
    1b02:	f8 94       	cli
    1b04:	20 81       	ld	r18, Z
    1b06:	31 81       	ldd	r19, Z+1	; 0x01
    1b08:	21 50       	subi	r18, 0x01	; 1
    1b0a:	30 40       	sbci	r19, 0x00	; 0
    1b0c:	19 f4       	brne	.+6      	; 0x1b14
    1b0e:	20 83       	st	Z, r18
    1b10:	31 83       	std	Z+1, r19	; 0x01
    1b12:	18 95       	reti

00001b14 <aws01>:
    1b14:	08 df       	rcall	.-496    	; 0x1926
    1b16:	ec ec       	ldi	r30, 0xCC	; 204
    1b18:	f3 e0       	ldi	r31, 0x03	; 3
    1b1a:	73 81       	ldd	r23, Z+3	; 0x03
    1b1c:	62 81       	ldd	r22, Z+2	; 0x02
    1b1e:	3c d0       	rcall	.+120    	; 0x1b98
    1b20:	e8 2f       	mov	r30, r24
    1b22:	f9 2f       	mov	r31, r25
    1b24:	2b d0       	rcall	.+86     	; 0x1b7c
    1b26:	4d cf       	rjmp	.-358    	; 0x19c2

00001b28 <AvrXAckMessage>:
    1b28:	8e 5f       	subi	r24, 0xFE	; 254
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255

00001b2c <AvrXSetSemaphore>:
    1b2c:	0c d0       	rcall	.+24     	; 0x1b46
    1b2e:	90 91 d2 03 	lds	r25, 0x03D2
    1b32:	93 95       	inc	r25
    1b34:	89 2b       	or	r24, r25
    1b36:	09 f0       	breq	.+2      	; 0x1b3a
    1b38:	08 95       	ret

00001b3a <axss0>:
    1b3a:	f8 94       	cli
    1b3c:	f4 de       	rcall	.-536    	; 0x1926
    1b3e:	78 94       	sei
    1b40:	40 cf       	rjmp	.-384    	; 0x19c2

00001b42 <AvrXIntSetObjectSemaphore>:
    1b42:	8e 5f       	subi	r24, 0xFE	; 254
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255

00001b46 <AvrXIntSetSemaphore>:
    1b46:	e8 2f       	mov	r30, r24
    1b48:	f9 2f       	mov	r31, r25
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	2f b7       	in	r18, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	60 81       	ld	r22, Z
    1b56:	86 17       	cp	r24, r22
    1b58:	97 07       	cpc	r25, r23
    1b5a:	28 f0       	brcs	.+10     	; 0x1b66
    1b5c:	80 83       	st	Z, r24
    1b5e:	91 83       	std	Z+1, r25	; 0x01

00001b60 <BogusSemaphore>:
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	2f bf       	out	0x3f, r18	; 63
    1b64:	08 95       	ret

00001b66 <aiss00>:
    1b66:	8f e5       	ldi	r24, 0x5F	; 95
    1b68:	86 17       	cp	r24, r22
    1b6a:	97 07       	cpc	r25, r23
    1b6c:	c8 f7       	brcc	.-14     	; 0x1b60
    1b6e:	23 d0       	rcall	.+70     	; 0x1bb6
    1b70:	2f bf       	out	0x3f, r18	; 63
    1b72:	86 2f       	mov	r24, r22
    1b74:	97 2f       	mov	r25, r23
    1b76:	9b cf       	rjmp	.-202    	; 0x1aae

00001b78 <_ao00>:
    1b78:	e2 2f       	mov	r30, r18
    1b7a:	f3 2f       	mov	r31, r19

00001b7c <_AppendObject>:
    1b7c:	20 81       	ld	r18, Z
    1b7e:	31 81       	ldd	r19, Z+1	; 0x01
    1b80:	20 50       	subi	r18, 0x00	; 0
    1b82:	30 40       	sbci	r19, 0x00	; 0
    1b84:	c9 f7       	brne	.-14     	; 0x1b78
    1b86:	71 83       	std	Z+1, r23	; 0x01
    1b88:	60 83       	st	Z, r22
    1b8a:	f7 2f       	mov	r31, r23
    1b8c:	e6 2f       	mov	r30, r22
    1b8e:	31 83       	std	Z+1, r19	; 0x01
    1b90:	20 83       	st	Z, r18
    1b92:	08 95       	ret

00001b94 <_ro00>:
    1b94:	f3 2f       	mov	r31, r19
    1b96:	e2 2f       	mov	r30, r18

00001b98 <_RemoveObject>:
    1b98:	20 81       	ld	r18, Z
    1b9a:	31 81       	ldd	r19, Z+1	; 0x01
    1b9c:	62 17       	cp	r22, r18
    1b9e:	73 07       	cpc	r23, r19
    1ba0:	51 f0       	breq	.+20     	; 0x1bb6
    1ba2:	20 50       	subi	r18, 0x00	; 0
    1ba4:	30 40       	sbci	r19, 0x00	; 0
    1ba6:	b1 f7       	brne	.-20     	; 0x1b94
    1ba8:	08 95       	ret

00001baa <_RemoveFirstObject>:
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	60 50       	subi	r22, 0x00	; 0
    1bb0:	70 40       	sbci	r23, 0x00	; 0
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6
    1bb4:	08 95       	ret

00001bb6 <_RemoveObjectAt>:
    1bb6:	4c 2f       	mov	r20, r28
    1bb8:	5d 2f       	mov	r21, r29
    1bba:	c6 2f       	mov	r28, r22
    1bbc:	d7 2f       	mov	r29, r23
    1bbe:	79 81       	ldd	r23, Y+1	; 0x01
    1bc0:	68 81       	ld	r22, Y
    1bc2:	71 83       	std	Z+1, r23	; 0x01
    1bc4:	60 83       	st	Z, r22
    1bc6:	e6 2f       	mov	r30, r22
    1bc8:	f7 2f       	mov	r31, r23
    1bca:	66 27       	eor	r22, r22
    1bcc:	68 83       	st	Y, r22
    1bce:	69 83       	std	Y+1, r22	; 0x01
    1bd0:	7d 2f       	mov	r23, r29
    1bd2:	6c 2f       	mov	r22, r28
    1bd4:	c4 2f       	mov	r28, r20
    1bd6:	d5 2f       	mov	r29, r21
    1bd8:	98 94       	clz
    1bda:	08 95       	ret

00001bdc <AvrXIntResetObjectSemaphore>:
    1bdc:	e8 2f       	mov	r30, r24
    1bde:	f9 2f       	mov	r31, r25
    1be0:	32 96       	adiw	r30, 0x02	; 2
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8

00001be4 <AvrXIntResetSemaphore>:
    1be4:	f9 2f       	mov	r31, r25
    1be6:	e8 2f       	mov	r30, r24

00001be8 <ars00>:
    1be8:	f8 94       	cli
    1bea:	40 81       	ld	r20, Z
    1bec:	51 81       	ldd	r21, Z+1	; 0x01
    1bee:	41 50       	subi	r20, 0x01	; 1
    1bf0:	50 40       	sbci	r21, 0x00	; 0
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8
    1bf4:	4f 5f       	subi	r20, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255

00001bf8 <ars01>:
    1bf8:	51 83       	std	Z+1, r21	; 0x01
    1bfa:	40 83       	st	Z, r20
    1bfc:	18 95       	reti

00001bfe <AvrXDelay>:
    1bfe:	01 d0       	rcall	.+2      	; 0x1c02
    1c00:	7c cf       	rjmp	.-264    	; 0x1afa

00001c02 <AvrXStartTimer>:
    1c02:	60 50       	subi	r22, 0x00	; 0
    1c04:	70 40       	sbci	r23, 0x00	; 0
    1c06:	09 f4       	brne	.+2      	; 0x1c0a
    1c08:	8f cf       	rjmp	.-226    	; 0x1b28

00001c0a <CountNotZero>:
    1c0a:	f8 94       	cli
    1c0c:	8c de       	rcall	.-744    	; 0x1926
    1c0e:	78 94       	sei
    1c10:	e5 df       	rcall	.-54     	; 0x1bdc
    1c12:	e4 ed       	ldi	r30, 0xD4	; 212
    1c14:	f3 e0       	ldi	r31, 0x03	; 3
    1c16:	f8 94       	cli
    1c18:	20 91 d6 03 	lds	r18, 0x03D6
    1c1c:	2a 95       	dec	r18
    1c1e:	20 93 d6 03 	sts	0x03D6, r18
    1c22:	78 94       	sei

00001c24 <ast00>:
    1c24:	ce 2f       	mov	r28, r30
    1c26:	df 2f       	mov	r29, r31
    1c28:	e8 81       	ld	r30, Y
    1c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c2c:	30 96       	adiw	r30, 0x00	; 0
    1c2e:	59 f0       	breq	.+22     	; 0x1c46
    1c30:	24 81       	ldd	r18, Z+4	; 0x04
    1c32:	35 81       	ldd	r19, Z+5	; 0x05
    1c34:	62 1b       	sub	r22, r18
    1c36:	73 0b       	sbc	r23, r19
    1c38:	a8 f7       	brcc	.-22     	; 0x1c24
    1c3a:	62 0f       	add	r22, r18
    1c3c:	73 1f       	adc	r23, r19
    1c3e:	26 1b       	sub	r18, r22
    1c40:	37 0b       	sbc	r19, r23
    1c42:	24 83       	std	Z+4, r18	; 0x04
    1c44:	35 83       	std	Z+5, r19	; 0x05

00001c46 <ast01>:
    1c46:	99 83       	std	Y+1, r25	; 0x01
    1c48:	88 83       	st	Y, r24
    1c4a:	d9 2f       	mov	r29, r25
    1c4c:	c8 2f       	mov	r28, r24
    1c4e:	f9 83       	std	Y+1, r31	; 0x01
    1c50:	e8 83       	st	Y, r30
    1c52:	6c 83       	std	Y+4, r22	; 0x04
    1c54:	7d 83       	std	Y+5, r23	; 0x05
    1c56:	3c d0       	rcall	.+120    	; 0x1cd0
    1c58:	b4 ce       	rjmp	.-664    	; 0x19c2

00001c5a <AvrXTimerHandler>:
    1c5a:	f8 94       	cli
    1c5c:	20 91 d6 03 	lds	r18, 0x03D6
    1c60:	21 50       	subi	r18, 0x01	; 1
    1c62:	20 93 d6 03 	sts	0x03D6, r18
    1c66:	78 94       	sei
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c
    1c6a:	08 95       	ret

00001c6c <ati00>:
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	af 93       	push	r26
    1c72:	bf 93       	push	r27
    1c74:	d0 91 d5 03 	lds	r29, 0x03D5
    1c78:	c0 91 d4 03 	lds	r28, 0x03D4
    1c7c:	20 96       	adiw	r28, 0x00	; 0
    1c7e:	21 f1       	breq	.+72     	; 0x1cc8
    1c80:	fd 81       	ldd	r31, Y+5	; 0x05
    1c82:	ec 81       	ldd	r30, Y+4	; 0x04
    1c84:	31 97       	sbiw	r30, 0x01	; 1
    1c86:	fd 83       	std	Y+5, r31	; 0x05
    1c88:	ec 83       	std	Y+4, r30	; 0x04

00001c8a <ati01>:
    1c8a:	ef 2b       	or	r30, r31
    1c8c:	e9 f4       	brne	.+58     	; 0x1cc8
    1c8e:	a8 81       	ld	r26, Y
    1c90:	b9 81       	ldd	r27, Y+1	; 0x01
    1c92:	b0 93 d5 03 	sts	0x03D5, r27
    1c96:	a0 93 d4 03 	sts	0x03D4, r26
    1c9a:	f9 83       	std	Y+1, r31	; 0x01
    1c9c:	e8 83       	st	Y, r30
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	82 50       	subi	r24, 0x02	; 2
    1ca4:	90 40       	sbci	r25, 0x00	; 0
    1ca6:	31 f4       	brne	.+12     	; 0x1cb4
    1ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    1caa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cac:	7d 2f       	mov	r23, r29
    1cae:	6c 2f       	mov	r22, r28
    1cb0:	1d d0       	rcall	.+58     	; 0x1cec
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba

00001cb4 <ati04>:
    1cb4:	8c 2f       	mov	r24, r28
    1cb6:	9d 2f       	mov	r25, r29
    1cb8:	44 df       	rcall	.-376    	; 0x1b42

00001cba <ati03>:
    1cba:	10 96       	adiw	r26, 0x00	; 0
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8
    1cbe:	ca 2f       	mov	r28, r26
    1cc0:	db 2f       	mov	r29, r27
    1cc2:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc6:	e1 cf       	rjmp	.-62     	; 0x1c8a

00001cc8 <ati02>:
    1cc8:	bf 91       	pop	r27
    1cca:	af 91       	pop	r26
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28

00001cd0 <TimerHandler>:
    1cd0:	f8 94       	cli
    1cd2:	20 91 d6 03 	lds	r18, 0x03D6
    1cd6:	23 95       	inc	r18
    1cd8:	20 93 d6 03 	sts	0x03D6, r18
    1cdc:	78 94       	sei
    1cde:	31 f6       	brne	.-116    	; 0x1c6c
    1ce0:	08 95       	ret

00001ce2 <AvrXSendMessage>:
    1ce2:	f8 94       	cli
    1ce4:	20 de       	rcall	.-960    	; 0x1926
    1ce6:	78 94       	sei
    1ce8:	01 d0       	rcall	.+2      	; 0x1cec
    1cea:	6b ce       	rjmp	.-810    	; 0x19c2

00001cec <AvrXIntSendMessage>:
    1cec:	f9 2f       	mov	r31, r25
    1cee:	e8 2f       	mov	r30, r24
    1cf0:	45 df       	rcall	.-374    	; 0x1b7c
    1cf2:	27 cf       	rjmp	.-434    	; 0x1b42

00001cf4 <AvrXWaitMessage>:
    1cf4:	e8 2f       	mov	r30, r24
    1cf6:	f9 2f       	mov	r31, r25
    1cf8:	f8 94       	cli
    1cfa:	57 df       	rcall	.-338    	; 0x1baa
    1cfc:	78 94       	sei
    1cfe:	21 f4       	brne	.+8      	; 0x1d08
    1d00:	fc de       	rcall	.-520    	; 0x1afa
    1d02:	82 50       	subi	r24, 0x02	; 2
    1d04:	90 40       	sbci	r25, 0x00	; 0
    1d06:	f6 cf       	rjmp	.-20     	; 0x1cf4

00001d08 <_rm01>:
    1d08:	69 df       	rcall	.-302    	; 0x1bdc
    1d0a:	86 2f       	mov	r24, r22
    1d0c:	97 2f       	mov	r25, r23
    1d0e:	08 95       	ret

00001d10 <__mulsi3>:
    1d10:	62 9f       	mul	r22, r18
    1d12:	d0 01       	movw	r26, r0
    1d14:	73 9f       	mul	r23, r19
    1d16:	f0 01       	movw	r30, r0
    1d18:	82 9f       	mul	r24, r18
    1d1a:	e0 0d       	add	r30, r0
    1d1c:	f1 1d       	adc	r31, r1
    1d1e:	64 9f       	mul	r22, r20
    1d20:	e0 0d       	add	r30, r0
    1d22:	f1 1d       	adc	r31, r1
    1d24:	92 9f       	mul	r25, r18
    1d26:	f0 0d       	add	r31, r0
    1d28:	83 9f       	mul	r24, r19
    1d2a:	f0 0d       	add	r31, r0
    1d2c:	74 9f       	mul	r23, r20
    1d2e:	f0 0d       	add	r31, r0
    1d30:	65 9f       	mul	r22, r21
    1d32:	f0 0d       	add	r31, r0
    1d34:	99 27       	eor	r25, r25
    1d36:	72 9f       	mul	r23, r18
    1d38:	b0 0d       	add	r27, r0
    1d3a:	e1 1d       	adc	r30, r1
    1d3c:	f9 1f       	adc	r31, r25
    1d3e:	63 9f       	mul	r22, r19
    1d40:	b0 0d       	add	r27, r0
    1d42:	e1 1d       	adc	r30, r1
    1d44:	f9 1f       	adc	r31, r25
    1d46:	bd 01       	movw	r22, r26
    1d48:	cf 01       	movw	r24, r30
    1d4a:	11 24       	eor	r1, r1
    1d4c:	08 95       	ret

00001d4e <__udivmodhi4>:
    1d4e:	aa 1b       	sub	r26, r26
    1d50:	bb 1b       	sub	r27, r27
    1d52:	51 e1       	ldi	r21, 0x11	; 17
    1d54:	07 c0       	rjmp	.+14     	; 0x1d64

00001d56 <__udivmodhi4_loop>:
    1d56:	aa 1f       	adc	r26, r26
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	a6 17       	cp	r26, r22
    1d5c:	b7 07       	cpc	r27, r23
    1d5e:	10 f0       	brcs	.+4      	; 0x1d64
    1d60:	a6 1b       	sub	r26, r22
    1d62:	b7 0b       	sbc	r27, r23

00001d64 <__udivmodhi4_ep>:
    1d64:	88 1f       	adc	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	5a 95       	dec	r21
    1d6a:	a9 f7       	brne	.-22     	; 0x1d56
    1d6c:	80 95       	com	r24
    1d6e:	90 95       	com	r25
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	08 95       	ret

00001d76 <__udivmodsi4>:
    1d76:	a1 e2       	ldi	r26, 0x21	; 33
    1d78:	1a 2e       	mov	r1, r26
    1d7a:	aa 1b       	sub	r26, r26
    1d7c:	bb 1b       	sub	r27, r27
    1d7e:	fd 01       	movw	r30, r26
    1d80:	0d c0       	rjmp	.+26     	; 0x1d9c

00001d82 <__udivmodsi4_loop>:
    1d82:	aa 1f       	adc	r26, r26
    1d84:	bb 1f       	adc	r27, r27
    1d86:	ee 1f       	adc	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	a2 17       	cp	r26, r18
    1d8c:	b3 07       	cpc	r27, r19
    1d8e:	e4 07       	cpc	r30, r20
    1d90:	f5 07       	cpc	r31, r21
    1d92:	20 f0       	brcs	.+8      	; 0x1d9c
    1d94:	a2 1b       	sub	r26, r18
    1d96:	b3 0b       	sbc	r27, r19
    1d98:	e4 0b       	sbc	r30, r20
    1d9a:	f5 0b       	sbc	r31, r21

00001d9c <__udivmodsi4_ep>:
    1d9c:	66 1f       	adc	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	1a 94       	dec	r1
    1da6:	69 f7       	brne	.-38     	; 0x1d82
    1da8:	60 95       	com	r22
    1daa:	70 95       	com	r23
    1dac:	80 95       	com	r24
    1dae:	90 95       	com	r25
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
    1db4:	bd 01       	movw	r22, r26
    1db6:	cf 01       	movw	r24, r30
    1db8:	08 95       	ret

00001dba <__divmodsi4>:
    1dba:	97 fb       	bst	r25, 7
    1dbc:	09 2e       	mov	r0, r25
    1dbe:	05 26       	eor	r0, r21
    1dc0:	0e d0       	rcall	.+28     	; 0x1dde
    1dc2:	57 fd       	sbrc	r21, 7
    1dc4:	04 d0       	rcall	.+8      	; 0x1dce
    1dc6:	d7 df       	rcall	.-82     	; 0x1d76
    1dc8:	0a d0       	rcall	.+20     	; 0x1dde
    1dca:	00 1c       	adc	r0, r0
    1dcc:	38 f4       	brcc	.+14     	; 0x1ddc

00001dce <__divmodsi4_neg2>:
    1dce:	50 95       	com	r21
    1dd0:	40 95       	com	r20
    1dd2:	30 95       	com	r19
    1dd4:	21 95       	neg	r18
    1dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd8:	4f 4f       	sbci	r20, 0xFF	; 255
    1dda:	5f 4f       	sbci	r21, 0xFF	; 255

00001ddc <__divmodsi4_exit>:
    1ddc:	08 95       	ret

00001dde <__divmodsi4_neg1>:
    1dde:	f6 f7       	brtc	.-4      	; 0x1ddc
    1de0:	90 95       	com	r25
    1de2:	80 95       	com	r24
    1de4:	70 95       	com	r23
    1de6:	61 95       	neg	r22
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	8f 4f       	sbci	r24, 0xFF	; 255
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	08 95       	ret

00001df0 <_exit>:
    1df0:	ff cf       	rjmp	.-2      	; 0x1df0
