
AvrXBufferedSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001752  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00001752  000017e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000028d  008000da  008000da  00001860  2**2
                  ALLOC
  3 .noinit       00000000  00800367  00800367  00001860  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001860  2**0
                  CONTENTS
  5 .stab         00002478  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000f4a  00000000  00000000  00003cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000003c  00000000  00000000  00004c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000002f8  00000000  00000000  00004c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000bdc  00000000  00000000  00004f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003ed  00000000  00000000  00005b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000058a  00000000  00000000  00005f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000420  00000000  00000000  000064a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000000c  00001752  00001752  000068c9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82 <__init>
       4:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      10:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      14:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4 <__vector_11>
      30:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      34:	0c 94 a5 02 	jmp	0x54a <__vector_13>
      38:	0c 94 b1 02 	jmp	0x562 <__vector_14>
      3c:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	17 02       	muls	r17, r23
      56:	b6 01       	movw	r22, r12
      58:	99 01       	movw	r18, r18
      5a:	02 ff       	sbrs	r16, 2

0000005b <task1Tcb>:
      5b:	ff 02 8d 01 8b 02 01                                .......

00000062 <task0Tcb>:
      62:	8a 02 2f 01 a3 01 01                                ../....

00000069 <__c.1>:
      69:	63 6f 6d 70 20 25 64 00                             comp %d.

00000071 <__c.2>:
      71:	63 6f 6d 70 20 25 64 00                             comp %d.

00000079 <__c.0>:
      79:	62 61 74 74 20 31 30 30 00                          batt 100.

00000082 <__init>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf e5       	ldi	r28, 0x5F	; 95
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	10 e0       	ldi	r17, 0x00	; 0
      90:	a0 e6       	ldi	r26, 0x60	; 96
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	e2 e5       	ldi	r30, 0x52	; 82
      96:	f7 e1       	ldi	r31, 0x17	; 23
      98:	02 c0       	rjmp	.+4      	; 0x9e <.do_copy_data_start>

0000009a <.do_copy_data_loop>:
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0

0000009e <.do_copy_data_start>:
      9e:	aa 3d       	cpi	r26, 0xDA	; 218
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <.do_copy_data_loop>

000000a4 <__do_clear_bss>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	aa ed       	ldi	r26, 0xDA	; 218
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a7 36       	cpi	r26, 0x67	; 103
      b0:	b1 07       	cpc	r27, r17
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0c 94 d8 01 	jmp	0x3b0 <main>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0x0 <__vectors>

000000bc <parserInit>:

void parserInit(void)
{
	// initialize input buffer
	parserBufferLength = 0;
      bc:	10 92 98 01 	sts	0x0198, r1
	// initialize executing function
	ParserExecFunction = 0;
      c0:	10 92 dd 00 	sts	0x00DD, r1
      c4:	10 92 dc 00 	sts	0x00DC, r1
	// initialize command list
	parserNumCommands = 0;
      c8:	10 92 f2 00 	sts	0x00F2, r1
      cc:	08 95       	ret

000000ce <parserAddCommand>:
}


void parserAddCommand(unsigned char* newCmdString, ParserFuncPtrType newCmdFuncPtr)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	9c 01       	movw	r18, r24
      d4:	8b 01       	movw	r16, r22
	// add command string to end of command list
	strcpy(CommandList[parserNumCommands], newCmdString);
      d6:	90 91 f2 00 	lds	r25, 0x00F2
      da:	8f e0       	ldi	r24, 0x0F	; 15
      dc:	98 9f       	mul	r25, r24
      de:	c0 01       	movw	r24, r0
      e0:	11 24       	eor	r1, r1
      e2:	b9 01       	movw	r22, r18
      e4:	8d 50       	subi	r24, 0x0D	; 13
      e6:	9f 4f       	sbci	r25, 0xFF	; 255
      e8:	0e 94 6a 04 	call	0x8d4 <strcpy>
	// add command function ptr to end of function list
	ParserFunctionList[parserNumCommands] = newCmdFuncPtr;
      ec:	80 91 f2 00 	lds	r24, 0x00F2
      f0:	e8 2f       	mov	r30, r24
      f2:	ff 27       	eor	r31, r31
      f4:	ee 0f       	add	r30, r30
      f6:	ff 1f       	adc	r31, r31
      f8:	e2 52       	subi	r30, 0x22	; 34
      fa:	ff 4f       	sbci	r31, 0xFF	; 255
      fc:	11 83       	std	Z+1, r17	; 0x01
      fe:	00 83       	st	Z, r16
	// increment number of registered commands
	parserNumCommands++;
     100:	8f 5f       	subi	r24, 0xFF	; 255
     102:	80 93 f2 00 	sts	0x00F2, r24
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	08 95       	ret

0000010c <parserSetOutputFunc>:
}


void parserSetOutputFunc(void (*output_func)(unsigned char c))
{
	// set new output function
	parserOutputFunc = output_func;
     10c:	90 93 db 00 	sts	0x00DB, r25
     110:	80 93 da 00 	sts	0x00DA, r24
     114:	08 95       	ret

00000116 <parserProcessInputString>:
}


void parserInputFunc(unsigned char c)
{
	// process the received character
	
	if (c != '\r')		//anything other than return character must be a part of the command
	{	
		// echo character to the output
//		parserOutputFunc(c);
		// add it to the command line buffer
		parserBuffer[parserBufferLength] = c;
		// update buffer length
		parserBufferLength++;
	}
	else				//return character -> process command
	{
		// add null termination to command
		parserBuffer[parserBufferLength] = 0;
		// command is complete, process it
		parserProcessInputString();
		// reset buffer
		parserBufferLength = 0;
	}
}


void parserProcessInputString(void)
{
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
	unsigned char cmdIndex;

	// search command list for match with entered command
	for(cmdIndex=0; cmdIndex<parserNumCommands; cmdIndex++)
     11c:	10 e0       	ldi	r17, 0x00	; 0
     11e:	80 91 f2 00 	lds	r24, 0x00F2
     122:	18 17       	cp	r17, r24
     124:	48 f5       	brcc	.+82     	; 0x178 <parserProcessInputString+0x62>
	{
		if( !strncmp(CommandList[cmdIndex], parserBuffer, 1) )		//command is first char of buffer
     126:	a1 2f       	mov	r26, r17
     128:	bb 27       	eor	r27, r27
     12a:	fd 01       	movw	r30, r26
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	ee 0f       	add	r30, r30
     130:	ff 1f       	adc	r31, r31
     132:	8a 95       	dec	r24
     134:	e1 f7       	brne	.-8      	; 0x12e <parserProcessInputString+0x18>
     136:	ea 1b       	sub	r30, r26
     138:	fb 0b       	sbc	r31, r27
     13a:	ed 50       	subi	r30, 0x0D	; 13
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	80 81       	ld	r24, Z
     140:	c8 2f       	mov	r28, r24
     142:	dd 27       	eor	r29, r29
     144:	80 91 89 01 	lds	r24, 0x0189
     148:	c8 1b       	sub	r28, r24
     14a:	d1 09       	sbc	r29, r1
     14c:	20 97       	sbiw	r28, 0x00	; 0
     14e:	79 f4       	brne	.+30     	; 0x16e <parserProcessInputString+0x58>
		{
			// user-entered command matched a command in the list (database)
			ParserExecFunction = ParserFunctionList[cmdIndex];
     150:	aa 0f       	add	r26, r26
     152:	bb 1f       	adc	r27, r27
     154:	a2 52       	subi	r26, 0x22	; 34
     156:	bf 4f       	sbci	r27, 0xFF	; 255
     158:	ed 91       	ld	r30, X+
     15a:	fc 91       	ld	r31, X
     15c:	f0 93 dd 00 	sts	0x00DD, r31
     160:	e0 93 dc 00 	sts	0x00DC, r30
			// run the corresponding function
			ParserExecFunction();
     164:	09 95       	icall
			// reset
			ParserExecFunction = 0;
     166:	d0 93 dd 00 	sts	0x00DD, r29
     16a:	c0 93 dc 00 	sts	0x00DC, r28
     16e:	1f 5f       	subi	r17, 0xFF	; 255
     170:	80 91 f2 00 	lds	r24, 0x00F2
     174:	18 17       	cp	r17, r24
     176:	b8 f2       	brcs	.-82     	; 0x126 <parserProcessInputString+0x10>
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	08 95       	ret

00000180 <parserInputFunc>:
     180:	90 91 98 01 	lds	r25, 0x0198
     184:	8d 30       	cpi	r24, 0x0D	; 13
     186:	49 f0       	breq	.+18     	; 0x19a <parserInputFunc+0x1a>
     188:	e9 2f       	mov	r30, r25
     18a:	ff 27       	eor	r31, r31
     18c:	e7 57       	subi	r30, 0x77	; 119
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 83       	st	Z, r24
     192:	9f 5f       	subi	r25, 0xFF	; 255
     194:	90 93 98 01 	sts	0x0198, r25
     198:	08 95       	ret
     19a:	e9 2f       	mov	r30, r25
     19c:	ff 27       	eor	r31, r31
     19e:	e7 57       	subi	r30, 0x77	; 119
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	10 82       	st	Z, r1
     1a4:	0e 94 8b 00 	call	0x116 <parserProcessInputString>
     1a8:	10 92 98 01 	sts	0x0198, r1
     1ac:	08 95       	ret

000001ae <parserGetArgStr>:
		}
	}
}

// return string pointer to argument [argnum]
unsigned char* parserGetArgStr(void)
{
	return &parserBuffer[2];		//spec states that commands are 1 char followed by a space followed by the arg, so the
}									//arg must start at idx 2
     1ae:	8b e8       	ldi	r24, 0x8B	; 139
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	08 95       	ret

000001b4 <parserGetArgInt>:

//return argument as a long
long parserGetArgInt(void)
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	22 97       	sbiw	r28, 0x02	; 2
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
	char* endptr;
	return strtol(parserGetArgStr(), &endptr, 10);
     1c8:	0e 94 d7 00 	call	0x1ae <parserGetArgStr>
     1cc:	4a e0       	ldi	r20, 0x0A	; 10
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	0e 94 4f 03 	call	0x69e <strtol>
     1da:	dc 01       	movw	r26, r24
     1dc:	cb 01       	movw	r24, r22
}
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	22 96       	adiw	r28, 0x02	; 2
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <__vector_11>:
 . switch back to interrupted context.
 */
AVRX_SIGINT(SIG_OVERFLOW0)
{
    IntProlog();                // Switch to kernel stack/context
     1f4:	0e 94 61 09 	call	0x12c2 <IntProlog>
    TCNT0 += TCNT0_INIT;		// Add to pre-load to account for any missed clocks
     1f8:	82 b7       	in	r24, 0x32	; 50
     1fa:	8f 53       	subi	r24, 0x3F	; 63
     1fc:	82 bf       	out	0x32, r24	; 50
    AvrXTimerHandler();         // Call Time queue manager
     1fe:	0e 94 fb 0a 	call	0x15f6 <AvrXTimerHandler>
    Epilog();                   // Return to tasks
     202:	0e 94 ad 09 	call	0x135a <Epilog>

00000206 <myputs>:
}

// Super simple string printers...

// PutString from RAM
void myputs(int (*putch)(char), const uint8_t * psz)
{
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	8c 01       	movw	r16, r24
     210:	eb 01       	movw	r28, r22
	while (*psz != 0)
		(*putch)(*psz++);
     212:	88 81       	ld	r24, Y
     214:	88 23       	and	r24, r24
     216:	31 f0       	breq	.+12     	; 0x224 <myputs+0x1e>
     218:	89 91       	ld	r24, Y+
     21a:	f8 01       	movw	r30, r16
     21c:	09 95       	icall
     21e:	88 81       	ld	r24, Y
     220:	88 23       	and	r24, r24
     222:	d1 f7       	brne	.-12     	; 0x218 <myputs+0x12>
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	08 95       	ret

0000022e <myputs_P>:
}

// PutString from FLASH
void myputs_P(int (*putch)(char), const uint8_t * psz)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	8c 01       	movw	r16, r24
     238:	eb 01       	movw	r28, r22
	while (__LPM(psz) != 0)
		(*putch)(__LPM(psz++));
     23a:	fb 01       	movw	r30, r22
     23c:	84 91       	lpm	r24, Z
     23e:	88 23       	and	r24, r24
     240:	49 f0       	breq	.+18     	; 0x254 <myputs_P+0x26>
     242:	fe 01       	movw	r30, r28
     244:	21 96       	adiw	r28, 0x01	; 1
     246:	84 91       	lpm	r24, Z
     248:	f8 01       	movw	r30, r16
     24a:	09 95       	icall
     24c:	fe 01       	movw	r30, r28
     24e:	84 91       	lpm	r24, Z
     250:	88 23       	and	r24, r24
     252:	b9 f7       	brne	.-18     	; 0x242 <myputs_P+0x14>
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <task0>:
}

// This task uses GCC Libc stdio facility and needs an additional 60-80 bytes of stack
// for processing the strings.  Longer strings probably need more stack.

AVRX_GCC_TASKDEF(task0, 76, 1)
{
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	26 97       	sbiw	r28, 0x06	; 6
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		int c = 0;
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	10 e0       	ldi	r17, 0x00	; 0
		
		while (c<360)
		{	printf_P(PSTR("comp %d"), c);
     276:	1f 93       	push	r17
     278:	0f 93       	push	r16
     27a:	89 e6       	ldi	r24, 0x69	; 105
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	0e 94 3d 05 	call	0xa7a <printf_P>
			putchar('\r'),putchar('\n');
     286:	60 91 5d 03 	lds	r22, 0x035D
     28a:	70 91 5e 03 	lds	r23, 0x035E
     28e:	8d e0       	ldi	r24, 0x0D	; 13
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 fb 04 	call	0x9f6 <fputc>
     296:	60 91 5d 03 	lds	r22, 0x035D
     29a:	70 91 5e 03 	lds	r23, 0x035E
     29e:	8a e0       	ldi	r24, 0x0A	; 10
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 fb 04 	call	0x9f6 <fputc>
			c++;
     2a6:	0f 5f       	subi	r16, 0xFF	; 255
     2a8:	1f 4f       	sbci	r17, 0xFF	; 255
			AvrXDelay(&timer, 100);
     2aa:	64 e6       	ldi	r22, 0x64	; 100
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	ce 01       	movw	r24, r28
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	0e 94 cd 0a 	call	0x159a <AvrXDelay>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	08 36       	cpi	r16, 0x68	; 104
     2c2:	18 07       	cpc	r17, r24
     2c4:	c4 f2       	brlt	.-80     	; 0x276 <task0+0x18>
     2c6:	08 e6       	ldi	r16, 0x68	; 104
     2c8:	11 e0       	ldi	r17, 0x01	; 1
		}
		while (c > 0)
		{	printf_P(PSTR("comp %d"), c);
     2ca:	1f 93       	push	r17
     2cc:	0f 93       	push	r16
     2ce:	81 e7       	ldi	r24, 0x71	; 113
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	0e 94 3d 05 	call	0xa7a <printf_P>
			putchar('\r'),putchar('\n');
     2da:	60 91 5d 03 	lds	r22, 0x035D
     2de:	70 91 5e 03 	lds	r23, 0x035E
     2e2:	8d e0       	ldi	r24, 0x0D	; 13
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 fb 04 	call	0x9f6 <fputc>
     2ea:	60 91 5d 03 	lds	r22, 0x035D
     2ee:	70 91 5e 03 	lds	r23, 0x035E
     2f2:	8a e0       	ldi	r24, 0x0A	; 10
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 fb 04 	call	0x9f6 <fputc>
			c--;
     2fa:	01 50       	subi	r16, 0x01	; 1
     2fc:	10 40       	sbci	r17, 0x00	; 0
			AvrXDelay(&timer, 100);
     2fe:	64 e6       	ldi	r22, 0x64	; 100
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 cd 0a 	call	0x159a <AvrXDelay>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	10 16       	cp	r1, r16
     314:	11 06       	cpc	r1, r17
     316:	cc f2       	brlt	.-78     	; 0x2ca <task0+0x6c>
     318:	ac cf       	rjmp	.-168    	; 0x272 <task0+0x14>

0000031a <task1>:
		}
	}
}

AVRX_GCC_TASKDEF(task1, 76, 1)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	26 97       	sbiw	r28, 0x06	; 6
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
	TimerControlBlock timer;
	
	while(1)
	{
		printf_P(PSTR("batt 100"));
     32e:	89 e7       	ldi	r24, 0x79	; 121
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	0e 94 3d 05 	call	0xa7a <printf_P>
		putchar('\r'),putchar('\n');
     33a:	60 91 5d 03 	lds	r22, 0x035D
     33e:	70 91 5e 03 	lds	r23, 0x035E
     342:	8d e0       	ldi	r24, 0x0D	; 13
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 fb 04 	call	0x9f6 <fputc>
     34a:	60 91 5d 03 	lds	r22, 0x035D
     34e:	70 91 5e 03 	lds	r23, 0x035E
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 fb 04 	call	0x9f6 <fputc>
		AvrXDelay(&timer, 2*1000);
     35a:	60 ed       	ldi	r22, 0xD0	; 208
     35c:	77 e0       	ldi	r23, 0x07	; 7
     35e:	ce 01       	movw	r24, r28
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	0e 94 cd 0a 	call	0x159a <AvrXDelay>
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	e1 cf       	rjmp	.-62     	; 0x32e <task1+0x14>

0000036c <task2>:
	}
}

AVRX_GCC_TASKDEF(task2, 76, 2)
{	
	int c;		
	
	while (1)
	{
		while ((c = getchar()) != EOF)
     36c:	15 c0       	rjmp	.+42     	; 0x398 <task2+0x2c>
		{	
			if (c == '\r')
     36e:	cd 30       	cpi	r28, 0x0D	; 13
     370:	d1 05       	cpc	r29, r1
     372:	79 f4       	brne	.+30     	; 0x392 <task2+0x26>
			{	putchar('\r');
     374:	60 91 5d 03 	lds	r22, 0x035D
     378:	70 91 5e 03 	lds	r23, 0x035E
     37c:	ce 01       	movw	r24, r28
     37e:	0e 94 fb 04 	call	0x9f6 <fputc>
				putchar('\n');
     382:	60 91 5d 03 	lds	r22, 0x035D
     386:	70 91 5e 03 	lds	r23, 0x035E
     38a:	8a e0       	ldi	r24, 0x0A	; 10
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 fb 04 	call	0x9f6 <fputc>
			}
			parserInputFunc(c);
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 c0 00 	call	0x180 <parserInputFunc>
     398:	80 91 5b 03 	lds	r24, 0x035B
     39c:	90 91 5c 03 	lds	r25, 0x035C
     3a0:	0e 94 b8 04 	call	0x970 <fgetc>
     3a4:	ec 01       	movw	r28, r24
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	cf 3f       	cpi	r28, 0xFF	; 255
     3aa:	d8 07       	cpc	r29, r24
     3ac:	01 f7       	brne	.-64     	; 0x36e <task2+0x2>
     3ae:	f4 cf       	rjmp	.-24     	; 0x398 <task2+0x2c>

000003b0 <main>:
		}
	}
}


int main(void)
{
     3b0:	cf e5       	ldi	r28, 0x5F	; 95
     3b2:	d8 e0       	ldi	r29, 0x08	; 8
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 e6 09 	call	0x13cc <AvrXSetKernelStack>

	MCUCR = _BV(SE);
     3c0:	80 e8       	ldi	r24, 0x80	; 128
     3c2:	85 bf       	out	0x35, r24	; 53
	TCNT0 = TCNT0_INIT;
     3c4:	81 ec       	ldi	r24, 0xC1	; 193
     3c6:	82 bf       	out	0x32, r24	; 50
#if defined (__AVR_ATmega103__) || defined (__ATmega103__)
	TCCR0 =  ((1<<CS02) | (1<<CS01));
#elif defined (__AVR_ATmega128__) || defined (__ATmega128__) || defined (__AVR_ATmega64__) || defined (__ATmega64__)
	TCCR0 =  ((1<<CS2) | (1<<CS1));
#else	// Most other chips...  Note: some are TCCR0 and some are TCCR0B...
	TCCR0 =  (1<<CS02);
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	83 bf       	out	0x33, r24	; 51
#endif
	TIMSK = _BV(TOIE0);
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	89 bf       	out	0x39, r24	; 57

	InitSerial0(BAUD(57600));
     3d0:	81 e2       	ldi	r24, 0x21	; 33
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 71 02 	call	0x4e2 <InitSerial0>
    fdevopen(put_char0, get_c0);
     3d8:	6b e9       	ldi	r22, 0x9B	; 155
     3da:	72 e0       	ldi	r23, 0x02	; 2
     3dc:	82 e9       	ldi	r24, 0x92	; 146
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 71 04 	call	0x8e2 <fdevopen>
	
	// initialize parser system
	parserInit();
     3e4:	0e 94 5e 00 	call	0xbc <parserInit>
	// direct output to uart (serial port)
	parserSetOutputFunc(putchar);
     3e8:	82 e6       	ldi	r24, 0x62	; 98
     3ea:	95 e0       	ldi	r25, 0x05	; 5
     3ec:	0e 94 86 00 	call	0x10c <parserSetOutputFunc>
	// add commands to the command database
	parserAddCommand("a",		testFunctionA);
     3f0:	63 e1       	ldi	r22, 0x13	; 19
     3f2:	72 e0       	ldi	r23, 0x02	; 2
     3f4:	80 e6       	ldi	r24, 0x60	; 96
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 67 00 	call	0xce <parserAddCommand>
	parserAddCommand("b",		testFunctionB);
     3fc:	62 e4       	ldi	r22, 0x42	; 66
     3fe:	72 e0       	ldi	r23, 0x02	; 2
     400:	82 e6       	ldi	r24, 0x62	; 98
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 67 00 	call	0xce <parserAddCommand>

	AvrXRunTask(TCB(task0));
     408:	82 e6       	ldi	r24, 0x62	; 98
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 f2 09 	call	0x13e4 <AvrXRunTask>
	AvrXRunTask(TCB(task1));
     410:	8b e5       	ldi	r24, 0x5B	; 91
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 f2 09 	call	0x13e4 <AvrXRunTask>
	AvrXRunTask(TCB(task2));
     418:	84 e5       	ldi	r24, 0x54	; 84
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 f2 09 	call	0x13e4 <AvrXRunTask>

	Epilog();
     420:	0e 94 ad 09 	call	0x135a <Epilog>
	while(1);
     424:	ff cf       	rjmp	.-2      	; 0x424 <main+0x74>

00000426 <testFunctionA>:
}

void testFunctionA(void)
{	
	char* endptr;
	
	funcAParam = parserGetArgInt();
     426:	0e 94 da 00 	call	0x1b4 <parserGetArgInt>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	80 93 18 02 	sts	0x0218, r24
     432:	90 93 19 02 	sts	0x0219, r25
     436:	a0 93 1a 02 	sts	0x021A, r26
     43a:	b0 93 1b 02 	sts	0x021B, r27
	printf("test successful: 'a' function called with argument %d", funcAParam);
     43e:	bf 93       	push	r27
     440:	af 93       	push	r26
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	0e 94 28 05 	call	0xa50 <printf>
	putchar('\r');
     452:	60 91 5d 03 	lds	r22, 0x035D
     456:	70 91 5e 03 	lds	r23, 0x035E
     45a:	8d e0       	ldi	r24, 0x0D	; 13
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 fb 04 	call	0x9f6 <fputc>
	putchar('\n');
     462:	60 91 5d 03 	lds	r22, 0x035D
     466:	70 91 5e 03 	lds	r23, 0x035E
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 fb 04 	call	0x9f6 <fputc>
     472:	8d b7       	in	r24, 0x3d	; 61
     474:	9e b7       	in	r25, 0x3e	; 62
     476:	06 96       	adiw	r24, 0x06	; 6
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	9e bf       	out	0x3e, r25	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	8d bf       	out	0x3d, r24	; 61
     482:	08 95       	ret

00000484 <testFunctionB>:
}

void testFunctionB(void)
{	
	funcBParam = parserGetArgInt();
     484:	0e 94 da 00 	call	0x1b4 <parserGetArgInt>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	80 93 9f 01 	sts	0x019F, r24
     490:	90 93 a0 01 	sts	0x01A0, r25
     494:	a0 93 a1 01 	sts	0x01A1, r26
     498:	b0 93 a2 01 	sts	0x01A2, r27
	printf("test successful: 'b' function called with argument %d", funcBParam);
     49c:	bf 93       	push	r27
     49e:	af 93       	push	r26
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	8a e9       	ldi	r24, 0x9A	; 154
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 28 05 	call	0xa50 <printf>
	putchar('\r');
     4b0:	60 91 5d 03 	lds	r22, 0x035D
     4b4:	70 91 5e 03 	lds	r23, 0x035E
     4b8:	8d e0       	ldi	r24, 0x0D	; 13
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 fb 04 	call	0x9f6 <fputc>
	putchar('\n');
     4c0:	60 91 5d 03 	lds	r22, 0x035D
     4c4:	70 91 5e 03 	lds	r23, 0x035E
     4c8:	8a e0       	ldi	r24, 0x0A	; 10
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 fb 04 	call	0x9f6 <fputc>
     4d0:	8d b7       	in	r24, 0x3d	; 61
     4d2:	9e b7       	in	r25, 0x3e	; 62
     4d4:	06 96       	adiw	r24, 0x06	; 6
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	9e bf       	out	0x3e, r25	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	8d bf       	out	0x3d, r24	; 61
     4e0:	08 95       	ret

000004e2 <InitSerial0>:
AVRX_DECL_FIFO(Rx0Buf, RX0_BUFSZ);
AVRX_DECL_FIFO(Tx0Buf, TX0_BUFSZ);

void InitSerial0(uint16_t ubrr)
{
     4e2:	1f 93       	push	r17
// Two USARTs, not shared
#if defined(__AVR_ATmega128__) || defined(__AVR_ATmega64__) | defined(__AVR_ATcan128__)
	UBRR0L = ubrr;
	UBRR0H = (uint8_t)(ubrr>>8);
	UCSR0A = (BAUDX == 8)?(1<<U2X):0;
	UCSR0B = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));
	UCSR0C = ((1<<UCSZ1) | (1<<UCSZ0));

// Dual USART, old shared UCSRC & UBRRH
#elif defined(__AVR_ATmega162__) | defined(__AVR_ATmega161__)
	UBRR0L = ubrr;
	UBRR0H = (uint8_t)(ubrr>>8);
	UCSR0A = (BAUDX == 8)?(1<<U2X):0;
	UCSR0B = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));
#	ifdef (__AVR_ATmega162__)
	UCSR0C = (1<<URSEL0) | (1<<UCSZ1) | (1<<UCSZ0));
#	endif

// One UART (note the missing C register)
#elif defined(__AVR_ATmega163__)
	UBRR   = ubrr;
	UBRRHI = (uint8_t)(ubrr>>8);
	UCSRA  = (BAUDX == 8)?(1<<U2X):0;
	UCSRB  = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));

// One UART, (Classic)
#elif defined(__AVR_AT90S4414__) | defined(__AVR_AT90S8515__)| defined(__AVR_AT90S8535__)
	UBRR	= ubrr;
	UCR		= ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE) | (1<<UDRIE));
#	define UCSRB UCR

// One USART, (C register shared)
#elif defined(__AVR_ATmega8__)   | defined(__AVR_ATmega16__)  | defined(__AVR_ATmega32__)  | \
	  defined(__AVR_ATmega323__) | defined(__AVR_ATmega8515__)| defined(__AVR_ATmega8535__)
	UBRRL = ubrr;
     4e4:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(ubrr>>8);
     4e6:	89 2f       	mov	r24, r25
     4e8:	99 27       	eor	r25, r25
     4ea:	80 bd       	out	0x20, r24	; 32
	UCSRA = (BAUDX == 8)?(1<<U2X):0;
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	8b b9       	out	0x0b, r24	; 11
	UCSRB = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));
     4f0:	88 e9       	ldi	r24, 0x98	; 152
     4f2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0));
     4f4:	86 e8       	ldi	r24, 0x86	; 134
     4f6:	80 bd       	out	0x20, r24	; 32

// One USART, (C register not shared)
#elif defined(__AVR_ATmega169__) | defined(__AVR_ATmega165__) | defined(__AVR_IOtn2313__)
	UBRRL = ubrr;
	UBRRH = (uint8_t)(ubrr>>8);
	UCSRA = (BAUDX == 8)?(1<<U2X):0;
	UCSRB = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));
	UCSRC = ((1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0));
#else
#   ERROR Dont know about that CPU!
#endif
#ifndef UCSRB
#   define UCSRB UCSR0B
#endif
#ifndef UDR
#	define UDR UDR0
#endif
	AVRX_INIT_FIFO(Rx0Buf);
     4f8:	87 e2       	ldi	r24, 0x27	; 39
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	0e 94 22 03 	call	0x644 <AvrXFlushFifo>
     500:	10 e2       	ldi	r17, 0x20	; 32
     502:	10 93 2d 03 	sts	0x032D, r17
	AVRX_INIT_FIFO(Tx0Buf);
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 22 03 	call	0x644 <AvrXFlushFifo>
     50e:	10 93 06 03 	sts	0x0306, r17
     512:	1f 91       	pop	r17
     514:	08 95       	ret

00000516 <put_c0>:
}

int put_c0(char c)	// Non blocking output
{
	int retc;
	retc = AvrXPutFifo(Tx0Buf, c);
     516:	68 2f       	mov	r22, r24
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	93 e0       	ldi	r25, 0x03	; 3
     51c:	0e 94 bf 02 	call	0x57e <AvrXPutFifo>
	UCSRB |= (1<<UDRIE);
     520:	55 9a       	sbi	0x0a, 5	; 10
     522:	08 95       	ret

00000524 <put_char0>:
	return retc;
}

int put_char0( char c)	// Blocking output
{
	AvrXWaitPutFifo(Tx0Buf, c);
     524:	68 2f       	mov	r22, r24
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	0e 94 fc 02 	call	0x5f8 <AvrXWaitPutFifo>
	UCSRB |= (1<<UDRIE);
     52e:	55 9a       	sbi	0x0a, 5	; 10
	return 0;
}
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	08 95       	ret

00000536 <get_c0>:


int get_c0(void)	// Non blocking, return status outside of char range
{
	int retc = AvrXPullFifo(Rx0Buf);
     536:	87 e2       	ldi	r24, 0x27	; 39
     538:	93 e0       	ldi	r25, 0x03	; 3
     53a:	0e 94 db 02 	call	0x5b6 <AvrXPullFifo>
     53e:	08 95       	ret

00000540 <get_char0>:
	return retc;
}

int get_char0(void)	// Blocks waiting for something
{
	return AvrXWaitPullFifo(Rx0Buf);
     540:	87 e2       	ldi	r24, 0x27	; 39
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 11 03 	call	0x622 <AvrXWaitPullFifo>
     548:	08 95       	ret

0000054a <__vector_13>:
}
// We don't care if the buffer is full.  Just signal we got one.
// The task may attempt one extra time to get data out of an empyt
// buffer (getc(), but so what.  Eventually it will block waiting
// for another character to be received.

#if defined(SIG_UART_RECV) && !defined(SIG_UART0_RECV)
#  define SIG_UART0_RECV SIG_UART_RECV		// This covers old single UART chips
#  define SIG_UART0_DATA SIG_UART_DATA
#endif

AVRX_SIGINT(SIG_UART0_RECV)
{
    IntProlog();
     54a:	0e 94 61 09 	call	0x12c2 <IntProlog>
    UCSRB &= ~(1<<RXCIE);	// Disable Rx interrupt
     54e:	57 98       	cbi	0x0a, 7	; 10
    sei();					// Allow other interrupt activity to occur
     550:	78 94       	sei
	AvrXPutFifo(Rx0Buf, UDR);// This resets the Rx Interrupt
     552:	6c b1       	in	r22, 0x0c	; 12
     554:	87 e2       	ldi	r24, 0x27	; 39
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 bf 02 	call	0x57e <AvrXPutFifo>
	UCSRB |= (1<<RXCIE);	// Re-enable.
     55c:	57 9a       	sbi	0x0a, 7	; 10
	Epilog();
     55e:	0e 94 ad 09 	call	0x135a <Epilog>

00000562 <__vector_14>:
}

AVRX_SIGINT(SIG_UART0_DATA)
{
    IntProlog();
     562:	0e 94 61 09 	call	0x12c2 <IntProlog>
    UCSRB &= ~(1<<UDRIE);			// Disable UDRE interrupt
     566:	55 98       	cbi	0x0a, 5	; 10
    sei();							// Allow other stuff to happen
     568:	78 94       	sei
	int c = AvrXPullFifo(Tx0Buf);	// Return -1 if empty (enables interrupts)
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 db 02 	call	0x5b6 <AvrXPullFifo>
	if (c >= 0)						// Tricky tight code: only checking sign
     572:	97 fd       	sbrc	r25, 7
     574:	02 c0       	rjmp	.+4      	; 0x57a <__vector_14+0x18>
	{
		UDR = c;
     576:	8c b9       	out	0x0c, r24	; 12
		UCSRB |= (1<<UDRIE);
     578:	55 9a       	sbi	0x0a, 5	; 10
	}
	Epilog();
     57a:	0e 94 ad 09 	call	0x135a <Epilog>

0000057e <AvrXPutFifo>:
     57e:	dc 01       	movw	r26, r24
     580:	fc 01       	movw	r30, r24
     582:	24 81       	ldd	r18, Z+4	; 0x04
     584:	92 2f       	mov	r25, r18
     586:	9f 5f       	subi	r25, 0xFF	; 255
     588:	86 81       	ldd	r24, Z+6	; 0x06
     58a:	98 17       	cp	r25, r24
     58c:	08 f0       	brcs	.+2      	; 0x590 <AvrXPutFifo+0x12>
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	fd 01       	movw	r30, r26
     592:	85 81       	ldd	r24, Z+5	; 0x05
     594:	98 17       	cp	r25, r24
     596:	19 f4       	brne	.+6      	; 0x59e <AvrXPutFifo+0x20>
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	08 95       	ret
     59e:	fd 01       	movw	r30, r26
     5a0:	e2 0f       	add	r30, r18
     5a2:	f1 1d       	adc	r31, r1
     5a4:	67 83       	std	Z+7, r22	; 0x07
     5a6:	fd 01       	movw	r30, r26
     5a8:	94 83       	std	Z+4, r25	; 0x04
     5aa:	cd 01       	movw	r24, r26
     5ac:	0e 94 64 0a 	call	0x14c8 <AvrXSetSemaphore>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	08 95       	ret

000005b6 <AvrXPullFifo>:
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	dc 01       	movw	r26, r24
     5bc:	fc 01       	movw	r30, r24
     5be:	84 81       	ldd	r24, Z+4	; 0x04
     5c0:	95 81       	ldd	r25, Z+5	; 0x05
     5c2:	89 17       	cp	r24, r25
     5c4:	19 f4       	brne	.+6      	; 0x5cc <AvrXPullFifo+0x16>
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	9f ef       	ldi	r25, 0xFF	; 255
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <AvrXPullFifo+0x3c>
     5cc:	fd 01       	movw	r30, r26
     5ce:	e9 0f       	add	r30, r25
     5d0:	f1 1d       	adc	r31, r1
     5d2:	87 81       	ldd	r24, Z+7	; 0x07
     5d4:	c8 2f       	mov	r28, r24
     5d6:	dd 27       	eor	r29, r29
     5d8:	9f 5f       	subi	r25, 0xFF	; 255
     5da:	fd 01       	movw	r30, r26
     5dc:	86 81       	ldd	r24, Z+6	; 0x06
     5de:	98 17       	cp	r25, r24
     5e0:	08 f0       	brcs	.+2      	; 0x5e4 <AvrXPullFifo+0x2e>
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fd 01       	movw	r30, r26
     5e6:	95 83       	std	Z+5, r25	; 0x05
     5e8:	cd 01       	movw	r24, r26
     5ea:	02 96       	adiw	r24, 0x02	; 2
     5ec:	0e 94 64 0a 	call	0x14c8 <AvrXSetSemaphore>
     5f0:	ce 01       	movw	r24, r28
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <AvrXWaitPutFifo>:
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	ec 01       	movw	r28, r24
     600:	16 2f       	mov	r17, r22
     602:	04 c0       	rjmp	.+8      	; 0x60c <AvrXWaitPutFifo+0x14>
     604:	ce 01       	movw	r24, r28
     606:	02 96       	adiw	r24, 0x02	; 2
     608:	0e 94 4d 0a 	call	0x149a <AvrXWaitSemaphore>
     60c:	61 2f       	mov	r22, r17
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 bf 02 	call	0x57e <AvrXPutFifo>
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	9f 4f       	sbci	r25, 0xFF	; 255
     618:	a9 f3       	breq	.-22     	; 0x604 <AvrXWaitPutFifo+0xc>
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	08 95       	ret

00000622 <AvrXWaitPullFifo>:
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
     628:	03 c0       	rjmp	.+6      	; 0x630 <AvrXWaitPullFifo+0xe>
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 4d 0a 	call	0x149a <AvrXWaitSemaphore>
     630:	ce 01       	movw	r24, r28
     632:	0e 94 db 02 	call	0x5b6 <AvrXPullFifo>
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	8f 3f       	cpi	r24, 0xFF	; 255
     63a:	92 07       	cpc	r25, r18
     63c:	b1 f3       	breq	.-20     	; 0x62a <AvrXWaitPullFifo+0x8>
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <AvrXFlushFifo>:
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	8c 01       	movw	r16, r24
     64a:	fc 01       	movw	r30, r24
     64c:	14 82       	std	Z+4, r1	; 0x04
     64e:	15 82       	std	Z+5, r1	; 0x05
     650:	02 96       	adiw	r24, 0x02	; 2
     652:	0e 94 c0 0a 	call	0x1580 <AvrXIntResetSemaphore>
     656:	c8 01       	movw	r24, r16
     658:	0e 94 c0 0a 	call	0x1580 <AvrXIntResetSemaphore>
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <AvrXPeekFifo>:
     662:	fc 01       	movw	r30, r24
     664:	84 81       	ldd	r24, Z+4	; 0x04
     666:	95 81       	ldd	r25, Z+5	; 0x05
     668:	89 17       	cp	r24, r25
     66a:	19 f4       	brne	.+6      	; 0x672 <AvrXPeekFifo+0x10>
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	9f ef       	ldi	r25, 0xFF	; 255
     670:	08 95       	ret
     672:	e9 0f       	add	r30, r25
     674:	f1 1d       	adc	r31, r1
     676:	87 81       	ldd	r24, Z+7	; 0x07
     678:	99 27       	eor	r25, r25
     67a:	08 95       	ret

0000067c <AvrXStatFifo>:
     67c:	fc 01       	movw	r30, r24
     67e:	8f b7       	in	r24, 0x3f	; 63
     680:	f8 94       	cli
     682:	94 81       	ldd	r25, Z+4	; 0x04
     684:	29 2f       	mov	r18, r25
     686:	33 27       	eor	r19, r19
     688:	95 81       	ldd	r25, Z+5	; 0x05
     68a:	29 1b       	sub	r18, r25
     68c:	31 09       	sbc	r19, r1
     68e:	8f bf       	out	0x3f, r24	; 63
     690:	37 ff       	sbrs	r19, 7
     692:	03 c0       	rjmp	.+6      	; 0x69a <AvrXStatFifo+0x1e>
     694:	86 81       	ldd	r24, Z+6	; 0x06
     696:	28 0f       	add	r18, r24
     698:	31 1d       	adc	r19, r1
     69a:	c9 01       	movw	r24, r18
     69c:	08 95       	ret

0000069e <strtol>:
     69e:	4f 92       	push	r4
     6a0:	5f 92       	push	r5
     6a2:	6f 92       	push	r6
     6a4:	7f 92       	push	r7
     6a6:	8f 92       	push	r8
     6a8:	9f 92       	push	r9
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	8c 01       	movw	r16, r24
     6c0:	2b 01       	movw	r4, r22
     6c2:	ea 01       	movw	r28, r20
     6c4:	ee 24       	eor	r14, r14
     6c6:	61 15       	cp	r22, r1
     6c8:	71 05       	cpc	r23, r1
     6ca:	19 f0       	breq	.+6      	; 0x6d2 <strtol+0x34>
     6cc:	fb 01       	movw	r30, r22
     6ce:	91 83       	std	Z+1, r25	; 0x01
     6d0:	80 83       	st	Z, r24
     6d2:	20 97       	sbiw	r28, 0x00	; 0
     6d4:	49 f0       	breq	.+18     	; 0x6e8 <strtol+0x4a>
     6d6:	ce 01       	movw	r24, r28
     6d8:	02 97       	sbiw	r24, 0x02	; 2
     6da:	83 97       	sbiw	r24, 0x23	; 35
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <strtol+0x4a>
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	e5 c0       	rjmp	.+458    	; 0x8b2 <__stack+0x53>
     6e8:	f8 01       	movw	r30, r16
     6ea:	f1 90       	ld	r15, Z+
     6ec:	8f 01       	movw	r16, r30
     6ee:	8f 2d       	mov	r24, r15
     6f0:	99 27       	eor	r25, r25
     6f2:	0e 94 56 0b 	call	0x16ac <isspace>
     6f6:	89 2b       	or	r24, r25
     6f8:	b9 f7       	brne	.-18     	; 0x6e8 <strtol+0x4a>
     6fa:	fd e2       	ldi	r31, 0x2D	; 45
     6fc:	ff 16       	cp	r15, r31
     6fe:	19 f4       	brne	.+6      	; 0x706 <strtol+0x68>
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	e4 2e       	mov	r14, r20
     704:	03 c0       	rjmp	.+6      	; 0x70c <strtol+0x6e>
     706:	fb e2       	ldi	r31, 0x2B	; 43
     708:	ff 16       	cp	r15, r31
     70a:	19 f4       	brne	.+6      	; 0x712 <strtol+0x74>
     70c:	f8 01       	movw	r30, r16
     70e:	f1 90       	ld	r15, Z+
     710:	8f 01       	movw	r16, r30
     712:	20 97       	sbiw	r28, 0x00	; 0
     714:	19 f0       	breq	.+6      	; 0x71c <strtol+0x7e>
     716:	c0 31       	cpi	r28, 0x10	; 16
     718:	d1 05       	cpc	r29, r1
     71a:	91 f4       	brne	.+36     	; 0x740 <strtol+0xa2>
     71c:	f0 e3       	ldi	r31, 0x30	; 48
     71e:	ff 16       	cp	r15, r31
     720:	79 f4       	brne	.+30     	; 0x740 <strtol+0xa2>
     722:	f8 01       	movw	r30, r16
     724:	80 81       	ld	r24, Z
     726:	88 37       	cpi	r24, 0x78	; 120
     728:	11 f0       	breq	.+4      	; 0x72e <strtol+0x90>
     72a:	88 35       	cpi	r24, 0x58	; 88
     72c:	49 f4       	brne	.+18     	; 0x740 <strtol+0xa2>
     72e:	f8 01       	movw	r30, r16
     730:	f1 80       	ldd	r15, Z+1	; 0x01
     732:	0e 5f       	subi	r16, 0xFE	; 254
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	c0 e1       	ldi	r28, 0x10	; 16
     738:	d0 e0       	ldi	r29, 0x00	; 0
     73a:	f2 e0       	ldi	r31, 0x02	; 2
     73c:	ef 2a       	or	r14, r31
     73e:	0a c0       	rjmp	.+20     	; 0x754 <strtol+0xb6>
     740:	20 97       	sbiw	r28, 0x00	; 0
     742:	41 f4       	brne	.+16     	; 0x754 <strtol+0xb6>
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	f8 16       	cp	r15, r24
     748:	19 f4       	brne	.+6      	; 0x750 <strtol+0xb2>
     74a:	c8 e0       	ldi	r28, 0x08	; 8
     74c:	d0 e0       	ldi	r29, 0x00	; 0
     74e:	02 c0       	rjmp	.+4      	; 0x754 <strtol+0xb6>
     750:	ca e0       	ldi	r28, 0x0A	; 10
     752:	d0 e0       	ldi	r29, 0x00	; 0
     754:	c8 30       	cpi	r28, 0x08	; 8
     756:	d1 05       	cpc	r29, r1
     758:	e9 f0       	breq	.+58     	; 0x794 <strtol+0xf6>
     75a:	c9 30       	cpi	r28, 0x09	; 9
     75c:	d1 05       	cpc	r29, r1
     75e:	24 f4       	brge	.+8      	; 0x768 <strtol+0xca>
     760:	c2 30       	cpi	r28, 0x02	; 2
     762:	d1 05       	cpc	r29, r1
     764:	e9 f0       	breq	.+58     	; 0x7a0 <strtol+0x102>
     766:	22 c0       	rjmp	.+68     	; 0x7ac <strtol+0x10e>
     768:	ca 30       	cpi	r28, 0x0A	; 10
     76a:	d1 05       	cpc	r29, r1
     76c:	21 f0       	breq	.+8      	; 0x776 <strtol+0xd8>
     76e:	c0 31       	cpi	r28, 0x10	; 16
     770:	d1 05       	cpc	r29, r1
     772:	51 f0       	breq	.+20     	; 0x788 <strtol+0xea>
     774:	1b c0       	rjmp	.+54     	; 0x7ac <strtol+0x10e>
     776:	3c ec       	ldi	r19, 0xCC	; 204
     778:	a3 2e       	mov	r10, r19
     77a:	3c ec       	ldi	r19, 0xCC	; 204
     77c:	b3 2e       	mov	r11, r19
     77e:	3c ec       	ldi	r19, 0xCC	; 204
     780:	c3 2e       	mov	r12, r19
     782:	3c e0       	ldi	r19, 0x0C	; 12
     784:	d3 2e       	mov	r13, r19
     786:	1f c0       	rjmp	.+62     	; 0x7c6 <strtol+0x128>
     788:	a1 2c       	mov	r10, r1
     78a:	b1 2c       	mov	r11, r1
     78c:	c1 2c       	mov	r12, r1
     78e:	28 e0       	ldi	r18, 0x08	; 8
     790:	d2 2e       	mov	r13, r18
     792:	19 c0       	rjmp	.+50     	; 0x7c6 <strtol+0x128>
     794:	a1 2c       	mov	r10, r1
     796:	b1 2c       	mov	r11, r1
     798:	c1 2c       	mov	r12, r1
     79a:	90 e1       	ldi	r25, 0x10	; 16
     79c:	d9 2e       	mov	r13, r25
     79e:	13 c0       	rjmp	.+38     	; 0x7c6 <strtol+0x128>
     7a0:	a1 2c       	mov	r10, r1
     7a2:	b1 2c       	mov	r11, r1
     7a4:	c1 2c       	mov	r12, r1
     7a6:	80 e4       	ldi	r24, 0x40	; 64
     7a8:	d8 2e       	mov	r13, r24
     7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <strtol+0x128>
     7ac:	9e 01       	movw	r18, r28
     7ae:	44 27       	eor	r20, r20
     7b0:	37 fd       	sbrc	r19, 7
     7b2:	40 95       	com	r20
     7b4:	54 2f       	mov	r21, r20
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e8       	ldi	r25, 0x80	; 128
     7be:	0e 94 87 0b 	call	0x170e <__udivmodsi4>
     7c2:	59 01       	movw	r10, r18
     7c4:	6a 01       	movw	r12, r20
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	3e 01       	movw	r6, r28
     7d2:	88 24       	eor	r8, r8
     7d4:	77 fc       	sbrc	r7, 7
     7d6:	80 94       	com	r8
     7d8:	98 2c       	mov	r9, r8
     7da:	8f 2d       	mov	r24, r15
     7dc:	80 53       	subi	r24, 0x30	; 48
     7de:	8a 30       	cpi	r24, 0x0A	; 10
     7e0:	10 f4       	brcc	.+4      	; 0x7e6 <strtol+0x148>
     7e2:	f8 2e       	mov	r15, r24
     7e4:	0d c0       	rjmp	.+26     	; 0x800 <strtol+0x162>
     7e6:	8f 2d       	mov	r24, r15
     7e8:	81 54       	subi	r24, 0x41	; 65
     7ea:	8a 31       	cpi	r24, 0x1A	; 26
     7ec:	18 f4       	brcc	.+6      	; 0x7f4 <strtol+0x156>
     7ee:	e9 ec       	ldi	r30, 0xC9	; 201
     7f0:	fe 0e       	add	r15, r30
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <strtol+0x162>
     7f4:	8f 2d       	mov	r24, r15
     7f6:	81 56       	subi	r24, 0x61	; 97
     7f8:	8a 31       	cpi	r24, 0x1A	; 26
     7fa:	48 f5       	brcc	.+82     	; 0x84e <strtol+0x1b0>
     7fc:	f9 ea       	ldi	r31, 0xA9	; 169
     7fe:	ff 0e       	add	r15, r31
     800:	8f 2d       	mov	r24, r15
     802:	99 27       	eor	r25, r25
     804:	8c 17       	cp	r24, r28
     806:	9d 07       	cpc	r25, r29
     808:	14 f5       	brge	.+68     	; 0x84e <strtol+0x1b0>
     80a:	67 fd       	sbrc	r22, 7
     80c:	1c c0       	rjmp	.+56     	; 0x846 <strtol+0x1a8>
     80e:	a2 16       	cp	r10, r18
     810:	b3 06       	cpc	r11, r19
     812:	c4 06       	cpc	r12, r20
     814:	d5 06       	cpc	r13, r21
     816:	a0 f0       	brcs	.+40     	; 0x840 <strtol+0x1a2>
     818:	ca 01       	movw	r24, r20
     81a:	b9 01       	movw	r22, r18
     81c:	a4 01       	movw	r20, r8
     81e:	93 01       	movw	r18, r6
     820:	0e 94 68 0b 	call	0x16d0 <__mulsi3>
     824:	9b 01       	movw	r18, r22
     826:	ac 01       	movw	r20, r24
     828:	2f 0d       	add	r18, r15
     82a:	31 1d       	adc	r19, r1
     82c:	41 1d       	adc	r20, r1
     82e:	51 1d       	adc	r21, r1
     830:	21 30       	cpi	r18, 0x01	; 1
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	38 07       	cpc	r19, r24
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	48 07       	cpc	r20, r24
     83a:	80 e8       	ldi	r24, 0x80	; 128
     83c:	58 07       	cpc	r21, r24
     83e:	10 f0       	brcs	.+4      	; 0x844 <strtol+0x1a6>
     840:	6f ef       	ldi	r22, 0xFF	; 255
     842:	01 c0       	rjmp	.+2      	; 0x846 <strtol+0x1a8>
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	f8 01       	movw	r30, r16
     848:	f1 90       	ld	r15, Z+
     84a:	8f 01       	movw	r16, r30
     84c:	c6 cf       	rjmp	.-116    	; 0x7da <strtol+0x13c>
     84e:	41 14       	cp	r4, r1
     850:	51 04       	cpc	r5, r1
     852:	61 f0       	breq	.+24     	; 0x86c <__stack+0xd>
     854:	66 23       	and	r22, r22
     856:	19 f0       	breq	.+6      	; 0x85e <strtol+0x1c0>
     858:	01 50       	subi	r16, 0x01	; 1
     85a:	10 40       	sbci	r17, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	e1 fe       	sbrs	r14, 1
     860:	05 c0       	rjmp	.+10     	; 0x86c <__stack+0xd>
     862:	02 50       	subi	r16, 0x02	; 2
     864:	10 40       	sbci	r17, 0x00	; 0
     866:	f2 01       	movw	r30, r4
     868:	11 83       	std	Z+1, r17	; 0x01
     86a:	00 83       	st	Z, r16
     86c:	8e 2d       	mov	r24, r14
     86e:	99 27       	eor	r25, r25
     870:	67 ff       	sbrs	r22, 7
     872:	07 c0       	rjmp	.+14     	; 0x882 <__stack+0x23>
     874:	80 ff       	sbrs	r24, 0
     876:	11 c0       	rjmp	.+34     	; 0x89a <__stack+0x3b>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e8       	ldi	r21, 0x80	; 128
     880:	10 c0       	rjmp	.+32     	; 0x8a2 <__stack+0x43>
     882:	80 ff       	sbrs	r24, 0
     884:	08 c0       	rjmp	.+16     	; 0x896 <__stack+0x37>
     886:	50 95       	com	r21
     888:	40 95       	com	r20
     88a:	30 95       	com	r19
     88c:	21 95       	neg	r18
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	4f 4f       	sbci	r20, 0xFF	; 255
     892:	5f 4f       	sbci	r21, 0xFF	; 255
     894:	0c c0       	rjmp	.+24     	; 0x8ae <__stack+0x4f>
     896:	57 ff       	sbrs	r21, 7
     898:	0a c0       	rjmp	.+20     	; 0x8ae <__stack+0x4f>
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	3f ef       	ldi	r19, 0xFF	; 255
     89e:	4f ef       	ldi	r20, 0xFF	; 255
     8a0:	5f e7       	ldi	r21, 0x7F	; 127
     8a2:	82 e2       	ldi	r24, 0x22	; 34
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 62 03 	sts	0x0362, r25
     8aa:	80 93 61 03 	sts	0x0361, r24
     8ae:	ca 01       	movw	r24, r20
     8b0:	b9 01       	movw	r22, r18
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	9f 90       	pop	r9
     8c8:	8f 90       	pop	r8
     8ca:	7f 90       	pop	r7
     8cc:	6f 90       	pop	r6
     8ce:	5f 90       	pop	r5
     8d0:	4f 90       	pop	r4
     8d2:	08 95       	ret

000008d4 <strcpy>:
     8d4:	fb 01       	movw	r30, r22
     8d6:	dc 01       	movw	r26, r24
     8d8:	01 90       	ld	r0, Z+
     8da:	0d 92       	st	X+, r0
     8dc:	00 20       	and	r0, r0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <strcpy+0x4>
     8e0:	08 95       	ret

000008e2 <fdevopen>:
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	8c 01       	movw	r16, r24
     8ec:	eb 01       	movw	r28, r22
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <fdevopen+0x14>
     8f2:	67 2b       	or	r22, r23
     8f4:	c1 f1       	breq	.+112    	; 0x966 <fdevopen+0x84>
     8f6:	6e e0       	ldi	r22, 0x0E	; 14
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 26 08 	call	0x104c <calloc>
     902:	fc 01       	movw	r30, r24
     904:	89 2b       	or	r24, r25
     906:	71 f1       	breq	.+92     	; 0x964 <fdevopen+0x82>
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	83 83       	std	Z+3, r24	; 0x03
     90c:	20 97       	sbiw	r28, 0x00	; 0
     90e:	71 f0       	breq	.+28     	; 0x92c <fdevopen+0x4a>
     910:	d3 87       	std	Z+11, r29	; 0x0b
     912:	c2 87       	std	Z+10, r28	; 0x0a
     914:	81 e8       	ldi	r24, 0x81	; 129
     916:	83 83       	std	Z+3, r24	; 0x03
     918:	80 91 5b 03 	lds	r24, 0x035B
     91c:	90 91 5c 03 	lds	r25, 0x035C
     920:	89 2b       	or	r24, r25
     922:	21 f4       	brne	.+8      	; 0x92c <fdevopen+0x4a>
     924:	f0 93 5c 03 	sts	0x035C, r31
     928:	e0 93 5b 03 	sts	0x035B, r30
     92c:	01 15       	cp	r16, r1
     92e:	11 05       	cpc	r17, r1
     930:	c9 f0       	breq	.+50     	; 0x964 <fdevopen+0x82>
     932:	11 87       	std	Z+9, r17	; 0x09
     934:	00 87       	std	Z+8, r16	; 0x08
     936:	83 81       	ldd	r24, Z+3	; 0x03
     938:	82 60       	ori	r24, 0x02	; 2
     93a:	83 83       	std	Z+3, r24	; 0x03
     93c:	80 91 5d 03 	lds	r24, 0x035D
     940:	90 91 5e 03 	lds	r25, 0x035E
     944:	89 2b       	or	r24, r25
     946:	71 f4       	brne	.+28     	; 0x964 <fdevopen+0x82>
     948:	f0 93 5e 03 	sts	0x035E, r31
     94c:	e0 93 5d 03 	sts	0x035D, r30
     950:	80 91 5f 03 	lds	r24, 0x035F
     954:	90 91 60 03 	lds	r25, 0x0360
     958:	89 2b       	or	r24, r25
     95a:	21 f4       	brne	.+8      	; 0x964 <fdevopen+0x82>
     95c:	f0 93 60 03 	sts	0x0360, r31
     960:	e0 93 5f 03 	sts	0x035F, r30
     964:	cf 01       	movw	r24, r30
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <fgetc>:
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
     976:	4b 81       	ldd	r20, Y+3	; 0x03
     978:	84 2f       	mov	r24, r20
     97a:	99 27       	eor	r25, r25
     97c:	80 ff       	sbrs	r24, 0
     97e:	2e c0       	rjmp	.+92     	; 0x9dc <fgetc+0x6c>
     980:	86 ff       	sbrs	r24, 6
     982:	09 c0       	rjmp	.+18     	; 0x996 <fgetc+0x26>
     984:	4f 7b       	andi	r20, 0xBF	; 191
     986:	4b 83       	std	Y+3, r20	; 0x03
     988:	8e 81       	ldd	r24, Y+6	; 0x06
     98a:	9f 81       	ldd	r25, Y+7	; 0x07
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	9f 83       	std	Y+7, r25	; 0x07
     990:	8e 83       	std	Y+6, r24	; 0x06
     992:	8a 81       	ldd	r24, Y+2	; 0x02
     994:	2c c0       	rjmp	.+88     	; 0x9ee <fgetc+0x7e>
     996:	82 ff       	sbrs	r24, 2
     998:	11 c0       	rjmp	.+34     	; 0x9bc <fgetc+0x4c>
     99a:	e8 81       	ld	r30, Y
     99c:	f9 81       	ldd	r31, Y+1	; 0x01
     99e:	80 81       	ld	r24, Z
     9a0:	28 2f       	mov	r18, r24
     9a2:	33 27       	eor	r19, r19
     9a4:	27 fd       	sbrc	r18, 7
     9a6:	30 95       	com	r19
     9a8:	21 15       	cp	r18, r1
     9aa:	31 05       	cpc	r19, r1
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <fgetc+0x44>
     9ae:	40 62       	ori	r20, 0x20	; 32
     9b0:	4b 83       	std	Y+3, r20	; 0x03
     9b2:	14 c0       	rjmp	.+40     	; 0x9dc <fgetc+0x6c>
     9b4:	31 96       	adiw	r30, 0x01	; 1
     9b6:	f9 83       	std	Y+1, r31	; 0x01
     9b8:	e8 83       	st	Y, r30
     9ba:	13 c0       	rjmp	.+38     	; 0x9e2 <fgetc+0x72>
     9bc:	ea 85       	ldd	r30, Y+10	; 0x0a
     9be:	fb 85       	ldd	r31, Y+11	; 0x0b
     9c0:	ce 01       	movw	r24, r28
     9c2:	09 95       	icall
     9c4:	9c 01       	movw	r18, r24
     9c6:	97 ff       	sbrs	r25, 7
     9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <fgetc+0x72>
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	99 27       	eor	r25, r25
     9ce:	2f 5f       	subi	r18, 0xFF	; 255
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	11 f4       	brne	.+4      	; 0x9d8 <fgetc+0x68>
     9d4:	80 61       	ori	r24, 0x10	; 16
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <fgetc+0x6a>
     9d8:	80 62       	ori	r24, 0x20	; 32
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <fgetc+0x80>
     9e2:	8e 81       	ldd	r24, Y+6	; 0x06
     9e4:	9f 81       	ldd	r25, Y+7	; 0x07
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	9f 83       	std	Y+7, r25	; 0x07
     9ea:	8e 83       	std	Y+6, r24	; 0x06
     9ec:	82 2f       	mov	r24, r18
     9ee:	99 27       	eor	r25, r25
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <fputc>:
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	8c 01       	movw	r16, r24
     a00:	eb 01       	movw	r28, r22
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	99 27       	eor	r25, r25
     a06:	81 ff       	sbrs	r24, 1
     a08:	1c c0       	rjmp	.+56     	; 0xa42 <fputc+0x4c>
     a0a:	82 ff       	sbrs	r24, 2
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <fputc+0x32>
     a0e:	2e 81       	ldd	r18, Y+6	; 0x06
     a10:	3f 81       	ldd	r19, Y+7	; 0x07
     a12:	8c 81       	ldd	r24, Y+4	; 0x04
     a14:	9d 81       	ldd	r25, Y+5	; 0x05
     a16:	28 17       	cp	r18, r24
     a18:	39 07       	cpc	r19, r25
     a1a:	64 f4       	brge	.+24     	; 0xa34 <fputc+0x3e>
     a1c:	e8 81       	ld	r30, Y
     a1e:	f9 81       	ldd	r31, Y+1	; 0x01
     a20:	01 93       	st	Z+, r16
     a22:	f9 83       	std	Y+1, r31	; 0x01
     a24:	e8 83       	st	Y, r30
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <fputc+0x3e>
     a28:	e8 85       	ldd	r30, Y+8	; 0x08
     a2a:	f9 85       	ldd	r31, Y+9	; 0x09
     a2c:	80 2f       	mov	r24, r16
     a2e:	09 95       	icall
     a30:	89 2b       	or	r24, r25
     a32:	39 f4       	brne	.+14     	; 0xa42 <fputc+0x4c>
     a34:	8e 81       	ldd	r24, Y+6	; 0x06
     a36:	9f 81       	ldd	r25, Y+7	; 0x07
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	9f 83       	std	Y+7, r25	; 0x07
     a3c:	8e 83       	std	Y+6, r24	; 0x06
     a3e:	c8 01       	movw	r24, r16
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <fputc+0x50>
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <printf>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	e5 e0       	ldi	r30, 0x05	; 5
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ec 0f       	add	r30, r28
     a5e:	fd 1f       	adc	r31, r29
     a60:	81 91       	ld	r24, Z+
     a62:	91 91       	ld	r25, Z+
     a64:	af 01       	movw	r20, r30
     a66:	bc 01       	movw	r22, r24
     a68:	80 91 5d 03 	lds	r24, 0x035D
     a6c:	90 91 5e 03 	lds	r25, 0x035E
     a70:	0e 94 69 05 	call	0xad2 <vfprintf>
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <printf_P>:
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	45 e0       	ldi	r20, 0x05	; 5
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	4c 0f       	add	r20, r28
     a88:	5d 1f       	adc	r21, r29
     a8a:	fa 01       	movw	r30, r20
     a8c:	21 91       	ld	r18, Z+
     a8e:	31 91       	ld	r19, Z+
     a90:	af 01       	movw	r20, r30
     a92:	a0 91 5d 03 	lds	r26, 0x035D
     a96:	b0 91 5e 03 	lds	r27, 0x035E
     a9a:	fd 01       	movw	r30, r26
     a9c:	83 81       	ldd	r24, Z+3	; 0x03
     a9e:	88 60       	ori	r24, 0x08	; 8
     aa0:	83 83       	std	Z+3, r24	; 0x03
     aa2:	b9 01       	movw	r22, r18
     aa4:	80 91 5d 03 	lds	r24, 0x035D
     aa8:	90 91 5e 03 	lds	r25, 0x035E
     aac:	0e 94 69 05 	call	0xad2 <vfprintf>
     ab0:	e0 91 5d 03 	lds	r30, 0x035D
     ab4:	f0 91 5e 03 	lds	r31, 0x035E
     ab8:	23 81       	ldd	r18, Z+3	; 0x03
     aba:	27 7f       	andi	r18, 0xF7	; 247
     abc:	23 83       	std	Z+3, r18	; 0x03
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <putchar>:
     ac4:	60 91 5d 03 	lds	r22, 0x035D
     ac8:	70 91 5e 03 	lds	r23, 0x035E
     acc:	0e 94 fb 04 	call	0x9f6 <fputc>
     ad0:	08 95       	ret

00000ad2 <vfprintf>:
     ad2:	2f 92       	push	r2
     ad4:	3f 92       	push	r3
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	62 97       	sbiw	r28, 0x12	; 18
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	ee 24       	eor	r14, r14
     b08:	ff 24       	eor	r15, r15
     b0a:	87 01       	movw	r16, r14
     b0c:	1c 01       	movw	r2, r24
     b0e:	7e 87       	std	Y+14, r23	; 0x0e
     b10:	6d 87       	std	Y+13, r22	; 0x0d
     b12:	2a 01       	movw	r4, r20
     b14:	cc 24       	eor	r12, r12
     b16:	dd 24       	eor	r13, r13
     b18:	fc 01       	movw	r30, r24
     b1a:	d7 82       	std	Z+7, r13	; 0x07
     b1c:	c6 82       	std	Z+6, r12	; 0x06
     b1e:	83 81       	ldd	r24, Z+3	; 0x03
     b20:	81 fd       	sbrc	r24, 1
     b22:	68 c2       	rjmp	.+1232   	; 0xff4 <vfprintf+0x522>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	78 c2       	rjmp	.+1264   	; 0x101a <vfprintf+0x548>
     b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	9e 87       	std	Y+14, r25	; 0x0e
     b32:	8d 87       	std	Y+13, r24	; 0x0d
     b34:	c0 fe       	sbrs	r12, 0
     b36:	4b c2       	rjmp	.+1174   	; 0xfce <vfprintf+0x4fc>
     b38:	8f 85       	ldd	r24, Y+15	; 0x0f
     b3a:	80 53       	subi	r24, 0x30	; 48
     b3c:	8a 30       	cpi	r24, 0x0A	; 10
     b3e:	d0 f4       	brcc	.+52     	; 0xb74 <vfprintf+0xa2>
     b40:	9f 85       	ldd	r25, Y+15	; 0x0f
     b42:	90 33       	cpi	r25, 0x30	; 48
     b44:	39 f4       	brne	.+14     	; 0xb54 <vfprintf+0x82>
     b46:	66 20       	and	r6, r6
     b48:	29 f4       	brne	.+10     	; 0xb54 <vfprintf+0x82>
     b4a:	c3 fc       	sbrc	r12, 3
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x82>
     b4e:	e0 e0       	ldi	r30, 0x00	; 0
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	8d c0       	rjmp	.+282    	; 0xc6e <vfprintf+0x19c>
     b54:	8a e0       	ldi	r24, 0x0A	; 10
     b56:	68 9e       	mul	r6, r24
     b58:	60 2c       	mov	r6, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	ff 85       	ldd	r31, Y+15	; 0x0f
     b5e:	6f 0e       	add	r6, r31
     b60:	20 ed       	ldi	r18, 0xD0	; 208
     b62:	62 0e       	add	r6, r18
     b64:	67 fe       	sbrs	r6, 7
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <vfprintf+0x9a>
     b68:	5f e7       	ldi	r21, 0x7F	; 127
     b6a:	65 2e       	mov	r6, r21
     b6c:	c3 fc       	sbrc	r12, 3
     b6e:	42 c2       	rjmp	.+1156   	; 0xff4 <vfprintf+0x522>
     b70:	76 2c       	mov	r7, r6
     b72:	40 c2       	rjmp	.+1152   	; 0xff4 <vfprintf+0x522>
     b74:	c3 fe       	sbrs	r12, 3
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <vfprintf+0xae>
     b78:	66 20       	and	r6, r6
     b7a:	11 f4       	brne	.+4      	; 0xb80 <vfprintf+0xae>
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	64 2e       	mov	r6, r20
     b80:	ef 85       	ldd	r30, Y+15	; 0x0f
     b82:	8e 2f       	mov	r24, r30
     b84:	99 27       	eor	r25, r25
     b86:	87 fd       	sbrc	r24, 7
     b88:	90 95       	com	r25
     b8a:	88 36       	cpi	r24, 0x68	; 104
     b8c:	91 05       	cpc	r25, r1
     b8e:	8c f5       	brge	.+98     	; 0xbf2 <vfprintf+0x120>
     b90:	85 36       	cpi	r24, 0x65	; 101
     b92:	91 05       	cpc	r25, r1
     b94:	0c f0       	brlt	.+2      	; 0xb98 <vfprintf+0xc6>
     b96:	6e c0       	rjmp	.+220    	; 0xc74 <vfprintf+0x1a2>
     b98:	83 35       	cpi	r24, 0x53	; 83
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <vfprintf+0xce>
     b9e:	93 c0       	rjmp	.+294    	; 0xcc6 <vfprintf+0x1f4>
     ba0:	84 35       	cpi	r24, 0x54	; 84
     ba2:	91 05       	cpc	r25, r1
     ba4:	cc f4       	brge	.+50     	; 0xbd8 <vfprintf+0x106>
     ba6:	8b 32       	cpi	r24, 0x2B	; 43
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <vfprintf+0xdc>
     bac:	49 c0       	rjmp	.+146    	; 0xc40 <vfprintf+0x16e>
     bae:	8c 32       	cpi	r24, 0x2C	; 44
     bb0:	91 05       	cpc	r25, r1
     bb2:	4c f4       	brge	.+18     	; 0xbc6 <vfprintf+0xf4>
     bb4:	80 32       	cpi	r24, 0x20	; 32
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <vfprintf+0xea>
     bba:	46 c0       	rjmp	.+140    	; 0xc48 <vfprintf+0x176>
     bbc:	83 32       	cpi	r24, 0x23	; 35
     bbe:	91 05       	cpc	r25, r1
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <vfprintf+0xf2>
     bc2:	4a c0       	rjmp	.+148    	; 0xc58 <vfprintf+0x186>
     bc4:	fe c1       	rjmp	.+1020   	; 0xfc2 <vfprintf+0x4f0>
     bc6:	8d 32       	cpi	r24, 0x2D	; 45
     bc8:	91 05       	cpc	r25, r1
     bca:	09 f4       	brne	.+2      	; 0xbce <vfprintf+0xfc>
     bcc:	40 c0       	rjmp	.+128    	; 0xc4e <vfprintf+0x17c>
     bce:	8e 32       	cpi	r24, 0x2E	; 46
     bd0:	91 05       	cpc	r25, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <vfprintf+0x104>
     bd4:	44 c0       	rjmp	.+136    	; 0xc5e <vfprintf+0x18c>
     bd6:	f5 c1       	rjmp	.+1002   	; 0xfc2 <vfprintf+0x4f0>
     bd8:	83 36       	cpi	r24, 0x63	; 99
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <vfprintf+0x10e>
     bde:	50 c0       	rjmp	.+160    	; 0xc80 <vfprintf+0x1ae>
     be0:	84 36       	cpi	r24, 0x64	; 100
     be2:	91 05       	cpc	r25, r1
     be4:	0c f0       	brlt	.+2      	; 0xbe8 <vfprintf+0x116>
     be6:	8a c0       	rjmp	.+276    	; 0xcfc <vfprintf+0x22a>
     be8:	88 35       	cpi	r24, 0x58	; 88
     bea:	91 05       	cpc	r25, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <vfprintf+0x11e>
     bee:	bc c0       	rjmp	.+376    	; 0xd68 <vfprintf+0x296>
     bf0:	e8 c1       	rjmp	.+976    	; 0xfc2 <vfprintf+0x4f0>
     bf2:	80 37       	cpi	r24, 0x70	; 112
     bf4:	91 05       	cpc	r25, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <vfprintf+0x128>
     bf8:	b1 c0       	rjmp	.+354    	; 0xd5c <vfprintf+0x28a>
     bfa:	81 37       	cpi	r24, 0x71	; 113
     bfc:	91 05       	cpc	r25, r1
     bfe:	84 f4       	brge	.+32     	; 0xc20 <vfprintf+0x14e>
     c00:	8c 36       	cpi	r24, 0x6C	; 108
     c02:	91 05       	cpc	r25, r1
     c04:	91 f1       	breq	.+100    	; 0xc6a <vfprintf+0x198>
     c06:	8d 36       	cpi	r24, 0x6D	; 109
     c08:	91 05       	cpc	r25, r1
     c0a:	2c f4       	brge	.+10     	; 0xc16 <vfprintf+0x144>
     c0c:	89 36       	cpi	r24, 0x69	; 105
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <vfprintf+0x142>
     c12:	74 c0       	rjmp	.+232    	; 0xcfc <vfprintf+0x22a>
     c14:	d6 c1       	rjmp	.+940    	; 0xfc2 <vfprintf+0x4f0>
     c16:	8f 36       	cpi	r24, 0x6F	; 111
     c18:	91 05       	cpc	r25, r1
     c1a:	09 f4       	brne	.+2      	; 0xc1e <vfprintf+0x14c>
     c1c:	9c c0       	rjmp	.+312    	; 0xd56 <vfprintf+0x284>
     c1e:	d1 c1       	rjmp	.+930    	; 0xfc2 <vfprintf+0x4f0>
     c20:	85 37       	cpi	r24, 0x75	; 117
     c22:	91 05       	cpc	r25, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <vfprintf+0x156>
     c26:	a2 c0       	rjmp	.+324    	; 0xd6c <vfprintf+0x29a>
     c28:	86 37       	cpi	r24, 0x76	; 118
     c2a:	91 05       	cpc	r25, r1
     c2c:	24 f4       	brge	.+8      	; 0xc36 <vfprintf+0x164>
     c2e:	83 37       	cpi	r24, 0x73	; 115
     c30:	91 05       	cpc	r25, r1
     c32:	71 f1       	breq	.+92     	; 0xc90 <vfprintf+0x1be>
     c34:	c6 c1       	rjmp	.+908    	; 0xfc2 <vfprintf+0x4f0>
     c36:	88 37       	cpi	r24, 0x78	; 120
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <vfprintf+0x16c>
     c3c:	95 c0       	rjmp	.+298    	; 0xd68 <vfprintf+0x296>
     c3e:	c1 c1       	rjmp	.+898    	; 0xfc2 <vfprintf+0x4f0>
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	c8 2a       	or	r12, r24
     c46:	d9 2a       	or	r13, r25
     c48:	e0 e2       	ldi	r30, 0x20	; 32
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	10 c0       	rjmp	.+32     	; 0xc6e <vfprintf+0x19c>
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	c8 2a       	or	r12, r24
     c54:	d9 2a       	or	r13, r25
     c56:	ce c1       	rjmp	.+924    	; 0xff4 <vfprintf+0x522>
     c58:	e0 e4       	ldi	r30, 0x40	; 64
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <vfprintf+0x19c>
     c5e:	88 e0       	ldi	r24, 0x08	; 8
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	c8 2a       	or	r12, r24
     c64:	d9 2a       	or	r13, r25
     c66:	66 24       	eor	r6, r6
     c68:	c5 c1       	rjmp	.+906    	; 0xff4 <vfprintf+0x522>
     c6a:	e4 e0       	ldi	r30, 0x04	; 4
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	ce 2a       	or	r12, r30
     c70:	df 2a       	or	r13, r31
     c72:	c0 c1       	rjmp	.+896    	; 0xff4 <vfprintf+0x522>
     c74:	3f e3       	ldi	r19, 0x3F	; 63
     c76:	e3 2e       	mov	r14, r19
     c78:	7a 94       	dec	r7
     c7a:	f3 e6       	ldi	r31, 0x63	; 99
     c7c:	ff 87       	std	Y+15, r31	; 0x0f
     c7e:	3c c1       	rjmp	.+632    	; 0xef8 <vfprintf+0x426>
     c80:	f2 01       	movw	r30, r4
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	48 0e       	add	r4, r24
     c88:	59 1e       	adc	r5, r25
     c8a:	e0 80       	ld	r14, Z
     c8c:	7a 94       	dec	r7
     c8e:	34 c1       	rjmp	.+616    	; 0xef8 <vfprintf+0x426>
     c90:	f2 01       	movw	r30, r4
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	48 0e       	add	r4, r24
     c98:	59 1e       	adc	r5, r25
     c9a:	a0 81       	ld	r26, Z
     c9c:	b1 81       	ldd	r27, Z+1	; 0x01
     c9e:	7d 01       	movw	r14, r26
     ca0:	c3 fe       	sbrs	r12, 3
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <vfprintf+0x1e4>
     ca4:	86 2d       	mov	r24, r6
     ca6:	99 27       	eor	r25, r25
     ca8:	87 fd       	sbrc	r24, 7
     caa:	90 95       	com	r25
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	0e 94 56 09 	call	0x12ac <strnlen>
     cb4:	1f c0       	rjmp	.+62     	; 0xcf4 <vfprintf+0x222>
     cb6:	fd 01       	movw	r30, r26
     cb8:	01 90       	ld	r0, Z+
     cba:	00 20       	and	r0, r0
     cbc:	e9 f7       	brne	.-6      	; 0xcb8 <vfprintf+0x1e6>
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	ea 1b       	sub	r30, r26
     cc2:	e8 8b       	std	Y+16, r30	; 0x10
     cc4:	18 c0       	rjmp	.+48     	; 0xcf6 <vfprintf+0x224>
     cc6:	f2 01       	movw	r30, r4
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	48 0e       	add	r4, r24
     cce:	59 1e       	adc	r5, r25
     cd0:	01 90       	ld	r0, Z+
     cd2:	f0 81       	ld	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	7f 01       	movw	r14, r30
     cd8:	c3 fe       	sbrs	r12, 3
     cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x21c>
     cdc:	86 2d       	mov	r24, r6
     cde:	99 27       	eor	r25, r25
     ce0:	87 fd       	sbrc	r24, 7
     ce2:	90 95       	com	r25
     ce4:	bc 01       	movw	r22, r24
     ce6:	cf 01       	movw	r24, r30
     ce8:	0e 94 41 09 	call	0x1282 <strnlen_P>
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x222>
     cee:	cf 01       	movw	r24, r30
     cf0:	0e 94 38 09 	call	0x1270 <strlen_P>
     cf4:	88 8b       	std	Y+16, r24	; 0x10
     cf6:	98 89       	ldd	r25, Y+16	; 0x10
     cf8:	79 1a       	sub	r7, r25
     cfa:	fe c0       	rjmp	.+508    	; 0xef8 <vfprintf+0x426>
     cfc:	c2 fe       	sbrs	r12, 2
     cfe:	0a c0       	rjmp	.+20     	; 0xd14 <vfprintf+0x242>
     d00:	f2 01       	movw	r30, r4
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	48 0e       	add	r4, r24
     d08:	59 1e       	adc	r5, r25
     d0a:	20 81       	ld	r18, Z
     d0c:	31 81       	ldd	r19, Z+1	; 0x01
     d0e:	42 81       	ldd	r20, Z+2	; 0x02
     d10:	53 81       	ldd	r21, Z+3	; 0x03
     d12:	0c c0       	rjmp	.+24     	; 0xd2c <vfprintf+0x25a>
     d14:	f2 01       	movw	r30, r4
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	48 0e       	add	r4, r24
     d1c:	59 1e       	adc	r5, r25
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	9c 01       	movw	r18, r24
     d24:	44 27       	eor	r20, r20
     d26:	37 fd       	sbrc	r19, 7
     d28:	40 95       	com	r20
     d2a:	54 2f       	mov	r21, r20
     d2c:	79 01       	movw	r14, r18
     d2e:	8a 01       	movw	r16, r20
     d30:	57 ff       	sbrs	r21, 7
     d32:	0c c0       	rjmp	.+24     	; 0xd4c <vfprintf+0x27a>
     d34:	e2 e0       	ldi	r30, 0x02	; 2
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	ce 2a       	or	r12, r30
     d3a:	df 2a       	or	r13, r31
     d3c:	10 95       	com	r17
     d3e:	00 95       	com	r16
     d40:	f0 94       	com	r15
     d42:	e0 94       	com	r14
     d44:	e1 1c       	adc	r14, r1
     d46:	f1 1c       	adc	r15, r1
     d48:	01 1d       	adc	r16, r1
     d4a:	11 1d       	adc	r17, r1
     d4c:	8f eb       	ldi	r24, 0xBF	; 191
     d4e:	9f ef       	ldi	r25, 0xFF	; 255
     d50:	c8 22       	and	r12, r24
     d52:	d9 22       	and	r13, r25
     d54:	27 c0       	rjmp	.+78     	; 0xda4 <vfprintf+0x2d2>
     d56:	98 e0       	ldi	r25, 0x08	; 8
     d58:	98 8b       	std	Y+16, r25	; 0x10
     d5a:	08 c0       	rjmp	.+16     	; 0xd6c <vfprintf+0x29a>
     d5c:	e0 e4       	ldi	r30, 0x40	; 64
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	ce 2a       	or	r12, r30
     d62:	df 2a       	or	r13, r31
     d64:	f8 e7       	ldi	r31, 0x78	; 120
     d66:	ff 87       	std	Y+15, r31	; 0x0f
     d68:	20 e1       	ldi	r18, 0x10	; 16
     d6a:	28 8b       	std	Y+16, r18	; 0x10
     d6c:	c2 fe       	sbrs	r12, 2
     d6e:	0a c0       	rjmp	.+20     	; 0xd84 <vfprintf+0x2b2>
     d70:	f2 01       	movw	r30, r4
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	48 0e       	add	r4, r24
     d78:	59 1e       	adc	r5, r25
     d7a:	20 81       	ld	r18, Z
     d7c:	31 81       	ldd	r19, Z+1	; 0x01
     d7e:	42 81       	ldd	r20, Z+2	; 0x02
     d80:	53 81       	ldd	r21, Z+3	; 0x03
     d82:	0a c0       	rjmp	.+20     	; 0xd98 <vfprintf+0x2c6>
     d84:	f2 01       	movw	r30, r4
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	48 0e       	add	r4, r24
     d8c:	59 1e       	adc	r5, r25
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	9c 01       	movw	r18, r24
     d94:	44 27       	eor	r20, r20
     d96:	55 27       	eor	r21, r21
     d98:	79 01       	movw	r14, r18
     d9a:	8a 01       	movw	r16, r20
     d9c:	ef ec       	ldi	r30, 0xCF	; 207
     d9e:	ff ef       	ldi	r31, 0xFF	; 255
     da0:	ce 22       	and	r12, r30
     da2:	df 22       	and	r13, r31
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	9a 8b       	std	Y+18, r25	; 0x12
     daa:	89 8b       	std	Y+17, r24	; 0x11
     dac:	98 89       	ldd	r25, Y+16	; 0x10
     dae:	89 2e       	mov	r8, r25
     db0:	99 24       	eor	r9, r9
     db2:	aa 24       	eor	r10, r10
     db4:	bb 24       	eor	r11, r11
     db6:	c8 01       	movw	r24, r16
     db8:	b7 01       	movw	r22, r14
     dba:	a5 01       	movw	r20, r10
     dbc:	94 01       	movw	r18, r8
     dbe:	0e 94 87 0b 	call	0x170e <__udivmodsi4>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	e9 89       	ldd	r30, Y+17	; 0x11
     dc8:	fa 89       	ldd	r31, Y+18	; 0x12
     dca:	80 83       	st	Z, r24
     dcc:	8a 30       	cpi	r24, 0x0A	; 10
     dce:	24 f0       	brlt	.+8      	; 0xdd8 <vfprintf+0x306>
     dd0:	ff 85       	ldd	r31, Y+15	; 0x0f
     dd2:	8f 0f       	add	r24, r31
     dd4:	81 52       	subi	r24, 0x21	; 33
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <vfprintf+0x308>
     dd8:	80 5d       	subi	r24, 0xD0	; 208
     dda:	e9 89       	ldd	r30, Y+17	; 0x11
     ddc:	fa 89       	ldd	r31, Y+18	; 0x12
     dde:	81 93       	st	Z+, r24
     de0:	fa 8b       	std	Y+18, r31	; 0x12
     de2:	e9 8b       	std	Y+17, r30	; 0x11
     de4:	c8 01       	movw	r24, r16
     de6:	b7 01       	movw	r22, r14
     de8:	a5 01       	movw	r20, r10
     dea:	94 01       	movw	r18, r8
     dec:	0e 94 87 0b 	call	0x170e <__udivmodsi4>
     df0:	79 01       	movw	r14, r18
     df2:	8a 01       	movw	r16, r20
     df4:	21 15       	cp	r18, r1
     df6:	31 05       	cpc	r19, r1
     df8:	41 05       	cpc	r20, r1
     dfa:	51 05       	cpc	r21, r1
     dfc:	e1 f6       	brne	.-72     	; 0xdb6 <vfprintf+0x2e4>
     dfe:	e9 88       	ldd	r14, Y+17	; 0x11
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	8c 0f       	add	r24, r28
     e06:	9d 1f       	adc	r25, r29
     e08:	e8 1a       	sub	r14, r24
     e0a:	c6 01       	movw	r24, r12
     e0c:	82 73       	andi	r24, 0x32	; 50
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	89 2b       	or	r24, r25
     e12:	09 f0       	breq	.+2      	; 0xe16 <vfprintf+0x344>
     e14:	7a 94       	dec	r7
     e16:	c6 fe       	sbrs	r12, 6
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <vfprintf+0x362>
     e1a:	87 2d       	mov	r24, r7
     e1c:	99 27       	eor	r25, r25
     e1e:	87 fd       	sbrc	r24, 7
     e20:	90 95       	com	r25
     e22:	e8 89       	ldd	r30, Y+16	; 0x10
     e24:	e0 31       	cpi	r30, 0x10	; 16
     e26:	21 f4       	brne	.+8      	; 0xe30 <vfprintf+0x35e>
     e28:	2e ef       	ldi	r18, 0xFE	; 254
     e2a:	72 2e       	mov	r7, r18
     e2c:	78 0e       	add	r7, r24
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <vfprintf+0x362>
     e30:	78 2e       	mov	r7, r24
     e32:	7a 94       	dec	r7
     e34:	c3 fe       	sbrs	r12, 3
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <vfprintf+0x384>
     e38:	26 2d       	mov	r18, r6
     e3a:	33 27       	eor	r19, r19
     e3c:	27 fd       	sbrc	r18, 7
     e3e:	30 95       	com	r19
     e40:	8e 2d       	mov	r24, r14
     e42:	99 27       	eor	r25, r25
     e44:	82 17       	cp	r24, r18
     e46:	93 07       	cpc	r25, r19
     e48:	2c f0       	brlt	.+10     	; 0xe54 <vfprintf+0x382>
     e4a:	87 ef       	ldi	r24, 0xF7	; 247
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	c8 22       	and	r12, r24
     e50:	d9 22       	and	r13, r25
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x384>
     e54:	6e 18       	sub	r6, r14
     e56:	c3 fe       	sbrs	r12, 3
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x38c>
     e5a:	76 18       	sub	r7, r6
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <vfprintf+0x38e>
     e5e:	7e 18       	sub	r7, r14
     e60:	c6 01       	movw	r24, r12
     e62:	80 78       	andi	r24, 0x80	; 128
     e64:	91 70       	andi	r25, 0x01	; 1
     e66:	89 2b       	or	r24, r25
     e68:	51 f4       	brne	.+20     	; 0xe7e <vfprintf+0x3ac>
     e6a:	87 2d       	mov	r24, r7
     e6c:	7a 94       	dec	r7
     e6e:	18 16       	cp	r1, r24
     e70:	34 f4       	brge	.+12     	; 0xe7e <vfprintf+0x3ac>
     e72:	b1 01       	movw	r22, r2
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 fb 04 	call	0x9f6 <fputc>
     e7c:	f6 cf       	rjmp	.-20     	; 0xe6a <vfprintf+0x398>
     e7e:	c1 fe       	sbrs	r12, 1
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <vfprintf+0x3b8>
     e82:	b1 01       	movw	r22, r2
     e84:	8d e2       	ldi	r24, 0x2D	; 45
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0b c0       	rjmp	.+22     	; 0xea0 <vfprintf+0x3ce>
     e8a:	c4 fe       	sbrs	r12, 4
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <vfprintf+0x3c4>
     e8e:	b1 01       	movw	r22, r2
     e90:	8b e2       	ldi	r24, 0x2B	; 43
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <vfprintf+0x3ce>
     e96:	c5 fe       	sbrs	r12, 5
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x3d2>
     e9a:	b1 01       	movw	r22, r2
     e9c:	80 e2       	ldi	r24, 0x20	; 32
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 fb 04 	call	0x9f6 <fputc>
     ea4:	c6 fe       	sbrs	r12, 6
     ea6:	10 c0       	rjmp	.+32     	; 0xec8 <vfprintf+0x3f6>
     ea8:	b1 01       	movw	r22, r2
     eaa:	80 e3       	ldi	r24, 0x30	; 48
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 fb 04 	call	0x9f6 <fputc>
     eb2:	98 89       	ldd	r25, Y+16	; 0x10
     eb4:	90 31       	cpi	r25, 0x10	; 16
     eb6:	41 f4       	brne	.+16     	; 0xec8 <vfprintf+0x3f6>
     eb8:	b1 01       	movw	r22, r2
     eba:	ef 85       	ldd	r30, Y+15	; 0x0f
     ebc:	8e 2f       	mov	r24, r30
     ebe:	99 27       	eor	r25, r25
     ec0:	87 fd       	sbrc	r24, 7
     ec2:	90 95       	com	r25
     ec4:	0e 94 fb 04 	call	0x9f6 <fputc>
     ec8:	d0 fe       	sbrs	r13, 0
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <vfprintf+0x40e>
     ecc:	87 2d       	mov	r24, r7
     ece:	7a 94       	dec	r7
     ed0:	18 16       	cp	r1, r24
     ed2:	34 f4       	brge	.+12     	; 0xee0 <vfprintf+0x40e>
     ed4:	b1 01       	movw	r22, r2
     ed6:	80 e3       	ldi	r24, 0x30	; 48
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 fb 04 	call	0x9f6 <fputc>
     ede:	f6 cf       	rjmp	.-20     	; 0xecc <vfprintf+0x3fa>
     ee0:	c3 fe       	sbrs	r12, 3
     ee2:	0a c0       	rjmp	.+20     	; 0xef8 <vfprintf+0x426>
     ee4:	86 2d       	mov	r24, r6
     ee6:	6a 94       	dec	r6
     ee8:	18 16       	cp	r1, r24
     eea:	34 f4       	brge	.+12     	; 0xef8 <vfprintf+0x426>
     eec:	b1 01       	movw	r22, r2
     eee:	80 e3       	ldi	r24, 0x30	; 48
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 fb 04 	call	0x9f6 <fputc>
     ef6:	f6 cf       	rjmp	.-20     	; 0xee4 <vfprintf+0x412>
     ef8:	90 e8       	ldi	r25, 0x80	; 128
     efa:	b9 2e       	mov	r11, r25
     efc:	bc 20       	and	r11, r12
     efe:	51 f4       	brne	.+20     	; 0xf14 <vfprintf+0x442>
     f00:	87 2d       	mov	r24, r7
     f02:	7a 94       	dec	r7
     f04:	18 16       	cp	r1, r24
     f06:	34 f4       	brge	.+12     	; 0xf14 <vfprintf+0x442>
     f08:	b1 01       	movw	r22, r2
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 fb 04 	call	0x9f6 <fputc>
     f12:	f6 cf       	rjmp	.-20     	; 0xf00 <vfprintf+0x42e>
     f14:	ff 85       	ldd	r31, Y+15	; 0x0f
     f16:	f3 36       	cpi	r31, 0x63	; 99
     f18:	41 f4       	brne	.+16     	; 0xf2a <vfprintf+0x458>
     f1a:	8e 2d       	mov	r24, r14
     f1c:	b1 01       	movw	r22, r2
     f1e:	99 27       	eor	r25, r25
     f20:	87 fd       	sbrc	r24, 7
     f22:	90 95       	com	r25
     f24:	0e 94 fb 04 	call	0x9f6 <fputc>
     f28:	40 c0       	rjmp	.+128    	; 0xfaa <vfprintf+0x4d8>
     f2a:	2f 85       	ldd	r18, Y+15	; 0x0f
     f2c:	23 37       	cpi	r18, 0x73	; 115
     f2e:	b1 f4       	brne	.+44     	; 0xf5c <vfprintf+0x48a>
     f30:	88 89       	ldd	r24, Y+16	; 0x10
     f32:	81 50       	subi	r24, 0x01	; 1
     f34:	88 8b       	std	Y+16, r24	; 0x10
     f36:	8f 3f       	cpi	r24, 0xFF	; 255
     f38:	c1 f1       	breq	.+112    	; 0xfaa <vfprintf+0x4d8>
     f3a:	f7 01       	movw	r30, r14
     f3c:	80 81       	ld	r24, Z
     f3e:	08 94       	sec
     f40:	e1 1c       	adc	r14, r1
     f42:	f1 1c       	adc	r15, r1
     f44:	b1 01       	movw	r22, r2
     f46:	99 27       	eor	r25, r25
     f48:	87 fd       	sbrc	r24, 7
     f4a:	90 95       	com	r25
     f4c:	0e 94 fb 04 	call	0x9f6 <fputc>
     f50:	98 89       	ldd	r25, Y+16	; 0x10
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	98 8b       	std	Y+16, r25	; 0x10
     f56:	9f 3f       	cpi	r25, 0xFF	; 255
     f58:	81 f7       	brne	.-32     	; 0xf3a <vfprintf+0x468>
     f5a:	27 c0       	rjmp	.+78     	; 0xfaa <vfprintf+0x4d8>
     f5c:	ef 85       	ldd	r30, Y+15	; 0x0f
     f5e:	e3 35       	cpi	r30, 0x53	; 83
     f60:	79 f4       	brne	.+30     	; 0xf80 <vfprintf+0x4ae>
     f62:	f8 89       	ldd	r31, Y+16	; 0x10
     f64:	f1 50       	subi	r31, 0x01	; 1
     f66:	f8 8b       	std	Y+16, r31	; 0x10
     f68:	ff 3f       	cpi	r31, 0xFF	; 255
     f6a:	f9 f0       	breq	.+62     	; 0xfaa <vfprintf+0x4d8>
     f6c:	f7 01       	movw	r30, r14
     f6e:	84 91       	lpm	r24, Z
     f70:	b1 01       	movw	r22, r2
     f72:	99 27       	eor	r25, r25
     f74:	0e 94 fb 04 	call	0x9f6 <fputc>
     f78:	08 94       	sec
     f7a:	e1 1c       	adc	r14, r1
     f7c:	f1 1c       	adc	r15, r1
     f7e:	f1 cf       	rjmp	.-30     	; 0xf62 <vfprintf+0x490>
     f80:	6e 01       	movw	r12, r28
     f82:	08 94       	sec
     f84:	c1 1c       	adc	r12, r1
     f86:	d1 1c       	adc	r13, r1
     f88:	89 89       	ldd	r24, Y+17	; 0x11
     f8a:	9a 89       	ldd	r25, Y+18	; 0x12
     f8c:	8c 15       	cp	r24, r12
     f8e:	9d 05       	cpc	r25, r13
     f90:	61 f0       	breq	.+24     	; 0xfaa <vfprintf+0x4d8>
     f92:	e9 89       	ldd	r30, Y+17	; 0x11
     f94:	fa 89       	ldd	r31, Y+18	; 0x12
     f96:	82 91       	ld	r24, -Z
     f98:	fa 8b       	std	Y+18, r31	; 0x12
     f9a:	e9 8b       	std	Y+17, r30	; 0x11
     f9c:	b1 01       	movw	r22, r2
     f9e:	99 27       	eor	r25, r25
     fa0:	87 fd       	sbrc	r24, 7
     fa2:	90 95       	com	r25
     fa4:	0e 94 fb 04 	call	0x9f6 <fputc>
     fa8:	ef cf       	rjmp	.-34     	; 0xf88 <vfprintf+0x4b6>
     faa:	bb 20       	and	r11, r11
     fac:	69 f0       	breq	.+26     	; 0xfc8 <vfprintf+0x4f6>
     fae:	87 2d       	mov	r24, r7
     fb0:	7a 94       	dec	r7
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f4       	brge	.+18     	; 0xfc8 <vfprintf+0x4f6>
     fb6:	b1 01       	movw	r22, r2
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 fb 04 	call	0x9f6 <fputc>
     fc0:	f6 cf       	rjmp	.-20     	; 0xfae <vfprintf+0x4dc>
     fc2:	b1 01       	movw	r22, r2
     fc4:	0e 94 fb 04 	call	0x9f6 <fputc>
     fc8:	cc 24       	eor	r12, r12
     fca:	dd 24       	eor	r13, r13
     fcc:	13 c0       	rjmp	.+38     	; 0xff4 <vfprintf+0x522>
     fce:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd0:	95 32       	cpi	r25, 0x25	; 37
     fd2:	41 f4       	brne	.+16     	; 0xfe4 <vfprintf+0x512>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	c8 2e       	mov	r12, r24
     fd8:	d1 2c       	mov	r13, r1
     fda:	66 24       	eor	r6, r6
     fdc:	76 2c       	mov	r7, r6
     fde:	ea e0       	ldi	r30, 0x0A	; 10
     fe0:	e8 8b       	std	Y+16, r30	; 0x10
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <vfprintf+0x522>
     fe4:	b1 01       	movw	r22, r2
     fe6:	ff 85       	ldd	r31, Y+15	; 0x0f
     fe8:	8f 2f       	mov	r24, r31
     fea:	99 27       	eor	r25, r25
     fec:	87 fd       	sbrc	r24, 7
     fee:	90 95       	com	r25
     ff0:	0e 94 fb 04 	call	0x9f6 <fputc>
     ff4:	f1 01       	movw	r30, r2
     ff6:	83 81       	ldd	r24, Z+3	; 0x03
     ff8:	83 ff       	sbrs	r24, 3
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <vfprintf+0x532>
     ffc:	ed 85       	ldd	r30, Y+13	; 0x0d
     ffe:	fe 85       	ldd	r31, Y+14	; 0x0e
    1000:	f4 91       	lpm	r31, Z
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x538>
    1004:	ed 85       	ldd	r30, Y+13	; 0x0d
    1006:	fe 85       	ldd	r31, Y+14	; 0x0e
    1008:	f0 81       	ld	r31, Z
    100a:	ff 87       	std	Y+15, r31	; 0x0f
    100c:	2f 85       	ldd	r18, Y+15	; 0x0f
    100e:	22 23       	and	r18, r18
    1010:	09 f0       	breq	.+2      	; 0x1014 <vfprintf+0x542>
    1012:	8b cd       	rjmp	.-1258   	; 0xb2a <vfprintf+0x58>
    1014:	f1 01       	movw	r30, r2
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	97 81       	ldd	r25, Z+7	; 0x07
    101a:	62 96       	adiw	r28, 0x12	; 18
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	2f 90       	pop	r2
    104a:	08 95       	ret

0000104c <calloc>:
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	86 9f       	mul	r24, r22
    1056:	80 01       	movw	r16, r0
    1058:	87 9f       	mul	r24, r23
    105a:	10 0d       	add	r17, r0
    105c:	96 9f       	mul	r25, r22
    105e:	10 0d       	add	r17, r0
    1060:	11 24       	eor	r1, r1
    1062:	c8 01       	movw	r24, r16
    1064:	0e 94 42 08 	call	0x1084 <malloc>
    1068:	ec 01       	movw	r28, r24
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	29 f0       	breq	.+10     	; 0x1078 <calloc+0x2c>
    106e:	a8 01       	movw	r20, r16
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	0e 94 4c 09 	call	0x1298 <memset>
    1078:	ce 01       	movw	r24, r28
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <malloc>:
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	ac 01       	movw	r20, r24
    108a:	02 97       	sbiw	r24, 0x02	; 2
    108c:	10 f4       	brcc	.+4      	; 0x1092 <malloc+0xe>
    108e:	42 e0       	ldi	r20, 0x02	; 2
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a0 91 65 03 	lds	r26, 0x0365
    109a:	b0 91 66 03 	lds	r27, 0x0366
    109e:	bd 01       	movw	r22, r26
    10a0:	f9 01       	movw	r30, r18
    10a2:	10 97       	sbiw	r26, 0x00	; 0
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <malloc+0x24>
    10a6:	4c c0       	rjmp	.+152    	; 0x1140 <malloc+0xbc>
    10a8:	8d 91       	ld	r24, X+
    10aa:	9c 91       	ld	r25, X
    10ac:	11 97       	sbiw	r26, 0x01	; 1
    10ae:	84 17       	cp	r24, r20
    10b0:	95 07       	cpc	r25, r21
    10b2:	31 f1       	breq	.+76     	; 0x1100 <malloc+0x7c>
    10b4:	48 17       	cp	r20, r24
    10b6:	59 07       	cpc	r21, r25
    10b8:	38 f4       	brcc	.+14     	; 0x10c8 <malloc+0x44>
    10ba:	21 15       	cp	r18, r1
    10bc:	31 05       	cpc	r19, r1
    10be:	19 f0       	breq	.+6      	; 0x10c6 <malloc+0x42>
    10c0:	82 17       	cp	r24, r18
    10c2:	93 07       	cpc	r25, r19
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <malloc+0x44>
    10c6:	9c 01       	movw	r18, r24
    10c8:	fd 01       	movw	r30, r26
    10ca:	a2 81       	ldd	r26, Z+2	; 0x02
    10cc:	b3 81       	ldd	r27, Z+3	; 0x03
    10ce:	10 97       	sbiw	r26, 0x00	; 0
    10d0:	59 f7       	brne	.-42     	; 0x10a8 <malloc+0x24>
    10d2:	21 15       	cp	r18, r1
    10d4:	31 05       	cpc	r19, r1
    10d6:	a1 f1       	breq	.+104    	; 0x1140 <malloc+0xbc>
    10d8:	c9 01       	movw	r24, r18
    10da:	84 1b       	sub	r24, r20
    10dc:	95 0b       	sbc	r25, r21
    10de:	04 97       	sbiw	r24, 0x04	; 4
    10e0:	08 f4       	brcc	.+2      	; 0x10e4 <malloc+0x60>
    10e2:	a9 01       	movw	r20, r18
    10e4:	db 01       	movw	r26, r22
    10e6:	e0 e0       	ldi	r30, 0x00	; 0
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 97       	sbiw	r26, 0x00	; 0
    10ec:	49 f1       	breq	.+82     	; 0x1140 <malloc+0xbc>
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	11 97       	sbiw	r26, 0x01	; 1
    10f4:	82 17       	cp	r24, r18
    10f6:	93 07       	cpc	r25, r19
    10f8:	f9 f4       	brne	.+62     	; 0x1138 <malloc+0xb4>
    10fa:	42 17       	cp	r20, r18
    10fc:	53 07       	cpc	r21, r19
    10fe:	79 f4       	brne	.+30     	; 0x111e <malloc+0x9a>
    1100:	ed 01       	movw	r28, r26
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9b 81       	ldd	r25, Y+3	; 0x03
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	19 f0       	breq	.+6      	; 0x1110 <malloc+0x8c>
    110a:	93 83       	std	Z+3, r25	; 0x03
    110c:	82 83       	std	Z+2, r24	; 0x02
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <malloc+0x94>
    1110:	90 93 66 03 	sts	0x0366, r25
    1114:	80 93 65 03 	sts	0x0365, r24
    1118:	cd 01       	movw	r24, r26
    111a:	02 96       	adiw	r24, 0x02	; 2
    111c:	4a c0       	rjmp	.+148    	; 0x11b2 <malloc+0x12e>
    111e:	24 1b       	sub	r18, r20
    1120:	35 0b       	sbc	r19, r21
    1122:	fd 01       	movw	r30, r26
    1124:	e2 0f       	add	r30, r18
    1126:	f3 1f       	adc	r31, r19
    1128:	41 93       	st	Z+, r20
    112a:	51 93       	st	Z+, r21
    112c:	22 50       	subi	r18, 0x02	; 2
    112e:	30 40       	sbci	r19, 0x00	; 0
    1130:	2d 93       	st	X+, r18
    1132:	3c 93       	st	X, r19
    1134:	cf 01       	movw	r24, r30
    1136:	3d c0       	rjmp	.+122    	; 0x11b2 <malloc+0x12e>
    1138:	fd 01       	movw	r30, r26
    113a:	a2 81       	ldd	r26, Z+2	; 0x02
    113c:	b3 81       	ldd	r27, Z+3	; 0x03
    113e:	d5 cf       	rjmp	.-86     	; 0x10ea <malloc+0x66>
    1140:	80 91 63 03 	lds	r24, 0x0363
    1144:	90 91 64 03 	lds	r25, 0x0364
    1148:	89 2b       	or	r24, r25
    114a:	41 f4       	brne	.+16     	; 0x115c <malloc+0xd8>
    114c:	80 91 d6 00 	lds	r24, 0x00D6
    1150:	90 91 d7 00 	lds	r25, 0x00D7
    1154:	90 93 64 03 	sts	0x0364, r25
    1158:	80 93 63 03 	sts	0x0363, r24
    115c:	e0 91 d4 00 	lds	r30, 0x00D4
    1160:	f0 91 d5 00 	lds	r31, 0x00D5
    1164:	30 97       	sbiw	r30, 0x00	; 0
    1166:	41 f4       	brne	.+16     	; 0x1178 <malloc+0xf4>
    1168:	ed b7       	in	r30, 0x3d	; 61
    116a:	fe b7       	in	r31, 0x3e	; 62
    116c:	80 91 d8 00 	lds	r24, 0x00D8
    1170:	90 91 d9 00 	lds	r25, 0x00D9
    1174:	e8 1b       	sub	r30, r24
    1176:	f9 0b       	sbc	r31, r25
    1178:	a0 91 63 03 	lds	r26, 0x0363
    117c:	b0 91 64 03 	lds	r27, 0x0364
    1180:	9f 01       	movw	r18, r30
    1182:	2a 1b       	sub	r18, r26
    1184:	3b 0b       	sbc	r19, r27
    1186:	24 17       	cp	r18, r20
    1188:	35 07       	cpc	r19, r21
    118a:	88 f0       	brcs	.+34     	; 0x11ae <malloc+0x12a>
    118c:	ca 01       	movw	r24, r20
    118e:	02 96       	adiw	r24, 0x02	; 2
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	60 f0       	brcs	.+24     	; 0x11ae <malloc+0x12a>
    1196:	cd 01       	movw	r24, r26
    1198:	84 0f       	add	r24, r20
    119a:	95 1f       	adc	r25, r21
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	90 93 64 03 	sts	0x0364, r25
    11a2:	80 93 63 03 	sts	0x0363, r24
    11a6:	4d 93       	st	X+, r20
    11a8:	5d 93       	st	X+, r21
    11aa:	cd 01       	movw	r24, r26
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <malloc+0x12e>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <free>:
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	09 f4       	brne	.+2      	; 0x11c2 <free+0xa>
    11c0:	54 c0       	rjmp	.+168    	; 0x126a <free+0xb2>
    11c2:	dc 01       	movw	r26, r24
    11c4:	12 97       	sbiw	r26, 0x02	; 2
    11c6:	ed 01       	movw	r28, r26
    11c8:	1b 82       	std	Y+3, r1	; 0x03
    11ca:	1a 82       	std	Y+2, r1	; 0x02
    11cc:	80 91 65 03 	lds	r24, 0x0365
    11d0:	90 91 66 03 	lds	r25, 0x0366
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	21 f1       	breq	.+72     	; 0x1220 <free+0x68>
    11d8:	fc 01       	movw	r30, r24
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	ea 17       	cp	r30, r26
    11e0:	fb 07       	cpc	r31, r27
    11e2:	18 f1       	brcs	.+70     	; 0x122a <free+0x72>
    11e4:	ed 01       	movw	r28, r26
    11e6:	fb 83       	std	Y+3, r31	; 0x03
    11e8:	ea 83       	std	Y+2, r30	; 0x02
    11ea:	2d 91       	ld	r18, X+
    11ec:	3c 91       	ld	r19, X
    11ee:	11 97       	sbiw	r26, 0x01	; 1
    11f0:	c2 0f       	add	r28, r18
    11f2:	d3 1f       	adc	r29, r19
    11f4:	ce 01       	movw	r24, r28
    11f6:	02 96       	adiw	r24, 0x02	; 2
    11f8:	8e 17       	cp	r24, r30
    11fa:	9f 07       	cpc	r25, r31
    11fc:	71 f4       	brne	.+28     	; 0x121a <free+0x62>
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	9b 81       	ldd	r25, Y+3	; 0x03
    1202:	28 0f       	add	r18, r24
    1204:	39 1f       	adc	r19, r25
    1206:	2e 5f       	subi	r18, 0xFE	; 254
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	3c 93       	st	X, r19
    120e:	2e 93       	st	-X, r18
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	fd 01       	movw	r30, r26
    1216:	93 83       	std	Z+3, r25	; 0x03
    1218:	82 83       	std	Z+2, r24	; 0x02
    121a:	41 15       	cp	r20, r1
    121c:	51 05       	cpc	r21, r1
    121e:	59 f4       	brne	.+22     	; 0x1236 <free+0x7e>
    1220:	b0 93 66 03 	sts	0x0366, r27
    1224:	a0 93 65 03 	sts	0x0365, r26
    1228:	20 c0       	rjmp	.+64     	; 0x126a <free+0xb2>
    122a:	af 01       	movw	r20, r30
    122c:	02 80       	ldd	r0, Z+2	; 0x02
    122e:	f3 81       	ldd	r31, Z+3	; 0x03
    1230:	e0 2d       	mov	r30, r0
    1232:	30 97       	sbiw	r30, 0x00	; 0
    1234:	a1 f6       	brne	.-88     	; 0x11de <free+0x26>
    1236:	ea 01       	movw	r28, r20
    1238:	bb 83       	std	Y+3, r27	; 0x03
    123a:	aa 83       	std	Y+2, r26	; 0x02
    123c:	ca 01       	movw	r24, r20
    123e:	02 96       	adiw	r24, 0x02	; 2
    1240:	28 81       	ld	r18, Y
    1242:	39 81       	ldd	r19, Y+1	; 0x01
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	8a 17       	cp	r24, r26
    124a:	9b 07       	cpc	r25, r27
    124c:	71 f4       	brne	.+28     	; 0x126a <free+0xb2>
    124e:	8d 91       	ld	r24, X+
    1250:	9c 91       	ld	r25, X
    1252:	11 97       	sbiw	r26, 0x01	; 1
    1254:	28 0f       	add	r18, r24
    1256:	39 1f       	adc	r19, r25
    1258:	2e 5f       	subi	r18, 0xFE	; 254
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	39 83       	std	Y+1, r19	; 0x01
    125e:	28 83       	st	Y, r18
    1260:	fd 01       	movw	r30, r26
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	9b 83       	std	Y+3, r25	; 0x03
    1268:	8a 83       	std	Y+2, r24	; 0x02
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <strlen_P>:
    1270:	fc 01       	movw	r30, r24
    1272:	05 90       	lpm	r0, Z+
    1274:	00 20       	and	r0, r0
    1276:	e9 f7       	brne	.-6      	; 0x1272 <strlen_P+0x2>
    1278:	80 95       	com	r24
    127a:	90 95       	com	r25
    127c:	8e 0f       	add	r24, r30
    127e:	9f 1f       	adc	r25, r31
    1280:	08 95       	ret

00001282 <strnlen_P>:
    1282:	fc 01       	movw	r30, r24
    1284:	05 90       	lpm	r0, Z+
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	70 40       	sbci	r23, 0x00	; 0
    128a:	01 10       	cpse	r0, r1
    128c:	d8 f7       	brcc	.-10     	; 0x1284 <strnlen_P+0x2>
    128e:	80 95       	com	r24
    1290:	90 95       	com	r25
    1292:	8e 0f       	add	r24, r30
    1294:	9f 1f       	adc	r25, r31
    1296:	08 95       	ret

00001298 <memset>:
    1298:	dc 01       	movw	r26, r24
    129a:	40 ff       	sbrs	r20, 0
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <memset+0xc>
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <memset+0xa>
    12a0:	6d 93       	st	X+, r22
    12a2:	6d 93       	st	X+, r22
    12a4:	42 50       	subi	r20, 0x02	; 2
    12a6:	50 40       	sbci	r21, 0x00	; 0
    12a8:	d8 f7       	brcc	.-10     	; 0x12a0 <memset+0x8>
    12aa:	08 95       	ret

000012ac <strnlen>:
    12ac:	fc 01       	movw	r30, r24
    12ae:	61 50       	subi	r22, 0x01	; 1
    12b0:	70 40       	sbci	r23, 0x00	; 0
    12b2:	01 90       	ld	r0, Z+
    12b4:	01 10       	cpse	r0, r1
    12b6:	d8 f7       	brcc	.-10     	; 0x12ae <strnlen+0x2>
    12b8:	80 95       	com	r24
    12ba:	90 95       	com	r25
    12bc:	8e 0f       	add	r24, r30
    12be:	9f 1f       	adc	r25, r31
    12c0:	08 95       	ret

000012c2 <IntProlog>:
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	bf 93       	push	r27
    12c8:	af 93       	push	r26
    12ca:	9f 93       	push	r25
    12cc:	d3 e0       	ldi	r29, 0x03	; 3
    12ce:	c0 e5       	ldi	r28, 0x50	; 80
    12d0:	9f b7       	in	r25, 0x3f	; 63
    12d2:	ae 81       	ldd	r26, Y+6	; 0x06
    12d4:	af 5f       	subi	r26, 0xFF	; 255
    12d6:	ae 83       	std	Y+6, r26	; 0x06
    12d8:	60 f0       	brcs	.+24     	; 0x12f2 <SaveContext>
    12da:	aa 81       	ldd	r26, Y+2	; 0x02
    12dc:	bb 81       	ldd	r27, Y+3	; 0x03
    12de:	ba 2b       	or	r27, r26
    12e0:	41 f4       	brne	.+16     	; 0x12f2 <SaveContext>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	fe 81       	ldd	r31, Y+6	; 0x06
    12e8:	ef 81       	ldd	r30, Y+7	; 0x07
    12ea:	29 96       	adiw	r28, 0x09	; 9
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	09 94       	ijmp

000012f2 <SaveContext>:
    12f2:	8f 93       	push	r24
    12f4:	7f 93       	push	r23
    12f6:	6f 93       	push	r22
    12f8:	5f 93       	push	r21
    12fa:	4f 93       	push	r20
    12fc:	3f 93       	push	r19
    12fe:	2f 93       	push	r18
    1300:	1f 93       	push	r17
    1302:	0f 93       	push	r16
    1304:	ff 92       	push	r15
    1306:	ef 92       	push	r14
    1308:	df 92       	push	r13
    130a:	cf 92       	push	r12
    130c:	bf 92       	push	r11
    130e:	af 92       	push	r10
    1310:	9f 92       	push	r9
    1312:	8f 92       	push	r8
    1314:	7f 92       	push	r7
    1316:	6f 92       	push	r6
    1318:	5f 92       	push	r5
    131a:	4f 92       	push	r4
    131c:	3f 92       	push	r3
    131e:	2f 92       	push	r2
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	9f 93       	push	r25
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    132c:	39 a1       	ldd	r19, Y+33	; 0x21
    132e:	48 a1       	ldd	r20, Y+32	; 0x20
    1330:	e8 a3       	std	Y+32, r30	; 0x20
    1332:	f9 a3       	std	Y+33, r31	; 0x21
    1334:	70 f0       	brcs	.+28     	; 0x1352 <AlreadyInKernel>
    1336:	f3 e0       	ldi	r31, 0x03	; 3
    1338:	e0 e5       	ldi	r30, 0x50	; 80
    133a:	d3 81       	ldd	r29, Z+3	; 0x03
    133c:	c2 81       	ldd	r28, Z+2	; 0x02
    133e:	be b7       	in	r27, 0x3e	; 62
    1340:	ad b7       	in	r26, 0x3d	; 61
    1342:	bd 83       	std	Y+5, r27	; 0x05
    1344:	ac 83       	std	Y+4, r26	; 0x04
    1346:	24 81       	ldd	r18, Z+4	; 0x04
    1348:	2d bf       	out	0x3d, r18	; 61
    134a:	25 81       	ldd	r18, Z+5	; 0x05
    134c:	2e bf       	out	0x3e, r18	; 62
    134e:	ca 2f       	mov	r28, r26
    1350:	db 2f       	mov	r29, r27

00001352 <AlreadyInKernel>:
    1352:	11 24       	eor	r1, r1
    1354:	e3 2f       	mov	r30, r19
    1356:	f4 2f       	mov	r31, r20
    1358:	09 94       	ijmp

0000135a <Epilog>:
    135a:	ef 91       	pop	r30
    135c:	ef 91       	pop	r30

0000135e <_Epilog>:
    135e:	e0 e5       	ldi	r30, 0x50	; 80
    1360:	f3 e0       	ldi	r31, 0x03	; 3
    1362:	f8 94       	cli
    1364:	06 81       	ldd	r16, Z+6	; 0x06
    1366:	0a 95       	dec	r16
    1368:	06 83       	std	Z+6, r16	; 0x06
    136a:	54 f4       	brge	.+20     	; 0x1380 <SkipTaskSwap>
    136c:	d1 81       	ldd	r29, Z+1	; 0x01
    136e:	c0 81       	ld	r28, Z
    1370:	d3 83       	std	Z+3, r29	; 0x03
    1372:	c2 83       	std	Z+2, r28	; 0x02
    1374:	20 96       	adiw	r28, 0x00	; 0
    1376:	39 f1       	breq	.+78     	; 0x13c6 <_IdleTask>
    1378:	bd 81       	ldd	r27, Y+5	; 0x05
    137a:	ac 81       	ldd	r26, Y+4	; 0x04
    137c:	ad bf       	out	0x3d, r26	; 61
    137e:	be bf       	out	0x3e, r27	; 62

00001380 <SkipTaskSwap>:
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	2f 90       	pop	r2
    138a:	3f 90       	pop	r3
    138c:	4f 90       	pop	r4
    138e:	5f 90       	pop	r5
    1390:	6f 90       	pop	r6
    1392:	7f 90       	pop	r7
    1394:	8f 90       	pop	r8
    1396:	9f 90       	pop	r9
    1398:	af 90       	pop	r10
    139a:	bf 90       	pop	r11
    139c:	cf 90       	pop	r12
    139e:	df 90       	pop	r13
    13a0:	ef 90       	pop	r14
    13a2:	ff 90       	pop	r15
    13a4:	0f 91       	pop	r16
    13a6:	1f 91       	pop	r17
    13a8:	2f 91       	pop	r18
    13aa:	3f 91       	pop	r19
    13ac:	4f 91       	pop	r20
    13ae:	5f 91       	pop	r21
    13b0:	6f 91       	pop	r22
    13b2:	7f 91       	pop	r23
    13b4:	8f 91       	pop	r24
    13b6:	9f 91       	pop	r25
    13b8:	af 91       	pop	r26
    13ba:	bf 91       	pop	r27
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	ef 91       	pop	r30
    13c2:	ff 91       	pop	r31
    13c4:	18 95       	reti

000013c6 <_IdleTask>:
    13c6:	78 94       	sei
    13c8:	88 95       	sleep

000013ca <snooze>:
    13ca:	fd cf       	rjmp	.-6      	; 0x13c6 <_IdleTask>

000013cc <AvrXSetKernelStack>:
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	80 50       	subi	r24, 0x00	; 0
    13d2:	90 40       	sbci	r25, 0x00	; 0
    13d4:	11 f4       	brne	.+4      	; 0x13da <sks1>
    13d6:	8d b7       	in	r24, 0x3d	; 61
    13d8:	9e b7       	in	r25, 0x3e	; 62

000013da <sks1>:
    13da:	80 93 54 03 	sts	0x0354, r24
    13de:	90 93 55 03 	sts	0x0355, r25
    13e2:	09 94       	ijmp

000013e4 <AvrXRunTask>:
    13e4:	01 d0       	rcall	.+2      	; 0x13e8 <AvrXInitTask>
    13e6:	23 c0       	rjmp	.+70     	; 0x142e <AvrXResume>

000013e8 <AvrXInitTask>:
    13e8:	e8 2f       	mov	r30, r24
    13ea:	f9 2f       	mov	r31, r25
    13ec:	1d d0       	rcall	.+58     	; 0x1428 <lpm_inc>
    13ee:	a0 2d       	mov	r26, r0
    13f0:	1b d0       	rcall	.+54     	; 0x1428 <lpm_inc>
    13f2:	b0 2d       	mov	r27, r0
    13f4:	19 d0       	rcall	.+50     	; 0x1428 <lpm_inc>
    13f6:	0c 92       	st	X, r0
    13f8:	17 d0       	rcall	.+46     	; 0x1428 <lpm_inc>
    13fa:	0e 92       	st	-X, r0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	51 e2       	ldi	r21, 0x21	; 33

00001402 <PushRegisters>:
    1402:	4e 93       	st	-X, r20
    1404:	5a 95       	dec	r21
    1406:	e9 f7       	brne	.-6      	; 0x1402 <PushRegisters>
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	0e d0       	rcall	.+28     	; 0x1428 <lpm_inc>
    140c:	80 2d       	mov	r24, r0
    140e:	0c d0       	rcall	.+24     	; 0x1428 <lpm_inc>
    1410:	90 2d       	mov	r25, r0
    1412:	0a d0       	rcall	.+20     	; 0x1428 <lpm_inc>
    1414:	e8 2f       	mov	r30, r24
    1416:	f9 2f       	mov	r31, r25
    1418:	a4 83       	std	Z+4, r26	; 0x04
    141a:	b5 83       	std	Z+5, r27	; 0x05
    141c:	03 82       	std	Z+3, r0	; 0x03
    141e:	a0 e6       	ldi	r26, 0x60	; 96
    1420:	a2 83       	std	Z+2, r26	; 0x02
    1422:	41 83       	std	Z+1, r20	; 0x01
    1424:	40 83       	st	Z, r20
    1426:	08 95       	ret

00001428 <lpm_inc>:
    1428:	c8 95       	lpm
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	08 95       	ret

0000142e <AvrXResume>:
    142e:	f8 94       	cli
    1430:	48 df       	rcall	.-368    	; 0x12c2 <IntProlog>
    1432:	78 94       	sei
    1434:	e8 2f       	mov	r30, r24
    1436:	f9 2f       	mov	r31, r25
    1438:	22 81       	ldd	r18, Z+2	; 0x02
    143a:	2f 7d       	andi	r18, 0xDF	; 223
    143c:	22 83       	std	Z+2, r18	; 0x02
    143e:	26 ff       	sbrs	r18, 6
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <ar00>
    1442:	2f 7b       	andi	r18, 0xBF	; 191
    1444:	22 83       	std	Z+2, r18	; 0x02
    1446:	01 d0       	rcall	.+2      	; 0x144a <_QueuePid>

00001448 <ar00>:
    1448:	8a cf       	rjmp	.-236    	; 0x135e <_Epilog>

0000144a <_QueuePid>:
    144a:	e8 2f       	mov	r30, r24
    144c:	f9 2f       	mov	r31, r25
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	22 81       	ldd	r18, Z+2	; 0x02
    1452:	20 73       	andi	r18, 0x30	; 48
    1454:	e1 f4       	brne	.+56     	; 0x148e <_qpSUSPEND>
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	43 81       	ldd	r20, Z+3	; 0x03
    145c:	c0 e5       	ldi	r28, 0x50	; 80
    145e:	d3 e0       	ldi	r29, 0x03	; 3
    1460:	2f b7       	in	r18, 0x3f	; 63
    1462:	f8 94       	cli

00001464 <_qp00>:
    1464:	33 95       	inc	r19
    1466:	ec 2f       	mov	r30, r28
    1468:	fd 2f       	mov	r31, r29
    146a:	c0 81       	ld	r28, Z
    146c:	d1 81       	ldd	r29, Z+1	; 0x01
    146e:	20 96       	adiw	r28, 0x00	; 0
    1470:	19 f0       	breq	.+6      	; 0x1478 <_qp01>
    1472:	5b 81       	ldd	r21, Y+3	; 0x03
    1474:	45 17       	cp	r20, r21
    1476:	b0 f7       	brcc	.-20     	; 0x1464 <_qp00>

00001478 <_qp01>:
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	f9 2f       	mov	r31, r25
    147e:	e8 2f       	mov	r30, r24
    1480:	d1 83       	std	Z+1, r29	; 0x01
    1482:	c0 83       	st	Z, r28
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	83 2f       	mov	r24, r19
    148a:	2f bf       	out	0x3f, r18	; 63
    148c:	08 95       	ret

0000148e <_qpSUSPEND>:
    148e:	83 2f       	mov	r24, r19
    1490:	20 64       	ori	r18, 0x40	; 64
    1492:	22 83       	std	Z+2, r18	; 0x02
    1494:	08 95       	ret

00001496 <AvrXWaitMessageAck>:
    1496:	8e 5f       	subi	r24, 0xFE	; 254
    1498:	9f 4f       	sbci	r25, 0xFF	; 255

0000149a <AvrXWaitSemaphore>:
    149a:	e8 2f       	mov	r30, r24
    149c:	f9 2f       	mov	r31, r25
    149e:	f8 94       	cli
    14a0:	20 81       	ld	r18, Z
    14a2:	31 81       	ldd	r19, Z+1	; 0x01
    14a4:	21 50       	subi	r18, 0x01	; 1
    14a6:	30 40       	sbci	r19, 0x00	; 0
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <aws01>
    14aa:	20 83       	st	Z, r18
    14ac:	31 83       	std	Z+1, r19	; 0x01
    14ae:	18 95       	reti

000014b0 <aws01>:
    14b0:	08 df       	rcall	.-496    	; 0x12c2 <IntProlog>
    14b2:	e0 e5       	ldi	r30, 0x50	; 80
    14b4:	f3 e0       	ldi	r31, 0x03	; 3
    14b6:	73 81       	ldd	r23, Z+3	; 0x03
    14b8:	62 81       	ldd	r22, Z+2	; 0x02
    14ba:	3c d0       	rcall	.+120    	; 0x1534 <_RemoveObject>
    14bc:	e8 2f       	mov	r30, r24
    14be:	f9 2f       	mov	r31, r25
    14c0:	2b d0       	rcall	.+86     	; 0x1518 <_AppendObject>
    14c2:	4d cf       	rjmp	.-358    	; 0x135e <_Epilog>

000014c4 <AvrXAckMessage>:
    14c4:	8e 5f       	subi	r24, 0xFE	; 254
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255

000014c8 <AvrXSetSemaphore>:
    14c8:	0c d0       	rcall	.+24     	; 0x14e2 <AvrXIntSetSemaphore>
    14ca:	90 91 56 03 	lds	r25, 0x0356
    14ce:	93 95       	inc	r25
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <axss0>
    14d4:	08 95       	ret

000014d6 <axss0>:
    14d6:	f8 94       	cli
    14d8:	f4 de       	rcall	.-536    	; 0x12c2 <IntProlog>
    14da:	78 94       	sei
    14dc:	40 cf       	rjmp	.-384    	; 0x135e <_Epilog>

000014de <AvrXIntSetObjectSemaphore>:
    14de:	8e 5f       	subi	r24, 0xFE	; 254
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255

000014e2 <AvrXIntSetSemaphore>:
    14e2:	e8 2f       	mov	r30, r24
    14e4:	f9 2f       	mov	r31, r25
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	2f b7       	in	r18, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	60 81       	ld	r22, Z
    14f2:	86 17       	cp	r24, r22
    14f4:	97 07       	cpc	r25, r23
    14f6:	28 f0       	brcs	.+10     	; 0x1502 <aiss00>
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01

000014fc <BogusSemaphore>:
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
    14fe:	2f bf       	out	0x3f, r18	; 63
    1500:	08 95       	ret

00001502 <aiss00>:
    1502:	8f e5       	ldi	r24, 0x5F	; 95
    1504:	86 17       	cp	r24, r22
    1506:	97 07       	cpc	r25, r23
    1508:	c8 f7       	brcc	.-14     	; 0x14fc <BogusSemaphore>
    150a:	23 d0       	rcall	.+70     	; 0x1552 <_RemoveObjectAt>
    150c:	2f bf       	out	0x3f, r18	; 63
    150e:	86 2f       	mov	r24, r22
    1510:	97 2f       	mov	r25, r23
    1512:	9b cf       	rjmp	.-202    	; 0x144a <_QueuePid>

00001514 <_ao00>:
    1514:	e2 2f       	mov	r30, r18
    1516:	f3 2f       	mov	r31, r19

00001518 <_AppendObject>:
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	20 50       	subi	r18, 0x00	; 0
    151e:	30 40       	sbci	r19, 0x00	; 0
    1520:	c9 f7       	brne	.-14     	; 0x1514 <_ao00>
    1522:	71 83       	std	Z+1, r23	; 0x01
    1524:	60 83       	st	Z, r22
    1526:	f7 2f       	mov	r31, r23
    1528:	e6 2f       	mov	r30, r22
    152a:	31 83       	std	Z+1, r19	; 0x01
    152c:	20 83       	st	Z, r18
    152e:	08 95       	ret

00001530 <_ro00>:
    1530:	f3 2f       	mov	r31, r19
    1532:	e2 2f       	mov	r30, r18

00001534 <_RemoveObject>:
    1534:	20 81       	ld	r18, Z
    1536:	31 81       	ldd	r19, Z+1	; 0x01
    1538:	62 17       	cp	r22, r18
    153a:	73 07       	cpc	r23, r19
    153c:	51 f0       	breq	.+20     	; 0x1552 <_RemoveObjectAt>
    153e:	20 50       	subi	r18, 0x00	; 0
    1540:	30 40       	sbci	r19, 0x00	; 0
    1542:	b1 f7       	brne	.-20     	; 0x1530 <_ro00>
    1544:	08 95       	ret

00001546 <_RemoveFirstObject>:
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	60 50       	subi	r22, 0x00	; 0
    154c:	70 40       	sbci	r23, 0x00	; 0
    154e:	09 f4       	brne	.+2      	; 0x1552 <_RemoveObjectAt>
    1550:	08 95       	ret

00001552 <_RemoveObjectAt>:
    1552:	4c 2f       	mov	r20, r28
    1554:	5d 2f       	mov	r21, r29
    1556:	c6 2f       	mov	r28, r22
    1558:	d7 2f       	mov	r29, r23
    155a:	79 81       	ldd	r23, Y+1	; 0x01
    155c:	68 81       	ld	r22, Y
    155e:	71 83       	std	Z+1, r23	; 0x01
    1560:	60 83       	st	Z, r22
    1562:	e6 2f       	mov	r30, r22
    1564:	f7 2f       	mov	r31, r23
    1566:	66 27       	eor	r22, r22
    1568:	68 83       	st	Y, r22
    156a:	69 83       	std	Y+1, r22	; 0x01
    156c:	7d 2f       	mov	r23, r29
    156e:	6c 2f       	mov	r22, r28
    1570:	c4 2f       	mov	r28, r20
    1572:	d5 2f       	mov	r29, r21
    1574:	98 94       	clz
    1576:	08 95       	ret

00001578 <AvrXIntResetObjectSemaphore>:
    1578:	e8 2f       	mov	r30, r24
    157a:	f9 2f       	mov	r31, r25
    157c:	32 96       	adiw	r30, 0x02	; 2
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <ars00>

00001580 <AvrXIntResetSemaphore>:
    1580:	f9 2f       	mov	r31, r25
    1582:	e8 2f       	mov	r30, r24

00001584 <ars00>:
    1584:	f8 94       	cli
    1586:	40 81       	ld	r20, Z
    1588:	51 81       	ldd	r21, Z+1	; 0x01
    158a:	41 50       	subi	r20, 0x01	; 1
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	11 f0       	breq	.+4      	; 0x1594 <ars01>
    1590:	4f 5f       	subi	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255

00001594 <ars01>:
    1594:	51 83       	std	Z+1, r21	; 0x01
    1596:	40 83       	st	Z, r20
    1598:	18 95       	reti

0000159a <AvrXDelay>:
    159a:	01 d0       	rcall	.+2      	; 0x159e <AvrXStartTimer>
    159c:	7c cf       	rjmp	.-264    	; 0x1496 <AvrXWaitMessageAck>

0000159e <AvrXStartTimer>:
    159e:	60 50       	subi	r22, 0x00	; 0
    15a0:	70 40       	sbci	r23, 0x00	; 0
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <CountNotZero>
    15a4:	8f cf       	rjmp	.-226    	; 0x14c4 <AvrXAckMessage>

000015a6 <CountNotZero>:
    15a6:	f8 94       	cli
    15a8:	8c de       	rcall	.-744    	; 0x12c2 <IntProlog>
    15aa:	78 94       	sei
    15ac:	e5 df       	rcall	.-54     	; 0x1578 <AvrXIntResetObjectSemaphore>
    15ae:	e8 e5       	ldi	r30, 0x58	; 88
    15b0:	f3 e0       	ldi	r31, 0x03	; 3
    15b2:	f8 94       	cli
    15b4:	20 91 5a 03 	lds	r18, 0x035A
    15b8:	2a 95       	dec	r18
    15ba:	20 93 5a 03 	sts	0x035A, r18
    15be:	78 94       	sei

000015c0 <ast00>:
    15c0:	ce 2f       	mov	r28, r30
    15c2:	df 2f       	mov	r29, r31
    15c4:	e8 81       	ld	r30, Y
    15c6:	f9 81       	ldd	r31, Y+1	; 0x01
    15c8:	30 96       	adiw	r30, 0x00	; 0
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <ast01>
    15cc:	24 81       	ldd	r18, Z+4	; 0x04
    15ce:	35 81       	ldd	r19, Z+5	; 0x05
    15d0:	62 1b       	sub	r22, r18
    15d2:	73 0b       	sbc	r23, r19
    15d4:	a8 f7       	brcc	.-22     	; 0x15c0 <ast00>
    15d6:	62 0f       	add	r22, r18
    15d8:	73 1f       	adc	r23, r19
    15da:	26 1b       	sub	r18, r22
    15dc:	37 0b       	sbc	r19, r23
    15de:	24 83       	std	Z+4, r18	; 0x04
    15e0:	35 83       	std	Z+5, r19	; 0x05

000015e2 <ast01>:
    15e2:	99 83       	std	Y+1, r25	; 0x01
    15e4:	88 83       	st	Y, r24
    15e6:	d9 2f       	mov	r29, r25
    15e8:	c8 2f       	mov	r28, r24
    15ea:	f9 83       	std	Y+1, r31	; 0x01
    15ec:	e8 83       	st	Y, r30
    15ee:	6c 83       	std	Y+4, r22	; 0x04
    15f0:	7d 83       	std	Y+5, r23	; 0x05
    15f2:	3c d0       	rcall	.+120    	; 0x166c <TimerHandler>
    15f4:	b4 ce       	rjmp	.-664    	; 0x135e <_Epilog>

000015f6 <AvrXTimerHandler>:
    15f6:	f8 94       	cli
    15f8:	20 91 5a 03 	lds	r18, 0x035A
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	20 93 5a 03 	sts	0x035A, r18
    1602:	78 94       	sei
    1604:	08 f0       	brcs	.+2      	; 0x1608 <ati00>
    1606:	08 95       	ret

00001608 <ati00>:
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	d0 91 59 03 	lds	r29, 0x0359
    1614:	c0 91 58 03 	lds	r28, 0x0358
    1618:	20 96       	adiw	r28, 0x00	; 0
    161a:	21 f1       	breq	.+72     	; 0x1664 <ati02>
    161c:	fd 81       	ldd	r31, Y+5	; 0x05
    161e:	ec 81       	ldd	r30, Y+4	; 0x04
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	fd 83       	std	Y+5, r31	; 0x05
    1624:	ec 83       	std	Y+4, r30	; 0x04

00001626 <ati01>:
    1626:	ef 2b       	or	r30, r31
    1628:	e9 f4       	brne	.+58     	; 0x1664 <ati02>
    162a:	a8 81       	ld	r26, Y
    162c:	b9 81       	ldd	r27, Y+1	; 0x01
    162e:	b0 93 59 03 	sts	0x0359, r27
    1632:	a0 93 58 03 	sts	0x0358, r26
    1636:	f9 83       	std	Y+1, r31	; 0x01
    1638:	e8 83       	st	Y, r30
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	82 50       	subi	r24, 0x02	; 2
    1640:	90 40       	sbci	r25, 0x00	; 0
    1642:	31 f4       	brne	.+12     	; 0x1650 <ati04>
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	7d 2f       	mov	r23, r29
    164a:	6c 2f       	mov	r22, r28
    164c:	1d d0       	rcall	.+58     	; 0x1688 <AvrXIntSendMessage>
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <ati03>

00001650 <ati04>:
    1650:	8c 2f       	mov	r24, r28
    1652:	9d 2f       	mov	r25, r29
    1654:	44 df       	rcall	.-376    	; 0x14de <AvrXIntSetObjectSemaphore>

00001656 <ati03>:
    1656:	10 96       	adiw	r26, 0x00	; 0
    1658:	29 f0       	breq	.+10     	; 0x1664 <ati02>
    165a:	ca 2f       	mov	r28, r26
    165c:	db 2f       	mov	r29, r27
    165e:	fd 81       	ldd	r31, Y+5	; 0x05
    1660:	ec 81       	ldd	r30, Y+4	; 0x04
    1662:	e1 cf       	rjmp	.-62     	; 0x1626 <ati01>

00001664 <ati02>:
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28

0000166c <TimerHandler>:
    166c:	f8 94       	cli
    166e:	20 91 5a 03 	lds	r18, 0x035A
    1672:	23 95       	inc	r18
    1674:	20 93 5a 03 	sts	0x035A, r18
    1678:	78 94       	sei
    167a:	31 f6       	brne	.-116    	; 0x1608 <ati00>
    167c:	08 95       	ret

0000167e <AvrXSendMessage>:
    167e:	f8 94       	cli
    1680:	20 de       	rcall	.-960    	; 0x12c2 <IntProlog>
    1682:	78 94       	sei
    1684:	01 d0       	rcall	.+2      	; 0x1688 <AvrXIntSendMessage>
    1686:	6b ce       	rjmp	.-810    	; 0x135e <_Epilog>

00001688 <AvrXIntSendMessage>:
    1688:	f9 2f       	mov	r31, r25
    168a:	e8 2f       	mov	r30, r24
    168c:	45 df       	rcall	.-374    	; 0x1518 <_AppendObject>
    168e:	27 cf       	rjmp	.-434    	; 0x14de <AvrXIntSetObjectSemaphore>

00001690 <AvrXWaitMessage>:
    1690:	e8 2f       	mov	r30, r24
    1692:	f9 2f       	mov	r31, r25
    1694:	f8 94       	cli
    1696:	57 df       	rcall	.-338    	; 0x1546 <_RemoveFirstObject>
    1698:	78 94       	sei
    169a:	21 f4       	brne	.+8      	; 0x16a4 <_rm01>
    169c:	fc de       	rcall	.-520    	; 0x1496 <AvrXWaitMessageAck>
    169e:	82 50       	subi	r24, 0x02	; 2
    16a0:	90 40       	sbci	r25, 0x00	; 0
    16a2:	f6 cf       	rjmp	.-20     	; 0x1690 <AvrXWaitMessage>

000016a4 <_rm01>:
    16a4:	69 df       	rcall	.-302    	; 0x1578 <AvrXIntResetObjectSemaphore>
    16a6:	86 2f       	mov	r24, r22
    16a8:	97 2f       	mov	r25, r23
    16aa:	08 95       	ret

000016ac <isspace>:
    16ac:	91 11       	cpse	r25, r1
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <__ctype_isfalse>
    16b0:	80 32       	cpi	r24, 0x20	; 32
    16b2:	51 f0       	breq	.+20     	; 0x16c8 <isspace+0x1c>
    16b4:	8a 30       	cpi	r24, 0x0A	; 10
    16b6:	41 f0       	breq	.+16     	; 0x16c8 <isspace+0x1c>
    16b8:	8c 30       	cpi	r24, 0x0C	; 12
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <isspace+0x1c>
    16bc:	8d 30       	cpi	r24, 0x0D	; 13
    16be:	21 f0       	breq	.+8      	; 0x16c8 <isspace+0x1c>
    16c0:	89 30       	cpi	r24, 0x09	; 9
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <isspace+0x1c>
    16c4:	8b 30       	cpi	r24, 0x0B	; 11
    16c6:	99 f7       	brne	.-26     	; 0x16ae <isspace+0x2>
    16c8:	08 95       	ret

000016ca <__ctype_isfalse>:
    16ca:	99 27       	eor	r25, r25
    16cc:	88 27       	eor	r24, r24

000016ce <__ctype_istrue>:
    16ce:	08 95       	ret

000016d0 <__mulsi3>:
    16d0:	62 9f       	mul	r22, r18
    16d2:	d0 01       	movw	r26, r0
    16d4:	73 9f       	mul	r23, r19
    16d6:	f0 01       	movw	r30, r0
    16d8:	82 9f       	mul	r24, r18
    16da:	e0 0d       	add	r30, r0
    16dc:	f1 1d       	adc	r31, r1
    16de:	64 9f       	mul	r22, r20
    16e0:	e0 0d       	add	r30, r0
    16e2:	f1 1d       	adc	r31, r1
    16e4:	92 9f       	mul	r25, r18
    16e6:	f0 0d       	add	r31, r0
    16e8:	83 9f       	mul	r24, r19
    16ea:	f0 0d       	add	r31, r0
    16ec:	74 9f       	mul	r23, r20
    16ee:	f0 0d       	add	r31, r0
    16f0:	65 9f       	mul	r22, r21
    16f2:	f0 0d       	add	r31, r0
    16f4:	99 27       	eor	r25, r25
    16f6:	72 9f       	mul	r23, r18
    16f8:	b0 0d       	add	r27, r0
    16fa:	e1 1d       	adc	r30, r1
    16fc:	f9 1f       	adc	r31, r25
    16fe:	63 9f       	mul	r22, r19
    1700:	b0 0d       	add	r27, r0
    1702:	e1 1d       	adc	r30, r1
    1704:	f9 1f       	adc	r31, r25
    1706:	bd 01       	movw	r22, r26
    1708:	cf 01       	movw	r24, r30
    170a:	11 24       	eor	r1, r1
    170c:	08 95       	ret

0000170e <__udivmodsi4>:
    170e:	a1 e2       	ldi	r26, 0x21	; 33
    1710:	1a 2e       	mov	r1, r26
    1712:	aa 1b       	sub	r26, r26
    1714:	bb 1b       	sub	r27, r27
    1716:	fd 01       	movw	r30, r26
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <__udivmodsi4_ep>

0000171a <__udivmodsi4_loop>:
    171a:	aa 1f       	adc	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	ee 1f       	adc	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	a2 17       	cp	r26, r18
    1724:	b3 07       	cpc	r27, r19
    1726:	e4 07       	cpc	r30, r20
    1728:	f5 07       	cpc	r31, r21
    172a:	20 f0       	brcs	.+8      	; 0x1734 <__udivmodsi4_ep>
    172c:	a2 1b       	sub	r26, r18
    172e:	b3 0b       	sbc	r27, r19
    1730:	e4 0b       	sbc	r30, r20
    1732:	f5 0b       	sbc	r31, r21

00001734 <__udivmodsi4_ep>:
    1734:	66 1f       	adc	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	1a 94       	dec	r1
    173e:	69 f7       	brne	.-38     	; 0x171a <__udivmodsi4_loop>
    1740:	60 95       	com	r22
    1742:	70 95       	com	r23
    1744:	80 95       	com	r24
    1746:	90 95       	com	r25
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
    174c:	bd 01       	movw	r22, r26
    174e:	cf 01       	movw	r24, r30
    1750:	08 95       	ret
