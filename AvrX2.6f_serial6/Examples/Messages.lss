
Messages.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ce  00800060  00800060  00000cc0  2**2
                  ALLOC
  3 .noinit       00000000  0080012e  0080012e  00000cc0  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000cc0  2**0
                  CONTENTS
  5 .stab         000040bc  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000067d  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a
   4:	0c 94 50 00 	jmp	0xa0
   8:	0c 94 50 00 	jmp	0xa0
   c:	0c 94 50 00 	jmp	0xa0
  10:	0c 94 50 00 	jmp	0xa0
  14:	0c 94 50 00 	jmp	0xa0
  18:	0c 94 50 00 	jmp	0xa0
  1c:	0c 94 50 00 	jmp	0xa0
  20:	0c 94 50 00 	jmp	0xa0
  24:	0c 94 50 00 	jmp	0xa0
  28:	0c 94 50 00 	jmp	0xa0
  2c:	0c 94 52 00 	jmp	0xa4
  30:	0c 94 50 00 	jmp	0xa0
  34:	0c 94 03 01 	jmp	0x206
  38:	0c 94 fd 00 	jmp	0x1fa
  3c:	0c 94 50 00 	jmp	0xa0
  40:	0c 94 50 00 	jmp	0xa0
  44:	0c 94 50 00 	jmp	0xa0
  48:	0c 94 50 00 	jmp	0xa0
  4c:	0c 94 50 00 	jmp	0xa0
  50:	0c 94 50 00 	jmp	0xa0

00000054 <__ctors_end>:
  54:	e1 00       	.word	0x00e1	; ????
  56:	72 00       	.word	0x0072	; ????
  58:	9b 00       	.word	0x009b	; ????
  5a:	03 14       	cp	r0, r3

0000005b <task1Tcb>:
  5b:	14 01 5a 00 e2 00 03                                ..Z....

00000062 <MonitorTcb>:
  62:	9a 00 f9 01 af 00 00 00                             ........

0000006a <__init>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ec e2       	ldi	r30, 0x2C	; 44
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 32       	cpi	r26, 0x2E	; 46
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94
  9c:	0c 94 9f 00 	jmp	0x13e

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0x0

000000a4 <__vector_11>:
  a4:	0e 94 71 03 	call	0x6e2
  a8:	80 ee       	ldi	r24, 0xE0	; 224
  aa:	82 bf       	out	0x32, r24	; 50
  ac:	0e 94 72 05 	call	0xae4
  b0:	0e 94 bd 03 	call	0x77a

000000b4 <task1>:
  b4:	1f ef       	ldi	r17, 0xFF	; 255
  b6:	05 c0       	rjmp	.+10     	; 0xc2
  b8:	0e 94 0a 05 	call	0xa14
  bc:	ce 01       	movw	r24, r28
  be:	0e 94 72 04 	call	0x8e4
  c2:	81 ea       	ldi	r24, 0xA1	; 161
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 36 05 	call	0xa6c
  ca:	ec 01       	movw	r28, r24
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	c0 36       	cpi	r28, 0x60	; 96
  d0:	d8 07       	cpc	r29, r24
  d2:	31 f0       	breq	.+12     	; 0xe0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	cb 3a       	cpi	r28, 0xAB	; 171
  d8:	d8 07       	cpc	r29, r24
  da:	71 f7       	brne	.-36     	; 0xb8
  dc:	18 ba       	out	0x18, r1	; 24
  de:	ee cf       	rjmp	.-36     	; 0xbc
  e0:	18 bb       	out	0x18, r17	; 24
  e2:	ec cf       	rjmp	.-40     	; 0xbc

000000e4 <task2>:
  e4:	19 b3       	in	r17, 0x19	; 25
  e6:	6a e0       	ldi	r22, 0x0A	; 10
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	85 ea       	ldi	r24, 0xA5	; 165
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 44 05 	call	0xa88
  f2:	c9 b3       	in	r28, 0x19	; 25
  f4:	c1 70       	andi	r28, 0x01	; 1
  f6:	c1 17       	cp	r28, r17
  f8:	b1 f3       	breq	.-20     	; 0xe6
  fa:	c1 30       	cpi	r28, 0x01	; 1
  fc:	b9 f0       	breq	.+46     	; 0x12c
  fe:	6b ea       	ldi	r22, 0xAB	; 171
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	81 ea       	ldi	r24, 0xA1	; 161
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 2d 05 	call	0xa5a
 10a:	8b ea       	ldi	r24, 0xAB	; 171
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 5b 04 	call	0x8b6
 112:	1c 2f       	mov	r17, r28
 114:	6a e0       	ldi	r22, 0x0A	; 10
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	85 ea       	ldi	r24, 0xA5	; 165
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 44 05 	call	0xa88
 120:	c9 b3       	in	r28, 0x19	; 25
 122:	c1 70       	andi	r28, 0x01	; 1
 124:	c1 17       	cp	r28, r17
 126:	f9 f2       	breq	.-66     	; 0xe6
 128:	c1 30       	cpi	r28, 0x01	; 1
 12a:	49 f7       	brne	.-46     	; 0xfe
 12c:	60 e6       	ldi	r22, 0x60	; 96
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	81 ea       	ldi	r24, 0xA1	; 161
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 2d 05 	call	0xa5a
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	e8 cf       	rjmp	.-48     	; 0x10e

0000013e <main>:
 13e:	cf e5       	ldi	r28, 0x5F	; 95
 140:	d8 e0       	ldi	r29, 0x08	; 8
 142:	de bf       	out	0x3e, r29	; 62
 144:	cd bf       	out	0x3d, r28	; 61
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f6 03 	call	0x7ec
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	85 bf       	out	0x35, r24	; 53
 152:	80 ee       	ldi	r24, 0xE0	; 224
 154:	82 bf       	out	0x32, r24	; 50
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	83 bf       	out	0x33, r24	; 51
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	89 bf       	out	0x39, r24	; 57
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
 162:	88 bb       	out	0x18, r24	; 24
 164:	8b e5       	ldi	r24, 0x5B	; 91
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 02 04 	call	0x804
 16c:	84 e5       	ldi	r24, 0x54	; 84
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 02 04 	call	0x804
 174:	82 e6       	ldi	r24, 0x62	; 98
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 02 04 	call	0x804
 17c:	89 e1       	ldi	r24, 0x19	; 25
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 f6 00 	call	0x1ec
 184:	8c e2       	ldi	r24, 0x2C	; 44
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 74 04 	call	0x8e8
 18c:	0e 94 bd 03 	call	0x77a
 190:	ff cf       	rjmp	.-2      	; 0x190

00000192 <PushChar>:
; by the next routine
;-
        _FUNCTION(PushChar)
PushChar:
        push    Xl
 192:	af 93       	push	r26
        lds     Xl, SioFlags
 194:	a0 91 18 01 	lds	r26, 0x0118
        sbr     Xl, 1<<CharPushed
 198:	a0 68       	ori	r26, 0x80	; 128
        sts     SioFlags, Xl
 19a:	a0 93 18 01 	sts	0x0118, r26
        pop     Xl
 19e:	af 91       	pop	r26
        ret
 1a0:	08 95       	ret

000001a2 <GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; GetChar
;
; Need to make this draw from a buffer so that multiple
; chars can be pushed... and so different input streams
; can be attached to the buffer.
;-
        _FUNCTION(GetChar)
#ifdef  __IAR_SYSTEMS_ASM__
        PUBLIC  ?C_GETCHAR
?C_GETCHAR:     ; Need this label for simulator I/O
#endif
GetChar:
        lds     tmp0, SioFlags
 1a2:	20 91 18 01 	lds	r18, 0x0118
        sbrs    tmp0, CharPushed
 1a6:	27 ff       	sbrs	r18, 7
        rjmp    gc00
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4
        cbr     tmp0, 1<<CharPushed
 1aa:	2f 77       	andi	r18, 0x7F	; 127
        rjmp    gc01
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba
        sts     SioFlags, tmp0
 1ae:	20 93 18 01 	sts	0x0118, r18
        rjmp    gc01
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba

000001b4 <gc00>:
gc00:
        ldi     p1h, hi8(RxC_Flag)
 1b4:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 1b6:	8a e1       	ldi	r24, 0x1A	; 26
        rcall   AvrXWaitSemaphore       ; Wait for a charactor, or flag from System
 1b8:	80 d3       	rcall	.+1792   	; 0x8ba

000001ba <gc01>:
gc01:
        lds     r1l, _RxByte
 1ba:	80 91 1c 01 	lds	r24, 0x011C
        ret
 1be:	08 95       	ret

000001c0 <_GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; _GetChar
;
; Special version that echos
;
; RETURNS:      RxByte (Register)
;-
        _FUNCTION(_GetChar)

_GetChar:
        rcall   GetChar
 1c0:	f0 df       	rcall	.-32     	; 0x1a2
        rjmp    PutChar
 1c2:	2b c0       	rjmp	.+86     	; 0x21a

000001c4 <PutCR>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutCR
;
; Put a CR to the output stream
;-
        _FUNCTION(PutCR)
PutCR:
        ldi     p1l, 0x0D
 1c4:	8d e0       	ldi	r24, 0x0D	; 13
        rjmp    PutChar
 1c6:	29 c0       	rjmp	.+82     	; 0x21a

000001c8 <PutSpace>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutSpace
;
; Put a space to the output stream
;-
        _FUNCTION(PutSpace)

PutSpace:
        ldi     p1l, ' '
 1c8:	80 e2       	ldi	r24, 0x20	; 32
        rjmp    PutChar
 1ca:	27 c0       	rjmp	.+78     	; 0x21a

000001cc <_PrintString>:
        _ENDFUNC
;+
;------------------------------------------
;
; const char * PutString(const char *)
;
; passed:
;       near pointer to string in FLASH memory
; Returns:
;       pointer to next char after NULL
;-
        _FUNCTION(_PrintString)

_PrintString:
        mov     Zl, p1l
 1cc:	e8 2f       	mov	r30, r24
        mov     Zh, p1h
 1ce:	f9 2f       	mov	r31, r25

000001d0 <_foo>:
_foo:
        lpm
 1d0:	c8 95       	lpm
        tst     R0
 1d2:	00 20       	and	r0, r0
        breq    _ps00
 1d4:	41 f0       	breq	.+16     	; 0x1e6
        mov     p1l, R0
 1d6:	80 2d       	mov	r24, r0
        push    Zl
 1d8:	ef 93       	push	r30
        push    Zh
 1da:	ff 93       	push	r31
        rcall   PutChar
 1dc:	1e d0       	rcall	.+60     	; 0x21a
        pop     Zh
 1de:	ff 91       	pop	r31
        pop     Zl
 1e0:	ef 91       	pop	r30
        adiw    Zl, 1
 1e2:	31 96       	adiw	r30, 0x01	; 1
        rjmp    _foo
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0

000001e6 <_ps00>:
_ps00:
        mov     r1l, Zl
 1e6:	8e 2f       	mov	r24, r30
        mov     r1h, Zh
 1e8:	9f 2f       	mov	r25, r31
        ret
 1ea:	08 95       	ret

000001ec <InitSerialIO>:
        _ENDFUNC
;+
;-------------------------------------------
; void InitSerialIO(unsigned)
;
; PASSED:       R25:24 = UBBR
;		p1h:p1l = UBBR
;
; History: parameter used to be passed in R25 l.b. 1/31/01
;	   Changed to unsigned for mega chips. l.b. 5/30/02
;

        _FUNCTION(InitSerialIO)
InitSerialIO:
        ;out     _SFR_IO_ADDR(UBRR), p1l
         out     UBRRL, p1l
 1ec:	89 bd       	out	0x29, r24	; 41
#if defined(UBRRH)
	sts	UBRRH, p1h	// THIS appears to be a no-op
 1ee:	90 93 40 00 	sts	0x0040, r25
#endif
#if defined(UCSR0C)
	ldi	tmp0, UCRC_INIT	// SET word length.
	sts	UCSR0C, tmp0	// Extended register in mega128
#endif
        ldi     tmp0, UCR_INIT
 1f2:	28 e9       	ldi	r18, 0x98	; 152
        ;out     _SFR_IO_ADDR(UCR), tmp0
        out     _SFR_IO_ADDR(UCR), tmp0
 1f4:	2a b9       	out	0x0a, r18	; 10
        out     (UCR), tmp0
 1f6:	2a bd       	out	0x2a, r18	; 42
        ret
 1f8:	08 95       	ret

000001fa <__vector_14>:
        _ENDFUNC
;
;-----------------------------------------------
; UDRE_Interrupt
;
; Disables the interrupt (UDR is empty) signal waiting
; process to stuff the UDR
;
        _FUNCTION(SIG_UART_DATA)
SIG_UART_DATA:
        cbi     _SFR_IO_ADDR(UCR), UDRIE      ; Disable the interrupt
 1fa:	55 98       	cbi	0x0a, 5	; 10

        rcall   IntProlog
 1fc:	72 d2       	rcall	.+1252   	; 0x6e2

        ldi     p1l, lo8(TxIntFlag)
 1fe:	86 e1       	ldi	r24, 0x16	; 22
        ldi     p1h, hi8(TxIntFlag)
 200:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXIntSetSemaphore     ; Signal we are ready for more.
 202:	7f d3       	rcall	.+1790   	; 0x902

        rjmp    _Epilog
 204:	bc c2       	rjmp	.+1400   	; 0x77e

00000206 <__vector_13>:
        _ENDFUNC

;
;-----------------------------------------------
; RxC_Interrupt
;
; Reads the USART and flags UserTask, Char In semaphore
;
        _FUNCTION(SIG_UART_RECV)
SIG_UART_RECV:
        cbi     _SFR_IO_ADDR(UCR), RXCIE      ; disable interrupt
 206:	57 98       	cbi	0x0a, 7	; 10

        rcall   IntProlog      ; Switch to kernel stack
 208:	6c d2       	rcall	.+1240   	; 0x6e2

        in      Xl, _SFR_IO_ADDR(UDR)
 20a:	ac b1       	in	r26, 0x0c	; 12
        sts     _RxByte, Xl
 20c:	a0 93 1c 01 	sts	0x011C, r26

        ldi     p1h, hi8(RxC_Flag)
 210:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 212:	8a e1       	ldi	r24, 0x1A	; 26
        rcall   AvrXIntSetSemaphore
 214:	76 d3       	rcall	.+1772   	; 0x902

        sbi     _SFR_IO_ADDR(UCR), RXCIE      ; Re-enable interrupts
 216:	57 9a       	sbi	0x0a, 7	; 10
        rjmp    _Epilog
 218:	b2 c2       	rjmp	.+1380   	; 0x77e

0000021a <PutChar>:
        _ENDFUNC
;+
;------------------------------------------
; PutChar
;
; Passed: p1l "TxByte"
;
; Stuffs "TxByte" into usart.  The usart is double buffered.
; when the data register is full we wait on the semaphore
; until the Usart interrupts indicating the register is ready.
;-
        _FUNCTION(PutChar)
#ifdef __IAR_SYSTEMS_ASM__
        _PUBLIC(?C_PUTCHAR)     ; Enable terminal I/O
?C_PUTCHAR:
#endif
PutChar:
        sbic    _SFR_IO_ADDR(USR), UDRE
 21a:	5d 99       	sbic	0x0b, 5	; 11
        rjmp    pc00
 21c:	06 c0       	rjmp	.+12     	; 0x22a

        push    p1l
 21e:	8f 93       	push	r24
        sbi     _SFR_IO_ADDR(UCR), UDRIE      ; Enable interrupts and
 220:	55 9a       	sbi	0x0a, 5	; 10
        ldi     p1l, lo8(TxIntFlag)
 222:	86 e1       	ldi	r24, 0x16	; 22
        ldi     p1h, hi8(TxIntFlag)
 224:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXWaitSemaphore; Wait until data register is ready
 226:	49 d3       	rcall	.+1682   	; 0x8ba
        pop     p1l
 228:	8f 91       	pop	r24

0000022a <pc00>:
pc00:
        out     _SFR_IO_ADDR(UDR), p1l
 22a:	8c b9       	out	0x0c, r24	; 12
        ret
 22c:	08 95       	ret

0000022e <_GetHex>:
        _ENDFUNC

;-----------------------------------------
; _GetHex
;
; PASSED:       p1l = Maximum number of digits
; RETURNS:      r1 = val, Tbit, p2l = Number of digits entered
; USES:         R24, R25
; STACK:        4
;
        _FUNCTION(_GetHex)
_GetHex:
        push    R10
 22e:	af 92       	push	r10
        push    R11
 230:	bf 92       	push	r11
        push    R12
 232:	cf 92       	push	r12
        push    R13
 234:	df 92       	push	r13

        mov     R13, p1l
 236:	d8 2e       	mov	r13, r24
        clr     R10
 238:	aa 24       	eor	r10, r10
        clr     R11
 23a:	bb 24       	eor	r11, r11
        clr     R12
 23c:	cc 24       	eor	r12, r12

0000023e <gh_00>:
gh_00:
        rcall   _GetChar
 23e:	c0 df       	rcall	.-128    	; 0x1c0
        rcall   IsHex
 240:	21 d0       	rcall	.+66     	; 0x284
        brtc    gh_xx
 242:	96 f4       	brtc	.+36     	; 0x268
        cpi     r1l, '9'+1
 244:	8a 33       	cpi	r24, 0x3A	; 58
        brge    gh_01
 246:	14 f4       	brge	.+4      	; 0x24c
        subi    r1l, '0'
 248:	80 53       	subi	r24, 0x30	; 48
        rjmp    gh_02
 24a:	02 c0       	rjmp	.+4      	; 0x250

0000024c <gh_01>:
gh_01:
        cbr     r1l, 0x20
 24c:	8f 7d       	andi	r24, 0xDF	; 223
        subi    r1l, 'A'-10
 24e:	87 53       	subi	r24, 0x37	; 55

00000250 <gh_02>:
gh_02:
        lsl     R10
 250:	aa 0c       	add	r10, r10
        rol     R11
 252:	bb 1c       	adc	r11, r11
        lsl     R10
 254:	aa 0c       	add	r10, r10
        rol     R11
 256:	bb 1c       	adc	r11, r11
        lsl     R10
 258:	aa 0c       	add	r10, r10
        rol     R11
 25a:	bb 1c       	adc	r11, r11
        lsl     R10
 25c:	aa 0c       	add	r10, r10
        rol     R11
 25e:	bb 1c       	adc	r11, r11
        add     R10, r1l
 260:	a8 0e       	add	r10, r24
        inc     R12
 262:	c3 94       	inc	r12
        dec     R13
 264:	da 94       	dec	r13
        brne    gh_00
 266:	59 f7       	brne	.-42     	; 0x23e

00000268 <gh_xx>:
gh_xx:
        mov     p2l, R12
 268:	6c 2d       	mov	r22, r12
        mov     r1l, R10
 26a:	8a 2d       	mov	r24, r10
        mov     r1h, R11
 26c:	9b 2d       	mov	r25, r11

        pop     R13
 26e:	df 90       	pop	r13
        pop     R12
 270:	cf 90       	pop	r12
        pop     R11
 272:	bf 90       	pop	r11
        pop     R10
 274:	af 90       	pop	r10
        ret
 276:	08 95       	ret

00000278 <GetHexWord>:
        _ENDFUNC


;-----------------------------------------
; GetHexWord
;
        _FUNCTION(GetHexWord)

GetHexWord:
        ldi     p1l, 4
 278:	84 e0       	ldi	r24, 0x04	; 4
        rjmp    _GetHex
 27a:	d9 cf       	rjmp	.-78     	; 0x22e

0000027c <GetHexByte>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexByte)

GetHexByte:
        ldi     p1l, 2
 27c:	82 e0       	ldi	r24, 0x02	; 2
        rjmp    _GetHex
 27e:	d7 cf       	rjmp	.-82     	; 0x22e

00000280 <GetHexChar>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexChar)

GetHexChar:
        ldi     p1l, 1
 280:	81 e0       	ldi	r24, 0x01	; 1
        rjmp    _GetHex
 282:	d5 cf       	rjmp	.-86     	; 0x22e

00000284 <IsHex>:
        _ENDFUNC
;-----------------------------------------
; IsHex
;
; Tests RxByte for ascii hex char
; Returns: T bit
;
        _FUNCTION(IsHex)

IsHex:
        push    p1l
 284:	8f 93       	push	r24
        lds     p1l, _RxByte
 286:	80 91 1c 01 	lds	r24, 0x011C
        clt
 28a:	e8 94       	clt
        cpi     p1l, '0'
 28c:	80 33       	cpi	r24, 0x30	; 48
        brlt    ihno
 28e:	5c f0       	brlt	.+22     	; 0x2a6
        cpi     p1l, '9'+1
 290:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ihyes
 292:	44 f0       	brlt	.+16     	; 0x2a4
        cpi     p1l, 'A'
 294:	81 34       	cpi	r24, 0x41	; 65
        brlt    ihno
 296:	3c f0       	brlt	.+14     	; 0x2a6
        cpi     p1l, 'F'+1
 298:	87 34       	cpi	r24, 0x47	; 71
        brlt    ihyes
 29a:	24 f0       	brlt	.+8      	; 0x2a4
        cpi     p1l, 'a'
 29c:	81 36       	cpi	r24, 0x61	; 97
        brlt    ihno
 29e:	1c f0       	brlt	.+6      	; 0x2a6
        cpi     p1l, 'f'+1
 2a0:	87 36       	cpi	r24, 0x67	; 103
        brge    ihno
 2a2:	0c f4       	brge	.+2      	; 0x2a6

000002a4 <ihyes>:
ihyes:
        set
 2a4:	68 94       	set

000002a6 <ihno>:
ihno:
        pop     p1l
 2a6:	8f 91       	pop	r24
        ret
 2a8:	08 95       	ret

000002aa <IsWhite>:
        _ENDFUNC
;-----------------------------------------
; IsWhite
;
; Tests RxByte for space or CR
; Returns: T bit
;
        _FUNCTION(IsWhite)

IsWhite:
        push    p1l
 2aa:	8f 93       	push	r24
        lds     p1l, _RxByte
 2ac:	80 91 1c 01 	lds	r24, 0x011C
        clt
 2b0:	e8 94       	clt
        cpi     p1l, ' '
 2b2:	80 32       	cpi	r24, 0x20	; 32
        breq    ihyes
 2b4:	b9 f3       	breq	.-18     	; 0x2a4
        cpi     p1l, 0x0D
 2b6:	8d 30       	cpi	r24, 0x0D	; 13
        breq    ihyes
 2b8:	a9 f3       	breq	.-22     	; 0x2a4
        rjmp    ihno
 2ba:	f5 cf       	rjmp	.-22     	; 0x2a6

000002bc <_PutHex>:
        _ENDFUNC
;-----------------------------------------
; void _PutHex(unsigned val, char digits)
;
; Passed:       p2 = Value, p1l = # digits
; RETURN:       Nothing
; USES:         R25, TxByte
; STACK:        2
;
        _FUNCTION(_PutHex)

_PutHex:
        ldi     tmp2, 4          ; Maximum number of digits.
 2bc:	44 e0       	ldi	r20, 0x04	; 4
        mov     tmp3, p2l
 2be:	56 2f       	mov	r21, r22
        mov     p2l, p1l
 2c0:	68 2f       	mov	r22, r24
        mov     p2h, p1h
 2c2:	79 2f       	mov	r23, r25

000002c4 <ph00>:
ph00:
        lsl     p2l
 2c4:	66 0f       	add	r22, r22
        rol     p2h
 2c6:	77 1f       	adc	r23, r23
        rol     p1l
 2c8:	88 1f       	adc	r24, r24
        lsl     p2l
 2ca:	66 0f       	add	r22, r22
        rol     p2h
 2cc:	77 1f       	adc	r23, r23
        rol     p1l
 2ce:	88 1f       	adc	r24, r24
        lsl     p2l
 2d0:	66 0f       	add	r22, r22
        rol     p2h
 2d2:	77 1f       	adc	r23, r23
        rol     p1l
 2d4:	88 1f       	adc	r24, r24
        lsl     p2l
 2d6:	66 0f       	add	r22, r22
        rol     p2h
 2d8:	77 1f       	adc	r23, r23
        rol     p1l
 2da:	88 1f       	adc	r24, r24

        cp      tmp3, tmp2
 2dc:	54 17       	cp	r21, r20
        brlt    ph02
 2de:	34 f0       	brlt	.+12     	; 0x2ec

        cbr     p1l, 0xF0
 2e0:	8f 70       	andi	r24, 0x0F	; 15
        subi    p1l, lo8(-'0')          ; Addi 0
 2e2:	80 5d       	subi	r24, 0xD0	; 208
        cpi     p1l, lo8('9' + 1)       ; if > 9
 2e4:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ph01                    ; subi 9 and add A
 2e6:	0c f0       	brlt	.+2      	; 0x2ea
        subi    p1l, lo8('9' + 1 - 'A')
 2e8:	89 5f       	subi	r24, 0xF9	; 249

000002ea <ph01>:
ph01:
        rcall   PutChar
 2ea:	97 df       	rcall	.-210    	; 0x21a

000002ec <ph02>:
ph02:
        dec     tmp2
 2ec:	4a 95       	dec	r20
        brne    ph00
 2ee:	51 f7       	brne	.-44     	; 0x2c4

        ret
 2f0:	08 95       	ret

000002f2 <PutHexWord>:
        _ENDFUNC
;-----------------------------------------
; Put out a hex word
;
; Passed: Y = word
;
        _FUNCTION(PutHexWord)

PutHexWord:
        ldi     p2l, 4
 2f2:	64 e0       	ldi	r22, 0x04	; 4
        rjmp    _PutHex
 2f4:	e3 cf       	rjmp	.-58     	; 0x2bc

000002f6 <PutHexByte>:
        _ENDFUNC
;-----------------------------------------
; Put out a two ascii hex byte
; Yl = byte
;
        _FUNCTION(PutHexByte)

PutHexByte:
        ldi     p2l, 2
 2f6:	62 e0       	ldi	r22, 0x02	; 2
        rjmp    _PutHex
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc

000002fa <Hello>:
 2fa:	0d 00       	.word	0x000d	; ????
 2fc:	41 76       	andi	r20, 0x61	; 97
 2fe:	72 58       	subi	r23, 0x82	; 130
 300:	20 4d       	sbci	r18, 0xD0	; 208
 302:	6f 6e       	ori	r22, 0xEF	; 239
 304:	69 74       	andi	r22, 0x49	; 73
 306:	6f 72       	andi	r22, 0x2F	; 47
 308:	20 56       	subi	r18, 0x60	; 96
 30a:	32 00       	.word	0x0032	; ????
 30c:	0d 00       	.word	0x000d	; ????
 30e:	0d 00       	.word	0x000d	; ????
 310:	4d 6f       	ori	r20, 0xFD	; 253
 312:	64 69       	ori	r22, 0x94	; 148
 314:	66 79       	andi	r22, 0x96	; 150
 316:	20 3d       	cpi	r18, 0xD0	; 208
 318:	20 6d       	ori	r18, 0xD0	; 208
 31a:	7b 73       	andi	r23, 0x3B	; 59
 31c:	2c 65       	ori	r18, 0x5C	; 92
 31e:	7d 5b       	subi	r23, 0xBD	; 189
 320:	77 5d       	subi	r23, 0xD7	; 215
 322:	5b 61       	ori	r21, 0x1B	; 27
 324:	61 61       	ori	r22, 0x11	; 17
 326:	61 5d       	subi	r22, 0xD1	; 209
 328:	00 0d       	add	r16, r0
 32a:	00 44       	sbci	r16, 0x40	; 64
 32c:	75 6d       	ori	r23, 0xD5	; 213
 32e:	70 20       	and	r7, r0
 330:	20 20       	and	r2, r0
 332:	3d 20       	and	r3, r13
 334:	64 7b       	andi	r22, 0xB4	; 180
 336:	73 2c       	mov	r7, r3
 338:	65 7d       	andi	r22, 0xD5	; 213
 33a:	5b 77       	andi	r21, 0x7B	; 123
 33c:	5d 5b       	subi	r21, 0xBD	; 189
 33e:	61 61       	ori	r22, 0x11	; 17
 340:	61 61       	ori	r22, 0x11	; 17
 342:	5d 20       	and	r5, r13
 344:	5b 78       	andi	r21, 0x8B	; 139
 346:	78 5d       	subi	r23, 0xD8	; 216
 348:	00 0d       	add	r16, r0
 34a:	00 48       	sbci	r16, 0x80	; 128
 34c:	61 6c       	ori	r22, 0xC1	; 193
 34e:	74 20       	and	r7, r4
 350:	20 20       	and	r2, r0
 352:	3d 20       	and	r3, r13
 354:	68 5b       	subi	r22, 0xB8	; 184
 356:	6f 6f       	ori	r22, 0xFF	; 255
 358:	6f 6f       	ori	r22, 0xFF	; 255
 35a:	5d 00       	.word	0x005d	; ????
 35c:	0d 00       	.word	0x000d	; ????
 35e:	53 74       	andi	r21, 0x43	; 67
 360:	65 70       	andi	r22, 0x05	; 5
 362:	20 20       	and	r2, r0
 364:	20 3d       	cpi	r18, 0xD0	; 208
 366:	20 73       	andi	r18, 0x30	; 48
 368:	5b 6f       	ori	r21, 0xFB	; 251
 36a:	6f 6f       	ori	r22, 0xFF	; 255
 36c:	6f 5d       	subi	r22, 0xDF	; 223
 36e:	00 0d       	add	r16, r0
 370:	00 52       	subi	r16, 0x20	; 32
 372:	65 73       	andi	r22, 0x35	; 53
 374:	75 6d       	ori	r23, 0xD5	; 213
 376:	65 20       	and	r6, r5
 378:	3d 20       	and	r3, r13
 37a:	72 5b       	subi	r23, 0xB2	; 178
 37c:	6f 6f       	ori	r22, 0xFF	; 255
 37e:	6f 6f       	ori	r22, 0xFF	; 255
 380:	5d 00       	.word	0x005d	; ????
 382:	0d 00       	.word	0x000d	; ????
 384:	43 6f       	ori	r20, 0xF3	; 243
 386:	6e 74       	andi	r22, 0x4E	; 78
 388:	65 78       	andi	r22, 0x85	; 133
 38a:	74 3d       	cpi	r23, 0xD4	; 212
 38c:	20 78       	andi	r18, 0x80	; 128
 38e:	5b 6f       	ori	r21, 0xFB	; 251
 390:	6f 6f       	ori	r22, 0xFF	; 255
 392:	6f 5d       	subi	r22, 0xDF	; 223
 394:	00 0d       	add	r16, r0
 396:	00 53       	subi	r16, 0x30	; 48
 398:	69 67       	ori	r22, 0x79	; 121
 39a:	6e 61       	ori	r22, 0x1E	; 30
 39c:	6c 20       	and	r6, r12
 39e:	3d 20       	and	r3, r13
 3a0:	69 5b       	subi	r22, 0xB9	; 185
 3a2:	6f 6f       	ori	r22, 0xFF	; 255
 3a4:	6f 6f       	ori	r22, 0xFF	; 255
 3a6:	5d 00       	.word	0x005d	; ????
 3a8:	0d 00       	.word	0x000d	; ????
 3aa:	43 61       	ori	r20, 0x13	; 19
 3ac:	6e 63       	ori	r22, 0x3E	; 62
 3ae:	65 6c       	ori	r22, 0xC5	; 197
 3b0:	20 3d       	cpi	r18, 0xD0	; 208
 3b2:	20 63       	ori	r18, 0x30	; 48
 3b4:	5b 6f       	ori	r21, 0xFB	; 251
 3b6:	6f 6f       	ori	r22, 0xFF	; 255
 3b8:	6f 5d       	subi	r22, 0xDF	; 223
 3ba:	00 0d       	add	r16, r0
 3bc:	00 4b       	sbci	r16, 0xB0	; 176
 3be:	69 6c       	ori	r22, 0xC9	; 201
 3c0:	6c 54       	subi	r22, 0x4C	; 76
 3c2:	73 6b       	ori	r23, 0xB3	; 179
 3c4:	3d 20       	and	r3, r13
 3c6:	6b 5b       	subi	r22, 0xBB	; 187
 3c8:	6f 6f       	ori	r22, 0xFF	; 255
 3ca:	6f 6f       	ori	r22, 0xFF	; 255
 3cc:	5d 00       	.word	0x005d	; ????
 3ce:	0d 00       	.word	0x000d	; ????
 3d0:	49 6e       	ori	r20, 0xE9	; 233
 3d2:	69 74       	andi	r22, 0x49	; 73
 3d4:	61 73       	andi	r22, 0x31	; 49
 3d6:	6b 3d       	cpi	r22, 0xDB	; 219
 3d8:	20 70       	andi	r18, 0x00	; 0
 3da:	5b 61       	ori	r21, 0x1B	; 27
 3dc:	61 61       	ori	r22, 0x11	; 17
 3de:	61 5d       	subi	r22, 0xD1	; 209
 3e0:	00 0d       	add	r16, r0
 3e2:	00 51       	subi	r16, 0x10	; 16
 3e4:	75 69       	ori	r23, 0x95	; 149
 3e6:	74 20       	and	r7, r4
 3e8:	20 20       	and	r2, r0
 3ea:	3d 20       	and	r3, r13
 3ec:	71 00       	.word	0x0071	; ????
 3ee:	0d 00       	.word	0x000d	; ????
	...

000003f2 <Monitor>:
 3f2:	8c e2       	ldi	r24, 0x2C	; 44
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	78 d2       	rcall	.+1264   	; 0x8e8
 3f8:	8a ef       	ldi	r24, 0xFA	; 250
 3fa:	92 e0       	ldi	r25, 0x02	; 2

000003fc <Hello1>:
 3fc:	e7 de       	rcall	.-562    	; 0x1cc
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	e8 2f       	mov	r30, r24
 404:	f9 2f       	mov	r31, r25
 406:	c8 95       	lpm
 408:	00 20       	and	r0, r0
 40a:	c1 f7       	brne	.-16     	; 0x3fc
 40c:	20 e6       	ldi	r18, 0x60	; 96
 40e:	42 2e       	mov	r4, r18
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	52 2e       	mov	r5, r18
 414:	88 24       	eor	r8, r8
 416:	99 24       	eor	r9, r9
 418:	bb 24       	eor	r11, r11
 41a:	aa 24       	eor	r10, r10
 41c:	66 24       	eor	r6, r6
 41e:	77 24       	eor	r7, r7

00000420 <DebugMonitor>:
 420:	d1 de       	rcall	.-606    	; 0x1c4
 422:	8e e3       	ldi	r24, 0x3E	; 62
 424:	fa de       	rcall	.-524    	; 0x21a
 426:	01 d0       	rcall	.+2      	; 0x42a
 428:	fb cf       	rjmp	.-10     	; 0x420

0000042a <m_Parse>:
 42a:	ca de       	rcall	.-620    	; 0x1c0
 42c:	8d 36       	cpi	r24, 0x6D	; 109
 42e:	c9 f0       	breq	.+50     	; 0x462
 430:	84 36       	cpi	r24, 0x64	; 100
 432:	d1 f0       	breq	.+52     	; 0x468
 434:	88 36       	cpi	r24, 0x68	; 104
 436:	49 f1       	breq	.+82     	; 0x48a
 438:	83 37       	cpi	r24, 0x73	; 115
 43a:	c9 f1       	breq	.+114    	; 0x4ae
 43c:	8b 36       	cpi	r24, 0x6B	; 107
 43e:	a1 f1       	breq	.+104    	; 0x4a8
 440:	82 37       	cpi	r24, 0x72	; 114
 442:	31 f1       	breq	.+76     	; 0x490
 444:	89 36       	cpi	r24, 0x69	; 105
 446:	69 f1       	breq	.+90     	; 0x4a2
 448:	83 36       	cpi	r24, 0x63	; 99
 44a:	29 f1       	breq	.+74     	; 0x496
 44c:	88 37       	cpi	r24, 0x78	; 120
 44e:	31 f1       	breq	.+76     	; 0x49c
 450:	80 37       	cpi	r24, 0x70	; 112
 452:	c1 f0       	breq	.+48     	; 0x484
 454:	81 37       	cpi	r24, 0x71	; 113
 456:	11 f0       	breq	.+4      	; 0x45c

00000458 <m_err>:
 458:	8f e3       	ldi	r24, 0x3F	; 63
 45a:	df ce       	rjmp	.-578    	; 0x21a

0000045c <m_quit>:
 45c:	af 91       	pop	r26
 45e:	af 91       	pop	r26
 460:	08 95       	ret

00000462 <m_ModifyMemory>:
 462:	50 d0       	rcall	.+160    	; 0x504
 464:	ce f7       	brtc	.-14     	; 0x458
 466:	9b c0       	rjmp	.+310    	; 0x59e

00000468 <m_DumpMemory>:
 468:	4d d0       	rcall	.+154    	; 0x504
 46a:	c8 2e       	mov	r12, r24
 46c:	d9 2e       	mov	r13, r25
 46e:	a6 f7       	brtc	.-24     	; 0x458
 470:	20 91 1c 01 	lds	r18, 0x011C
 474:	2d 30       	cpi	r18, 0x0D	; 13
 476:	11 f0       	breq	.+4      	; 0x47c
 478:	3c d0       	rcall	.+120    	; 0x4f2
 47a:	76 f7       	brtc	.-36     	; 0x458

0000047c <m1b>:
 47c:	6c 2d       	mov	r22, r12
 47e:	7d 2d       	mov	r23, r13
 480:	8a 2d       	mov	r24, r10
 482:	6d c0       	rjmp	.+218    	; 0x55e

00000484 <m_InitTask>:
 484:	f9 de       	rcall	.-526    	; 0x278
 486:	46 f7       	brtc	.-48     	; 0x458
 488:	bf c1       	rjmp	.+894    	; 0x808

0000048a <m_HaltProcess>:
 48a:	28 d0       	rcall	.+80     	; 0x4dc
 48c:	2e f7       	brtc	.-54     	; 0x458
 48e:	cf c2       	rjmp	.+1438   	; 0xa2e

00000490 <m_ResumeProcess>:
 490:	25 d0       	rcall	.+74     	; 0x4dc
 492:	16 f7       	brtc	.-60     	; 0x458
 494:	dc c1       	rjmp	.+952    	; 0x84e

00000496 <m_CancelTimer>:
 496:	22 d0       	rcall	.+68     	; 0x4dc
 498:	fe f6       	brtc	.-66     	; 0x458
 49a:	68 c3       	rjmp	.+1744   	; 0xb6c

0000049c <m_PrintProcessContext>:
 49c:	1f d0       	rcall	.+62     	; 0x4dc
 49e:	e6 f6       	brtc	.-72     	; 0x458
 4a0:	bc c0       	rjmp	.+376    	; 0x61a

000004a2 <m_SetSemaphore>:
 4a2:	1c d0       	rcall	.+56     	; 0x4dc
 4a4:	ce f6       	brtc	.-78     	; 0x458
 4a6:	20 c2       	rjmp	.+1088   	; 0x8e8

000004a8 <m_Terminate>:
 4a8:	19 d0       	rcall	.+50     	; 0x4dc
 4aa:	b6 f6       	brtc	.-84     	; 0x458
 4ac:	a5 c2       	rjmp	.+1354   	; 0x9f8

000004ae <m_StepProcess>:
 4ae:	16 d0       	rcall	.+44     	; 0x4dc
 4b0:	9e f6       	brtc	.-90     	; 0x458
 4b2:	87 d2       	rcall	.+1294   	; 0x9c2
 4b4:	88 23       	and	r24, r24
 4b6:	09 f4       	brne	.+2      	; 0x4ba
 4b8:	08 95       	ret

000004ba <ms_NOTSUSPENDED>:
 4ba:	84 de       	rcall	.-760    	; 0x1c4
 4bc:	88 2d       	mov	r24, r8
 4be:	99 2d       	mov	r25, r9
 4c0:	18 df       	rcall	.-464    	; 0x2f2
 4c2:	88 ec       	ldi	r24, 0xC8	; 200
 4c4:	94 e0       	ldi	r25, 0x04	; 4
 4c6:	82 ce       	rjmp	.-764    	; 0x1cc

000004c8 <NotSuspended>:
 4c8:	20 2d       	mov	r18, r0
 4ca:	20 4e       	sbci	r18, 0xE0	; 224
 4cc:	6f 74       	andi	r22, 0x4F	; 79
 4ce:	20 53       	subi	r18, 0x30	; 48
 4d0:	75 73       	andi	r23, 0x35	; 53
 4d2:	70 65       	ori	r23, 0x50	; 80
 4d4:	6e 64       	ori	r22, 0x4E	; 78
 4d6:	65 64       	ori	r22, 0x45	; 69
 4d8:	21 0d       	add	r18, r1
	...

000004dc <GetObjectID>:
 4dc:	cd de       	rcall	.-614    	; 0x278
 4de:	16 f0       	brts	.+4      	; 0x4e4
 4e0:	e4 de       	rcall	.-568    	; 0x2aa
 4e2:	36 f4       	brtc	.+12     	; 0x4f0

000004e4 <goi00>:
 4e4:	66 23       	and	r22, r22
 4e6:	11 f4       	brne	.+4      	; 0x4ec
 4e8:	88 2d       	mov	r24, r8
 4ea:	99 2d       	mov	r25, r9

000004ec <goi01>:
 4ec:	88 2e       	mov	r8, r24
 4ee:	99 2e       	mov	r9, r25

000004f0 <goi02>:
 4f0:	08 95       	ret

000004f2 <GetDumpLength>:
 4f2:	c4 de       	rcall	.-632    	; 0x27c
 4f4:	16 f0       	brts	.+4      	; 0x4fa
 4f6:	d9 de       	rcall	.-590    	; 0x2aa
 4f8:	26 f4       	brtc	.+8      	; 0x502

000004fa <gdl00>:
 4fa:	66 23       	and	r22, r22
 4fc:	09 f4       	brne	.+2      	; 0x500
 4fe:	8a 2d       	mov	r24, r10

00000500 <gdl01>:
 500:	a8 2e       	mov	r10, r24

00000502 <gdl02>:
 502:	08 95       	ret

00000504 <GetFlagsAndAddress>:
 504:	e8 94       	clt
 506:	5c de       	rcall	.-840    	; 0x1c0
 508:	2b 2d       	mov	r18, r11
 50a:	83 37       	cpi	r24, 0x73	; 115
 50c:	11 f4       	brne	.+4      	; 0x512
 50e:	2d 7f       	andi	r18, 0xFD	; 253
 510:	03 c0       	rjmp	.+6      	; 0x518

00000512 <gbTRYEERAM>:
 512:	85 36       	cpi	r24, 0x65	; 101
 514:	e9 f4       	brne	.+58     	; 0x550
 516:	22 60       	ori	r18, 0x02	; 2

00000518 <gbCONTINUE>:
 518:	b2 2e       	mov	r11, r18
 51a:	ae de       	rcall	.-676    	; 0x278
 51c:	2b 2d       	mov	r18, r11
 51e:	1e f4       	brtc	.+6      	; 0x526
 520:	2e 7f       	andi	r18, 0xFE	; 254
 522:	b2 2e       	mov	r11, r18
 524:	0c c0       	rjmp	.+24     	; 0x53e

00000526 <gbCHECKWORDFLAG>:
 526:	2e 7f       	andi	r18, 0xFE	; 254
 528:	b2 2e       	mov	r11, r18
 52a:	30 91 1c 01 	lds	r19, 0x011C
 52e:	37 37       	cpi	r19, 0x77	; 119
 530:	21 f4       	brne	.+8      	; 0x53a
 532:	21 60       	ori	r18, 0x01	; 1
 534:	b2 2e       	mov	r11, r18
 536:	a0 de       	rcall	.-704    	; 0x278
 538:	16 f0       	brts	.+4      	; 0x53e

0000053a <gbCHECKFORWHITESPACE>:
 53a:	b7 de       	rcall	.-658    	; 0x2aa
 53c:	4e f4       	brtc	.+18     	; 0x550

0000053e <gbUPDATEADDRESS>:
 53e:	66 23       	and	r22, r22
 540:	39 f0       	breq	.+14     	; 0x550
 542:	b1 fe       	sbrs	r11, 1
 544:	03 c0       	rjmp	.+6      	; 0x54c
 546:	68 2e       	mov	r6, r24
 548:	79 2e       	mov	r7, r25
 54a:	02 c0       	rjmp	.+4      	; 0x550

0000054c <gbAddress>:
 54c:	48 2e       	mov	r4, r24
 54e:	59 2e       	mov	r5, r25

00000550 <gbDONE>:
 550:	84 2d       	mov	r24, r4
 552:	95 2d       	mov	r25, r5
 554:	b1 fc       	sbrc	r11, 1
 556:	86 2d       	mov	r24, r6
 558:	b1 fc       	sbrc	r11, 1
 55a:	97 2d       	mov	r25, r7
 55c:	08 95       	ret

0000055e <_DumpMemory>:
 55e:	b0 fe       	sbrs	r11, 0
 560:	03 c0       	rjmp	.+6      	; 0x568
 562:	6e 7f       	andi	r22, 0xFE	; 254
 564:	80 fd       	sbrc	r24, 0
 566:	83 95       	inc	r24

00000568 <m10f>:
 568:	c6 2e       	mov	r12, r22
 56a:	d7 2e       	mov	r13, r23
 56c:	18 2e       	mov	r1, r24

0000056e <m10c>:
 56e:	2a de       	rcall	.-940    	; 0x1c4
 570:	9d 2d       	mov	r25, r13
 572:	8c 2d       	mov	r24, r12
 574:	be de       	rcall	.-644    	; 0x2f2

00000576 <m10d>:
 576:	28 de       	rcall	.-944    	; 0x1c8
 578:	8b d0       	rcall	.+278    	; 0x690
 57a:	b0 fc       	sbrc	r11, 0
 57c:	04 c0       	rjmp	.+8      	; 0x586
 57e:	bb de       	rcall	.-650    	; 0x2f6
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	03 c0       	rjmp	.+6      	; 0x58c

00000586 <m11>:
 586:	b5 de       	rcall	.-662    	; 0x2f2
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	90 e0       	ldi	r25, 0x00	; 0

0000058c <m12>:
 58c:	c8 0e       	add	r12, r24
 58e:	d9 1e       	adc	r13, r25
 590:	18 1a       	sub	r1, r24
 592:	21 f0       	breq	.+8      	; 0x59c

00000594 <m10e>:
 594:	ec 2d       	mov	r30, r12
 596:	ef 70       	andi	r30, 0x0F	; 15
 598:	51 f3       	breq	.-44     	; 0x56e
 59a:	ed cf       	rjmp	.-38     	; 0x576

0000059c <m10exit>:
 59c:	08 95       	ret

0000059e <_ModifyMemory>:
 59e:	c8 2e       	mov	r12, r24
 5a0:	d9 2e       	mov	r13, r25

000005a2 <_ModifyMemory_>:
 5a2:	10 de       	rcall	.-992    	; 0x1c4
 5a4:	8c 2d       	mov	r24, r12
 5a6:	9d 2d       	mov	r25, r13
 5a8:	a4 de       	rcall	.-696    	; 0x2f2
 5aa:	0e de       	rcall	.-996    	; 0x1c8

000005ac <_mmNEXT>:
 5ac:	71 d0       	rcall	.+226    	; 0x690
 5ae:	b0 fc       	sbrc	r11, 0
 5b0:	a0 de       	rcall	.-704    	; 0x2f2
 5b2:	b0 fe       	sbrs	r11, 0
 5b4:	a0 de       	rcall	.-704    	; 0x2f6

000005b6 <_mmGETDATA>:
 5b6:	8d e2       	ldi	r24, 0x2D	; 45
 5b8:	30 de       	rcall	.-928    	; 0x21a
 5ba:	b0 fe       	sbrs	r11, 0
 5bc:	5f de       	rcall	.-834    	; 0x27c
 5be:	b0 fc       	sbrc	r11, 0
 5c0:	5b de       	rcall	.-842    	; 0x278
 5c2:	66 f4       	brtc	.+24     	; 0x5dc

000005c4 <_mmWRITE>:
 5c4:	76 d0       	rcall	.+236    	; 0x6b2
 5c6:	00 de       	rcall	.-1024   	; 0x1c8

000005c8 <_mmGOTONEXT>:
 5c8:	e1 e0       	ldi	r30, 0x01	; 1
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	b0 fc       	sbrc	r11, 0
 5ce:	31 96       	adiw	r30, 0x01	; 1
 5d0:	ce 0e       	add	r12, r30
 5d2:	df 1e       	adc	r13, r31
 5d4:	ec 2d       	mov	r30, r12
 5d6:	ef 70       	andi	r30, 0x0F	; 15
 5d8:	21 f3       	breq	.-56     	; 0x5a2
 5da:	e8 cf       	rjmp	.-48     	; 0x5ac

000005dc <_mmNODATA>:
 5dc:	66 de       	rcall	.-820    	; 0x2aa
 5de:	36 f4       	brtc	.+12     	; 0x5ec
 5e0:	66 23       	and	r22, r22
 5e2:	81 f7       	brne	.-32     	; 0x5c4
 5e4:	20 91 1c 01 	lds	r18, 0x011C
 5e8:	2d 30       	cpi	r18, 0x0D	; 13
 5ea:	71 f7       	brne	.-36     	; 0x5c8

000005ec <_mmDONE>:
 5ec:	08 95       	ret

000005ee <ctdt0>:
 5ee:	0d 50       	subi	r16, 0x0D	; 13
 5f0:	49 44       	sbci	r20, 0x49	; 73
 5f2:	20 46       	sbci	r18, 0x60	; 96
 5f4:	6c 67       	ori	r22, 0x7C	; 124
 5f6:	20 50       	subi	r18, 0x00	; 0
 5f8:	72 69       	ori	r23, 0x92	; 146
 5fa:	20 46       	sbci	r18, 0x60	; 96
 5fc:	72 61       	ori	r23, 0x12	; 18
 5fe:	6d 65       	ori	r22, 0x5D	; 93
 600:	20 53       	subi	r18, 0x30	; 48
 602:	52 0d       	add	r21, r2
	...

00000605 <ctdt1>:
 605:	52 30       	cpi	r21, 0x02	; 2
 607:	20 20       	and	r2, r0
	...

0000060a <ctdt2>:
 60a:	52 31       	cpi	r21, 0x12	; 18
 60c:	36 20       	and	r3, r6
	...

0000060f <ctdt3>:
 60f:	0d 20       	and	r0, r13
 611:	20 20       	and	r2, r0
 613:	20 20       	and	r2, r0
 615:	50 43       	sbci	r21, 0x30	; 48
 617:	20 20       	and	r2, r0
	...

0000061a <_PrintContext>:
 61a:	95 e0       	ldi	r25, 0x05	; 5
 61c:	8e ee       	ldi	r24, 0xEE	; 238
 61e:	d6 dd       	rcall	.-1108   	; 0x1cc
 620:	88 2d       	mov	r24, r8
 622:	99 2d       	mov	r25, r9
 624:	66 de       	rcall	.-820    	; 0x2f2
 626:	d0 dd       	rcall	.-1120   	; 0x1c8
 628:	e8 2d       	mov	r30, r8
 62a:	f9 2d       	mov	r31, r9
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	63 de       	rcall	.-826    	; 0x2f6
 630:	cb dd       	rcall	.-1130   	; 0x1c8
 632:	e8 2d       	mov	r30, r8
 634:	f9 2d       	mov	r31, r9
 636:	83 81       	ldd	r24, Z+3	; 0x03
 638:	5e de       	rcall	.-836    	; 0x2f6
 63a:	c6 dd       	rcall	.-1140   	; 0x1c8
 63c:	c5 dd       	rcall	.-1142   	; 0x1c8
 63e:	e8 2d       	mov	r30, r8
 640:	f9 2d       	mov	r31, r9
 642:	c4 81       	ldd	r28, Z+4	; 0x04
 644:	d5 81       	ldd	r29, Z+5	; 0x05
 646:	8c 2f       	mov	r24, r28
 648:	9d 2f       	mov	r25, r29
 64a:	53 de       	rcall	.-858    	; 0x2f2
 64c:	bd dd       	rcall	.-1158   	; 0x1c8
 64e:	bc dd       	rcall	.-1160   	; 0x1c8
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	89 91       	ld	r24, Y+
 654:	50 de       	rcall	.-864    	; 0x2f6

00000656 <Loop>:
 656:	0e d0       	rcall	.+28     	; 0x674
 658:	96 e0       	ldi	r25, 0x06	; 6
 65a:	85 e0       	ldi	r24, 0x05	; 5
 65c:	10 d0       	rcall	.+32     	; 0x67e
 65e:	0a d0       	rcall	.+20     	; 0x674
 660:	96 e0       	ldi	r25, 0x06	; 6
 662:	8a e0       	ldi	r24, 0x0A	; 10
 664:	0c d0       	rcall	.+24     	; 0x67e
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	8f e0       	ldi	r24, 0x0F	; 15
 66a:	b0 dd       	rcall	.-1184   	; 0x1cc
 66c:	99 91       	ld	r25, Y+
 66e:	88 81       	ld	r24, Y
 670:	40 de       	rcall	.-896    	; 0x2f2
 672:	08 95       	ret

00000674 <Print16RegPre>:
 674:	a7 dd       	rcall	.-1202   	; 0x1c4
 676:	8c 2f       	mov	r24, r28
 678:	9d 2f       	mov	r25, r29
 67a:	3b de       	rcall	.-906    	; 0x2f2
 67c:	a5 cd       	rjmp	.-1206   	; 0x1c8

0000067e <Print16Reg>:
 67e:	a6 dd       	rcall	.-1204   	; 0x1cc
 680:	e0 e1       	ldi	r30, 0x10	; 16
 682:	1e 2e       	mov	r1, r30

00000684 <p16r0>:
 684:	89 91       	ld	r24, Y+
 686:	37 de       	rcall	.-914    	; 0x2f6
 688:	9f dd       	rcall	.-1218   	; 0x1c8
 68a:	1a 94       	dec	r1
 68c:	d9 f7       	brne	.-10     	; 0x684
 68e:	08 95       	ret

00000690 <GetByteWord>:
 690:	b1 fc       	sbrc	r11, 1
 692:	08 c0       	rjmp	.+16     	; 0x6a4
 694:	ec 2d       	mov	r30, r12
 696:	fd 2d       	mov	r31, r13
 698:	80 81       	ld	r24, Z
 69a:	b0 fe       	sbrs	r11, 0
 69c:	08 95       	ret
 69e:	91 81       	ldd	r25, Z+1	; 0x01
 6a0:	80 81       	ld	r24, Z
 6a2:	08 95       	ret

000006a4 <gbwEEPROM>:
 6a4:	9d 2d       	mov	r25, r13
 6a6:	8c 2d       	mov	r24, r12
 6a8:	b0 fe       	sbrs	r11, 0
 6aa:	7b d2       	rcall	.+1270   	; 0xba2
 6ac:	b0 fc       	sbrc	r11, 0
 6ae:	88 d2       	rcall	.+1296   	; 0xbc0

000006b0 <gwbEXIT>:
 6b0:	08 95       	ret

000006b2 <PutByteWord>:
 6b2:	b1 fc       	sbrc	r11, 1
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6
 6b6:	ec 2d       	mov	r30, r12
 6b8:	fd 2d       	mov	r31, r13
 6ba:	80 83       	st	Z, r24
 6bc:	b0 fe       	sbrs	r11, 0
 6be:	08 95       	ret
 6c0:	91 83       	std	Z+1, r25	; 0x01
 6c2:	80 83       	st	Z, r24
 6c4:	08 95       	ret

000006c6 <pbwEEPROM>:
 6c6:	e9 2e       	mov	r14, r25
 6c8:	68 2f       	mov	r22, r24
 6ca:	9d 2d       	mov	r25, r13
 6cc:	8c 2d       	mov	r24, r12
 6ce:	8f d2       	rcall	.+1310   	; 0xbee
 6d0:	b0 fe       	sbrs	r11, 0
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0
 6d4:	8c 2d       	mov	r24, r12
 6d6:	9d 2d       	mov	r25, r13
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	6e 2d       	mov	r22, r14
 6de:	87 d2       	rcall	.+1294   	; 0xbee

000006e0 <pbwEXIT>:
 6e0:	08 95       	ret

000006e2 <IntProlog>:
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	bf 93       	push	r27
 6e8:	af 93       	push	r26
 6ea:	9f 93       	push	r25
 6ec:	d1 e0       	ldi	r29, 0x01	; 1
 6ee:	c0 e2       	ldi	r28, 0x20	; 32
 6f0:	9f b7       	in	r25, 0x3f	; 63
 6f2:	ae 81       	ldd	r26, Y+6	; 0x06
 6f4:	af 5f       	subi	r26, 0xFF	; 255
 6f6:	ae 83       	std	Y+6, r26	; 0x06
 6f8:	60 f0       	brcs	.+24     	; 0x712
 6fa:	aa 81       	ldd	r26, Y+2	; 0x02
 6fc:	bb 81       	ldd	r27, Y+3	; 0x03
 6fe:	ba 2b       	or	r27, r26
 700:	41 f4       	brne	.+16     	; 0x712
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	fe 81       	ldd	r31, Y+6	; 0x06
 708:	ef 81       	ldd	r30, Y+7	; 0x07
 70a:	29 96       	adiw	r28, 0x09	; 9
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	de bf       	out	0x3e, r29	; 62
 710:	09 94       	ijmp

00000712 <SaveContext>:
 712:	8f 93       	push	r24
 714:	7f 93       	push	r23
 716:	6f 93       	push	r22
 718:	5f 93       	push	r21
 71a:	4f 93       	push	r20
 71c:	3f 93       	push	r19
 71e:	2f 93       	push	r18
 720:	1f 93       	push	r17
 722:	0f 93       	push	r16
 724:	ff 92       	push	r15
 726:	ef 92       	push	r14
 728:	df 92       	push	r13
 72a:	cf 92       	push	r12
 72c:	bf 92       	push	r11
 72e:	af 92       	push	r10
 730:	9f 92       	push	r9
 732:	8f 92       	push	r8
 734:	7f 92       	push	r7
 736:	6f 92       	push	r6
 738:	5f 92       	push	r5
 73a:	4f 92       	push	r4
 73c:	3f 92       	push	r3
 73e:	2f 92       	push	r2
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	9f 93       	push	r25
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 74c:	39 a1       	ldd	r19, Y+33	; 0x21
 74e:	48 a1       	ldd	r20, Y+32	; 0x20
 750:	e8 a3       	std	Y+32, r30	; 0x20
 752:	f9 a3       	std	Y+33, r31	; 0x21
 754:	70 f0       	brcs	.+28     	; 0x772
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	e0 e2       	ldi	r30, 0x20	; 32
 75a:	d3 81       	ldd	r29, Z+3	; 0x03
 75c:	c2 81       	ldd	r28, Z+2	; 0x02
 75e:	be b7       	in	r27, 0x3e	; 62
 760:	ad b7       	in	r26, 0x3d	; 61
 762:	bd 83       	std	Y+5, r27	; 0x05
 764:	ac 83       	std	Y+4, r26	; 0x04
 766:	24 81       	ldd	r18, Z+4	; 0x04
 768:	2d bf       	out	0x3d, r18	; 61
 76a:	25 81       	ldd	r18, Z+5	; 0x05
 76c:	2e bf       	out	0x3e, r18	; 62
 76e:	ca 2f       	mov	r28, r26
 770:	db 2f       	mov	r29, r27

00000772 <AlreadyInKernel>:
 772:	11 24       	eor	r1, r1
 774:	e3 2f       	mov	r30, r19
 776:	f4 2f       	mov	r31, r20
 778:	09 94       	ijmp

0000077a <Epilog>:
 77a:	ef 91       	pop	r30
 77c:	ef 91       	pop	r30

0000077e <_Epilog>:
 77e:	e0 e2       	ldi	r30, 0x20	; 32
 780:	f1 e0       	ldi	r31, 0x01	; 1
 782:	f8 94       	cli
 784:	06 81       	ldd	r16, Z+6	; 0x06
 786:	0a 95       	dec	r16
 788:	06 83       	std	Z+6, r16	; 0x06
 78a:	54 f4       	brge	.+20     	; 0x7a0
 78c:	d1 81       	ldd	r29, Z+1	; 0x01
 78e:	c0 81       	ld	r28, Z
 790:	d3 83       	std	Z+3, r29	; 0x03
 792:	c2 83       	std	Z+2, r28	; 0x02
 794:	20 96       	adiw	r28, 0x00	; 0
 796:	39 f1       	breq	.+78     	; 0x7e6
 798:	bd 81       	ldd	r27, Y+5	; 0x05
 79a:	ac 81       	ldd	r26, Y+4	; 0x04
 79c:	ad bf       	out	0x3d, r26	; 61
 79e:	be bf       	out	0x3e, r27	; 62

000007a0 <SkipTaskSwap>:
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	2f 90       	pop	r2
 7aa:	3f 90       	pop	r3
 7ac:	4f 90       	pop	r4
 7ae:	5f 90       	pop	r5
 7b0:	6f 90       	pop	r6
 7b2:	7f 90       	pop	r7
 7b4:	8f 90       	pop	r8
 7b6:	9f 90       	pop	r9
 7b8:	af 90       	pop	r10
 7ba:	bf 90       	pop	r11
 7bc:	cf 90       	pop	r12
 7be:	df 90       	pop	r13
 7c0:	ef 90       	pop	r14
 7c2:	ff 90       	pop	r15
 7c4:	0f 91       	pop	r16
 7c6:	1f 91       	pop	r17
 7c8:	2f 91       	pop	r18
 7ca:	3f 91       	pop	r19
 7cc:	4f 91       	pop	r20
 7ce:	5f 91       	pop	r21
 7d0:	6f 91       	pop	r22
 7d2:	7f 91       	pop	r23
 7d4:	8f 91       	pop	r24
 7d6:	9f 91       	pop	r25
 7d8:	af 91       	pop	r26
 7da:	bf 91       	pop	r27
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	ef 91       	pop	r30
 7e2:	ff 91       	pop	r31
 7e4:	18 95       	reti

000007e6 <_IdleTask>:
 7e6:	78 94       	sei
 7e8:	88 95       	sleep

000007ea <snooze>:
 7ea:	fd cf       	rjmp	.-6      	; 0x7e6

000007ec <AvrXSetKernelStack>:
 7ec:	ff 91       	pop	r31
 7ee:	ef 91       	pop	r30
 7f0:	80 50       	subi	r24, 0x00	; 0
 7f2:	90 40       	sbci	r25, 0x00	; 0
 7f4:	11 f4       	brne	.+4      	; 0x7fa
 7f6:	8d b7       	in	r24, 0x3d	; 61
 7f8:	9e b7       	in	r25, 0x3e	; 62

000007fa <sks1>:
 7fa:	80 93 24 01 	sts	0x0124, r24
 7fe:	90 93 25 01 	sts	0x0125, r25
 802:	09 94       	ijmp

00000804 <AvrXRunTask>:
 804:	01 d0       	rcall	.+2      	; 0x808
 806:	23 c0       	rjmp	.+70     	; 0x84e

00000808 <AvrXInitTask>:
 808:	e8 2f       	mov	r30, r24
 80a:	f9 2f       	mov	r31, r25
 80c:	1d d0       	rcall	.+58     	; 0x848
 80e:	a0 2d       	mov	r26, r0
 810:	1b d0       	rcall	.+54     	; 0x848
 812:	b0 2d       	mov	r27, r0
 814:	19 d0       	rcall	.+50     	; 0x848
 816:	0c 92       	st	X, r0
 818:	17 d0       	rcall	.+46     	; 0x848
 81a:	0e 92       	st	-X, r0
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	51 e2       	ldi	r21, 0x21	; 33

00000822 <PushRegisters>:
 822:	4e 93       	st	-X, r20
 824:	5a 95       	dec	r21
 826:	e9 f7       	brne	.-6      	; 0x822
 828:	11 97       	sbiw	r26, 0x01	; 1
 82a:	0e d0       	rcall	.+28     	; 0x848
 82c:	80 2d       	mov	r24, r0
 82e:	0c d0       	rcall	.+24     	; 0x848
 830:	90 2d       	mov	r25, r0
 832:	0a d0       	rcall	.+20     	; 0x848
 834:	e8 2f       	mov	r30, r24
 836:	f9 2f       	mov	r31, r25
 838:	a4 83       	std	Z+4, r26	; 0x04
 83a:	b5 83       	std	Z+5, r27	; 0x05
 83c:	03 82       	std	Z+3, r0	; 0x03
 83e:	a0 e6       	ldi	r26, 0x60	; 96
 840:	a2 83       	std	Z+2, r26	; 0x02
 842:	41 83       	std	Z+1, r20	; 0x01
 844:	40 83       	st	Z, r20
 846:	08 95       	ret

00000848 <lpm_inc>:
 848:	c8 95       	lpm
 84a:	31 96       	adiw	r30, 0x01	; 1
 84c:	08 95       	ret

0000084e <AvrXResume>:
 84e:	f8 94       	cli
 850:	48 df       	rcall	.-368    	; 0x6e2
 852:	78 94       	sei
 854:	e8 2f       	mov	r30, r24
 856:	f9 2f       	mov	r31, r25
 858:	22 81       	ldd	r18, Z+2	; 0x02
 85a:	2f 7d       	andi	r18, 0xDF	; 223
 85c:	22 83       	std	Z+2, r18	; 0x02
 85e:	26 ff       	sbrs	r18, 6
 860:	03 c0       	rjmp	.+6      	; 0x868
 862:	2f 7b       	andi	r18, 0xBF	; 191
 864:	22 83       	std	Z+2, r18	; 0x02
 866:	01 d0       	rcall	.+2      	; 0x86a

00000868 <ar00>:
 868:	8a cf       	rjmp	.-236    	; 0x77e

0000086a <_QueuePid>:
 86a:	e8 2f       	mov	r30, r24
 86c:	f9 2f       	mov	r31, r25
 86e:	3f ef       	ldi	r19, 0xFF	; 255
 870:	22 81       	ldd	r18, Z+2	; 0x02
 872:	20 73       	andi	r18, 0x30	; 48
 874:	e1 f4       	brne	.+56     	; 0x8ae
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	43 81       	ldd	r20, Z+3	; 0x03
 87c:	c0 e2       	ldi	r28, 0x20	; 32
 87e:	d1 e0       	ldi	r29, 0x01	; 1
 880:	2f b7       	in	r18, 0x3f	; 63
 882:	f8 94       	cli

00000884 <_qp00>:
 884:	33 95       	inc	r19
 886:	ec 2f       	mov	r30, r28
 888:	fd 2f       	mov	r31, r29
 88a:	c0 81       	ld	r28, Z
 88c:	d1 81       	ldd	r29, Z+1	; 0x01
 88e:	20 96       	adiw	r28, 0x00	; 0
 890:	19 f0       	breq	.+6      	; 0x898
 892:	5b 81       	ldd	r21, Y+3	; 0x03
 894:	45 17       	cp	r20, r21
 896:	b0 f7       	brcc	.-20     	; 0x884

00000898 <_qp01>:
 898:	91 83       	std	Z+1, r25	; 0x01
 89a:	80 83       	st	Z, r24
 89c:	f9 2f       	mov	r31, r25
 89e:	e8 2f       	mov	r30, r24
 8a0:	d1 83       	std	Z+1, r29	; 0x01
 8a2:	c0 83       	st	Z, r28
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	83 2f       	mov	r24, r19
 8aa:	2f bf       	out	0x3f, r18	; 63
 8ac:	08 95       	ret

000008ae <_qpSUSPEND>:
 8ae:	83 2f       	mov	r24, r19
 8b0:	20 64       	ori	r18, 0x40	; 64
 8b2:	22 83       	std	Z+2, r18	; 0x02
 8b4:	08 95       	ret

000008b6 <AvrXWaitMessageAck>:
 8b6:	8e 5f       	subi	r24, 0xFE	; 254
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255

000008ba <AvrXWaitSemaphore>:
 8ba:	e8 2f       	mov	r30, r24
 8bc:	f9 2f       	mov	r31, r25
 8be:	f8 94       	cli
 8c0:	20 81       	ld	r18, Z
 8c2:	31 81       	ldd	r19, Z+1	; 0x01
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	30 40       	sbci	r19, 0x00	; 0
 8c8:	19 f4       	brne	.+6      	; 0x8d0
 8ca:	20 83       	st	Z, r18
 8cc:	31 83       	std	Z+1, r19	; 0x01
 8ce:	18 95       	reti

000008d0 <aws01>:
 8d0:	08 df       	rcall	.-496    	; 0x6e2
 8d2:	e0 e2       	ldi	r30, 0x20	; 32
 8d4:	f1 e0       	ldi	r31, 0x01	; 1
 8d6:	73 81       	ldd	r23, Z+3	; 0x03
 8d8:	62 81       	ldd	r22, Z+2	; 0x02
 8da:	3c d0       	rcall	.+120    	; 0x954
 8dc:	e8 2f       	mov	r30, r24
 8de:	f9 2f       	mov	r31, r25
 8e0:	2b d0       	rcall	.+86     	; 0x938
 8e2:	4d cf       	rjmp	.-358    	; 0x77e

000008e4 <AvrXAckMessage>:
 8e4:	8e 5f       	subi	r24, 0xFE	; 254
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255

000008e8 <AvrXSetSemaphore>:
 8e8:	0c d0       	rcall	.+24     	; 0x902
 8ea:	90 91 26 01 	lds	r25, 0x0126
 8ee:	93 95       	inc	r25
 8f0:	89 2b       	or	r24, r25
 8f2:	09 f0       	breq	.+2      	; 0x8f6
 8f4:	08 95       	ret

000008f6 <axss0>:
 8f6:	f8 94       	cli
 8f8:	f4 de       	rcall	.-536    	; 0x6e2
 8fa:	78 94       	sei
 8fc:	40 cf       	rjmp	.-384    	; 0x77e

000008fe <AvrXIntSetObjectSemaphore>:
 8fe:	8e 5f       	subi	r24, 0xFE	; 254
 900:	9f 4f       	sbci	r25, 0xFF	; 255

00000902 <AvrXIntSetSemaphore>:
 902:	e8 2f       	mov	r30, r24
 904:	f9 2f       	mov	r31, r25
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	2f b7       	in	r18, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	71 81       	ldd	r23, Z+1	; 0x01
 910:	60 81       	ld	r22, Z
 912:	86 17       	cp	r24, r22
 914:	97 07       	cpc	r25, r23
 916:	28 f0       	brcs	.+10     	; 0x922
 918:	80 83       	st	Z, r24
 91a:	91 83       	std	Z+1, r25	; 0x01

0000091c <BogusSemaphore>:
 91c:	8f ef       	ldi	r24, 0xFF	; 255
 91e:	2f bf       	out	0x3f, r18	; 63
 920:	08 95       	ret

00000922 <aiss00>:
 922:	8f e5       	ldi	r24, 0x5F	; 95
 924:	86 17       	cp	r24, r22
 926:	97 07       	cpc	r25, r23
 928:	c8 f7       	brcc	.-14     	; 0x91c
 92a:	23 d0       	rcall	.+70     	; 0x972
 92c:	2f bf       	out	0x3f, r18	; 63
 92e:	86 2f       	mov	r24, r22
 930:	97 2f       	mov	r25, r23
 932:	9b cf       	rjmp	.-202    	; 0x86a

00000934 <_ao00>:
 934:	e2 2f       	mov	r30, r18
 936:	f3 2f       	mov	r31, r19

00000938 <_AppendObject>:
 938:	20 81       	ld	r18, Z
 93a:	31 81       	ldd	r19, Z+1	; 0x01
 93c:	20 50       	subi	r18, 0x00	; 0
 93e:	30 40       	sbci	r19, 0x00	; 0
 940:	c9 f7       	brne	.-14     	; 0x934
 942:	71 83       	std	Z+1, r23	; 0x01
 944:	60 83       	st	Z, r22
 946:	f7 2f       	mov	r31, r23
 948:	e6 2f       	mov	r30, r22
 94a:	31 83       	std	Z+1, r19	; 0x01
 94c:	20 83       	st	Z, r18
 94e:	08 95       	ret

00000950 <_ro00>:
 950:	f3 2f       	mov	r31, r19
 952:	e2 2f       	mov	r30, r18

00000954 <_RemoveObject>:
 954:	20 81       	ld	r18, Z
 956:	31 81       	ldd	r19, Z+1	; 0x01
 958:	62 17       	cp	r22, r18
 95a:	73 07       	cpc	r23, r19
 95c:	51 f0       	breq	.+20     	; 0x972
 95e:	20 50       	subi	r18, 0x00	; 0
 960:	30 40       	sbci	r19, 0x00	; 0
 962:	b1 f7       	brne	.-20     	; 0x950
 964:	08 95       	ret

00000966 <_RemoveFirstObject>:
 966:	60 81       	ld	r22, Z
 968:	71 81       	ldd	r23, Z+1	; 0x01
 96a:	60 50       	subi	r22, 0x00	; 0
 96c:	70 40       	sbci	r23, 0x00	; 0
 96e:	09 f4       	brne	.+2      	; 0x972
 970:	08 95       	ret

00000972 <_RemoveObjectAt>:
 972:	4c 2f       	mov	r20, r28
 974:	5d 2f       	mov	r21, r29
 976:	c6 2f       	mov	r28, r22
 978:	d7 2f       	mov	r29, r23
 97a:	79 81       	ldd	r23, Y+1	; 0x01
 97c:	68 81       	ld	r22, Y
 97e:	71 83       	std	Z+1, r23	; 0x01
 980:	60 83       	st	Z, r22
 982:	e6 2f       	mov	r30, r22
 984:	f7 2f       	mov	r31, r23
 986:	66 27       	eor	r22, r22
 988:	68 83       	st	Y, r22
 98a:	69 83       	std	Y+1, r22	; 0x01
 98c:	7d 2f       	mov	r23, r29
 98e:	6c 2f       	mov	r22, r28
 990:	c4 2f       	mov	r28, r20
 992:	d5 2f       	mov	r29, r21
 994:	98 94       	clz
 996:	08 95       	ret

00000998 <AvrXSingleStepNext>:
 998:	f8 94       	cli
 99a:	a3 de       	rcall	.-698    	; 0x6e2
 99c:	78 94       	sei
 99e:	f9 2f       	mov	r31, r25
 9a0:	e8 2f       	mov	r30, r24
 9a2:	a2 81       	ldd	r26, Z+2	; 0x02
 9a4:	a6 ff       	sbrs	r26, 6
 9a6:	1d c0       	rjmp	.+58     	; 0x9e2
 9a8:	a0 68       	ori	r26, 0x80	; 128
 9aa:	a2 83       	std	Z+2, r26	; 0x02
 9ac:	e0 e2       	ldi	r30, 0x20	; 32
 9ae:	f1 e0       	ldi	r31, 0x01	; 1
 9b0:	b1 81       	ldd	r27, Z+1	; 0x01
 9b2:	a0 81       	ld	r26, Z
 9b4:	91 83       	std	Z+1, r25	; 0x01
 9b6:	80 83       	st	Z, r24
 9b8:	f9 2f       	mov	r31, r25
 9ba:	e8 2f       	mov	r30, r24
 9bc:	b1 83       	std	Z+1, r27	; 0x01
 9be:	a0 83       	st	Z, r26
 9c0:	0e c0       	rjmp	.+28     	; 0x9de

000009c2 <AvrXStepNext>:
 9c2:	f8 94       	cli
 9c4:	8e de       	rcall	.-740    	; 0x6e2
 9c6:	78 94       	sei
 9c8:	f9 2f       	mov	r31, r25
 9ca:	e8 2f       	mov	r30, r24
 9cc:	a2 81       	ldd	r26, Z+2	; 0x02
 9ce:	a6 ff       	sbrs	r26, 6
 9d0:	09 c0       	rjmp	.+18     	; 0x9e4
 9d2:	af 79       	andi	r26, 0x9F	; 159
 9d4:	a2 83       	std	Z+2, r26	; 0x02
 9d6:	49 df       	rcall	.-366    	; 0x86a
 9d8:	a2 81       	ldd	r26, Z+2	; 0x02
 9da:	a0 62       	ori	r26, 0x20	; 32
 9dc:	a2 83       	std	Z+2, r26	; 0x02

000009de <AssnXOk>:
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4

000009e2 <AssnXErr>:
 9e2:	81 e0       	ldi	r24, 0x01	; 1

000009e4 <AssnX>:
 9e4:	8a 8f       	std	Y+26, r24	; 0x1a
 9e6:	cb ce       	rjmp	.-618    	; 0x77e

000009e8 <AvrXTaskExit>:
 9e8:	f8 94       	cli
 9ea:	7b de       	rcall	.-778    	; 0x6e2
 9ec:	78 94       	sei
 9ee:	90 91 23 01 	lds	r25, 0x0123
 9f2:	80 91 22 01 	lds	r24, 0x0122
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe

000009f8 <AvrXTerminate>:
 9f8:	f8 94       	cli
 9fa:	73 de       	rcall	.-794    	; 0x6e2
 9fc:	78 94       	sei

000009fe <at00>:
 9fe:	f9 2f       	mov	r31, r25
 a00:	e8 2f       	mov	r30, r24
 a02:	a0 e1       	ldi	r26, 0x10	; 16
 a04:	a2 83       	std	Z+2, r26	; 0x02
 a06:	79 2f       	mov	r23, r25
 a08:	68 2f       	mov	r22, r24
 a0a:	f1 e0       	ldi	r31, 0x01	; 1
 a0c:	e0 e2       	ldi	r30, 0x20	; 32
 a0e:	f8 94       	cli
 a10:	a1 df       	rcall	.-190    	; 0x954
 a12:	b5 ce       	rjmp	.-662    	; 0x77e

00000a14 <AvrXHalt>:
 a14:	f8 94       	cli
 a16:	fe cf       	rjmp	.-4      	; 0xa14

00000a18 <AvrXBreakpoint>:
 a18:	f8 94       	cli
 a1a:	63 de       	rcall	.-826    	; 0x6e2
 a1c:	78 94       	sei
 a1e:	f0 91 23 01 	lds	r31, 0x0123
 a22:	e0 91 22 01 	lds	r30, 0x0122
 a26:	22 81       	ldd	r18, Z+2	; 0x02
 a28:	25 fd       	sbrc	r18, 5
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e
 a2c:	a8 ce       	rjmp	.-688    	; 0x77e

00000a2e <AvrXSuspend>:
 a2e:	f8 94       	cli
 a30:	58 de       	rcall	.-848    	; 0x6e2
 a32:	78 94       	sei
 a34:	f9 2f       	mov	r31, r25
 a36:	e8 2f       	mov	r30, r24
 a38:	22 81       	ldd	r18, Z+2	; 0x02
 a3a:	20 62       	ori	r18, 0x20	; 32
 a3c:	22 83       	std	Z+2, r18	; 0x02

00000a3e <as00>:
 a3e:	7f 2f       	mov	r23, r31
 a40:	6e 2f       	mov	r22, r30
 a42:	f1 e0       	ldi	r31, 0x01	; 1
 a44:	e0 e2       	ldi	r30, 0x20	; 32
 a46:	f8 94       	cli
 a48:	85 df       	rcall	.-246    	; 0x954
 a4a:	c2 2f       	mov	r28, r18
 a4c:	d3 2f       	mov	r29, r19
 a4e:	20 96       	adiw	r28, 0x00	; 0
 a50:	19 f0       	breq	.+6      	; 0xa58
 a52:	ea 81       	ldd	r30, Y+2	; 0x02
 a54:	e0 64       	ori	r30, 0x40	; 64
 a56:	ea 83       	std	Y+2, r30	; 0x02

00000a58 <as01>:
 a58:	92 ce       	rjmp	.-732    	; 0x77e

00000a5a <AvrXSendMessage>:
 a5a:	f8 94       	cli
 a5c:	42 de       	rcall	.-892    	; 0x6e2
 a5e:	78 94       	sei
 a60:	01 d0       	rcall	.+2      	; 0xa64
 a62:	8d ce       	rjmp	.-742    	; 0x77e

00000a64 <AvrXIntSendMessage>:
 a64:	f9 2f       	mov	r31, r25
 a66:	e8 2f       	mov	r30, r24
 a68:	67 df       	rcall	.-306    	; 0x938
 a6a:	49 cf       	rjmp	.-366    	; 0x8fe

00000a6c <AvrXWaitMessage>:
 a6c:	e8 2f       	mov	r30, r24
 a6e:	f9 2f       	mov	r31, r25
 a70:	f8 94       	cli
 a72:	79 df       	rcall	.-270    	; 0x966
 a74:	78 94       	sei
 a76:	21 f4       	brne	.+8      	; 0xa80
 a78:	1e df       	rcall	.-452    	; 0x8b6
 a7a:	82 50       	subi	r24, 0x02	; 2
 a7c:	90 40       	sbci	r25, 0x00	; 0
 a7e:	f6 cf       	rjmp	.-20     	; 0xa6c

00000a80 <_rm01>:
 a80:	c4 d0       	rcall	.+392    	; 0xc0a
 a82:	86 2f       	mov	r24, r22
 a84:	97 2f       	mov	r25, r23
 a86:	08 95       	ret

00000a88 <AvrXDelay>:
 a88:	01 d0       	rcall	.+2      	; 0xa8c
 a8a:	15 cf       	rjmp	.-470    	; 0x8b6

00000a8c <AvrXStartTimer>:
 a8c:	60 50       	subi	r22, 0x00	; 0
 a8e:	70 40       	sbci	r23, 0x00	; 0
 a90:	09 f4       	brne	.+2      	; 0xa94
 a92:	28 cf       	rjmp	.-432    	; 0x8e4

00000a94 <CountNotZero>:
 a94:	f8 94       	cli
 a96:	25 de       	rcall	.-950    	; 0x6e2
 a98:	78 94       	sei
 a9a:	b7 d0       	rcall	.+366    	; 0xc0a
 a9c:	e8 e2       	ldi	r30, 0x28	; 40
 a9e:	f1 e0       	ldi	r31, 0x01	; 1
 aa0:	f8 94       	cli
 aa2:	20 91 2a 01 	lds	r18, 0x012A
 aa6:	2a 95       	dec	r18
 aa8:	20 93 2a 01 	sts	0x012A, r18
 aac:	78 94       	sei

00000aae <ast00>:
 aae:	ce 2f       	mov	r28, r30
 ab0:	df 2f       	mov	r29, r31
 ab2:	e8 81       	ld	r30, Y
 ab4:	f9 81       	ldd	r31, Y+1	; 0x01
 ab6:	30 96       	adiw	r30, 0x00	; 0
 ab8:	59 f0       	breq	.+22     	; 0xad0
 aba:	24 81       	ldd	r18, Z+4	; 0x04
 abc:	35 81       	ldd	r19, Z+5	; 0x05
 abe:	62 1b       	sub	r22, r18
 ac0:	73 0b       	sbc	r23, r19
 ac2:	a8 f7       	brcc	.-22     	; 0xaae
 ac4:	62 0f       	add	r22, r18
 ac6:	73 1f       	adc	r23, r19
 ac8:	26 1b       	sub	r18, r22
 aca:	37 0b       	sbc	r19, r23
 acc:	24 83       	std	Z+4, r18	; 0x04
 ace:	35 83       	std	Z+5, r19	; 0x05

00000ad0 <ast01>:
 ad0:	99 83       	std	Y+1, r25	; 0x01
 ad2:	88 83       	st	Y, r24
 ad4:	d9 2f       	mov	r29, r25
 ad6:	c8 2f       	mov	r28, r24
 ad8:	f9 83       	std	Y+1, r31	; 0x01
 ada:	e8 83       	st	Y, r30
 adc:	6c 83       	std	Y+4, r22	; 0x04
 ade:	7d 83       	std	Y+5, r23	; 0x05
 ae0:	3c d0       	rcall	.+120    	; 0xb5a
 ae2:	4d ce       	rjmp	.-870    	; 0x77e

00000ae4 <AvrXTimerHandler>:
 ae4:	f8 94       	cli
 ae6:	20 91 2a 01 	lds	r18, 0x012A
 aea:	21 50       	subi	r18, 0x01	; 1
 aec:	20 93 2a 01 	sts	0x012A, r18
 af0:	78 94       	sei
 af2:	08 f0       	brcs	.+2      	; 0xaf6
 af4:	08 95       	ret

00000af6 <ati00>:
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	af 93       	push	r26
 afc:	bf 93       	push	r27
 afe:	d0 91 29 01 	lds	r29, 0x0129
 b02:	c0 91 28 01 	lds	r28, 0x0128
 b06:	20 96       	adiw	r28, 0x00	; 0
 b08:	21 f1       	breq	.+72     	; 0xb52
 b0a:	fd 81       	ldd	r31, Y+5	; 0x05
 b0c:	ec 81       	ldd	r30, Y+4	; 0x04
 b0e:	31 97       	sbiw	r30, 0x01	; 1
 b10:	fd 83       	std	Y+5, r31	; 0x05
 b12:	ec 83       	std	Y+4, r30	; 0x04

00000b14 <ati01>:
 b14:	ef 2b       	or	r30, r31
 b16:	e9 f4       	brne	.+58     	; 0xb52
 b18:	a8 81       	ld	r26, Y
 b1a:	b9 81       	ldd	r27, Y+1	; 0x01
 b1c:	b0 93 29 01 	sts	0x0129, r27
 b20:	a0 93 28 01 	sts	0x0128, r26
 b24:	f9 83       	std	Y+1, r31	; 0x01
 b26:	e8 83       	st	Y, r30
 b28:	8a 81       	ldd	r24, Y+2	; 0x02
 b2a:	9b 81       	ldd	r25, Y+3	; 0x03
 b2c:	82 50       	subi	r24, 0x02	; 2
 b2e:	90 40       	sbci	r25, 0x00	; 0
 b30:	31 f4       	brne	.+12     	; 0xb3e
 b32:	8e 81       	ldd	r24, Y+6	; 0x06
 b34:	9f 81       	ldd	r25, Y+7	; 0x07
 b36:	7d 2f       	mov	r23, r29
 b38:	6c 2f       	mov	r22, r28
 b3a:	94 df       	rcall	.-216    	; 0xa64
 b3c:	03 c0       	rjmp	.+6      	; 0xb44

00000b3e <ati04>:
 b3e:	8c 2f       	mov	r24, r28
 b40:	9d 2f       	mov	r25, r29
 b42:	dd de       	rcall	.-582    	; 0x8fe

00000b44 <ati03>:
 b44:	10 96       	adiw	r26, 0x00	; 0
 b46:	29 f0       	breq	.+10     	; 0xb52
 b48:	ca 2f       	mov	r28, r26
 b4a:	db 2f       	mov	r29, r27
 b4c:	fd 81       	ldd	r31, Y+5	; 0x05
 b4e:	ec 81       	ldd	r30, Y+4	; 0x04
 b50:	e1 cf       	rjmp	.-62     	; 0xb14

00000b52 <ati02>:
 b52:	bf 91       	pop	r27
 b54:	af 91       	pop	r26
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28

00000b5a <TimerHandler>:
 b5a:	f8 94       	cli
 b5c:	20 91 2a 01 	lds	r18, 0x012A
 b60:	23 95       	inc	r18
 b62:	20 93 2a 01 	sts	0x012A, r18
 b66:	78 94       	sei
 b68:	31 f6       	brne	.-116    	; 0xaf6
 b6a:	08 95       	ret

00000b6c <AvrXCancelTimer>:
 b6c:	f8 94       	cli
 b6e:	b9 dd       	rcall	.-1166   	; 0x6e2
 b70:	78 94       	sei
 b72:	c5 de       	rcall	.-630    	; 0x8fe
 b74:	6a 8d       	ldd	r22, Y+26	; 0x1a
 b76:	7b 8d       	ldd	r23, Y+27	; 0x1b
 b78:	e8 e2       	ldi	r30, 0x28	; 40
 b7a:	f1 e0       	ldi	r31, 0x01	; 1
 b7c:	f8 94       	cli
 b7e:	ea de       	rcall	.-556    	; 0x954
 b80:	20 50       	subi	r18, 0x00	; 0
 b82:	30 40       	sbci	r19, 0x00	; 0
 b84:	59 f0       	breq	.+22     	; 0xb9c
 b86:	c6 2f       	mov	r28, r22
 b88:	d7 2f       	mov	r29, r23
 b8a:	6c 81       	ldd	r22, Y+4	; 0x04
 b8c:	7d 81       	ldd	r23, Y+5	; 0x05
 b8e:	95 81       	ldd	r25, Z+5	; 0x05
 b90:	84 81       	ldd	r24, Z+4	; 0x04
 b92:	86 0f       	add	r24, r22
 b94:	97 1f       	adc	r25, r23
 b96:	84 83       	std	Z+4, r24	; 0x04
 b98:	95 83       	std	Z+5, r25	; 0x05
 b9a:	f1 cd       	rjmp	.-1054   	; 0x77e

00000b9c <act00>:
 b9c:	2a 8f       	std	Y+26, r18	; 0x1a
 b9e:	3b 8f       	std	Y+27, r19	; 0x1b
 ba0:	ee cd       	rjmp	.-1060   	; 0x77e

00000ba2 <AvrXReadEEProm>:
 ba2:	68 2f       	mov	r22, r24
 ba4:	79 2f       	mov	r23, r25
 ba6:	91 e0       	ldi	r25, 0x01	; 1
 ba8:	8c e2       	ldi	r24, 0x2C	; 44
 baa:	87 de       	rcall	.-754    	; 0x8ba

00000bac <are01>:
 bac:	e1 99       	sbic	0x1c, 1	; 28
 bae:	fe cf       	rjmp	.-4      	; 0xbac
 bb0:	6e bb       	out	0x1e, r22	; 30
 bb2:	7f bb       	out	0x1f, r23	; 31
 bb4:	e0 9a       	sbi	0x1c, 0	; 28
 bb6:	0d b2       	in	r0, 0x1d	; 29
 bb8:	0f 92       	push	r0
 bba:	96 de       	rcall	.-724    	; 0x8e8
 bbc:	8f 91       	pop	r24
 bbe:	08 95       	ret

00000bc0 <AvrXReadEEPromWord>:
 bc0:	68 2f       	mov	r22, r24
 bc2:	79 2f       	mov	r23, r25
 bc4:	91 e0       	ldi	r25, 0x01	; 1
 bc6:	8c e2       	ldi	r24, 0x2C	; 44
 bc8:	78 de       	rcall	.-784    	; 0x8ba

00000bca <arew01>:
 bca:	e1 99       	sbic	0x1c, 1	; 28
 bcc:	fe cf       	rjmp	.-4      	; 0xbca
 bce:	6e bb       	out	0x1e, r22	; 30
 bd0:	7f bb       	out	0x1f, r23	; 31
 bd2:	e0 9a       	sbi	0x1c, 0	; 28
 bd4:	0d b2       	in	r0, 0x1d	; 29
 bd6:	0f 92       	push	r0
 bd8:	6f 5f       	subi	r22, 0xFF	; 255
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	6e bb       	out	0x1e, r22	; 30
 bde:	7f bb       	out	0x1f, r23	; 31
 be0:	e0 9a       	sbi	0x1c, 0	; 28
 be2:	0d b2       	in	r0, 0x1d	; 29
 be4:	0f 92       	push	r0
 be6:	80 de       	rcall	.-768    	; 0x8e8
 be8:	9f 91       	pop	r25
 bea:	8f 91       	pop	r24
 bec:	08 95       	ret

00000bee <AvrXWriteEEProm>:
 bee:	46 2f       	mov	r20, r22
 bf0:	68 2f       	mov	r22, r24
 bf2:	79 2f       	mov	r23, r25
 bf4:	91 e0       	ldi	r25, 0x01	; 1
 bf6:	8c e2       	ldi	r24, 0x2C	; 44
 bf8:	60 de       	rcall	.-832    	; 0x8ba

00000bfa <awe00>:
 bfa:	e1 99       	sbic	0x1c, 1	; 28
 bfc:	fe cf       	rjmp	.-4      	; 0xbfa
 bfe:	6e bb       	out	0x1e, r22	; 30
 c00:	7f bb       	out	0x1f, r23	; 31
 c02:	4d bb       	out	0x1d, r20	; 29
 c04:	e2 9a       	sbi	0x1c, 2	; 28
 c06:	e1 9a       	sbi	0x1c, 1	; 28
 c08:	6f ce       	rjmp	.-802    	; 0x8e8

00000c0a <AvrXIntResetObjectSemaphore>:
 c0a:	e8 2f       	mov	r30, r24
 c0c:	f9 2f       	mov	r31, r25
 c0e:	32 96       	adiw	r30, 0x02	; 2
 c10:	02 c0       	rjmp	.+4      	; 0xc16

00000c12 <AvrXIntResetSemaphore>:
 c12:	f9 2f       	mov	r31, r25
 c14:	e8 2f       	mov	r30, r24

00000c16 <ars00>:
 c16:	f8 94       	cli
 c18:	40 81       	ld	r20, Z
 c1a:	51 81       	ldd	r21, Z+1	; 0x01
 c1c:	41 50       	subi	r20, 0x01	; 1
 c1e:	50 40       	sbci	r21, 0x00	; 0
 c20:	11 f0       	breq	.+4      	; 0xc26
 c22:	4f 5f       	subi	r20, 0xFF	; 255
 c24:	5f 4f       	sbci	r21, 0xFF	; 255

00000c26 <ars01>:
 c26:	51 83       	std	Z+1, r21	; 0x01
 c28:	40 83       	st	Z, r20
 c2a:	18 95       	reti
